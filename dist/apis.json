{
  "name": "apis",
  "records": [
    {
      "objectID": "api-app#appaccessibilitysupportenabled",
      "name": "accessibilitySupportEnabled",
      "description": "A `Boolean` property that's `true` if Chrome's accessibility support is enabled, `false` otherwise. This property will be `true` if the use of assistive technologies, such as screen readers, has been detected. Setting this property to `true` manually enables Chrome's accessibility support, allowing developers to expose accessibility switch to users in application settings.\n\nSee Chromium's accessibility docs for more details. Disabled by default.\n\nThis API must be called after the `ready` event is emitted.\n\n**Note:** Rendering accessibility tree can significantly affect the performance of your app. It should not be enabled by default.",
      "required": true,
      "additionalTags": [
        "os_macos",
        "os_windows"
      ],
      "collection": false,
      "type": "Boolean",
      "apiType": "properties",
      "fullSignature": "app.accessibilitySupportEnabled",
      "tldr": "A `Boolean` property that's `true` if Chrome's accessibility support is enabled, `false` otherwise.",
      "slug": "appaccessibilitysupportenabled",
      "url": "https://electronjs.org/docs/api/app#appaccessibilitysupportenabled",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:accessibilitySupportEnabled",
        "api:appaccessibilitysupportenabled",
        "api:app.accessibilitySupportEnabled",
        "doc:accessibilitySupportEnabled",
        "doc:appaccessibilitysupportenabled",
        "doc:app.accessibilitySupportEnabled"
      ]
    },
    {
      "objectID": "api-app#appapplicationmenu",
      "name": "applicationMenu",
      "description": "A `Menu | null` property that returns `Menu` if one has been set and `null` otherwise. Users can pass a Menu to set this property.",
      "required": true,
      "additionalTags": [],
      "collection": false,
      "type": [
        {
          "collection": false,
          "type": "Menu"
        },
        {
          "type": "null",
          "collection": false
        }
      ],
      "apiType": "properties",
      "fullSignature": "app.applicationMenu",
      "tldr": "A `Menu | null` property that returns `Menu` if one has been set and `null` otherwise.",
      "slug": "appapplicationmenu",
      "url": "https://electronjs.org/docs/api/app#appapplicationmenu",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:applicationMenu",
        "api:appapplicationmenu",
        "api:app.applicationMenu",
        "doc:applicationMenu",
        "doc:appapplicationmenu",
        "doc:app.applicationMenu"
      ]
    },
    {
      "objectID": "api-app#appbadgecount",
      "name": "badgeCount",
      "description": "An `Integer` property that returns the badge count for current app. Setting the count to `0` will hide the badge.\n\nOn macOS, setting this with any nonzero integer shows on the dock icon. On Linux, this property only works for Unity launcher.\n\n**Note:** Unity launcher requires the existence of a `.desktop` file to work, for more information please read Desktop Environment Integration.",
      "required": true,
      "additionalTags": [
        "os_linux",
        "os_macos"
      ],
      "collection": false,
      "type": "Integer",
      "apiType": "properties",
      "fullSignature": "app.badgeCount",
      "tldr": "An `Integer` property that returns the badge count for current app.",
      "slug": "appbadgecount",
      "url": "https://electronjs.org/docs/api/app#appbadgecount",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:badgeCount",
        "api:appbadgecount",
        "api:app.badgeCount",
        "doc:badgeCount",
        "doc:appbadgecount",
        "doc:app.badgeCount"
      ]
    },
    {
      "objectID": "api-app#appcommandline",
      "name": "commandLine",
      "description": "A `CommandLine` object that allows you to read and manipulate the command line arguments that Chromium uses.",
      "required": true,
      "additionalTags": [
        "availability_readonly"
      ],
      "collection": false,
      "type": "CommandLine",
      "apiType": "properties",
      "fullSignature": "app.commandLine",
      "tldr": "A `CommandLine` object that allows you to read and manipulate the command line arguments that Chromium uses.",
      "slug": "appcommandline",
      "url": "https://electronjs.org/docs/api/app#appcommandline",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:commandLine",
        "api:appcommandline",
        "api:app.commandLine",
        "doc:commandLine",
        "doc:appcommandline",
        "doc:app.commandLine"
      ]
    },
    {
      "objectID": "api-app#appdock",
      "name": "dock",
      "description": "A `Dock` object that allows you to perform actions on your app icon in the user's dock on macOS.",
      "required": true,
      "additionalTags": [
        "os_macos",
        "availability_readonly"
      ],
      "collection": false,
      "type": "Dock",
      "apiType": "properties",
      "fullSignature": "app.dock",
      "tldr": "A `Dock` object that allows you to perform actions on your app icon in the user's dock on macOS.",
      "slug": "appdock",
      "url": "https://electronjs.org/docs/api/app#appdock",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:dock",
        "api:appdock",
        "api:app.dock",
        "doc:dock",
        "doc:appdock",
        "doc:app.dock"
      ]
    },
    {
      "objectID": "api-app#appispackaged",
      "name": "isPackaged",
      "description": "A `Boolean` property that returns  `true` if the app is packaged, `false` otherwise. For many apps, this property can be used to distinguish development and production environments.",
      "required": true,
      "additionalTags": [
        "availability_readonly"
      ],
      "collection": false,
      "type": "Boolean",
      "apiType": "properties",
      "fullSignature": "app.isPackaged",
      "tldr": "A `Boolean` property that returns  `true` if the app is packaged, `false` otherwise.",
      "slug": "appispackaged",
      "url": "https://electronjs.org/docs/api/app#appispackaged",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:isPackaged",
        "api:appispackaged",
        "api:app.isPackaged",
        "doc:isPackaged",
        "doc:appispackaged",
        "doc:app.isPackaged"
      ]
    },
    {
      "objectID": "api-app#appname",
      "name": "name",
      "description": "A `String` property that indicates the current application's name, which is the name in the application's `package.json` file.\n\nUsually the `name` field of `package.json` is a short lowercase name, according to the npm modules spec. You should usually also specify a `productName` field, which is your application's full capitalized name, and which will be preferred over `name` by Electron.",
      "required": true,
      "additionalTags": [],
      "collection": false,
      "type": "String",
      "possibleValues": null,
      "apiType": "properties",
      "fullSignature": "app.name",
      "tldr": "A `String` property that indicates the current application's name, which is the name in the application's `package.json` file.\n\nUsually the `name` field of `package.json` is a short lowercase name, according to the npm modules spec.",
      "slug": "appname",
      "url": "https://electronjs.org/docs/api/app#appname",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:name",
        "api:appname",
        "api:app.name",
        "doc:name",
        "doc:appname",
        "doc:app.name"
      ]
    },
    {
      "objectID": "api-app#appuseragentfallback",
      "name": "userAgentFallback",
      "description": "A `String` which is the user agent string Electron will use as a global fallback.\n\nThis is the user agent that will be used when no user agent is set at the `webContents` or `session` level.  It is useful for ensuring that your entire app has the same user agent.  Set to a custom value as early as possible in your app's initialization to ensure that your overridden value is used.",
      "required": true,
      "additionalTags": [],
      "collection": false,
      "type": "String",
      "possibleValues": null,
      "apiType": "properties",
      "fullSignature": "app.userAgentFallback",
      "tldr": "A `String` which is the user agent string Electron will use as a global fallback.\n\nThis is the user agent that will be used when no user agent is set at the `webContents` or `session` level.",
      "slug": "appuseragentfallback",
      "url": "https://electronjs.org/docs/api/app#appuseragentfallback",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:userAgentFallback",
        "api:appuseragentfallback",
        "api:app.userAgentFallback",
        "doc:userAgentFallback",
        "doc:appuseragentfallback",
        "doc:app.userAgentFallback"
      ]
    },
    {
      "objectID": "api-app#appallowrendererprocessreuse",
      "name": "allowRendererProcessReuse",
      "description": "A `Boolean` which when `true` disables the overrides that Electron has in place to ensure renderer processes are restarted on every navigation.  The current default value for this property is `false`.\n\nThe intention is for these overrides to become disabled by default and then at some point in the future this property will be removed.  This property impacts which native modules you can use in the renderer process.  For more information on the direction Electron is going with renderer process restarts and usage of native modules in the renderer process please check out this Tracking Issue.",
      "required": true,
      "additionalTags": [],
      "collection": false,
      "type": "Boolean",
      "apiType": "properties",
      "fullSignature": "app.allowRendererProcessReuse",
      "tldr": "A `Boolean` which when `true` disables the overrides that Electron has in place to ensure renderer processes are restarted on every navigation.",
      "slug": "appallowrendererprocessreuse",
      "url": "https://electronjs.org/docs/api/app#appallowrendererprocessreuse",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:allowRendererProcessReuse",
        "api:appallowrendererprocessreuse",
        "api:app.allowRendererProcessReuse",
        "doc:allowRendererProcessReuse",
        "doc:appallowrendererprocessreuse",
        "doc:app.allowRendererProcessReuse"
      ]
    },
    {
      "objectID": "api-app#appquit",
      "name": "quit",
      "signature": "()",
      "description": "Try to close all windows. The `before-quit` event will be emitted first. If all windows are successfully closed, the `will-quit` event will be emitted and by default the application will terminate.\n\nThis method guarantees that all `beforeunload` and `unload` event handlers are correctly executed. It is possible that a window cancels the quitting by returning `false` in the `beforeunload` event handler.",
      "parameters": [],
      "returns": null,
      "additionalTags": [],
      "apiType": "methods",
      "fullSignature": "app.quit()",
      "tldr": "Try to close all windows.",
      "slug": "appquit",
      "url": "https://electronjs.org/docs/api/app#appquit",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:quit",
        "api:appquit",
        "api:app.quit()",
        "doc:quit",
        "doc:appquit",
        "doc:app.quit()"
      ]
    },
    {
      "objectID": "api-app#appexitexitcode",
      "name": "exit",
      "signature": "([exitCode])",
      "description": "Exits immediately with `exitCode`. `exitCode` defaults to 0.\n\nAll windows will be closed immediately without asking the user, and the `before-quit` and `will-quit` events will not be emitted.",
      "parameters": [
        {
          "name": "exitCode",
          "description": "",
          "required": false,
          "collection": false,
          "type": "Integer"
        }
      ],
      "returns": null,
      "additionalTags": [],
      "apiType": "methods",
      "fullSignature": "app.exit([exitCode])",
      "tldr": "Exits immediately with `exitCode`.",
      "slug": "appexitexitcode",
      "url": "https://electronjs.org/docs/api/app#appexitexitcode",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:exit",
        "api:appexitexitcode",
        "api:app.exit([exitCode])",
        "doc:exit",
        "doc:appexitexitcode",
        "doc:app.exit([exitCode])"
      ]
    },
    {
      "objectID": "api-app#apprelaunchoptions",
      "name": "relaunch",
      "signature": "([options])",
      "description": "Relaunches the app when current instance exits.\n\nBy default, the new instance will use the same working directory and command line arguments with current instance. When `args` is specified, the `args` will be passed as command line arguments instead. When `execPath` is specified, the `execPath` will be executed for relaunch instead of current app.\n\nNote that this method does not quit the app when executed, you have to call `app.quit` or `app.exit` after calling `app.relaunch` to make the app restart.\n\nWhen `app.relaunch` is called for multiple times, multiple instances will be started after current instance exited.\n\nAn example of restarting current instance immediately and adding a new command line argument to the new instance:",
      "parameters": [
        {
          "name": "options",
          "description": "",
          "required": false,
          "collection": false,
          "type": "Object",
          "properties": [
            {
              "name": "args",
              "description": "",
              "required": false,
              "additionalTags": [],
              "collection": true,
              "type": "String",
              "possibleValues": null
            },
            {
              "name": "execPath",
              "description": "",
              "required": false,
              "additionalTags": [],
              "collection": false,
              "type": "String",
              "possibleValues": null
            }
          ]
        }
      ],
      "returns": null,
      "additionalTags": [],
      "apiType": "methods",
      "fullSignature": "app.relaunch([options])",
      "tldr": "Relaunches the app when current instance exits.\n\nBy default, the new instance will use the same working directory and command line arguments with current instance.",
      "slug": "apprelaunchoptions",
      "url": "https://electronjs.org/docs/api/app#apprelaunchoptions",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:relaunch",
        "api:apprelaunchoptions",
        "api:app.relaunch([options])",
        "doc:relaunch",
        "doc:apprelaunchoptions",
        "doc:app.relaunch([options])"
      ]
    },
    {
      "objectID": "api-app#appisready",
      "name": "isReady",
      "signature": "()",
      "description": "`true` if Electron has finished initializing, `false` otherwise.",
      "parameters": [],
      "returns": {
        "collection": false,
        "type": "Boolean"
      },
      "additionalTags": [],
      "apiType": "methods",
      "fullSignature": "app.isReady()",
      "tldr": "`true` if Electron has finished initializing, `false` otherwise.",
      "slug": "appisready",
      "url": "https://electronjs.org/docs/api/app#appisready",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:isReady",
        "api:appisready",
        "api:app.isReady()",
        "doc:isReady",
        "doc:appisready",
        "doc:app.isReady()"
      ]
    },
    {
      "objectID": "api-app#appwhenready",
      "name": "whenReady",
      "signature": "()",
      "description": "fulfilled when Electron is initialized. May be used as a convenient alternative to checking `app.isReady()` and subscribing to the `ready` event if the app is not ready yet.",
      "parameters": [],
      "returns": {
        "collection": false,
        "type": "Promise",
        "innerTypes": [
          {
            "collection": false,
            "type": "void"
          }
        ]
      },
      "additionalTags": [],
      "apiType": "methods",
      "fullSignature": "app.whenReady()",
      "tldr": "fulfilled when Electron is initialized.",
      "slug": "appwhenready",
      "url": "https://electronjs.org/docs/api/app#appwhenready",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:whenReady",
        "api:appwhenready",
        "api:app.whenReady()",
        "doc:whenReady",
        "doc:appwhenready",
        "doc:app.whenReady()"
      ]
    },
    {
      "objectID": "api-app#appfocus",
      "name": "focus",
      "signature": "()",
      "description": "On Linux, focuses on the first visible window. On macOS, makes the application the active app. On Windows, focuses on the application's first window.",
      "parameters": [],
      "returns": null,
      "additionalTags": [],
      "apiType": "methods",
      "fullSignature": "app.focus()",
      "tldr": "On Linux, focuses on the first visible window.",
      "slug": "appfocus",
      "url": "https://electronjs.org/docs/api/app#appfocus",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:focus",
        "api:appfocus",
        "api:app.focus()",
        "doc:focus",
        "doc:appfocus",
        "doc:app.focus()"
      ]
    },
    {
      "objectID": "api-app#apphide",
      "name": "hide",
      "signature": "()",
      "description": "Hides all application windows without minimizing them.",
      "parameters": [],
      "returns": null,
      "additionalTags": [
        "os_macos"
      ],
      "apiType": "methods",
      "fullSignature": "app.hide()",
      "tldr": "Hides all application windows without minimizing them.",
      "slug": "apphide",
      "url": "https://electronjs.org/docs/api/app#apphide",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:hide",
        "api:apphide",
        "api:app.hide()",
        "doc:hide",
        "doc:apphide",
        "doc:app.hide()"
      ]
    },
    {
      "objectID": "api-app#appshow",
      "name": "show",
      "signature": "()",
      "description": "Shows application windows after they were hidden. Does not automatically focus them.",
      "parameters": [],
      "returns": null,
      "additionalTags": [
        "os_macos"
      ],
      "apiType": "methods",
      "fullSignature": "app.show()",
      "tldr": "Shows application windows after they were hidden.",
      "slug": "appshow",
      "url": "https://electronjs.org/docs/api/app#appshow",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:show",
        "api:appshow",
        "api:app.show()",
        "doc:show",
        "doc:appshow",
        "doc:app.show()"
      ]
    },
    {
      "objectID": "api-app#appsetapplogspathpath",
      "name": "setAppLogsPath",
      "signature": "([path])",
      "description": "Sets or creates a directory your app's logs which can then be manipulated with `app.getPath()` or `app.setPath(pathName, newPath)`.\n\nCalling `app.setAppLogsPath()` without a `path` parameter will result in this directory being set to `~/Library/Logs/YourAppName` on _macOS_, and inside the `userData` directory on _Linux_ and _Windows_.",
      "parameters": [
        {
          "name": "path",
          "description": "A custom path for your logs. Must be absolute.",
          "required": false,
          "collection": false,
          "type": "String",
          "possibleValues": null
        }
      ],
      "returns": null,
      "additionalTags": [],
      "apiType": "methods",
      "fullSignature": "app.setAppLogsPath([path])",
      "tldr": "Sets or creates a directory your app's logs which can then be manipulated with `app.getPath()` or `app.setPath(pathName, newPath)`.\n\nCalling `app.setAppLogsPath()` without a `path` parameter will result in this directory being set to `~/Library/Logs/YourAppName` on _macOS_, and inside the `userData` directory on _Linux_ and _Windows_.",
      "slug": "appsetapplogspathpath",
      "url": "https://electronjs.org/docs/api/app#appsetapplogspathpath",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:setAppLogsPath",
        "api:appsetapplogspathpath",
        "api:app.setAppLogsPath([path])",
        "doc:setAppLogsPath",
        "doc:appsetapplogspathpath",
        "doc:app.setAppLogsPath([path])"
      ]
    },
    {
      "objectID": "api-app#appgetapppath",
      "name": "getAppPath",
      "signature": "()",
      "description": "The current application directory.",
      "parameters": [],
      "returns": {
        "collection": false,
        "type": "String",
        "possibleValues": null
      },
      "additionalTags": [],
      "apiType": "methods",
      "fullSignature": "app.getAppPath()",
      "tldr": "The current application directory.",
      "slug": "appgetapppath",
      "url": "https://electronjs.org/docs/api/app#appgetapppath",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:getAppPath",
        "api:appgetapppath",
        "api:app.getAppPath()",
        "doc:getAppPath",
        "doc:appgetapppath",
        "doc:app.getAppPath()"
      ]
    },
    {
      "objectID": "api-app#appgetpathname",
      "name": "getPath",
      "signature": "(name)",
      "description": "A path to a special directory or file associated with `name`. On failure, an `Error` is thrown.\n\nIf `app.getPath('logs')` is called without called `app.setAppLogsPath()` being called first, a default log directory will be created equivalent to calling `app.setAppLogsPath()` without a `path` parameter.",
      "parameters": [
        {
          "name": "name",
          "description": "You can request the following paths by the name:",
          "required": true,
          "collection": false,
          "type": "String",
          "possibleValues": [
            {
              "value": "home",
              "description": ""
            },
            {
              "value": "appData",
              "description": "user application data directory, which by default points to:"
            },
            {
              "value": "userData",
              "description": ""
            },
            {
              "value": "cache",
              "description": ""
            },
            {
              "value": "temp",
              "description": ""
            },
            {
              "value": "exe",
              "description": ""
            },
            {
              "value": "module",
              "description": ""
            },
            {
              "value": "desktop",
              "description": ""
            },
            {
              "value": "documents",
              "description": ""
            },
            {
              "value": "downloads",
              "description": ""
            },
            {
              "value": "music",
              "description": ""
            },
            {
              "value": "pictures",
              "description": ""
            },
            {
              "value": "videos",
              "description": ""
            },
            {
              "value": "logs",
              "description": ""
            },
            {
              "value": "pepperFlashSystemPlugin",
              "description": ""
            }
          ]
        }
      ],
      "returns": {
        "collection": false,
        "type": "String",
        "possibleValues": null
      },
      "additionalTags": [],
      "apiType": "methods",
      "fullSignature": "app.getPath(name)",
      "tldr": "A path to a special directory or file associated with `name`.",
      "slug": "appgetpathname",
      "url": "https://electronjs.org/docs/api/app#appgetpathname",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:getPath",
        "api:appgetpathname",
        "api:app.getPath(name)",
        "doc:getPath",
        "doc:appgetpathname",
        "doc:app.getPath(name)"
      ]
    },
    {
      "objectID": "api-app#appgetfileiconpath-options",
      "name": "getFileIcon",
      "signature": "(path[, options])",
      "description": "fulfilled with the app's icon, which is a NativeImage.\n\nFetches a path's associated icon.\n\nOn _Windows_, there a 2 kinds of icons:\n\n* Icons associated with certain file extensions, like `.mp3`, `.png`, etc.\n* Icons inside the file itself, like `.exe`, `.dll`, `.ico`.\n\nOn _Linux_ and _macOS_, icons depend on the application associated with file mime type.",
      "parameters": [
        {
          "name": "path",
          "description": "",
          "required": true,
          "collection": false,
          "type": "String",
          "possibleValues": null
        },
        {
          "name": "options",
          "description": "",
          "required": false,
          "collection": false,
          "type": "Object",
          "properties": [
            {
              "name": "size",
              "description": "",
              "required": true,
              "additionalTags": [],
              "collection": false,
              "type": "String",
              "possibleValues": [
                {
                  "value": "small",
                  "description": "16x16"
                },
                {
                  "value": "normal",
                  "description": "32x32"
                },
                {
                  "value": "large",
                  "description": "48x48 on _Linux_, 32x32 on _Windows_, unsupported on _macOS_."
                }
              ]
            }
          ]
        }
      ],
      "returns": {
        "collection": false,
        "type": "Promise",
        "innerTypes": [
          {
            "collection": false,
            "type": "NativeImage"
          }
        ]
      },
      "additionalTags": [],
      "apiType": "methods",
      "fullSignature": "app.getFileIcon(path[, options])",
      "tldr": "fulfilled with the app's icon, which is a NativeImage.\n\nFetches a path's associated icon.\n\nOn _Windows_, there a 2 kinds of icons:\n\n* Icons associated with certain file extensions, like `.mp3`, `.png`, etc.\n* Icons inside the file itself, like `.exe`, `.dll`, `.ico`.\n\nOn _Linux_ and _macOS_, icons depend on the application associated with file mime type.",
      "slug": "appgetfileiconpath-options",
      "url": "https://electronjs.org/docs/api/app#appgetfileiconpath-options",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:getFileIcon",
        "api:appgetfileiconpath-options",
        "api:app.getFileIcon(path[, options])",
        "doc:getFileIcon",
        "doc:appgetfileiconpath-options",
        "doc:app.getFileIcon(path[, options])"
      ]
    },
    {
      "objectID": "api-app#appsetpathname-path",
      "name": "setPath",
      "signature": "(name, path)",
      "description": "Overrides the `path` to a special directory or file associated with `name`. If the path specifies a directory that does not exist, an `Error` is thrown. In that case, the directory should be created with `fs.mkdirSync` or similar.\n\nYou can only override paths of a `name` defined in `app.getPath`.\n\nBy default, web pages' cookies and caches will be stored under the `userData` directory. If you want to change this location, you have to override the `userData` path before the `ready` event of the `app` module is emitted.",
      "parameters": [
        {
          "name": "name",
          "description": "",
          "required": true,
          "collection": false,
          "type": "String",
          "possibleValues": null
        },
        {
          "name": "path",
          "description": "",
          "required": true,
          "collection": false,
          "type": "String",
          "possibleValues": null
        }
      ],
      "returns": null,
      "additionalTags": [],
      "apiType": "methods",
      "fullSignature": "app.setPath(name, path)",
      "tldr": "Overrides the `path` to a special directory or file associated with `name`.",
      "slug": "appsetpathname-path",
      "url": "https://electronjs.org/docs/api/app#appsetpathname-path",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:setPath",
        "api:appsetpathname-path",
        "api:app.setPath(name, path)",
        "doc:setPath",
        "doc:appsetpathname-path",
        "doc:app.setPath(name, path)"
      ]
    },
    {
      "objectID": "api-app#appgetversion",
      "name": "getVersion",
      "signature": "()",
      "description": "The version of the loaded application. If no version is found in the application's `package.json` file, the version of the current bundle or executable is returned.",
      "parameters": [],
      "returns": {
        "collection": false,
        "type": "String",
        "possibleValues": null
      },
      "additionalTags": [],
      "apiType": "methods",
      "fullSignature": "app.getVersion()",
      "tldr": "The version of the loaded application.",
      "slug": "appgetversion",
      "url": "https://electronjs.org/docs/api/app#appgetversion",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:getVersion",
        "api:appgetversion",
        "api:app.getVersion()",
        "doc:getVersion",
        "doc:appgetversion",
        "doc:app.getVersion()"
      ]
    },
    {
      "objectID": "api-app#appgetname",
      "name": "getName",
      "signature": "()",
      "description": "The current application's name, which is the name in the application's `package.json` file.\n\nUsually the `name` field of `package.json` is a short lowercase name, according to the npm modules spec. You should usually also specify a `productName` field, which is your application's full capitalized name, and which will be preferred over `name` by Electron.\n\n**Deprecated**",
      "parameters": [],
      "returns": {
        "collection": false,
        "type": "String",
        "possibleValues": null
      },
      "additionalTags": [],
      "apiType": "methods",
      "fullSignature": "app.getName()",
      "tldr": "The current application's name, which is the name in the application's `package.json` file.\n\nUsually the `name` field of `package.json` is a short lowercase name, according to the npm modules spec.",
      "slug": "appgetname",
      "url": "https://electronjs.org/docs/api/app#appgetname",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:getName",
        "api:appgetname",
        "api:app.getName()",
        "doc:getName",
        "doc:appgetname",
        "doc:app.getName()"
      ]
    },
    {
      "objectID": "api-app#appsetnamename",
      "name": "setName",
      "signature": "(name)",
      "description": "Overrides the current application's name.\n\n**Deprecated**",
      "parameters": [
        {
          "name": "name",
          "description": "",
          "required": true,
          "collection": false,
          "type": "String",
          "possibleValues": null
        }
      ],
      "returns": null,
      "additionalTags": [],
      "apiType": "methods",
      "fullSignature": "app.setName(name)",
      "tldr": "Overrides the current application's name.\n\n**Deprecated**.",
      "slug": "appsetnamename",
      "url": "https://electronjs.org/docs/api/app#appsetnamename",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:setName",
        "api:appsetnamename",
        "api:app.setName(name)",
        "doc:setName",
        "doc:appsetnamename",
        "doc:app.setName(name)"
      ]
    },
    {
      "objectID": "api-app#appgetlocale",
      "name": "getLocale",
      "signature": "()",
      "description": "The current application locale. Possible return values are documented here.\n\nTo set the locale, you'll want to use a command line switch at app startup, which may be found here.\n\n**Note:** When distributing your packaged app, you have to also ship the `locales` folder.\n\n**Note:** On Windows, you have to call it after the `ready` events gets emitted.",
      "parameters": [],
      "returns": {
        "collection": false,
        "type": "String",
        "possibleValues": null
      },
      "additionalTags": [],
      "apiType": "methods",
      "fullSignature": "app.getLocale()",
      "tldr": "The current application locale.",
      "slug": "appgetlocale",
      "url": "https://electronjs.org/docs/api/app#appgetlocale",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:getLocale",
        "api:appgetlocale",
        "api:app.getLocale()",
        "doc:getLocale",
        "doc:appgetlocale",
        "doc:app.getLocale()"
      ]
    },
    {
      "objectID": "api-app#appgetlocalecountrycode",
      "name": "getLocaleCountryCode",
      "signature": "()",
      "description": "User operating system's locale two-letter ISO 3166 country code. The value is taken from native OS APIs.\n\n**Note:** When unable to detect locale country code, it returns empty string.",
      "parameters": [],
      "returns": {
        "collection": false,
        "type": "String",
        "possibleValues": null
      },
      "additionalTags": [],
      "apiType": "methods",
      "fullSignature": "app.getLocaleCountryCode()",
      "tldr": "User operating system's locale two-letter ISO 3166 country code.",
      "slug": "appgetlocalecountrycode",
      "url": "https://electronjs.org/docs/api/app#appgetlocalecountrycode",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:getLocaleCountryCode",
        "api:appgetlocalecountrycode",
        "api:app.getLocaleCountryCode()",
        "doc:getLocaleCountryCode",
        "doc:appgetlocalecountrycode",
        "doc:app.getLocaleCountryCode()"
      ]
    },
    {
      "objectID": "api-app#appaddrecentdocumentpath",
      "name": "addRecentDocument",
      "signature": "(path)",
      "description": "Adds `path` to the recent documents list.\n\nThis list is managed by the OS. On Windows, you can visit the list from the task bar, and on macOS, you can visit it from dock menu.",
      "parameters": [
        {
          "name": "path",
          "description": "",
          "required": true,
          "collection": false,
          "type": "String",
          "possibleValues": null
        }
      ],
      "returns": null,
      "additionalTags": [
        "os_macos",
        "os_windows"
      ],
      "apiType": "methods",
      "fullSignature": "app.addRecentDocument(path)",
      "tldr": "Adds `path` to the recent documents list.\n\nThis list is managed by the OS.",
      "slug": "appaddrecentdocumentpath",
      "url": "https://electronjs.org/docs/api/app#appaddrecentdocumentpath",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:addRecentDocument",
        "api:appaddrecentdocumentpath",
        "api:app.addRecentDocument(path)",
        "doc:addRecentDocument",
        "doc:appaddrecentdocumentpath",
        "doc:app.addRecentDocument(path)"
      ]
    },
    {
      "objectID": "api-app#appclearrecentdocuments",
      "name": "clearRecentDocuments",
      "signature": "()",
      "description": "Clears the recent documents list.",
      "parameters": [],
      "returns": null,
      "additionalTags": [
        "os_macos",
        "os_windows"
      ],
      "apiType": "methods",
      "fullSignature": "app.clearRecentDocuments()",
      "tldr": "Clears the recent documents list.",
      "slug": "appclearrecentdocuments",
      "url": "https://electronjs.org/docs/api/app#appclearrecentdocuments",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:clearRecentDocuments",
        "api:appclearrecentdocuments",
        "api:app.clearRecentDocuments()",
        "doc:clearRecentDocuments",
        "doc:appclearrecentdocuments",
        "doc:app.clearRecentDocuments()"
      ]
    },
    {
      "objectID": "api-app#appsetasdefaultprotocolclientprotocol-path-args",
      "name": "setAsDefaultProtocolClient",
      "signature": "(protocol[, path, args])",
      "description": "Whether the call succeeded.\n\nThis method sets the current executable as the default handler for a protocol (aka URI scheme). It allows you to integrate your app deeper into the operating system. Once registered, all links with `your-protocol://` will be opened with the current executable. The whole link, including protocol, will be passed to your application as a parameter.\n\nOn Windows, you can provide optional parameters path, the path to your executable, and args, an array of arguments to be passed to your executable when it launches.\n\n**Note:** On macOS, you can only register protocols that have been added to your app's `info.plist`, which can not be modified at runtime. You can however change the file with a simple text editor or script during build time. Please refer to Apple's documentation for details.\n\n**Note:** In a Windows Store environment (when packaged as an `appx`) this API will return `true` for all calls but the registry key it sets won't be accessible by other applications.  In order to register your Windows Store application as a default protocol handler you must declare the protocol in your manifest.\n\nThe API uses the Windows Registry and LSSetDefaultHandlerForURLScheme internally.",
      "parameters": [
        {
          "name": "protocol",
          "description": "The name of your protocol, without `://`. If you want your app to handle `electron://` links, call this method with `electron` as the parameter.",
          "required": true,
          "collection": false,
          "type": "String",
          "possibleValues": null
        },
        {
          "name": "path",
          "description": "Defaults to `process.execPath`",
          "required": false,
          "collection": false,
          "type": "String",
          "possibleValues": null
        },
        {
          "name": "args",
          "description": "Defaults to an empty array",
          "required": false,
          "collection": true,
          "type": "String",
          "possibleValues": null
        }
      ],
      "returns": {
        "collection": false,
        "type": "Boolean"
      },
      "additionalTags": [],
      "apiType": "methods",
      "fullSignature": "app.setAsDefaultProtocolClient(protocol[, path, args])",
      "tldr": "Whether the call succeeded.\n\nThis method sets the current executable as the default handler for a protocol (aka URI scheme).",
      "slug": "appsetasdefaultprotocolclientprotocol-path-args",
      "url": "https://electronjs.org/docs/api/app#appsetasdefaultprotocolclientprotocol-path-args",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:setAsDefaultProtocolClient",
        "api:appsetasdefaultprotocolclientprotocol-path-args",
        "api:app.setAsDefaultProtocolClient(protocol[, path, args])",
        "doc:setAsDefaultProtocolClient",
        "doc:appsetasdefaultprotocolclientprotocol-path-args",
        "doc:app.setAsDefaultProtocolClient(protocol[, path, args])"
      ]
    },
    {
      "objectID": "api-app#appremoveasdefaultprotocolclientprotocol-path-args",
      "name": "removeAsDefaultProtocolClient",
      "signature": "(protocol[, path, args])",
      "description": "Whether the call succeeded.\n\nThis method checks if the current executable as the default handler for a protocol (aka URI scheme). If so, it will remove the app as the default handler.",
      "parameters": [
        {
          "name": "protocol",
          "description": "The name of your protocol, without `://`.",
          "required": true,
          "collection": false,
          "type": "String",
          "possibleValues": null
        },
        {
          "name": "path",
          "description": "Defaults to `process.execPath`",
          "required": false,
          "collection": false,
          "type": "String",
          "possibleValues": null
        },
        {
          "name": "args",
          "description": "Defaults to an empty array",
          "required": false,
          "collection": true,
          "type": "String",
          "possibleValues": null
        }
      ],
      "returns": {
        "collection": false,
        "type": "Boolean"
      },
      "additionalTags": [
        "os_macos",
        "os_windows"
      ],
      "apiType": "methods",
      "fullSignature": "app.removeAsDefaultProtocolClient(protocol[, path, args])",
      "tldr": "Whether the call succeeded.\n\nThis method checks if the current executable as the default handler for a protocol (aka URI scheme).",
      "slug": "appremoveasdefaultprotocolclientprotocol-path-args",
      "url": "https://electronjs.org/docs/api/app#appremoveasdefaultprotocolclientprotocol-path-args",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:removeAsDefaultProtocolClient",
        "api:appremoveasdefaultprotocolclientprotocol-path-args",
        "api:app.removeAsDefaultProtocolClient(protocol[, path, args])",
        "doc:removeAsDefaultProtocolClient",
        "doc:appremoveasdefaultprotocolclientprotocol-path-args",
        "doc:app.removeAsDefaultProtocolClient(protocol[, path, args])"
      ]
    },
    {
      "objectID": "api-app#appisdefaultprotocolclientprotocol-path-args",
      "name": "isDefaultProtocolClient",
      "signature": "(protocol[, path, args])",
      "description": "This method checks if the current executable is the default handler for a protocol (aka URI scheme). If so, it will return true. Otherwise, it will return false.\n\n**Note:** On macOS, you can use this method to check if the app has been registered as the default protocol handler for a protocol. You can also verify this by checking `~/Library/Preferences/com.apple.LaunchServices.plist` on the macOS machine. Please refer to Apple's documentation for details.\n\nThe API uses the Windows Registry and LSCopyDefaultHandlerForURLScheme internally.",
      "parameters": [
        {
          "name": "protocol",
          "description": "The name of your protocol, without `://`.",
          "required": true,
          "collection": false,
          "type": "String",
          "possibleValues": null
        },
        {
          "name": "path",
          "description": "Defaults to `process.execPath`",
          "required": false,
          "collection": false,
          "type": "String",
          "possibleValues": null
        },
        {
          "name": "args",
          "description": "Defaults to an empty array",
          "required": false,
          "collection": true,
          "type": "String",
          "possibleValues": null
        }
      ],
      "returns": {
        "collection": false,
        "type": "Boolean"
      },
      "additionalTags": [],
      "apiType": "methods",
      "fullSignature": "app.isDefaultProtocolClient(protocol[, path, args])",
      "tldr": "This method checks if the current executable is the default handler for a protocol (aka URI scheme).",
      "slug": "appisdefaultprotocolclientprotocol-path-args",
      "url": "https://electronjs.org/docs/api/app#appisdefaultprotocolclientprotocol-path-args",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:isDefaultProtocolClient",
        "api:appisdefaultprotocolclientprotocol-path-args",
        "api:app.isDefaultProtocolClient(protocol[, path, args])",
        "doc:isDefaultProtocolClient",
        "doc:appisdefaultprotocolclientprotocol-path-args",
        "doc:app.isDefaultProtocolClient(protocol[, path, args])"
      ]
    },
    {
      "objectID": "api-app#appsetusertaskstasks",
      "name": "setUserTasks",
      "signature": "(tasks)",
      "description": "Adds `tasks` to the Tasks category of the Jump List on Windows.\n\n`tasks` is an array of `Task` objects.\n\nWhether the call succeeded.\n\n**Note:** If you'd like to customize the Jump List even more use `app.setJumpList(categories)` instead.",
      "parameters": [
        {
          "name": "tasks",
          "description": "Array of `Task` objects",
          "required": true,
          "collection": true,
          "type": "Task"
        }
      ],
      "returns": {
        "collection": false,
        "type": "Boolean"
      },
      "additionalTags": [
        "os_windows"
      ],
      "apiType": "methods",
      "fullSignature": "app.setUserTasks(tasks)",
      "tldr": "Adds `tasks` to the Tasks category of the Jump List on Windows.\n\n`tasks` is an array of `Task` objects.\n\nWhether the call succeeded.\n\n**Note:** If you'd like to customize the Jump List even more use `app.setJumpList(categories)` instead.",
      "slug": "appsetusertaskstasks",
      "url": "https://electronjs.org/docs/api/app#appsetusertaskstasks",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:setUserTasks",
        "api:appsetusertaskstasks",
        "api:app.setUserTasks(tasks)",
        "doc:setUserTasks",
        "doc:appsetusertaskstasks",
        "doc:app.setUserTasks(tasks)"
      ]
    },
    {
      "objectID": "api-app#appgetjumplistsettings",
      "name": "getJumpListSettings",
      "signature": "()",
      "description": "* `minItems` Integer - The minimum number of items that will be shown in the Jump List (for a more detailed description of this value see the MSDN docs).\n* `removedItems` JumpListItem[] - Array of `JumpListItem` objects that correspond to items that the user has explicitly removed from custom categories in the Jump List. These items must not be re-added to the Jump List in the **next** call to `app.setJumpList()`, Windows will not display any custom category that contains any of the removed items.",
      "parameters": [],
      "returns": {
        "collection": false,
        "type": "Object",
        "properties": [
          {
            "name": "minItems",
            "description": "The minimum number of items that will be shown in the Jump List (for a more detailed description of this value see the MSDN docs).",
            "required": true,
            "additionalTags": [],
            "collection": false,
            "type": "Integer"
          },
          {
            "name": "removedItems",
            "description": "Array of `JumpListItem` objects that correspond to items that the user has explicitly removed from custom categories in the Jump List. These items must not be re-added to the Jump List in the **next** call to `app.setJumpList()`, Windows will not display any custom category that contains any of the removed items.",
            "required": true,
            "additionalTags": [],
            "collection": true,
            "type": "JumpListItem"
          }
        ]
      },
      "additionalTags": [
        "os_windows"
      ],
      "apiType": "methods",
      "fullSignature": "app.getJumpListSettings()",
      "tldr": "* `minItems` Integer - The minimum number of items that will be shown in the Jump List (for a more detailed description of this value see the MSDN docs).\n* `removedItems` JumpListItem[] - Array of `JumpListItem` objects that correspond to items that the user has explicitly removed from custom categories in the Jump List.",
      "slug": "appgetjumplistsettings",
      "url": "https://electronjs.org/docs/api/app#appgetjumplistsettings",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:getJumpListSettings",
        "api:appgetjumplistsettings",
        "api:app.getJumpListSettings()",
        "doc:getJumpListSettings",
        "doc:appgetjumplistsettings",
        "doc:app.getJumpListSettings()"
      ]
    },
    {
      "objectID": "api-app#appsetjumplistcategories",
      "name": "setJumpList",
      "signature": "(categories)",
      "description": "Sets or removes a custom Jump List for the application, and returns one of the following strings:\n\n* `ok` - Nothing went wrong.\n* `error` - One or more errors occurred, enable runtime logging to figure out the likely cause.\n* `invalidSeparatorError` - An attempt was made to add a separator to a custom category in the Jump List. Separators are only allowed in the standard `Tasks` category.\n* `fileTypeRegistrationError` - An attempt was made to add a file link to the Jump List for a file type the app isn't registered to handle.\n* `customCategoryAccessDeniedError` - Custom categories can't be added to the Jump List due to user privacy or group policy settings.\n\nIf `categories` is `null` the previously set custom Jump List (if any) will be replaced by the standard Jump List for the app (managed by Windows).\n\n**Note:** If a `JumpListCategory` object has neither the `type` nor the `name` property set then its `type` is assumed to be `tasks`. If the `name` property is set but the `type` property is omitted then the `type` is assumed to be `custom`.\n\n**Note:** Users can remove items from custom categories, and Windows will not allow a removed item to be added back into a custom category until **after** the next successful call to `app.setJumpList(categories)`. Any attempt to re-add a removed item to a custom category earlier than that will result in the entire custom category being omitted from the Jump List. The list of removed items can be obtained using `app.getJumpListSettings()`.\n\nHere's a very simple example of creating a custom Jump List:",
      "parameters": [
        {
          "name": "categories",
          "description": "Array of `JumpListCategory` objects.",
          "required": true,
          "collection": false,
          "type": [
            {
              "collection": true,
              "type": "JumpListCategory"
            },
            {
              "type": "null",
              "collection": false
            }
          ]
        }
      ],
      "returns": null,
      "additionalTags": [
        "os_windows"
      ],
      "apiType": "methods",
      "fullSignature": "app.setJumpList(categories)",
      "tldr": "Sets or removes a custom Jump List for the application, and returns one of the following strings:\n\n* `ok` - Nothing went wrong.\n* `error` - One or more errors occurred, enable runtime logging to figure out the likely cause.\n* `invalidSeparatorError` - An attempt was made to add a separator to a custom category in the Jump List.",
      "slug": "appsetjumplistcategories",
      "url": "https://electronjs.org/docs/api/app#appsetjumplistcategories",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:setJumpList",
        "api:appsetjumplistcategories",
        "api:app.setJumpList(categories)",
        "doc:setJumpList",
        "doc:appsetjumplistcategories",
        "doc:app.setJumpList(categories)"
      ]
    },
    {
      "objectID": "api-app#apprequestsingleinstancelock",
      "name": "requestSingleInstanceLock",
      "signature": "()",
      "description": "The return value of this method indicates whether or not this instance of your application successfully obtained the lock.  If it failed to obtain the lock, you can assume that another instance of your application is already running with the lock and exit immediately.\n\nI.e. This method returns `true` if your process is the primary instance of your application and your app should continue loading.  It returns `false` if your process should immediately quit as it has sent its parameters to another instance that has already acquired the lock.\n\nOn macOS, the system enforces single instance automatically when users try to open a second instance of your app in Finder, and the `open-file` and `open-url` events will be emitted for that. However when users start your app in command line, the system's single instance mechanism will be bypassed, and you have to use this method to ensure single instance.\n\nAn example of activating the window of primary instance when a second instance starts:",
      "parameters": [],
      "returns": {
        "collection": false,
        "type": "Boolean"
      },
      "additionalTags": [],
      "apiType": "methods",
      "fullSignature": "app.requestSingleInstanceLock()",
      "tldr": "The return value of this method indicates whether or not this instance of your application successfully obtained the lock.",
      "slug": "apprequestsingleinstancelock",
      "url": "https://electronjs.org/docs/api/app#apprequestsingleinstancelock",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:requestSingleInstanceLock",
        "api:apprequestsingleinstancelock",
        "api:app.requestSingleInstanceLock()",
        "doc:requestSingleInstanceLock",
        "doc:apprequestsingleinstancelock",
        "doc:app.requestSingleInstanceLock()"
      ]
    },
    {
      "objectID": "api-app#apphassingleinstancelock",
      "name": "hasSingleInstanceLock",
      "signature": "()",
      "description": "This method returns whether or not this instance of your app is currently holding the single instance lock.  You can request the lock with `app.requestSingleInstanceLock()` and release with `app.releaseSingleInstanceLock()`",
      "parameters": [],
      "returns": {
        "collection": false,
        "type": "Boolean"
      },
      "additionalTags": [],
      "apiType": "methods",
      "fullSignature": "app.hasSingleInstanceLock()",
      "tldr": "This method returns whether or not this instance of your app is currently holding the single instance lock.",
      "slug": "apphassingleinstancelock",
      "url": "https://electronjs.org/docs/api/app#apphassingleinstancelock",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:hasSingleInstanceLock",
        "api:apphassingleinstancelock",
        "api:app.hasSingleInstanceLock()",
        "doc:hasSingleInstanceLock",
        "doc:apphassingleinstancelock",
        "doc:app.hasSingleInstanceLock()"
      ]
    },
    {
      "objectID": "api-app#appreleasesingleinstancelock",
      "name": "releaseSingleInstanceLock",
      "signature": "()",
      "description": "Releases all locks that were created by `requestSingleInstanceLock`. This will allow multiple instances of the application to once again run side by side.",
      "parameters": [],
      "returns": null,
      "additionalTags": [],
      "apiType": "methods",
      "fullSignature": "app.releaseSingleInstanceLock()",
      "tldr": "Releases all locks that were created by `requestSingleInstanceLock`.",
      "slug": "appreleasesingleinstancelock",
      "url": "https://electronjs.org/docs/api/app#appreleasesingleinstancelock",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:releaseSingleInstanceLock",
        "api:appreleasesingleinstancelock",
        "api:app.releaseSingleInstanceLock()",
        "doc:releaseSingleInstanceLock",
        "doc:appreleasesingleinstancelock",
        "doc:app.releaseSingleInstanceLock()"
      ]
    },
    {
      "objectID": "api-app#appsetuseractivitytype-userinfo-webpageurl",
      "name": "setUserActivity",
      "signature": "(type, userInfo[, webpageURL])",
      "description": "Creates an `NSUserActivity` and sets it as the current activity. The activity is eligible for Handoff to another device afterward.",
      "parameters": [
        {
          "name": "type",
          "description": "Uniquely identifies the activity. Maps to `NSUserActivity.activityType`.",
          "required": true,
          "collection": false,
          "type": "String",
          "possibleValues": null
        },
        {
          "name": "userInfo",
          "description": "App-specific state to store for use by another device.",
          "required": true,
          "collection": false,
          "type": "any"
        },
        {
          "name": "webpageURL",
          "description": "The webpage to load in a browser if no suitable app is installed on the resuming device. The scheme must be `http` or `https`.",
          "required": false,
          "collection": false,
          "type": "String",
          "possibleValues": null
        }
      ],
      "returns": null,
      "additionalTags": [
        "os_macos"
      ],
      "apiType": "methods",
      "fullSignature": "app.setUserActivity(type, userInfo[, webpageURL])",
      "tldr": "Creates an `NSUserActivity` and sets it as the current activity.",
      "slug": "appsetuseractivitytype-userinfo-webpageurl",
      "url": "https://electronjs.org/docs/api/app#appsetuseractivitytype-userinfo-webpageurl",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:setUserActivity",
        "api:appsetuseractivitytype-userinfo-webpageurl",
        "api:app.setUserActivity(type, userInfo[, webpageURL])",
        "doc:setUserActivity",
        "doc:appsetuseractivitytype-userinfo-webpageurl",
        "doc:app.setUserActivity(type, userInfo[, webpageURL])"
      ]
    },
    {
      "objectID": "api-app#appgetcurrentactivitytype",
      "name": "getCurrentActivityType",
      "signature": "()",
      "description": "The type of the currently running activity.",
      "parameters": [],
      "returns": {
        "collection": false,
        "type": "String",
        "possibleValues": null
      },
      "additionalTags": [
        "os_macos"
      ],
      "apiType": "methods",
      "fullSignature": "app.getCurrentActivityType()",
      "tldr": "The type of the currently running activity.",
      "slug": "appgetcurrentactivitytype",
      "url": "https://electronjs.org/docs/api/app#appgetcurrentactivitytype",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:getCurrentActivityType",
        "api:appgetcurrentactivitytype",
        "api:app.getCurrentActivityType()",
        "doc:getCurrentActivityType",
        "doc:appgetcurrentactivitytype",
        "doc:app.getCurrentActivityType()"
      ]
    },
    {
      "objectID": "api-app#appinvalidatecurrentactivity",
      "name": "invalidateCurrentActivity",
      "signature": "()",
      "description": "Invalidates the current Handoff user activity.",
      "parameters": [],
      "returns": null,
      "additionalTags": [
        "os_macos"
      ],
      "apiType": "methods",
      "fullSignature": "app.invalidateCurrentActivity()",
      "tldr": "Invalidates the current Handoff user activity.",
      "slug": "appinvalidatecurrentactivity",
      "url": "https://electronjs.org/docs/api/app#appinvalidatecurrentactivity",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:invalidateCurrentActivity",
        "api:appinvalidatecurrentactivity",
        "api:app.invalidateCurrentActivity()",
        "doc:invalidateCurrentActivity",
        "doc:appinvalidatecurrentactivity",
        "doc:app.invalidateCurrentActivity()"
      ]
    },
    {
      "objectID": "api-app#appresigncurrentactivity",
      "name": "resignCurrentActivity",
      "signature": "()",
      "description": "Marks the current Handoff user activity as inactive without invalidating it.",
      "parameters": [],
      "returns": null,
      "additionalTags": [
        "os_macos"
      ],
      "apiType": "methods",
      "fullSignature": "app.resignCurrentActivity()",
      "tldr": "Marks the current Handoff user activity as inactive without invalidating it.",
      "slug": "appresigncurrentactivity",
      "url": "https://electronjs.org/docs/api/app#appresigncurrentactivity",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:resignCurrentActivity",
        "api:appresigncurrentactivity",
        "api:app.resignCurrentActivity()",
        "doc:resignCurrentActivity",
        "doc:appresigncurrentactivity",
        "doc:app.resignCurrentActivity()"
      ]
    },
    {
      "objectID": "api-app#appupdatecurrentactivitytype-userinfo",
      "name": "updateCurrentActivity",
      "signature": "(type, userInfo)",
      "description": "Updates the current activity if its type matches `type`, merging the entries from `userInfo` into its current `userInfo` dictionary.",
      "parameters": [
        {
          "name": "type",
          "description": "Uniquely identifies the activity. Maps to `NSUserActivity.activityType`.",
          "required": true,
          "collection": false,
          "type": "String",
          "possibleValues": null
        },
        {
          "name": "userInfo",
          "description": "App-specific state to store for use by another device.",
          "required": true,
          "collection": false,
          "type": "any"
        }
      ],
      "returns": null,
      "additionalTags": [
        "os_macos"
      ],
      "apiType": "methods",
      "fullSignature": "app.updateCurrentActivity(type, userInfo)",
      "tldr": "Updates the current activity if its type matches `type`, merging the entries from `userInfo` into its current `userInfo` dictionary.",
      "slug": "appupdatecurrentactivitytype-userinfo",
      "url": "https://electronjs.org/docs/api/app#appupdatecurrentactivitytype-userinfo",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:updateCurrentActivity",
        "api:appupdatecurrentactivitytype-userinfo",
        "api:app.updateCurrentActivity(type, userInfo)",
        "doc:updateCurrentActivity",
        "doc:appupdatecurrentactivitytype-userinfo",
        "doc:app.updateCurrentActivity(type, userInfo)"
      ]
    },
    {
      "objectID": "api-app#appsetappusermodelidid",
      "name": "setAppUserModelId",
      "signature": "(id)",
      "description": "Changes the Application User Model ID to `id`.",
      "parameters": [
        {
          "name": "id",
          "description": "",
          "required": true,
          "collection": false,
          "type": "String",
          "possibleValues": null
        }
      ],
      "returns": null,
      "additionalTags": [
        "os_windows"
      ],
      "apiType": "methods",
      "fullSignature": "app.setAppUserModelId(id)",
      "tldr": "Changes the Application User Model ID to `id`.",
      "slug": "appsetappusermodelidid",
      "url": "https://electronjs.org/docs/api/app#appsetappusermodelidid",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:setAppUserModelId",
        "api:appsetappusermodelidid",
        "api:app.setAppUserModelId(id)",
        "doc:setAppUserModelId",
        "doc:appsetappusermodelidid",
        "doc:app.setAppUserModelId(id)"
      ]
    },
    {
      "objectID": "api-app#appimportcertificateoptions-callback",
      "name": "importCertificate",
      "signature": "(options, callback)",
      "description": "Imports the certificate in pkcs12 format into the platform certificate store. `callback` is called with the `result` of import operation, a value of `0` indicates success while any other value indicates failure according to Chromium net_error_list.",
      "parameters": [
        {
          "name": "options",
          "description": "",
          "required": true,
          "collection": false,
          "type": "Object",
          "properties": [
            {
              "name": "certificate",
              "description": "Path for the pkcs12 file.",
              "required": true,
              "additionalTags": [],
              "collection": false,
              "type": "String",
              "possibleValues": null
            },
            {
              "name": "password",
              "description": "Passphrase for the certificate.",
              "required": true,
              "additionalTags": [],
              "collection": false,
              "type": "String",
              "possibleValues": null
            }
          ]
        },
        {
          "name": "callback",
          "description": "",
          "required": true,
          "collection": false,
          "type": "Function",
          "parameters": [
            {
              "name": "result",
              "description": "Result of import.",
              "required": true,
              "collection": false,
              "type": "Integer"
            }
          ],
          "returns": null
        }
      ],
      "returns": null,
      "additionalTags": [
        "os_linux"
      ],
      "apiType": "methods",
      "fullSignature": "app.importCertificate(options, callback)",
      "tldr": "Imports the certificate in pkcs12 format into the platform certificate store.",
      "slug": "appimportcertificateoptions-callback",
      "url": "https://electronjs.org/docs/api/app#appimportcertificateoptions-callback",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:importCertificate",
        "api:appimportcertificateoptions-callback",
        "api:app.importCertificate(options, callback)",
        "doc:importCertificate",
        "doc:appimportcertificateoptions-callback",
        "doc:app.importCertificate(options, callback)"
      ]
    },
    {
      "objectID": "api-app#appdisablehardwareacceleration",
      "name": "disableHardwareAcceleration",
      "signature": "()",
      "description": "Disables hardware acceleration for current app.\n\nThis method can only be called before app is ready.",
      "parameters": [],
      "returns": null,
      "additionalTags": [],
      "apiType": "methods",
      "fullSignature": "app.disableHardwareAcceleration()",
      "tldr": "Disables hardware acceleration for current app.\n\nThis method can only be called before app is ready.",
      "slug": "appdisablehardwareacceleration",
      "url": "https://electronjs.org/docs/api/app#appdisablehardwareacceleration",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:disableHardwareAcceleration",
        "api:appdisablehardwareacceleration",
        "api:app.disableHardwareAcceleration()",
        "doc:disableHardwareAcceleration",
        "doc:appdisablehardwareacceleration",
        "doc:app.disableHardwareAcceleration()"
      ]
    },
    {
      "objectID": "api-app#appdisabledomainblockingfor3dapis",
      "name": "disableDomainBlockingFor3DAPIs",
      "signature": "()",
      "description": "By default, Chromium disables 3D APIs (e.g. WebGL) until restart on a per domain basis if the GPU processes crashes too frequently. This function disables that behaviour.\n\nThis method can only be called before app is ready.",
      "parameters": [],
      "returns": null,
      "additionalTags": [],
      "apiType": "methods",
      "fullSignature": "app.disableDomainBlockingFor3DAPIs()",
      "tldr": "By default, Chromium disables 3D APIs (e.g.",
      "slug": "appdisabledomainblockingfor3dapis",
      "url": "https://electronjs.org/docs/api/app#appdisabledomainblockingfor3dapis",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:disableDomainBlockingFor3DAPIs",
        "api:appdisabledomainblockingfor3dapis",
        "api:app.disableDomainBlockingFor3DAPIs()",
        "doc:disableDomainBlockingFor3DAPIs",
        "doc:appdisabledomainblockingfor3dapis",
        "doc:app.disableDomainBlockingFor3DAPIs()"
      ]
    },
    {
      "objectID": "api-app#appgetappmetrics",
      "name": "getAppMetrics",
      "signature": "()",
      "description": "Array of `ProcessMetric` objects that correspond to memory and CPU usage statistics of all the processes associated with the app.",
      "parameters": [],
      "returns": {
        "collection": true,
        "type": "ProcessMetric"
      },
      "additionalTags": [],
      "apiType": "methods",
      "fullSignature": "app.getAppMetrics()",
      "tldr": "Array of `ProcessMetric` objects that correspond to memory and CPU usage statistics of all the processes associated with the app.",
      "slug": "appgetappmetrics",
      "url": "https://electronjs.org/docs/api/app#appgetappmetrics",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:getAppMetrics",
        "api:appgetappmetrics",
        "api:app.getAppMetrics()",
        "doc:getAppMetrics",
        "doc:appgetappmetrics",
        "doc:app.getAppMetrics()"
      ]
    },
    {
      "objectID": "api-app#appgetgpufeaturestatus",
      "name": "getGPUFeatureStatus",
      "signature": "()",
      "description": "The Graphics Feature Status from `chrome://gpu/`.\n\n**Note:** This information is only usable after the `gpu-info-update` event is emitted.",
      "parameters": [],
      "returns": {
        "collection": false,
        "type": "GPUFeatureStatus"
      },
      "additionalTags": [],
      "apiType": "methods",
      "fullSignature": "app.getGPUFeatureStatus()",
      "tldr": "The Graphics Feature Status from `chrome://gpu/`.\n\n**Note:** This information is only usable after the `gpu-info-update` event is emitted.",
      "slug": "appgetgpufeaturestatus",
      "url": "https://electronjs.org/docs/api/app#appgetgpufeaturestatus",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:getGPUFeatureStatus",
        "api:appgetgpufeaturestatus",
        "api:app.getGPUFeatureStatus()",
        "doc:getGPUFeatureStatus",
        "doc:appgetgpufeaturestatus",
        "doc:app.getGPUFeatureStatus()"
      ]
    },
    {
      "objectID": "api-app#appgetgpuinfoinfotype",
      "name": "getGPUInfo",
      "signature": "(infoType)",
      "description": "For `infoType` equal to `complete`: Promise is fulfilled with `Object` containing all the GPU Information as in chromium's GPUInfo object. This includes the version and driver information that's shown on `chrome://gpu` page.\n\nFor `infoType` equal to `basic`: Promise is fulfilled with `Object` containing fewer attributes than when requested with `complete`. Here's an example of basic response:\n\nUsing `basic` should be preferred if only basic information like `vendorId` or `driverId` is needed.",
      "parameters": [
        {
          "name": "infoType",
          "description": "Can be `basic` or `complete`.",
          "required": true,
          "collection": false,
          "type": "String",
          "possibleValues": [
            {
              "value": "basic",
              "description": ""
            },
            {
              "value": "complete",
              "description": ""
            }
          ]
        }
      ],
      "returns": {
        "collection": false,
        "type": "Promise",
        "innerTypes": [
          {
            "collection": false,
            "type": "unknown"
          }
        ]
      },
      "additionalTags": [],
      "apiType": "methods",
      "fullSignature": "app.getGPUInfo(infoType)",
      "tldr": "For `infoType` equal to `complete`: Promise is fulfilled with `Object` containing all the GPU Information as in chromium's GPUInfo object.",
      "slug": "appgetgpuinfoinfotype",
      "url": "https://electronjs.org/docs/api/app#appgetgpuinfoinfotype",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:getGPUInfo",
        "api:appgetgpuinfoinfotype",
        "api:app.getGPUInfo(infoType)",
        "doc:getGPUInfo",
        "doc:appgetgpuinfoinfotype",
        "doc:app.getGPUInfo(infoType)"
      ]
    },
    {
      "objectID": "api-app#appsetbadgecountcount",
      "name": "setBadgeCount",
      "signature": "(count)",
      "description": "Whether the call succeeded.\n\nSets the counter badge for current app. Setting the count to `0` will hide the badge.\n\nOn macOS, it shows on the dock icon. On Linux, it only works for Unity launcher.\n\n**Note:** Unity launcher requires the existence of a `.desktop` file to work, for more information please read Desktop Environment Integration.\n\n**Deprecated**",
      "parameters": [
        {
          "name": "count",
          "description": "",
          "required": true,
          "collection": false,
          "type": "Integer"
        }
      ],
      "returns": {
        "collection": false,
        "type": "Boolean"
      },
      "additionalTags": [
        "os_linux",
        "os_macos"
      ],
      "apiType": "methods",
      "fullSignature": "app.setBadgeCount(count)",
      "tldr": "Whether the call succeeded.\n\nSets the counter badge for current app.",
      "slug": "appsetbadgecountcount",
      "url": "https://electronjs.org/docs/api/app#appsetbadgecountcount",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:setBadgeCount",
        "api:appsetbadgecountcount",
        "api:app.setBadgeCount(count)",
        "doc:setBadgeCount",
        "doc:appsetbadgecountcount",
        "doc:app.setBadgeCount(count)"
      ]
    },
    {
      "objectID": "api-app#appgetbadgecount",
      "name": "getBadgeCount",
      "signature": "()",
      "description": "The current value displayed in the counter badge.\n\n**Deprecated**",
      "parameters": [],
      "returns": {
        "collection": false,
        "type": "Integer"
      },
      "additionalTags": [
        "os_linux",
        "os_macos"
      ],
      "apiType": "methods",
      "fullSignature": "app.getBadgeCount()",
      "tldr": "The current value displayed in the counter badge.\n\n**Deprecated**.",
      "slug": "appgetbadgecount",
      "url": "https://electronjs.org/docs/api/app#appgetbadgecount",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:getBadgeCount",
        "api:appgetbadgecount",
        "api:app.getBadgeCount()",
        "doc:getBadgeCount",
        "doc:appgetbadgecount",
        "doc:app.getBadgeCount()"
      ]
    },
    {
      "objectID": "api-app#appisunityrunning",
      "name": "isUnityRunning",
      "signature": "()",
      "description": "Whether the current desktop environment is Unity launcher.",
      "parameters": [],
      "returns": {
        "collection": false,
        "type": "Boolean"
      },
      "additionalTags": [
        "os_linux"
      ],
      "apiType": "methods",
      "fullSignature": "app.isUnityRunning()",
      "tldr": "Whether the current desktop environment is Unity launcher.",
      "slug": "appisunityrunning",
      "url": "https://electronjs.org/docs/api/app#appisunityrunning",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:isUnityRunning",
        "api:appisunityrunning",
        "api:app.isUnityRunning()",
        "doc:isUnityRunning",
        "doc:appisunityrunning",
        "doc:app.isUnityRunning()"
      ]
    },
    {
      "objectID": "api-app#appgetloginitemsettingsoptions",
      "name": "getLoginItemSettings",
      "signature": "([options])",
      "description": "If you provided `path` and `args` options to `app.setLoginItemSettings`, then you need to pass the same arguments here for `openAtLogin` to be set correctly.\n\n\n* `openAtLogin` Boolean - `true` if the app is set to open at login.\n* `openAsHidden` Boolean _macOS_ - `true` if the app is set to open as hidden at login. This setting is not available on MAS builds.\n* `wasOpenedAtLogin` Boolean _macOS_ - `true` if the app was opened at login automatically. This setting is not available on MAS builds.\n* `wasOpenedAsHidden` Boolean _macOS_ - `true` if the app was opened as a hidden login item. This indicates that the app should not open any windows at startup. This setting is not available on MAS builds.\n* `restoreState` Boolean _macOS_ - `true` if the app was opened as a login item that should restore the state from the previous session. This indicates that the app should restore the windows that were open the last time the app was closed. This setting is not available on MAS builds.",
      "parameters": [
        {
          "name": "options",
          "description": "",
          "required": false,
          "collection": false,
          "type": "Object",
          "properties": [
            {
              "name": "path",
              "description": "The executable path to compare against. Defaults to `process.execPath`.",
              "required": false,
              "additionalTags": [
                "os_windows"
              ],
              "collection": false,
              "type": "String",
              "possibleValues": null
            },
            {
              "name": "args",
              "description": "The command-line arguments to compare against. Defaults to an empty array.",
              "required": false,
              "additionalTags": [
                "os_windows"
              ],
              "collection": true,
              "type": "String",
              "possibleValues": null
            }
          ]
        }
      ],
      "returns": {
        "collection": false,
        "type": "Object",
        "properties": [
          {
            "name": "openAtLogin",
            "description": "`true` if the app is set to open at login.",
            "required": true,
            "additionalTags": [],
            "collection": false,
            "type": "Boolean"
          },
          {
            "name": "openAsHidden",
            "description": "`true` if the app is set to open as hidden at login. This setting is not available on MAS builds.",
            "required": true,
            "additionalTags": [
              "os_macos"
            ],
            "collection": false,
            "type": "Boolean"
          },
          {
            "name": "wasOpenedAtLogin",
            "description": "`true` if the app was opened at login automatically. This setting is not available on MAS builds.",
            "required": true,
            "additionalTags": [
              "os_macos"
            ],
            "collection": false,
            "type": "Boolean"
          },
          {
            "name": "wasOpenedAsHidden",
            "description": "`true` if the app was opened as a hidden login item. This indicates that the app should not open any windows at startup. This setting is not available on MAS builds.",
            "required": true,
            "additionalTags": [
              "os_macos"
            ],
            "collection": false,
            "type": "Boolean"
          },
          {
            "name": "restoreState",
            "description": "`true` if the app was opened as a login item that should restore the state from the previous session. This indicates that the app should restore the windows that were open the last time the app was closed. This setting is not available on MAS builds.",
            "required": true,
            "additionalTags": [
              "os_macos"
            ],
            "collection": false,
            "type": "Boolean"
          }
        ]
      },
      "additionalTags": [
        "os_macos",
        "os_windows"
      ],
      "apiType": "methods",
      "fullSignature": "app.getLoginItemSettings([options])",
      "tldr": "If you provided `path` and `args` options to `app.setLoginItemSettings`, then you need to pass the same arguments here for `openAtLogin` to be set correctly.\n\n\n* `openAtLogin` Boolean - `true` if the app is set to open at login.\n* `openAsHidden` Boolean _macOS_ - `true` if the app is set to open as hidden at login.",
      "slug": "appgetloginitemsettingsoptions",
      "url": "https://electronjs.org/docs/api/app#appgetloginitemsettingsoptions",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:getLoginItemSettings",
        "api:appgetloginitemsettingsoptions",
        "api:app.getLoginItemSettings([options])",
        "doc:getLoginItemSettings",
        "doc:appgetloginitemsettingsoptions",
        "doc:app.getLoginItemSettings([options])"
      ]
    },
    {
      "objectID": "api-app#appsetloginitemsettingssettings",
      "name": "setLoginItemSettings",
      "signature": "(settings)",
      "description": "Set the app's login item settings.\n\nTo work with Electron's `autoUpdater` on Windows, which uses Squirrel, you'll want to set the launch path to Update.exe, and pass arguments that specify your application name. For example:",
      "parameters": [
        {
          "name": "settings",
          "description": "",
          "required": true,
          "collection": false,
          "type": "Object",
          "properties": [
            {
              "name": "openAtLogin",
              "description": "`true` to open the app at login, `false` to remove the app as a login item. Defaults to `false`.",
              "required": false,
              "additionalTags": [],
              "collection": false,
              "type": "Boolean"
            },
            {
              "name": "openAsHidden",
              "description": "`true` to open the app as hidden. Defaults to `false`. The user can edit this setting from the System Preferences so `app.getLoginItemSettings().wasOpenedAsHidden` should be checked when the app is opened to know the current value. This setting is not available on MAS builds.",
              "required": false,
              "additionalTags": [
                "os_macos"
              ],
              "collection": false,
              "type": "Boolean"
            },
            {
              "name": "path",
              "description": "The executable to launch at login. Defaults to `process.execPath`.",
              "required": false,
              "additionalTags": [
                "os_windows"
              ],
              "collection": false,
              "type": "String",
              "possibleValues": null
            },
            {
              "name": "args",
              "description": "The command-line arguments to pass to the executable. Defaults to an empty array. Take care to wrap paths in quotes.",
              "required": false,
              "additionalTags": [
                "os_windows"
              ],
              "collection": true,
              "type": "String",
              "possibleValues": null
            }
          ]
        }
      ],
      "returns": null,
      "additionalTags": [
        "os_macos",
        "os_windows"
      ],
      "apiType": "methods",
      "fullSignature": "app.setLoginItemSettings(settings)",
      "tldr": "Set the app's login item settings.\n\nTo work with Electron's `autoUpdater` on Windows, which uses Squirrel, you'll want to set the launch path to Update.exe, and pass arguments that specify your application name.",
      "slug": "appsetloginitemsettingssettings",
      "url": "https://electronjs.org/docs/api/app#appsetloginitemsettingssettings",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:setLoginItemSettings",
        "api:appsetloginitemsettingssettings",
        "api:app.setLoginItemSettings(settings)",
        "doc:setLoginItemSettings",
        "doc:appsetloginitemsettingssettings",
        "doc:app.setLoginItemSettings(settings)"
      ]
    },
    {
      "objectID": "api-app#appisaccessibilitysupportenabled",
      "name": "isAccessibilitySupportEnabled",
      "signature": "()",
      "description": "`true` if Chrome's accessibility support is enabled, `false` otherwise. This API will return `true` if the use of assistive technologies, such as screen readers, has been detected. See https://www.chromium.org/developers/design-documents/accessibility for more details.\n\n**Deprecated**",
      "parameters": [],
      "returns": {
        "collection": false,
        "type": "Boolean"
      },
      "additionalTags": [
        "os_macos",
        "os_windows"
      ],
      "apiType": "methods",
      "fullSignature": "app.isAccessibilitySupportEnabled()",
      "tldr": "`true` if Chrome's accessibility support is enabled, `false` otherwise.",
      "slug": "appisaccessibilitysupportenabled",
      "url": "https://electronjs.org/docs/api/app#appisaccessibilitysupportenabled",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:isAccessibilitySupportEnabled",
        "api:appisaccessibilitysupportenabled",
        "api:app.isAccessibilitySupportEnabled()",
        "doc:isAccessibilitySupportEnabled",
        "doc:appisaccessibilitysupportenabled",
        "doc:app.isAccessibilitySupportEnabled()"
      ]
    },
    {
      "objectID": "api-app#appsetaccessibilitysupportenabledenabled",
      "name": "setAccessibilitySupportEnabled",
      "signature": "(enabled)",
      "description": "Manually enables Chrome's accessibility support, allowing to expose accessibility switch to users in application settings. See Chromium's accessibility docs for more details. Disabled by default.\n\nThis API must be called after the `ready` event is emitted.\n\n**Note:** Rendering accessibility tree can significantly affect the performance of your app. It should not be enabled by default.\n\n**Deprecated**",
      "parameters": [
        {
          "name": "enabled",
          "description": "Enable or disable accessibility tree rendering",
          "required": true,
          "collection": false,
          "type": "Boolean"
        }
      ],
      "returns": null,
      "additionalTags": [
        "os_macos",
        "os_windows"
      ],
      "apiType": "methods",
      "fullSignature": "app.setAccessibilitySupportEnabled(enabled)",
      "tldr": "Manually enables Chrome's accessibility support, allowing to expose accessibility switch to users in application settings.",
      "slug": "appsetaccessibilitysupportenabledenabled",
      "url": "https://electronjs.org/docs/api/app#appsetaccessibilitysupportenabledenabled",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:setAccessibilitySupportEnabled",
        "api:appsetaccessibilitysupportenabledenabled",
        "api:app.setAccessibilitySupportEnabled(enabled)",
        "doc:setAccessibilitySupportEnabled",
        "doc:appsetaccessibilitysupportenabledenabled",
        "doc:app.setAccessibilitySupportEnabled(enabled)"
      ]
    },
    {
      "objectID": "api-app#appshowaboutpanel",
      "name": "showAboutPanel",
      "signature": "()",
      "description": "Show the app's about panel options. These options can be overridden with `app.setAboutPanelOptions(options)`.",
      "parameters": [],
      "returns": null,
      "additionalTags": [
        "os_macos",
        "os_linux"
      ],
      "apiType": "methods",
      "fullSignature": "app.showAboutPanel()",
      "tldr": "Show the app's about panel options.",
      "slug": "appshowaboutpanel",
      "url": "https://electronjs.org/docs/api/app#appshowaboutpanel",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:showAboutPanel",
        "api:appshowaboutpanel",
        "api:app.showAboutPanel()",
        "doc:showAboutPanel",
        "doc:appshowaboutpanel",
        "doc:app.showAboutPanel()"
      ]
    },
    {
      "objectID": "api-app#appsetaboutpaneloptionsoptions",
      "name": "setAboutPanelOptions",
      "signature": "(options)",
      "description": "Set the about panel options. This will override the values defined in the app's `.plist` file on MacOS. See the Apple docs for more details. On Linux, values must be set in order to be shown; there are no defaults.",
      "parameters": [
        {
          "name": "options",
          "description": "",
          "required": true,
          "collection": false,
          "type": "Object",
          "properties": [
            {
              "name": "applicationName",
              "description": "The app's name.",
              "required": false,
              "additionalTags": [],
              "collection": false,
              "type": "String",
              "possibleValues": null
            },
            {
              "name": "applicationVersion",
              "description": "The app's version.",
              "required": false,
              "additionalTags": [],
              "collection": false,
              "type": "String",
              "possibleValues": null
            },
            {
              "name": "copyright",
              "description": "Copyright information.",
              "required": false,
              "additionalTags": [],
              "collection": false,
              "type": "String",
              "possibleValues": null
            },
            {
              "name": "version",
              "description": "The app's build version number.",
              "required": false,
              "additionalTags": [
                "os_macos"
              ],
              "collection": false,
              "type": "String",
              "possibleValues": null
            },
            {
              "name": "credits",
              "description": "Credit information.",
              "required": false,
              "additionalTags": [
                "os_macos"
              ],
              "collection": false,
              "type": "String",
              "possibleValues": null
            },
            {
              "name": "authors",
              "description": "List of app authors.",
              "required": false,
              "additionalTags": [
                "os_linux"
              ],
              "collection": true,
              "type": "String",
              "possibleValues": null
            },
            {
              "name": "website",
              "description": "The app's website.",
              "required": false,
              "additionalTags": [
                "os_linux"
              ],
              "collection": false,
              "type": "String",
              "possibleValues": null
            },
            {
              "name": "iconPath",
              "description": "Path to the app's icon. Will be shown as 64x64 pixels while retaining aspect ratio.",
              "required": false,
              "additionalTags": [
                "os_linux"
              ],
              "collection": false,
              "type": "String",
              "possibleValues": null
            }
          ]
        }
      ],
      "returns": null,
      "additionalTags": [
        "os_macos",
        "os_linux"
      ],
      "apiType": "methods",
      "fullSignature": "app.setAboutPanelOptions(options)",
      "tldr": "Set the about panel options.",
      "slug": "appsetaboutpaneloptionsoptions",
      "url": "https://electronjs.org/docs/api/app#appsetaboutpaneloptionsoptions",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:setAboutPanelOptions",
        "api:appsetaboutpaneloptionsoptions",
        "api:app.setAboutPanelOptions(options)",
        "doc:setAboutPanelOptions",
        "doc:appsetaboutpaneloptionsoptions",
        "doc:app.setAboutPanelOptions(options)"
      ]
    },
    {
      "objectID": "api-app#appisemojipanelsupported",
      "name": "isEmojiPanelSupported",
      "signature": "()",
      "description": "whether or not the current OS version allows for native emoji pickers.",
      "parameters": [],
      "returns": {
        "collection": false,
        "type": "Boolean"
      },
      "additionalTags": [],
      "apiType": "methods",
      "fullSignature": "app.isEmojiPanelSupported()",
      "tldr": "whether or not the current OS version allows for native emoji pickers.",
      "slug": "appisemojipanelsupported",
      "url": "https://electronjs.org/docs/api/app#appisemojipanelsupported",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:isEmojiPanelSupported",
        "api:appisemojipanelsupported",
        "api:app.isEmojiPanelSupported()",
        "doc:isEmojiPanelSupported",
        "doc:appisemojipanelsupported",
        "doc:app.isEmojiPanelSupported()"
      ]
    },
    {
      "objectID": "api-app#appshowemojipanel",
      "name": "showEmojiPanel",
      "signature": "()",
      "description": "Show the platform's native emoji picker.",
      "parameters": [],
      "returns": null,
      "additionalTags": [
        "os_macos",
        "os_windows"
      ],
      "apiType": "methods",
      "fullSignature": "app.showEmojiPanel()",
      "tldr": "Show the platform's native emoji picker.",
      "slug": "appshowemojipanel",
      "url": "https://electronjs.org/docs/api/app#appshowemojipanel",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:showEmojiPanel",
        "api:appshowemojipanel",
        "api:app.showEmojiPanel()",
        "doc:showEmojiPanel",
        "doc:appshowemojipanel",
        "doc:app.showEmojiPanel()"
      ]
    },
    {
      "objectID": "api-app#appstartaccessingsecurityscopedresourcebookmarkdata",
      "name": "startAccessingSecurityScopedResource",
      "signature": "(bookmarkData)",
      "description": "This function **must** be called once you have finished accessing the security scoped file. If you do not remember to stop accessing the bookmark, kernel resources will be leaked and your app will lose its ability to reach outside the sandbox completely, until your app is restarted.\n\nStart accessing a security scoped resource. With this method Electron applications that are packaged for the Mac App Store may reach outside their sandbox to access files chosen by the user. See Apple's documentation for a description of how this system works.",
      "parameters": [
        {
          "name": "bookmarkData",
          "description": "The base64 encoded security scoped bookmark data returned by the `dialog.showOpenDialog` or `dialog.showSaveDialog` methods.",
          "required": true,
          "collection": false,
          "type": "String",
          "possibleValues": null
        }
      ],
      "returns": {
        "collection": false,
        "type": "Function",
        "parameters": [],
        "returns": null
      },
      "additionalTags": [
        "os_mas"
      ],
      "apiType": "methods",
      "fullSignature": "app.startAccessingSecurityScopedResource(bookmarkData)",
      "tldr": "This function **must** be called once you have finished accessing the security scoped file.",
      "slug": "appstartaccessingsecurityscopedresourcebookmarkdata",
      "url": "https://electronjs.org/docs/api/app#appstartaccessingsecurityscopedresourcebookmarkdata",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:startAccessingSecurityScopedResource",
        "api:appstartaccessingsecurityscopedresourcebookmarkdata",
        "api:app.startAccessingSecurityScopedResource(bookmarkData)",
        "doc:startAccessingSecurityScopedResource",
        "doc:appstartaccessingsecurityscopedresourcebookmarkdata",
        "doc:app.startAccessingSecurityScopedResource(bookmarkData)"
      ]
    },
    {
      "objectID": "api-app#appenablesandbox",
      "name": "enableSandbox",
      "signature": "()",
      "description": "Enables full sandbox mode on the app.\n\nThis method can only be called before app is ready.",
      "parameters": [],
      "returns": null,
      "additionalTags": [
        "stability_experimental"
      ],
      "apiType": "methods",
      "fullSignature": "app.enableSandbox()",
      "tldr": "Enables full sandbox mode on the app.\n\nThis method can only be called before app is ready.",
      "slug": "appenablesandbox",
      "url": "https://electronjs.org/docs/api/app#appenablesandbox",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:enableSandbox",
        "api:appenablesandbox",
        "api:app.enableSandbox()",
        "doc:enableSandbox",
        "doc:appenablesandbox",
        "doc:app.enableSandbox()"
      ]
    },
    {
      "objectID": "api-app#appisinapplicationsfolder",
      "name": "isInApplicationsFolder",
      "signature": "()",
      "description": "Whether the application is currently running from the systems Application folder. Use in combination with `app.moveToApplicationsFolder()`",
      "parameters": [],
      "returns": {
        "collection": false,
        "type": "Boolean"
      },
      "additionalTags": [
        "os_macos"
      ],
      "apiType": "methods",
      "fullSignature": "app.isInApplicationsFolder()",
      "tldr": "Whether the application is currently running from the systems Application folder.",
      "slug": "appisinapplicationsfolder",
      "url": "https://electronjs.org/docs/api/app#appisinapplicationsfolder",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:isInApplicationsFolder",
        "api:appisinapplicationsfolder",
        "api:app.isInApplicationsFolder()",
        "doc:isInApplicationsFolder",
        "doc:appisinapplicationsfolder",
        "doc:app.isInApplicationsFolder()"
      ]
    },
    {
      "objectID": "api-app#appmovetoapplicationsfolderoptions",
      "name": "moveToApplicationsFolder",
      "signature": "([options])",
      "description": "Whether the move was successful. Please note that if the move is successful, your application will quit and relaunch.\n\nNo confirmation dialog will be presented by default. If you wish to allow the user to confirm the operation, you may do so using the `dialog` API.\n\n**NOTE:** This method throws errors if anything other than the user causes the move to fail. For instance if the user cancels the authorization dialog, this method returns false. If we fail to perform the copy, then this method will throw an error. The message in the error should be informative and tell you exactly what went wrong.\n\nBy default, if an app of the same name as the one being moved exists in the Applications directory and is _not_ running, the existing app will be trashed and the active app moved into its place. If it _is_ running, the pre-existing running app will assume focus and the the previously active app will quit itself. This behavior can be changed by providing the optional conflict handler, where the boolean returned by the handler determines whether or not the move conflict is resolved with default behavior.  i.e. returning `false` will ensure no further action is taken, returning `true` will result in the default behavior and the method continuing.\n\nFor example:\n\nWould mean that if an app already exists in the user directory, if the user chooses to 'Continue Move' then the function would continue with its default behavior and the existing app will be trashed and the active app moved into its place.",
      "parameters": [
        {
          "name": "options",
          "description": "",
          "required": false,
          "collection": false,
          "type": "Object",
          "properties": [
            {
              "name": "conflictHandler",
              "description": "A handler for potential conflict in move failure.",
              "required": false,
              "additionalTags": [],
              "collection": false,
              "type": "Function",
              "parameters": [
                {
                  "name": "conflictType",
                  "description": "The type of move conflict encountered by the handler; can be `exists` or `existsAndRunning`, where `exists` means that an app of the same name is present in the Applications directory and `existsAndRunning` means both that it exists and that it's presently running.",
                  "required": true,
                  "collection": false,
                  "type": "String",
                  "possibleValues": [
                    {
                      "value": "exists",
                      "description": ""
                    },
                    {
                      "value": "existsAndRunning",
                      "description": ""
                    }
                  ]
                }
              ],
              "returns": {
                "collection": false,
                "type": "Boolean"
              }
            }
          ]
        }
      ],
      "returns": {
        "collection": false,
        "type": "Boolean"
      },
      "additionalTags": [
        "os_macos"
      ],
      "apiType": "methods",
      "fullSignature": "app.moveToApplicationsFolder([options])",
      "tldr": "Whether the move was successful.",
      "slug": "appmovetoapplicationsfolderoptions",
      "url": "https://electronjs.org/docs/api/app#appmovetoapplicationsfolderoptions",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:moveToApplicationsFolder",
        "api:appmovetoapplicationsfolderoptions",
        "api:app.moveToApplicationsFolder([options])",
        "doc:moveToApplicationsFolder",
        "doc:appmovetoapplicationsfolderoptions",
        "doc:app.moveToApplicationsFolder([options])"
      ]
    },
    {
      "objectID": "api-app#event-will-finish-launching",
      "name": "will-finish-launching",
      "description": "Emitted when the application has finished basic startup. On Windows and Linux, the `will-finish-launching` event is the same as the `ready` event; on macOS, this event represents the `applicationWillFinishLaunching` notification of `NSApplication`. You would usually set up listeners for the `open-file` and `open-url` events here, and start the crash reporter and auto updater.\n\nIn most cases, you should do everything in the `ready` event handler.",
      "parameters": [],
      "additionalTags": [],
      "apiType": "event",
      "fullSignature": "app.on('will-finish-launching')",
      "url": "https://electronjs.org/docs/api/app#event-will-finish-launching",
      "slug": "apponwill-finish-launching",
      "tldr": "Emitted when the application has finished basic startup.",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:will-finish-launching",
        "api:apponwill-finish-launching",
        "api:app.on('will-finish-launching')",
        "doc:will-finish-launching",
        "doc:apponwill-finish-launching",
        "doc:app.on('will-finish-launching')"
      ]
    },
    {
      "objectID": "api-app#event-ready",
      "name": "ready",
      "description": "Emitted when Electron has finished initializing. On macOS, `launchInfo` holds the `userInfo` of the `NSUserNotification` that was used to open the application, if it was launched from Notification Center. You can call `app.isReady()` to check if this event has already fired.",
      "parameters": [
        {
          "name": "launchInfo",
          "description": "",
          "collection": false,
          "type": "unknown",
          "required": true
        }
      ],
      "additionalTags": [],
      "apiType": "event",
      "fullSignature": "app.on('ready')",
      "url": "https://electronjs.org/docs/api/app#event-ready",
      "slug": "apponready",
      "tldr": "Emitted when Electron has finished initializing.",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:ready",
        "api:apponready",
        "api:app.on('ready')",
        "doc:ready",
        "doc:apponready",
        "doc:app.on('ready')"
      ]
    },
    {
      "objectID": "api-app#event-window-all-closed",
      "name": "window-all-closed",
      "description": "Emitted when all windows have been closed.\n\nIf you do not subscribe to this event and all windows are closed, the default behavior is to quit the app; however, if you subscribe, you control whether the app quits or not. If the user pressed `Cmd + Q`, or the developer called `app.quit()`, Electron will first try to close all the windows and then emit the `will-quit` event, and in this case the `window-all-closed` event would not be emitted.",
      "parameters": [],
      "additionalTags": [],
      "apiType": "event",
      "fullSignature": "app.on('window-all-closed')",
      "url": "https://electronjs.org/docs/api/app#event-window-all-closed",
      "slug": "apponwindow-all-closed",
      "tldr": "Emitted when all windows have been closed.\n\nIf you do not subscribe to this event and all windows are closed, the default behavior is to quit the app; however, if you subscribe, you control whether the app quits or not.",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:window-all-closed",
        "api:apponwindow-all-closed",
        "api:app.on('window-all-closed')",
        "doc:window-all-closed",
        "doc:apponwindow-all-closed",
        "doc:app.on('window-all-closed')"
      ]
    },
    {
      "objectID": "api-app#event-before-quit",
      "name": "before-quit",
      "description": "Emitted before the application starts closing its windows. Calling `event.preventDefault()` will prevent the default behavior, which is terminating the application.\n\n**Note:** If application quit was initiated by `autoUpdater.quitAndInstall()`, then `before-quit` is emitted *after* emitting `close` event on all windows and closing them.\n\n**Note:** On Windows, this event will not be emitted if the app is closed due to a shutdown/restart of the system or a user logout.",
      "parameters": [
        {
          "name": "event",
          "description": "",
          "collection": false,
          "type": "Event",
          "required": true
        }
      ],
      "additionalTags": [],
      "apiType": "event",
      "fullSignature": "app.on('before-quit')",
      "url": "https://electronjs.org/docs/api/app#event-before-quit",
      "slug": "apponbefore-quit",
      "tldr": "Emitted before the application starts closing its windows.",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:before-quit",
        "api:apponbefore-quit",
        "api:app.on('before-quit')",
        "doc:before-quit",
        "doc:apponbefore-quit",
        "doc:app.on('before-quit')"
      ]
    },
    {
      "objectID": "api-app#event-will-quit",
      "name": "will-quit",
      "description": "Emitted when all windows have been closed and the application will quit. Calling `event.preventDefault()` will prevent the default behaviour, which is terminating the application.\n\nSee the description of the `window-all-closed` event for the differences between the `will-quit` and `window-all-closed` events.\n\n**Note:** On Windows, this event will not be emitted if the app is closed due to a shutdown/restart of the system or a user logout.",
      "parameters": [
        {
          "name": "event",
          "description": "",
          "collection": false,
          "type": "Event",
          "required": true
        }
      ],
      "additionalTags": [],
      "apiType": "event",
      "fullSignature": "app.on('will-quit')",
      "url": "https://electronjs.org/docs/api/app#event-will-quit",
      "slug": "apponwill-quit",
      "tldr": "Emitted when all windows have been closed and the application will quit.",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:will-quit",
        "api:apponwill-quit",
        "api:app.on('will-quit')",
        "doc:will-quit",
        "doc:apponwill-quit",
        "doc:app.on('will-quit')"
      ]
    },
    {
      "objectID": "api-app#event-quit",
      "name": "quit",
      "description": "Emitted when the application is quitting.\n\n**Note:** On Windows, this event will not be emitted if the app is closed due to a shutdown/restart of the system or a user logout.",
      "parameters": [
        {
          "name": "event",
          "description": "",
          "collection": false,
          "type": "Event",
          "required": true
        },
        {
          "name": "exitCode",
          "description": "",
          "collection": false,
          "type": "Integer",
          "required": true
        }
      ],
      "additionalTags": [],
      "apiType": "event",
      "fullSignature": "app.on('quit')",
      "url": "https://electronjs.org/docs/api/app#event-quit",
      "slug": "apponquit",
      "tldr": "Emitted when the application is quitting.\n\n**Note:** On Windows, this event will not be emitted if the app is closed due to a shutdown/restart of the system or a user logout.",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:quit",
        "api:apponquit",
        "api:app.on('quit')",
        "doc:quit",
        "doc:apponquit",
        "doc:app.on('quit')"
      ]
    },
    {
      "objectID": "api-app#event-open-file",
      "name": "open-file",
      "description": "Emitted when the user wants to open a file with the application. The `open-file` event is usually emitted when the application is already open and the OS wants to reuse the application to open the file. `open-file` is also emitted when a file is dropped onto the dock and the application is not yet running. Make sure to listen for the `open-file` event very early in your application startup to handle this case (even before the `ready` event is emitted).\n\nYou should call `event.preventDefault()` if you want to handle this event.\n\nOn Windows, you have to parse `process.argv` (in the main process) to get the filepath.",
      "parameters": [
        {
          "name": "event",
          "description": "",
          "collection": false,
          "type": "Event",
          "required": true
        },
        {
          "name": "path",
          "description": "",
          "collection": false,
          "type": "String",
          "possibleValues": null,
          "required": true
        }
      ],
      "additionalTags": [
        "os_macos"
      ],
      "apiType": "event",
      "fullSignature": "app.on('open-file')",
      "url": "https://electronjs.org/docs/api/app#event-open-file",
      "slug": "apponopen-file",
      "tldr": "Emitted when the user wants to open a file with the application.",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:open-file",
        "api:apponopen-file",
        "api:app.on('open-file')",
        "doc:open-file",
        "doc:apponopen-file",
        "doc:app.on('open-file')"
      ]
    },
    {
      "objectID": "api-app#event-open-url",
      "name": "open-url",
      "description": "Emitted when the user wants to open a URL with the application. Your application's `Info.plist` file must define the URL scheme within the `CFBundleURLTypes` key, and set `NSPrincipalClass` to `AtomApplication`.\n\nYou should call `event.preventDefault()` if you want to handle this event.",
      "parameters": [
        {
          "name": "event",
          "description": "",
          "collection": false,
          "type": "Event",
          "required": true
        },
        {
          "name": "url",
          "description": "",
          "collection": false,
          "type": "String",
          "possibleValues": null,
          "required": true
        }
      ],
      "additionalTags": [
        "os_macos"
      ],
      "apiType": "event",
      "fullSignature": "app.on('open-url')",
      "url": "https://electronjs.org/docs/api/app#event-open-url",
      "slug": "apponopen-url",
      "tldr": "Emitted when the user wants to open a URL with the application.",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:open-url",
        "api:apponopen-url",
        "api:app.on('open-url')",
        "doc:open-url",
        "doc:apponopen-url",
        "doc:app.on('open-url')"
      ]
    },
    {
      "objectID": "api-app#event-activate",
      "name": "activate",
      "description": "Emitted when the application is activated. Various actions can trigger this event, such as launching the application for the first time, attempting to re-launch the application when it's already running, or clicking on the application's dock or taskbar icon.",
      "parameters": [
        {
          "name": "event",
          "description": "",
          "collection": false,
          "type": "Event",
          "required": true
        },
        {
          "name": "hasVisibleWindows",
          "description": "",
          "collection": false,
          "type": "Boolean",
          "required": true
        }
      ],
      "additionalTags": [
        "os_macos"
      ],
      "apiType": "event",
      "fullSignature": "app.on('activate')",
      "url": "https://electronjs.org/docs/api/app#event-activate",
      "slug": "apponactivate",
      "tldr": "Emitted when the application is activated.",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:activate",
        "api:apponactivate",
        "api:app.on('activate')",
        "doc:activate",
        "doc:apponactivate",
        "doc:app.on('activate')"
      ]
    },
    {
      "objectID": "api-app#event-continue-activity",
      "name": "continue-activity",
      "description": "Emitted during Handoff when an activity from a different device wants to be resumed. You should call `event.preventDefault()` if you want to handle this event.\n\nA user activity can be continued only in an app that has the same developer Team ID as the activity's source app and that supports the activity's type. Supported activity types are specified in the app's `Info.plist` under the `NSUserActivityTypes` key.",
      "parameters": [
        {
          "name": "event",
          "description": "",
          "collection": false,
          "type": "Event",
          "required": true
        },
        {
          "name": "type",
          "description": "A string identifying the activity. Maps to `NSUserActivity.activityType`.",
          "collection": false,
          "type": "String",
          "possibleValues": null,
          "required": true
        },
        {
          "name": "userInfo",
          "description": "Contains app-specific state stored by the activity on another device.",
          "collection": false,
          "type": "unknown",
          "required": true
        }
      ],
      "additionalTags": [
        "os_macos"
      ],
      "apiType": "event",
      "fullSignature": "app.on('continue-activity')",
      "url": "https://electronjs.org/docs/api/app#event-continue-activity",
      "slug": "apponcontinue-activity",
      "tldr": "Emitted during Handoff when an activity from a different device wants to be resumed.",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:continue-activity",
        "api:apponcontinue-activity",
        "api:app.on('continue-activity')",
        "doc:continue-activity",
        "doc:apponcontinue-activity",
        "doc:app.on('continue-activity')"
      ]
    },
    {
      "objectID": "api-app#event-will-continue-activity",
      "name": "will-continue-activity",
      "description": "Emitted during Handoff before an activity from a different device wants to be resumed. You should call `event.preventDefault()` if you want to handle this event.",
      "parameters": [
        {
          "name": "event",
          "description": "",
          "collection": false,
          "type": "Event",
          "required": true
        },
        {
          "name": "type",
          "description": "A string identifying the activity. Maps to `NSUserActivity.activityType`.",
          "collection": false,
          "type": "String",
          "possibleValues": null,
          "required": true
        }
      ],
      "additionalTags": [
        "os_macos"
      ],
      "apiType": "event",
      "fullSignature": "app.on('will-continue-activity')",
      "url": "https://electronjs.org/docs/api/app#event-will-continue-activity",
      "slug": "apponwill-continue-activity",
      "tldr": "Emitted during Handoff before an activity from a different device wants to be resumed.",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:will-continue-activity",
        "api:apponwill-continue-activity",
        "api:app.on('will-continue-activity')",
        "doc:will-continue-activity",
        "doc:apponwill-continue-activity",
        "doc:app.on('will-continue-activity')"
      ]
    },
    {
      "objectID": "api-app#event-continue-activity-error",
      "name": "continue-activity-error",
      "description": "Emitted during Handoff when an activity from a different device fails to be resumed.",
      "parameters": [
        {
          "name": "event",
          "description": "",
          "collection": false,
          "type": "Event",
          "required": true
        },
        {
          "name": "type",
          "description": "A string identifying the activity. Maps to `NSUserActivity.activityType`.",
          "collection": false,
          "type": "String",
          "possibleValues": null,
          "required": true
        },
        {
          "name": "error",
          "description": "A string with the error's localized description.",
          "collection": false,
          "type": "String",
          "possibleValues": null,
          "required": true
        }
      ],
      "additionalTags": [
        "os_macos"
      ],
      "apiType": "event",
      "fullSignature": "app.on('continue-activity-error')",
      "url": "https://electronjs.org/docs/api/app#event-continue-activity-error",
      "slug": "apponcontinue-activity-error",
      "tldr": "Emitted during Handoff when an activity from a different device fails to be resumed.",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:continue-activity-error",
        "api:apponcontinue-activity-error",
        "api:app.on('continue-activity-error')",
        "doc:continue-activity-error",
        "doc:apponcontinue-activity-error",
        "doc:app.on('continue-activity-error')"
      ]
    },
    {
      "objectID": "api-app#event-activity-was-continued",
      "name": "activity-was-continued",
      "description": "Emitted during Handoff after an activity from this device was successfully resumed on another one.",
      "parameters": [
        {
          "name": "event",
          "description": "",
          "collection": false,
          "type": "Event",
          "required": true
        },
        {
          "name": "type",
          "description": "A string identifying the activity. Maps to `NSUserActivity.activityType`.",
          "collection": false,
          "type": "String",
          "possibleValues": null,
          "required": true
        },
        {
          "name": "userInfo",
          "description": "Contains app-specific state stored by the activity.",
          "collection": false,
          "type": "unknown",
          "required": true
        }
      ],
      "additionalTags": [
        "os_macos"
      ],
      "apiType": "event",
      "fullSignature": "app.on('activity-was-continued')",
      "url": "https://electronjs.org/docs/api/app#event-activity-was-continued",
      "slug": "apponactivity-was-continued",
      "tldr": "Emitted during Handoff after an activity from this device was successfully resumed on another one.",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:activity-was-continued",
        "api:apponactivity-was-continued",
        "api:app.on('activity-was-continued')",
        "doc:activity-was-continued",
        "doc:apponactivity-was-continued",
        "doc:app.on('activity-was-continued')"
      ]
    },
    {
      "objectID": "api-app#event-update-activity-state",
      "name": "update-activity-state",
      "description": "Emitted when Handoff is about to be resumed on another device. If you need to update the state to be transferred, you should call `event.preventDefault()` immediately, construct a new `userInfo` dictionary and call `app.updateCurrentActiviy()` in a timely manner. Otherwise, the operation will fail and `continue-activity-error` will be called.",
      "parameters": [
        {
          "name": "event",
          "description": "",
          "collection": false,
          "type": "Event",
          "required": true
        },
        {
          "name": "type",
          "description": "A string identifying the activity. Maps to `NSUserActivity.activityType`.",
          "collection": false,
          "type": "String",
          "possibleValues": null,
          "required": true
        },
        {
          "name": "userInfo",
          "description": "Contains app-specific state stored by the activity.",
          "collection": false,
          "type": "unknown",
          "required": true
        }
      ],
      "additionalTags": [
        "os_macos"
      ],
      "apiType": "event",
      "fullSignature": "app.on('update-activity-state')",
      "url": "https://electronjs.org/docs/api/app#event-update-activity-state",
      "slug": "apponupdate-activity-state",
      "tldr": "Emitted when Handoff is about to be resumed on another device.",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:update-activity-state",
        "api:apponupdate-activity-state",
        "api:app.on('update-activity-state')",
        "doc:update-activity-state",
        "doc:apponupdate-activity-state",
        "doc:app.on('update-activity-state')"
      ]
    },
    {
      "objectID": "api-app#event-new-window-for-tab",
      "name": "new-window-for-tab",
      "description": "Emitted when the user clicks the native macOS new tab button. The new tab button is only visible if the current `BrowserWindow` has a `tabbingIdentifier`",
      "parameters": [
        {
          "name": "event",
          "description": "",
          "collection": false,
          "type": "Event",
          "required": true
        }
      ],
      "additionalTags": [
        "os_macos"
      ],
      "apiType": "event",
      "fullSignature": "app.on('new-window-for-tab')",
      "url": "https://electronjs.org/docs/api/app#event-new-window-for-tab",
      "slug": "apponnew-window-for-tab",
      "tldr": "Emitted when the user clicks the native macOS new tab button.",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:new-window-for-tab",
        "api:apponnew-window-for-tab",
        "api:app.on('new-window-for-tab')",
        "doc:new-window-for-tab",
        "doc:apponnew-window-for-tab",
        "doc:app.on('new-window-for-tab')"
      ]
    },
    {
      "objectID": "api-app#event-browser-window-blur",
      "name": "browser-window-blur",
      "description": "Emitted when a browserWindow gets blurred.",
      "parameters": [
        {
          "name": "event",
          "description": "",
          "collection": false,
          "type": "Event",
          "required": true
        },
        {
          "name": "window",
          "description": "",
          "collection": false,
          "type": "BrowserWindow",
          "required": true
        }
      ],
      "additionalTags": [],
      "apiType": "event",
      "fullSignature": "app.on('browser-window-blur')",
      "url": "https://electronjs.org/docs/api/app#event-browser-window-blur",
      "slug": "apponbrowser-window-blur",
      "tldr": "Emitted when a browserWindow gets blurred.",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:browser-window-blur",
        "api:apponbrowser-window-blur",
        "api:app.on('browser-window-blur')",
        "doc:browser-window-blur",
        "doc:apponbrowser-window-blur",
        "doc:app.on('browser-window-blur')"
      ]
    },
    {
      "objectID": "api-app#event-browser-window-focus",
      "name": "browser-window-focus",
      "description": "Emitted when a browserWindow gets focused.",
      "parameters": [
        {
          "name": "event",
          "description": "",
          "collection": false,
          "type": "Event",
          "required": true
        },
        {
          "name": "window",
          "description": "",
          "collection": false,
          "type": "BrowserWindow",
          "required": true
        }
      ],
      "additionalTags": [],
      "apiType": "event",
      "fullSignature": "app.on('browser-window-focus')",
      "url": "https://electronjs.org/docs/api/app#event-browser-window-focus",
      "slug": "apponbrowser-window-focus",
      "tldr": "Emitted when a browserWindow gets focused.",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:browser-window-focus",
        "api:apponbrowser-window-focus",
        "api:app.on('browser-window-focus')",
        "doc:browser-window-focus",
        "doc:apponbrowser-window-focus",
        "doc:app.on('browser-window-focus')"
      ]
    },
    {
      "objectID": "api-app#event-browser-window-created",
      "name": "browser-window-created",
      "description": "Emitted when a new browserWindow is created.",
      "parameters": [
        {
          "name": "event",
          "description": "",
          "collection": false,
          "type": "Event",
          "required": true
        },
        {
          "name": "window",
          "description": "",
          "collection": false,
          "type": "BrowserWindow",
          "required": true
        }
      ],
      "additionalTags": [],
      "apiType": "event",
      "fullSignature": "app.on('browser-window-created')",
      "url": "https://electronjs.org/docs/api/app#event-browser-window-created",
      "slug": "apponbrowser-window-created",
      "tldr": "Emitted when a new browserWindow is created.",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:browser-window-created",
        "api:apponbrowser-window-created",
        "api:app.on('browser-window-created')",
        "doc:browser-window-created",
        "doc:apponbrowser-window-created",
        "doc:app.on('browser-window-created')"
      ]
    },
    {
      "objectID": "api-app#event-web-contents-created",
      "name": "web-contents-created",
      "description": "Emitted when a new webContents is created.",
      "parameters": [
        {
          "name": "event",
          "description": "",
          "collection": false,
          "type": "Event",
          "required": true
        },
        {
          "name": "webContents",
          "description": "",
          "collection": false,
          "type": "WebContents",
          "required": true
        }
      ],
      "additionalTags": [],
      "apiType": "event",
      "fullSignature": "app.on('web-contents-created')",
      "url": "https://electronjs.org/docs/api/app#event-web-contents-created",
      "slug": "apponweb-contents-created",
      "tldr": "Emitted when a new webContents is created.",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:web-contents-created",
        "api:apponweb-contents-created",
        "api:app.on('web-contents-created')",
        "doc:web-contents-created",
        "doc:apponweb-contents-created",
        "doc:app.on('web-contents-created')"
      ]
    },
    {
      "objectID": "api-app#event-certificate-error",
      "name": "certificate-error",
      "description": "Emitted when failed to verify the `certificate` for `url`, to trust the certificate you should prevent the default behavior with `event.preventDefault()` and call `callback(true)`.",
      "parameters": [
        {
          "name": "event",
          "description": "",
          "collection": false,
          "type": "Event",
          "required": true
        },
        {
          "name": "webContents",
          "description": "",
          "collection": false,
          "type": "WebContents",
          "required": true
        },
        {
          "name": "url",
          "description": "",
          "collection": false,
          "type": "String",
          "possibleValues": null,
          "required": true
        },
        {
          "name": "error",
          "description": "The error code",
          "collection": false,
          "type": "String",
          "possibleValues": null,
          "required": true
        },
        {
          "name": "certificate",
          "description": "",
          "collection": false,
          "type": "Certificate",
          "required": true
        },
        {
          "name": "callback",
          "description": "",
          "collection": false,
          "type": "Function",
          "parameters": [
            {
              "name": "isTrusted",
              "description": "Whether to consider the certificate as trusted",
              "required": true,
              "collection": false,
              "type": "Boolean"
            }
          ],
          "returns": null,
          "required": true
        }
      ],
      "additionalTags": [],
      "apiType": "event",
      "fullSignature": "app.on('certificate-error')",
      "url": "https://electronjs.org/docs/api/app#event-certificate-error",
      "slug": "apponcertificate-error",
      "tldr": "Emitted when failed to verify the `certificate` for `url`, to trust the certificate you should prevent the default behavior with `event.preventDefault()` and call `callback(true)`.",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:certificate-error",
        "api:apponcertificate-error",
        "api:app.on('certificate-error')",
        "doc:certificate-error",
        "doc:apponcertificate-error",
        "doc:app.on('certificate-error')"
      ]
    },
    {
      "objectID": "api-app#event-select-client-certificate",
      "name": "select-client-certificate",
      "description": "Emitted when a client certificate is requested.\n\nThe `url` corresponds to the navigation entry requesting the client certificate and `callback` can be called with an entry filtered from the list. Using `event.preventDefault()` prevents the application from using the first certificate from the store.",
      "parameters": [
        {
          "name": "event",
          "description": "",
          "collection": false,
          "type": "Event",
          "required": true
        },
        {
          "name": "webContents",
          "description": "",
          "collection": false,
          "type": "WebContents",
          "required": true
        },
        {
          "name": "url",
          "description": "",
          "collection": false,
          "type": "URL",
          "required": true
        },
        {
          "name": "certificateList",
          "description": "",
          "collection": true,
          "type": "Certificate",
          "required": true
        },
        {
          "name": "callback",
          "description": "",
          "collection": false,
          "type": "Function",
          "parameters": [
            {
              "name": "certificate",
              "description": "",
              "required": false,
              "collection": false,
              "type": "Certificate"
            }
          ],
          "returns": null,
          "required": true
        }
      ],
      "additionalTags": [],
      "apiType": "event",
      "fullSignature": "app.on('select-client-certificate')",
      "url": "https://electronjs.org/docs/api/app#event-select-client-certificate",
      "slug": "apponselect-client-certificate",
      "tldr": "Emitted when a client certificate is requested.\n\nThe `url` corresponds to the navigation entry requesting the client certificate and `callback` can be called with an entry filtered from the list.",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:select-client-certificate",
        "api:apponselect-client-certificate",
        "api:app.on('select-client-certificate')",
        "doc:select-client-certificate",
        "doc:apponselect-client-certificate",
        "doc:app.on('select-client-certificate')"
      ]
    },
    {
      "objectID": "api-app#event-login",
      "name": "login",
      "description": "Emitted when `webContents` wants to do basic auth.\n\nThe default behavior is to cancel all authentications. To override this you should prevent the default behavior with `event.preventDefault()` and call `callback(username, password)` with the credentials.",
      "parameters": [
        {
          "name": "event",
          "description": "",
          "collection": false,
          "type": "Event",
          "required": true
        },
        {
          "name": "webContents",
          "description": "",
          "collection": false,
          "type": "WebContents",
          "required": true
        },
        {
          "name": "request",
          "description": "",
          "collection": false,
          "type": "Object",
          "properties": [
            {
              "name": "method",
              "description": "",
              "required": true,
              "additionalTags": [],
              "collection": false,
              "type": "String",
              "possibleValues": null
            },
            {
              "name": "url",
              "description": "",
              "required": true,
              "additionalTags": [],
              "collection": false,
              "type": "URL"
            },
            {
              "name": "referrer",
              "description": "",
              "required": true,
              "additionalTags": [],
              "collection": false,
              "type": "URL"
            }
          ],
          "required": true
        },
        {
          "name": "authInfo",
          "description": "",
          "collection": false,
          "type": "Object",
          "properties": [
            {
              "name": "isProxy",
              "description": "",
              "required": true,
              "additionalTags": [],
              "collection": false,
              "type": "Boolean"
            },
            {
              "name": "scheme",
              "description": "",
              "required": true,
              "additionalTags": [],
              "collection": false,
              "type": "String",
              "possibleValues": null
            },
            {
              "name": "host",
              "description": "",
              "required": true,
              "additionalTags": [],
              "collection": false,
              "type": "String",
              "possibleValues": null
            },
            {
              "name": "port",
              "description": "",
              "required": true,
              "additionalTags": [],
              "collection": false,
              "type": "Integer"
            },
            {
              "name": "realm",
              "description": "",
              "required": true,
              "additionalTags": [],
              "collection": false,
              "type": "String",
              "possibleValues": null
            }
          ],
          "required": true
        },
        {
          "name": "callback",
          "description": "",
          "collection": false,
          "type": "Function",
          "parameters": [
            {
              "name": "username",
              "description": "",
              "required": true,
              "collection": false,
              "type": "String",
              "possibleValues": null
            },
            {
              "name": "password",
              "description": "",
              "required": true,
              "collection": false,
              "type": "String",
              "possibleValues": null
            }
          ],
          "returns": null,
          "required": true
        }
      ],
      "additionalTags": [],
      "apiType": "event",
      "fullSignature": "app.on('login')",
      "url": "https://electronjs.org/docs/api/app#event-login",
      "slug": "apponlogin",
      "tldr": "Emitted when `webContents` wants to do basic auth.\n\nThe default behavior is to cancel all authentications.",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:login",
        "api:apponlogin",
        "api:app.on('login')",
        "doc:login",
        "doc:apponlogin",
        "doc:app.on('login')"
      ]
    },
    {
      "objectID": "api-app#event-gpu-info-update",
      "name": "gpu-info-update",
      "description": "Emitted whenever there is a GPU info update.",
      "parameters": [],
      "additionalTags": [],
      "apiType": "event",
      "fullSignature": "app.on('gpu-info-update')",
      "url": "https://electronjs.org/docs/api/app#event-gpu-info-update",
      "slug": "appongpu-info-update",
      "tldr": "Emitted whenever there is a GPU info update.",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:gpu-info-update",
        "api:appongpu-info-update",
        "api:app.on('gpu-info-update')",
        "doc:gpu-info-update",
        "doc:appongpu-info-update",
        "doc:app.on('gpu-info-update')"
      ]
    },
    {
      "objectID": "api-app#event-gpu-process-crashed",
      "name": "gpu-process-crashed",
      "description": "Emitted when the GPU process crashes or is killed.",
      "parameters": [
        {
          "name": "event",
          "description": "",
          "collection": false,
          "type": "Event",
          "required": true
        },
        {
          "name": "killed",
          "description": "",
          "collection": false,
          "type": "Boolean",
          "required": true
        }
      ],
      "additionalTags": [],
      "apiType": "event",
      "fullSignature": "app.on('gpu-process-crashed')",
      "url": "https://electronjs.org/docs/api/app#event-gpu-process-crashed",
      "slug": "appongpu-process-crashed",
      "tldr": "Emitted when the GPU process crashes or is killed.",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:gpu-process-crashed",
        "api:appongpu-process-crashed",
        "api:app.on('gpu-process-crashed')",
        "doc:gpu-process-crashed",
        "doc:appongpu-process-crashed",
        "doc:app.on('gpu-process-crashed')"
      ]
    },
    {
      "objectID": "api-app#event-renderer-process-crashed",
      "name": "renderer-process-crashed",
      "description": "Emitted when the renderer process of `webContents` crashes or is killed.",
      "parameters": [
        {
          "name": "event",
          "description": "",
          "collection": false,
          "type": "Event",
          "required": true
        },
        {
          "name": "webContents",
          "description": "",
          "collection": false,
          "type": "WebContents",
          "required": true
        },
        {
          "name": "killed",
          "description": "",
          "collection": false,
          "type": "Boolean",
          "required": true
        }
      ],
      "additionalTags": [],
      "apiType": "event",
      "fullSignature": "app.on('renderer-process-crashed')",
      "url": "https://electronjs.org/docs/api/app#event-renderer-process-crashed",
      "slug": "apponrenderer-process-crashed",
      "tldr": "Emitted when the renderer process of `webContents` crashes or is killed.",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:renderer-process-crashed",
        "api:apponrenderer-process-crashed",
        "api:app.on('renderer-process-crashed')",
        "doc:renderer-process-crashed",
        "doc:apponrenderer-process-crashed",
        "doc:app.on('renderer-process-crashed')"
      ]
    },
    {
      "objectID": "api-app#event-accessibility-support-changed",
      "name": "accessibility-support-changed",
      "description": "Emitted when Chrome's accessibility support changes. This event fires when assistive technologies, such as screen readers, are enabled or disabled. See https://www.chromium.org/developers/design-documents/accessibility for more details.",
      "parameters": [
        {
          "name": "event",
          "description": "",
          "collection": false,
          "type": "Event",
          "required": true
        },
        {
          "name": "accessibilitySupportEnabled",
          "description": "`true` when Chrome's accessibility support is enabled, `false` otherwise.",
          "collection": false,
          "type": "Boolean",
          "required": true
        }
      ],
      "additionalTags": [
        "os_macos",
        "os_windows"
      ],
      "apiType": "event",
      "fullSignature": "app.on('accessibility-support-changed')",
      "url": "https://electronjs.org/docs/api/app#event-accessibility-support-changed",
      "slug": "apponaccessibility-support-changed",
      "tldr": "Emitted when Chrome's accessibility support changes.",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:accessibility-support-changed",
        "api:apponaccessibility-support-changed",
        "api:app.on('accessibility-support-changed')",
        "doc:accessibility-support-changed",
        "doc:apponaccessibility-support-changed",
        "doc:app.on('accessibility-support-changed')"
      ]
    },
    {
      "objectID": "api-app#event-session-created",
      "name": "session-created",
      "description": "Emitted when Electron has created a new `session`.",
      "parameters": [
        {
          "name": "session",
          "description": "",
          "collection": false,
          "type": "Session",
          "required": true
        }
      ],
      "additionalTags": [],
      "apiType": "event",
      "fullSignature": "app.on('session-created')",
      "url": "https://electronjs.org/docs/api/app#event-session-created",
      "slug": "apponsession-created",
      "tldr": "Emitted when Electron has created a new `session`.",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:session-created",
        "api:apponsession-created",
        "api:app.on('session-created')",
        "doc:session-created",
        "doc:apponsession-created",
        "doc:app.on('session-created')"
      ]
    },
    {
      "objectID": "api-app#event-second-instance",
      "name": "second-instance",
      "description": "This event will be emitted inside the primary instance of your application when a second instance has been executed and calls `app.requestSingleInstanceLock()`.\n\n`argv` is an Array of the second instance's command line arguments, and `workingDirectory` is its current working directory. Usually applications respond to this by making their primary window focused and non-minimized.\n\nThis event is guaranteed to be emitted after the `ready` event of `app` gets emitted.\n\n**Note:** Extra command line arguments might be added by Chromium, such as `--original-process-start-time`.",
      "parameters": [
        {
          "name": "event",
          "description": "",
          "collection": false,
          "type": "Event",
          "required": true
        },
        {
          "name": "argv",
          "description": "An array of the second instance's command line arguments",
          "collection": true,
          "type": "String",
          "possibleValues": null,
          "required": true
        },
        {
          "name": "workingDirectory",
          "description": "The second instance's working directory",
          "collection": false,
          "type": "String",
          "possibleValues": null,
          "required": true
        }
      ],
      "additionalTags": [],
      "apiType": "event",
      "fullSignature": "app.on('second-instance')",
      "url": "https://electronjs.org/docs/api/app#event-second-instance",
      "slug": "apponsecond-instance",
      "tldr": "This event will be emitted inside the primary instance of your application when a second instance has been executed and calls `app.requestSingleInstanceLock()`.\n\n`argv` is an Array of the second instance's command line arguments, and `workingDirectory` is its current working directory.",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:second-instance",
        "api:apponsecond-instance",
        "api:app.on('second-instance')",
        "doc:second-instance",
        "doc:apponsecond-instance",
        "doc:app.on('second-instance')"
      ]
    },
    {
      "objectID": "api-app#event-desktop-capturer-get-sources",
      "name": "desktop-capturer-get-sources",
      "description": "Emitted when `desktopCapturer.getSources()` is called in the renderer process of `webContents`. Calling `event.preventDefault()` will make it return empty sources.",
      "parameters": [
        {
          "name": "event",
          "description": "",
          "collection": false,
          "type": "Event",
          "required": true
        },
        {
          "name": "webContents",
          "description": "",
          "collection": false,
          "type": "WebContents",
          "required": true
        }
      ],
      "additionalTags": [],
      "apiType": "event",
      "fullSignature": "app.on('desktop-capturer-get-sources')",
      "url": "https://electronjs.org/docs/api/app#event-desktop-capturer-get-sources",
      "slug": "appondesktop-capturer-get-sources",
      "tldr": "Emitted when `desktopCapturer.getSources()` is called in the renderer process of `webContents`.",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:desktop-capturer-get-sources",
        "api:appondesktop-capturer-get-sources",
        "api:app.on('desktop-capturer-get-sources')",
        "doc:desktop-capturer-get-sources",
        "doc:appondesktop-capturer-get-sources",
        "doc:app.on('desktop-capturer-get-sources')"
      ]
    },
    {
      "objectID": "api-app#event-remote-require",
      "name": "remote-require",
      "description": "Emitted when `remote.require()` is called in the renderer process of `webContents`. Calling `event.preventDefault()` will prevent the module from being returned. Custom value can be returned by setting `event.returnValue`.",
      "parameters": [
        {
          "name": "event",
          "description": "",
          "collection": false,
          "type": "Event",
          "required": true
        },
        {
          "name": "webContents",
          "description": "",
          "collection": false,
          "type": "WebContents",
          "required": true
        },
        {
          "name": "moduleName",
          "description": "",
          "collection": false,
          "type": "String",
          "possibleValues": null,
          "required": true
        }
      ],
      "additionalTags": [],
      "apiType": "event",
      "fullSignature": "app.on('remote-require')",
      "url": "https://electronjs.org/docs/api/app#event-remote-require",
      "slug": "apponremote-require",
      "tldr": "Emitted when `remote.require()` is called in the renderer process of `webContents`.",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:remote-require",
        "api:apponremote-require",
        "api:app.on('remote-require')",
        "doc:remote-require",
        "doc:apponremote-require",
        "doc:app.on('remote-require')"
      ]
    },
    {
      "objectID": "api-app#event-remote-get-global",
      "name": "remote-get-global",
      "description": "Emitted when `remote.getGlobal()` is called in the renderer process of `webContents`. Calling `event.preventDefault()` will prevent the global from being returned. Custom value can be returned by setting `event.returnValue`.",
      "parameters": [
        {
          "name": "event",
          "description": "",
          "collection": false,
          "type": "Event",
          "required": true
        },
        {
          "name": "webContents",
          "description": "",
          "collection": false,
          "type": "WebContents",
          "required": true
        },
        {
          "name": "globalName",
          "description": "",
          "collection": false,
          "type": "String",
          "possibleValues": null,
          "required": true
        }
      ],
      "additionalTags": [],
      "apiType": "event",
      "fullSignature": "app.on('remote-get-global')",
      "url": "https://electronjs.org/docs/api/app#event-remote-get-global",
      "slug": "apponremote-get-global",
      "tldr": "Emitted when `remote.getGlobal()` is called in the renderer process of `webContents`.",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:remote-get-global",
        "api:apponremote-get-global",
        "api:app.on('remote-get-global')",
        "doc:remote-get-global",
        "doc:apponremote-get-global",
        "doc:app.on('remote-get-global')"
      ]
    },
    {
      "objectID": "api-app#event-remote-get-builtin",
      "name": "remote-get-builtin",
      "description": "Emitted when `remote.getBuiltin()` is called in the renderer process of `webContents`. Calling `event.preventDefault()` will prevent the module from being returned. Custom value can be returned by setting `event.returnValue`.",
      "parameters": [
        {
          "name": "event",
          "description": "",
          "collection": false,
          "type": "Event",
          "required": true
        },
        {
          "name": "webContents",
          "description": "",
          "collection": false,
          "type": "WebContents",
          "required": true
        },
        {
          "name": "moduleName",
          "description": "",
          "collection": false,
          "type": "String",
          "possibleValues": null,
          "required": true
        }
      ],
      "additionalTags": [],
      "apiType": "event",
      "fullSignature": "app.on('remote-get-builtin')",
      "url": "https://electronjs.org/docs/api/app#event-remote-get-builtin",
      "slug": "apponremote-get-builtin",
      "tldr": "Emitted when `remote.getBuiltin()` is called in the renderer process of `webContents`.",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:remote-get-builtin",
        "api:apponremote-get-builtin",
        "api:app.on('remote-get-builtin')",
        "doc:remote-get-builtin",
        "doc:apponremote-get-builtin",
        "doc:app.on('remote-get-builtin')"
      ]
    },
    {
      "objectID": "api-app#event-remote-get-current-window",
      "name": "remote-get-current-window",
      "description": "Emitted when `remote.getCurrentWindow()` is called in the renderer process of `webContents`. Calling `event.preventDefault()` will prevent the object from being returned. Custom value can be returned by setting `event.returnValue`.",
      "parameters": [
        {
          "name": "event",
          "description": "",
          "collection": false,
          "type": "Event",
          "required": true
        },
        {
          "name": "webContents",
          "description": "",
          "collection": false,
          "type": "WebContents",
          "required": true
        }
      ],
      "additionalTags": [],
      "apiType": "event",
      "fullSignature": "app.on('remote-get-current-window')",
      "url": "https://electronjs.org/docs/api/app#event-remote-get-current-window",
      "slug": "apponremote-get-current-window",
      "tldr": "Emitted when `remote.getCurrentWindow()` is called in the renderer process of `webContents`.",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:remote-get-current-window",
        "api:apponremote-get-current-window",
        "api:app.on('remote-get-current-window')",
        "doc:remote-get-current-window",
        "doc:apponremote-get-current-window",
        "doc:app.on('remote-get-current-window')"
      ]
    },
    {
      "objectID": "api-app#event-remote-get-current-web-contents",
      "name": "remote-get-current-web-contents",
      "description": "Emitted when `remote.getCurrentWebContents()` is called in the renderer process of `webContents`. Calling `event.preventDefault()` will prevent the object from being returned. Custom value can be returned by setting `event.returnValue`.",
      "parameters": [
        {
          "name": "event",
          "description": "",
          "collection": false,
          "type": "Event",
          "required": true
        },
        {
          "name": "webContents",
          "description": "",
          "collection": false,
          "type": "WebContents",
          "required": true
        }
      ],
      "additionalTags": [],
      "apiType": "event",
      "fullSignature": "app.on('remote-get-current-web-contents')",
      "url": "https://electronjs.org/docs/api/app#event-remote-get-current-web-contents",
      "slug": "apponremote-get-current-web-contents",
      "tldr": "Emitted when `remote.getCurrentWebContents()` is called in the renderer process of `webContents`.",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:remote-get-current-web-contents",
        "api:apponremote-get-current-web-contents",
        "api:app.on('remote-get-current-web-contents')",
        "doc:remote-get-current-web-contents",
        "doc:apponremote-get-current-web-contents",
        "doc:app.on('remote-get-current-web-contents')"
      ]
    },
    {
      "objectID": "api-app#event-remote-get-guest-web-contents",
      "name": "remote-get-guest-web-contents",
      "description": "Emitted when `<webview>.getWebContents()` is called in the renderer process of `webContents`. Calling `event.preventDefault()` will prevent the object from being returned. Custom value can be returned by setting `event.returnValue`.",
      "parameters": [
        {
          "name": "event",
          "description": "",
          "collection": false,
          "type": "Event",
          "required": true
        },
        {
          "name": "webContents",
          "description": "",
          "collection": false,
          "type": "WebContents",
          "required": true
        },
        {
          "name": "guestWebContents",
          "description": "",
          "collection": false,
          "type": "WebContents",
          "required": true
        }
      ],
      "additionalTags": [],
      "apiType": "event",
      "fullSignature": "app.on('remote-get-guest-web-contents')",
      "url": "https://electronjs.org/docs/api/app#event-remote-get-guest-web-contents",
      "slug": "apponremote-get-guest-web-contents",
      "tldr": "Emitted when `<webview>.getWebContents()` is called in the renderer process of `webContents`.",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:remote-get-guest-web-contents",
        "api:apponremote-get-guest-web-contents",
        "api:app.on('remote-get-guest-web-contents')",
        "doc:remote-get-guest-web-contents",
        "doc:apponremote-get-guest-web-contents",
        "doc:app.on('remote-get-guest-web-contents')"
      ]
    },
    {
      "objectID": "api-auto-updater#autoupdatersetfeedurloptions",
      "name": "setFeedURL",
      "signature": "(options)",
      "description": "Sets the `url` and initialize the auto updater.",
      "parameters": [
        {
          "name": "options",
          "description": "",
          "required": true,
          "collection": false,
          "type": "Object",
          "properties": [
            {
              "name": "url",
              "description": "",
              "required": true,
              "additionalTags": [],
              "collection": false,
              "type": "String",
              "possibleValues": null
            },
            {
              "name": "headers",
              "description": "HTTP request headers.",
              "required": false,
              "additionalTags": [
                "os_macos"
              ],
              "collection": false,
              "type": "Record",
              "innerTypes": [
                {
                  "collection": false,
                  "type": "String",
                  "possibleValues": null
                },
                {
                  "collection": false,
                  "type": "String",
                  "possibleValues": null
                }
              ]
            },
            {
              "name": "serverType",
              "description": "Either `json` or `default`, see the Squirrel.Mac README for more information.",
              "required": false,
              "additionalTags": [
                "os_macos"
              ],
              "collection": false,
              "type": "String",
              "possibleValues": null
            }
          ]
        }
      ],
      "returns": null,
      "additionalTags": [],
      "apiType": "methods",
      "fullSignature": "autoUpdater.setFeedURL(options)",
      "tldr": "Sets the `url` and initialize the auto updater.",
      "slug": "autoupdatersetfeedurloptions",
      "url": "https://electronjs.org/docs/api/auto-updater#autoupdatersetfeedurloptions",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:setFeedURL",
        "api:autoupdatersetfeedurloptions",
        "api:autoUpdater.setFeedURL(options)",
        "doc:setFeedURL",
        "doc:autoupdatersetfeedurloptions",
        "doc:autoUpdater.setFeedURL(options)"
      ]
    },
    {
      "objectID": "api-auto-updater#autoupdatergetfeedurl",
      "name": "getFeedURL",
      "signature": "()",
      "description": "The current update feed URL.",
      "parameters": [],
      "returns": {
        "collection": false,
        "type": "String",
        "possibleValues": null
      },
      "additionalTags": [],
      "apiType": "methods",
      "fullSignature": "autoUpdater.getFeedURL()",
      "tldr": "The current update feed URL.",
      "slug": "autoupdatergetfeedurl",
      "url": "https://electronjs.org/docs/api/auto-updater#autoupdatergetfeedurl",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:getFeedURL",
        "api:autoupdatergetfeedurl",
        "api:autoUpdater.getFeedURL()",
        "doc:getFeedURL",
        "doc:autoupdatergetfeedurl",
        "doc:autoUpdater.getFeedURL()"
      ]
    },
    {
      "objectID": "api-auto-updater#autoupdatercheckforupdates",
      "name": "checkForUpdates",
      "signature": "()",
      "description": "Asks the server whether there is an update. You must call `setFeedURL` before using this API.",
      "parameters": [],
      "returns": null,
      "additionalTags": [],
      "apiType": "methods",
      "fullSignature": "autoUpdater.checkForUpdates()",
      "tldr": "Asks the server whether there is an update.",
      "slug": "autoupdatercheckforupdates",
      "url": "https://electronjs.org/docs/api/auto-updater#autoupdatercheckforupdates",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:checkForUpdates",
        "api:autoupdatercheckforupdates",
        "api:autoUpdater.checkForUpdates()",
        "doc:checkForUpdates",
        "doc:autoupdatercheckforupdates",
        "doc:autoUpdater.checkForUpdates()"
      ]
    },
    {
      "objectID": "api-auto-updater#autoupdaterquitandinstall",
      "name": "quitAndInstall",
      "signature": "()",
      "description": "Restarts the app and installs the update after it has been downloaded. It should only be called after `update-downloaded` has been emitted.\n\nUnder the hood calling `autoUpdater.quitAndInstall()` will close all application windows first, and automatically call `app.quit()` after all windows have been closed.\n\n**Note:** It is not strictly necessary to call this function to apply an update, as a successfully downloaded update will always be applied the next time the application starts.",
      "parameters": [],
      "returns": null,
      "additionalTags": [],
      "apiType": "methods",
      "fullSignature": "autoUpdater.quitAndInstall()",
      "tldr": "Restarts the app and installs the update after it has been downloaded.",
      "slug": "autoupdaterquitandinstall",
      "url": "https://electronjs.org/docs/api/auto-updater#autoupdaterquitandinstall",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:quitAndInstall",
        "api:autoupdaterquitandinstall",
        "api:autoUpdater.quitAndInstall()",
        "doc:quitAndInstall",
        "doc:autoupdaterquitandinstall",
        "doc:autoUpdater.quitAndInstall()"
      ]
    },
    {
      "objectID": "api-auto-updater#event-error",
      "name": "error",
      "description": "Emitted when there is an error while updating.",
      "parameters": [
        {
          "name": "error",
          "description": "",
          "collection": false,
          "type": "Error",
          "required": true
        }
      ],
      "additionalTags": [],
      "apiType": "event",
      "fullSignature": "autoUpdater.on('error')",
      "url": "https://electronjs.org/docs/api/auto-updater#event-error",
      "slug": "autoupdateronerror",
      "tldr": "Emitted when there is an error while updating.",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:error",
        "api:autoupdateronerror",
        "api:autoUpdater.on('error')",
        "doc:error",
        "doc:autoupdateronerror",
        "doc:autoUpdater.on('error')"
      ]
    },
    {
      "objectID": "api-auto-updater#event-checking-for-update",
      "name": "checking-for-update",
      "description": "Emitted when checking if an update has started.",
      "parameters": [],
      "additionalTags": [],
      "apiType": "event",
      "fullSignature": "autoUpdater.on('checking-for-update')",
      "url": "https://electronjs.org/docs/api/auto-updater#event-checking-for-update",
      "slug": "autoupdateronchecking-for-update",
      "tldr": "Emitted when checking if an update has started.",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:checking-for-update",
        "api:autoupdateronchecking-for-update",
        "api:autoUpdater.on('checking-for-update')",
        "doc:checking-for-update",
        "doc:autoupdateronchecking-for-update",
        "doc:autoUpdater.on('checking-for-update')"
      ]
    },
    {
      "objectID": "api-auto-updater#event-update-available",
      "name": "update-available",
      "description": "Emitted when there is an available update. The update is downloaded automatically.",
      "parameters": [],
      "additionalTags": [],
      "apiType": "event",
      "fullSignature": "autoUpdater.on('update-available')",
      "url": "https://electronjs.org/docs/api/auto-updater#event-update-available",
      "slug": "autoupdateronupdate-available",
      "tldr": "Emitted when there is an available update.",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:update-available",
        "api:autoupdateronupdate-available",
        "api:autoUpdater.on('update-available')",
        "doc:update-available",
        "doc:autoupdateronupdate-available",
        "doc:autoUpdater.on('update-available')"
      ]
    },
    {
      "objectID": "api-auto-updater#event-update-not-available",
      "name": "update-not-available",
      "description": "Emitted when there is no available update.",
      "parameters": [],
      "additionalTags": [],
      "apiType": "event",
      "fullSignature": "autoUpdater.on('update-not-available')",
      "url": "https://electronjs.org/docs/api/auto-updater#event-update-not-available",
      "slug": "autoupdateronupdate-not-available",
      "tldr": "Emitted when there is no available update.",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:update-not-available",
        "api:autoupdateronupdate-not-available",
        "api:autoUpdater.on('update-not-available')",
        "doc:update-not-available",
        "doc:autoupdateronupdate-not-available",
        "doc:autoUpdater.on('update-not-available')"
      ]
    },
    {
      "objectID": "api-auto-updater#event-update-downloaded",
      "name": "update-downloaded",
      "description": "Emitted when an update has been downloaded.\n\nOn Windows only `releaseName` is available.\n\n**Note:** It is not strictly necessary to handle this event. A successfully downloaded update will still be applied the next time the application starts.",
      "parameters": [
        {
          "name": "event",
          "description": "",
          "collection": false,
          "type": "Event",
          "required": true
        },
        {
          "name": "releaseNotes",
          "description": "",
          "collection": false,
          "type": "String",
          "possibleValues": null,
          "required": true
        },
        {
          "name": "releaseName",
          "description": "",
          "collection": false,
          "type": "String",
          "possibleValues": null,
          "required": true
        },
        {
          "name": "releaseDate",
          "description": "",
          "collection": false,
          "type": "Date",
          "required": true
        },
        {
          "name": "updateURL",
          "description": "",
          "collection": false,
          "type": "String",
          "possibleValues": null,
          "required": true
        }
      ],
      "additionalTags": [],
      "apiType": "event",
      "fullSignature": "autoUpdater.on('update-downloaded')",
      "url": "https://electronjs.org/docs/api/auto-updater#event-update-downloaded",
      "slug": "autoupdateronupdate-downloaded",
      "tldr": "Emitted when an update has been downloaded.\n\nOn Windows only `releaseName` is available.\n\n**Note:** It is not strictly necessary to handle this event.",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:update-downloaded",
        "api:autoupdateronupdate-downloaded",
        "api:autoUpdater.on('update-downloaded')",
        "doc:update-downloaded",
        "doc:autoupdateronupdate-downloaded",
        "doc:autoUpdater.on('update-downloaded')"
      ]
    },
    {
      "objectID": "api-auto-updater#event-before-quit-for-update",
      "name": "before-quit-for-update",
      "description": "This event is emitted after a user calls `quitAndInstall()`.\n\nWhen this API is called, the `before-quit` event is not emitted before all windows are closed. As a result you should listen to this event if you wish to perform actions before the windows are closed while a process is quitting, as well as listening to `before-quit`.",
      "parameters": [],
      "additionalTags": [],
      "apiType": "event",
      "fullSignature": "autoUpdater.on('before-quit-for-update')",
      "url": "https://electronjs.org/docs/api/auto-updater#event-before-quit-for-update",
      "slug": "autoupdateronbefore-quit-for-update",
      "tldr": "This event is emitted after a user calls `quitAndInstall()`.\n\nWhen this API is called, the `before-quit` event is not emitted before all windows are closed.",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:before-quit-for-update",
        "api:autoupdateronbefore-quit-for-update",
        "api:autoUpdater.on('before-quit-for-update')",
        "doc:before-quit-for-update",
        "doc:autoupdateronbefore-quit-for-update",
        "doc:autoUpdater.on('before-quit-for-update')"
      ]
    },
    {
      "objectID": "api-browser-view#browserviewwebcontents",
      "name": "webContents",
      "description": "A `WebContents` object owned by this view.",
      "required": true,
      "additionalTags": [
        "stability_experimental"
      ],
      "collection": false,
      "type": "WebContents",
      "apiType": "instanceProperties",
      "fullSignature": "BrowserView.webContents",
      "tldr": "A `WebContents` object owned by this view.",
      "slug": "browserviewwebcontents",
      "url": "https://electronjs.org/docs/api/browser-view#browserviewwebcontents",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:webContents",
        "api:browserviewwebcontents",
        "api:BrowserView.webContents",
        "doc:webContents",
        "doc:browserviewwebcontents",
        "doc:BrowserView.webContents"
      ]
    },
    {
      "objectID": "api-browser-view#browserviewid",
      "name": "id",
      "description": "A `Integer` representing the unique ID of the view.",
      "required": true,
      "additionalTags": [
        "stability_experimental"
      ],
      "collection": false,
      "type": "Integer",
      "apiType": "instanceProperties",
      "fullSignature": "BrowserView.id",
      "tldr": "A `Integer` representing the unique ID of the view.",
      "slug": "browserviewid",
      "url": "https://electronjs.org/docs/api/browser-view#browserviewid",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:id",
        "api:browserviewid",
        "api:BrowserView.id",
        "doc:id",
        "doc:browserviewid",
        "doc:BrowserView.id"
      ]
    },
    {
      "objectID": "api-browser-view#browserviewgetallviews",
      "name": "getAllViews",
      "signature": "()",
      "description": "An array of all opened BrowserViews.",
      "parameters": [],
      "returns": {
        "collection": true,
        "type": "BrowserView"
      },
      "additionalTags": [],
      "apiType": "staticMethod",
      "fullSignature": "BrowserView.getAllViews()",
      "tldr": "An array of all opened BrowserViews.",
      "slug": "browserviewgetallviews",
      "url": "https://electronjs.org/docs/api/browser-view#browserviewgetallviews",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:getAllViews",
        "api:browserviewgetallviews",
        "api:BrowserView.getAllViews()",
        "doc:getAllViews",
        "doc:browserviewgetallviews",
        "doc:BrowserView.getAllViews()"
      ]
    },
    {
      "objectID": "api-browser-view#browserviewfromwebcontentswebcontents",
      "name": "fromWebContents",
      "signature": "(webContents)",
      "description": "The BrowserView that owns the given `webContents` or `null` if the contents are not owned by a BrowserView.",
      "parameters": [
        {
          "name": "webContents",
          "description": "",
          "required": true,
          "collection": false,
          "type": "WebContents"
        }
      ],
      "returns": {
        "collection": false,
        "type": [
          {
            "collection": false,
            "type": "BrowserView"
          },
          {
            "type": "null",
            "collection": false
          }
        ]
      },
      "additionalTags": [],
      "apiType": "staticMethod",
      "fullSignature": "BrowserView.fromWebContents(webContents)",
      "tldr": "The BrowserView that owns the given `webContents` or `null` if the contents are not owned by a BrowserView.",
      "slug": "browserviewfromwebcontentswebcontents",
      "url": "https://electronjs.org/docs/api/browser-view#browserviewfromwebcontentswebcontents",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:fromWebContents",
        "api:browserviewfromwebcontentswebcontents",
        "api:BrowserView.fromWebContents(webContents)",
        "doc:fromWebContents",
        "doc:browserviewfromwebcontentswebcontents",
        "doc:BrowserView.fromWebContents(webContents)"
      ]
    },
    {
      "objectID": "api-browser-view#browserviewfromidid",
      "name": "fromId",
      "signature": "(id)",
      "description": "The view with the given `id`.",
      "parameters": [
        {
          "name": "id",
          "description": "",
          "required": true,
          "collection": false,
          "type": "Integer"
        }
      ],
      "returns": {
        "collection": false,
        "type": "BrowserView"
      },
      "additionalTags": [],
      "apiType": "staticMethod",
      "fullSignature": "BrowserView.fromId(id)",
      "tldr": "The view with the given `id`.",
      "slug": "browserviewfromidid",
      "url": "https://electronjs.org/docs/api/browser-view#browserviewfromidid",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:fromId",
        "api:browserviewfromidid",
        "api:BrowserView.fromId(id)",
        "doc:fromId",
        "doc:browserviewfromidid",
        "doc:BrowserView.fromId(id)"
      ]
    },
    {
      "objectID": "api-browser-view#browserviewdestroy",
      "name": "destroy",
      "signature": "()",
      "description": "Force closing the view, the `unload` and `beforeunload` events won't be emitted for the web page. After you're done with a view, call this function in order to free memory and other resources as soon as possible.",
      "parameters": [],
      "returns": null,
      "additionalTags": [],
      "apiType": "instanceMethod",
      "fullSignature": "BrowserView.destroy()",
      "tldr": "Force closing the view, the `unload` and `beforeunload` events won't be emitted for the web page.",
      "slug": "browserviewdestroy",
      "url": "https://electronjs.org/docs/api/browser-view#browserviewdestroy",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:destroy",
        "api:browserviewdestroy",
        "api:BrowserView.destroy()",
        "doc:destroy",
        "doc:browserviewdestroy",
        "doc:BrowserView.destroy()"
      ]
    },
    {
      "objectID": "api-browser-view#browserviewisdestroyed",
      "name": "isDestroyed",
      "signature": "()",
      "description": "Whether the view is destroyed.",
      "parameters": [],
      "returns": {
        "collection": false,
        "type": "Boolean"
      },
      "additionalTags": [],
      "apiType": "instanceMethod",
      "fullSignature": "BrowserView.isDestroyed()",
      "tldr": "Whether the view is destroyed.",
      "slug": "browserviewisdestroyed",
      "url": "https://electronjs.org/docs/api/browser-view#browserviewisdestroyed",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:isDestroyed",
        "api:browserviewisdestroyed",
        "api:BrowserView.isDestroyed()",
        "doc:isDestroyed",
        "doc:browserviewisdestroyed",
        "doc:BrowserView.isDestroyed()"
      ]
    },
    {
      "objectID": "api-browser-view#browserviewsetautoresizeoptions",
      "name": "setAutoResize",
      "signature": "(options)",
      "description": "",
      "parameters": [
        {
          "name": "options",
          "description": "",
          "required": true,
          "collection": false,
          "type": "Object",
          "properties": [
            {
              "name": "width",
              "description": "If `true`, the view's width will grow and shrink together with the window. `false` by default.",
              "required": false,
              "additionalTags": [],
              "collection": false,
              "type": "Boolean"
            },
            {
              "name": "height",
              "description": "If `true`, the view's height will grow and shrink together with the window. `false` by default.",
              "required": false,
              "additionalTags": [],
              "collection": false,
              "type": "Boolean"
            },
            {
              "name": "horizontal",
              "description": "If `true`, the view's x position and width will grow and shrink proportionally with the window. `false` by default.",
              "required": false,
              "additionalTags": [],
              "collection": false,
              "type": "Boolean"
            },
            {
              "name": "vertical",
              "description": "If `true`, the view's y position and height will grow and shrink proportionally with the window. `false` by default.",
              "required": false,
              "additionalTags": [],
              "collection": false,
              "type": "Boolean"
            }
          ]
        }
      ],
      "returns": null,
      "additionalTags": [
        "stability_experimental"
      ],
      "apiType": "instanceMethod",
      "fullSignature": "BrowserView.setAutoResize(options)",
      "tldr": null,
      "slug": "browserviewsetautoresizeoptions",
      "url": "https://electronjs.org/docs/api/browser-view#browserviewsetautoresizeoptions",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:setAutoResize",
        "api:browserviewsetautoresizeoptions",
        "api:BrowserView.setAutoResize(options)",
        "doc:setAutoResize",
        "doc:browserviewsetautoresizeoptions",
        "doc:BrowserView.setAutoResize(options)"
      ]
    },
    {
      "objectID": "api-browser-view#browserviewsetboundsbounds",
      "name": "setBounds",
      "signature": "(bounds)",
      "description": "Resizes and moves the view to the supplied bounds relative to the window.",
      "parameters": [
        {
          "name": "bounds",
          "description": "",
          "required": true,
          "collection": false,
          "type": "Rectangle"
        }
      ],
      "returns": null,
      "additionalTags": [
        "stability_experimental"
      ],
      "apiType": "instanceMethod",
      "fullSignature": "BrowserView.setBounds(bounds)",
      "tldr": "Resizes and moves the view to the supplied bounds relative to the window.",
      "slug": "browserviewsetboundsbounds",
      "url": "https://electronjs.org/docs/api/browser-view#browserviewsetboundsbounds",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:setBounds",
        "api:browserviewsetboundsbounds",
        "api:BrowserView.setBounds(bounds)",
        "doc:setBounds",
        "doc:browserviewsetboundsbounds",
        "doc:BrowserView.setBounds(bounds)"
      ]
    },
    {
      "objectID": "api-browser-view#browserviewgetbounds",
      "name": "getBounds",
      "signature": "()",
      "description": "The `bounds` of this BrowserView instance as `Object`.",
      "parameters": [],
      "returns": {
        "collection": false,
        "type": "Rectangle"
      },
      "additionalTags": [
        "stability_experimental"
      ],
      "apiType": "instanceMethod",
      "fullSignature": "BrowserView.getBounds()",
      "tldr": "The `bounds` of this BrowserView instance as `Object`.",
      "slug": "browserviewgetbounds",
      "url": "https://electronjs.org/docs/api/browser-view#browserviewgetbounds",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:getBounds",
        "api:browserviewgetbounds",
        "api:BrowserView.getBounds()",
        "doc:getBounds",
        "doc:browserviewgetbounds",
        "doc:BrowserView.getBounds()"
      ]
    },
    {
      "objectID": "api-browser-view#browserviewsetbackgroundcolorcolor",
      "name": "setBackgroundColor",
      "signature": "(color)",
      "description": "",
      "parameters": [
        {
          "name": "color",
          "description": "Color in `#aarrggbb` or `#argb` form. The alpha channel is optional.",
          "required": true,
          "collection": false,
          "type": "String",
          "possibleValues": null
        }
      ],
      "returns": null,
      "additionalTags": [
        "stability_experimental"
      ],
      "apiType": "instanceMethod",
      "fullSignature": "BrowserView.setBackgroundColor(color)",
      "tldr": null,
      "slug": "browserviewsetbackgroundcolorcolor",
      "url": "https://electronjs.org/docs/api/browser-view#browserviewsetbackgroundcolorcolor",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:setBackgroundColor",
        "api:browserviewsetbackgroundcolorcolor",
        "api:BrowserView.setBackgroundColor(color)",
        "doc:setBackgroundColor",
        "doc:browserviewsetbackgroundcolorcolor",
        "doc:BrowserView.setBackgroundColor(color)"
      ]
    },
    {
      "objectID": "api-browser-window-proxy#browserwindowproxyclosed",
      "name": "closed",
      "description": "A `Boolean` that is set to true after the child window gets closed.",
      "required": true,
      "additionalTags": [],
      "collection": false,
      "type": "Boolean",
      "apiType": "instanceProperties",
      "fullSignature": "BrowserWindowProxy.closed",
      "tldr": "A `Boolean` that is set to true after the child window gets closed.",
      "slug": "browserwindowproxyclosed",
      "url": "https://electronjs.org/docs/api/browser-window-proxy#browserwindowproxyclosed",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:closed",
        "api:browserwindowproxyclosed",
        "api:BrowserWindowProxy.closed",
        "doc:closed",
        "doc:browserwindowproxyclosed",
        "doc:BrowserWindowProxy.closed"
      ]
    },
    {
      "objectID": "api-browser-window-proxy#winblur",
      "name": "blur",
      "signature": "()",
      "description": "Removes focus from the child window.",
      "parameters": [],
      "returns": null,
      "additionalTags": [],
      "apiType": "instanceMethod",
      "fullSignature": "win.blur()",
      "tldr": "Removes focus from the child window.",
      "slug": "winblur",
      "url": "https://electronjs.org/docs/api/browser-window-proxy#winblur",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:blur",
        "api:winblur",
        "api:win.blur()",
        "doc:blur",
        "doc:winblur",
        "doc:win.blur()"
      ]
    },
    {
      "objectID": "api-browser-window-proxy#winclose",
      "name": "close",
      "signature": "()",
      "description": "Forcefully closes the child window without calling its unload event.",
      "parameters": [],
      "returns": null,
      "additionalTags": [],
      "apiType": "instanceMethod",
      "fullSignature": "win.close()",
      "tldr": "Forcefully closes the child window without calling its unload event.",
      "slug": "winclose",
      "url": "https://electronjs.org/docs/api/browser-window-proxy#winclose",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:close",
        "api:winclose",
        "api:win.close()",
        "doc:close",
        "doc:winclose",
        "doc:win.close()"
      ]
    },
    {
      "objectID": "api-browser-window-proxy#winevalcode",
      "name": "eval",
      "signature": "(code)",
      "description": "Evaluates the code in the child window.",
      "parameters": [
        {
          "name": "code",
          "description": "",
          "required": true,
          "collection": false,
          "type": "String",
          "possibleValues": null
        }
      ],
      "returns": null,
      "additionalTags": [],
      "apiType": "instanceMethod",
      "fullSignature": "win.eval(code)",
      "tldr": "Evaluates the code in the child window.",
      "slug": "winevalcode",
      "url": "https://electronjs.org/docs/api/browser-window-proxy#winevalcode",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:eval",
        "api:winevalcode",
        "api:win.eval(code)",
        "doc:eval",
        "doc:winevalcode",
        "doc:win.eval(code)"
      ]
    },
    {
      "objectID": "api-browser-window-proxy#winfocus",
      "name": "focus",
      "signature": "()",
      "description": "Focuses the child window (brings the window to front).",
      "parameters": [],
      "returns": null,
      "additionalTags": [],
      "apiType": "instanceMethod",
      "fullSignature": "win.focus()",
      "tldr": "Focuses the child window (brings the window to front).",
      "slug": "winfocus",
      "url": "https://electronjs.org/docs/api/browser-window-proxy#winfocus",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:focus",
        "api:winfocus",
        "api:win.focus()",
        "doc:focus",
        "doc:winfocus",
        "doc:win.focus()"
      ]
    },
    {
      "objectID": "api-browser-window-proxy#winprint",
      "name": "print",
      "signature": "()",
      "description": "Invokes the print dialog on the child window.",
      "parameters": [],
      "returns": null,
      "additionalTags": [],
      "apiType": "instanceMethod",
      "fullSignature": "win.print()",
      "tldr": "Invokes the print dialog on the child window.",
      "slug": "winprint",
      "url": "https://electronjs.org/docs/api/browser-window-proxy#winprint",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:print",
        "api:winprint",
        "api:win.print()",
        "doc:print",
        "doc:winprint",
        "doc:win.print()"
      ]
    },
    {
      "objectID": "api-browser-window-proxy#winpostmessagemessage-targetorigin",
      "name": "postMessage",
      "signature": "(message, targetOrigin)",
      "description": "Sends a message to the child window with the specified origin or `*` for no origin preference.\n\nIn addition to these methods, the child window implements `window.opener` object with no properties and a single method.",
      "parameters": [
        {
          "name": "message",
          "description": "",
          "required": true,
          "collection": false,
          "type": "any"
        },
        {
          "name": "targetOrigin",
          "description": "",
          "required": true,
          "collection": false,
          "type": "String",
          "possibleValues": null
        }
      ],
      "returns": null,
      "additionalTags": [],
      "apiType": "instanceMethod",
      "fullSignature": "win.postMessage(message, targetOrigin)",
      "tldr": "Sends a message to the child window with the specified origin or `*` for no origin preference.\n\nIn addition to these methods, the child window implements `window.opener` object with no properties and a single method.",
      "slug": "winpostmessagemessage-targetorigin",
      "url": "https://electronjs.org/docs/api/browser-window-proxy#winpostmessagemessage-targetorigin",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:postMessage",
        "api:winpostmessagemessage-targetorigin",
        "api:win.postMessage(message, targetOrigin)",
        "doc:postMessage",
        "doc:winpostmessagemessage-targetorigin",
        "doc:win.postMessage(message, targetOrigin)"
      ]
    },
    {
      "objectID": "api-browser-window#browserwindowwebcontents",
      "name": "webContents",
      "description": "A `WebContents` object this window owns. All web page related events and operations will be done via it.\n\nSee the `webContents` documentation for its methods and events.",
      "required": true,
      "additionalTags": [
        "availability_readonly"
      ],
      "collection": false,
      "type": "WebContents",
      "apiType": "instanceProperties",
      "fullSignature": "BrowserWindow.webContents",
      "tldr": "A `WebContents` object this window owns.",
      "slug": "browserwindowwebcontents",
      "url": "https://electronjs.org/docs/api/browser-window#browserwindowwebcontents",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:webContents",
        "api:browserwindowwebcontents",
        "api:BrowserWindow.webContents",
        "doc:webContents",
        "doc:browserwindowwebcontents",
        "doc:BrowserWindow.webContents"
      ]
    },
    {
      "objectID": "api-browser-window#browserwindowid",
      "name": "id",
      "description": "A `Integer` property representing the unique ID of the window.",
      "required": true,
      "additionalTags": [
        "availability_readonly"
      ],
      "collection": false,
      "type": "Integer",
      "apiType": "instanceProperties",
      "fullSignature": "BrowserWindow.id",
      "tldr": "A `Integer` property representing the unique ID of the window.",
      "slug": "browserwindowid",
      "url": "https://electronjs.org/docs/api/browser-window#browserwindowid",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:id",
        "api:browserwindowid",
        "api:BrowserWindow.id",
        "doc:id",
        "doc:browserwindowid",
        "doc:BrowserWindow.id"
      ]
    },
    {
      "objectID": "api-browser-window#browserwindowautohidemenubar",
      "name": "autoHideMenuBar",
      "description": "A `Boolean` property that determines whether the window menu bar should hide itself automatically. Once set, the menu bar will only show when users press the single `Alt` key.\n\nIf the menu bar is already visible, setting this property to `true` won't hide it immediately.",
      "required": true,
      "additionalTags": [],
      "collection": false,
      "type": "Boolean",
      "apiType": "instanceProperties",
      "fullSignature": "BrowserWindow.autoHideMenuBar",
      "tldr": "A `Boolean` property that determines whether the window menu bar should hide itself automatically.",
      "slug": "browserwindowautohidemenubar",
      "url": "https://electronjs.org/docs/api/browser-window#browserwindowautohidemenubar",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:autoHideMenuBar",
        "api:browserwindowautohidemenubar",
        "api:BrowserWindow.autoHideMenuBar",
        "doc:autoHideMenuBar",
        "doc:browserwindowautohidemenubar",
        "doc:BrowserWindow.autoHideMenuBar"
      ]
    },
    {
      "objectID": "api-browser-window#browserwindowminimizable",
      "name": "minimizable",
      "description": "A `Boolean` property that determines whether the window can be manually minimized by user.\n\nOn Linux the setter is a no-op, although the getter returns `true`.",
      "required": true,
      "additionalTags": [],
      "collection": false,
      "type": "Boolean",
      "apiType": "instanceProperties",
      "fullSignature": "BrowserWindow.minimizable",
      "tldr": "A `Boolean` property that determines whether the window can be manually minimized by user.\n\nOn Linux the setter is a no-op, although the getter returns `true`.",
      "slug": "browserwindowminimizable",
      "url": "https://electronjs.org/docs/api/browser-window#browserwindowminimizable",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:minimizable",
        "api:browserwindowminimizable",
        "api:BrowserWindow.minimizable",
        "doc:minimizable",
        "doc:browserwindowminimizable",
        "doc:BrowserWindow.minimizable"
      ]
    },
    {
      "objectID": "api-browser-window#browserwindowmaximizable",
      "name": "maximizable",
      "description": "A `Boolean` property that determines whether the window can be manually maximized by user.\n\nOn Linux the setter is a no-op, although the getter returns `true`.",
      "required": true,
      "additionalTags": [],
      "collection": false,
      "type": "Boolean",
      "apiType": "instanceProperties",
      "fullSignature": "BrowserWindow.maximizable",
      "tldr": "A `Boolean` property that determines whether the window can be manually maximized by user.\n\nOn Linux the setter is a no-op, although the getter returns `true`.",
      "slug": "browserwindowmaximizable",
      "url": "https://electronjs.org/docs/api/browser-window#browserwindowmaximizable",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:maximizable",
        "api:browserwindowmaximizable",
        "api:BrowserWindow.maximizable",
        "doc:maximizable",
        "doc:browserwindowmaximizable",
        "doc:BrowserWindow.maximizable"
      ]
    },
    {
      "objectID": "api-browser-window#browserwindowfullscreenable",
      "name": "fullScreenable",
      "description": "A `Boolean` property that determines whether the maximize/zoom window button toggles fullscreen mode or maximizes the window.",
      "required": true,
      "additionalTags": [],
      "collection": false,
      "type": "Boolean",
      "apiType": "instanceProperties",
      "fullSignature": "BrowserWindow.fullScreenable",
      "tldr": "A `Boolean` property that determines whether the maximize/zoom window button toggles fullscreen mode or maximizes the window.",
      "slug": "browserwindowfullscreenable",
      "url": "https://electronjs.org/docs/api/browser-window#browserwindowfullscreenable",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:fullScreenable",
        "api:browserwindowfullscreenable",
        "api:BrowserWindow.fullScreenable",
        "doc:fullScreenable",
        "doc:browserwindowfullscreenable",
        "doc:BrowserWindow.fullScreenable"
      ]
    },
    {
      "objectID": "api-browser-window#browserwindowresizable",
      "name": "resizable",
      "description": "A `Boolean` property that determines whether the window can be manually resized by user.",
      "required": true,
      "additionalTags": [],
      "collection": false,
      "type": "Boolean",
      "apiType": "instanceProperties",
      "fullSignature": "BrowserWindow.resizable",
      "tldr": "A `Boolean` property that determines whether the window can be manually resized by user.",
      "slug": "browserwindowresizable",
      "url": "https://electronjs.org/docs/api/browser-window#browserwindowresizable",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:resizable",
        "api:browserwindowresizable",
        "api:BrowserWindow.resizable",
        "doc:resizable",
        "doc:browserwindowresizable",
        "doc:BrowserWindow.resizable"
      ]
    },
    {
      "objectID": "api-browser-window#browserwindowclosable",
      "name": "closable",
      "description": "A `Boolean` property that determines whether the window can be manually closed by user.\n\nOn Linux the setter is a no-op, although the getter returns `true`.",
      "required": true,
      "additionalTags": [],
      "collection": false,
      "type": "Boolean",
      "apiType": "instanceProperties",
      "fullSignature": "BrowserWindow.closable",
      "tldr": "A `Boolean` property that determines whether the window can be manually closed by user.\n\nOn Linux the setter is a no-op, although the getter returns `true`.",
      "slug": "browserwindowclosable",
      "url": "https://electronjs.org/docs/api/browser-window#browserwindowclosable",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:closable",
        "api:browserwindowclosable",
        "api:BrowserWindow.closable",
        "doc:closable",
        "doc:browserwindowclosable",
        "doc:BrowserWindow.closable"
      ]
    },
    {
      "objectID": "api-browser-window#browserwindowmovable",
      "name": "movable",
      "description": "A `Boolean` property that determines Whether the window can be moved by user.\n\nOn Linux the setter is a no-op, although the getter returns `true`.",
      "required": true,
      "additionalTags": [],
      "collection": false,
      "type": "Boolean",
      "apiType": "instanceProperties",
      "fullSignature": "BrowserWindow.movable",
      "tldr": "A `Boolean` property that determines Whether the window can be moved by user.\n\nOn Linux the setter is a no-op, although the getter returns `true`.",
      "slug": "browserwindowmovable",
      "url": "https://electronjs.org/docs/api/browser-window#browserwindowmovable",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:movable",
        "api:browserwindowmovable",
        "api:BrowserWindow.movable",
        "doc:movable",
        "doc:browserwindowmovable",
        "doc:BrowserWindow.movable"
      ]
    },
    {
      "objectID": "api-browser-window#browserwindowexcludedfromshownwindowsmenu",
      "name": "excludedFromShownWindowsMenu",
      "description": "A `Boolean` property that determines whether the window is excluded from the application’s Windows menu. `false` by default.",
      "required": true,
      "additionalTags": [
        "os_macos"
      ],
      "collection": false,
      "type": "Boolean",
      "apiType": "instanceProperties",
      "fullSignature": "BrowserWindow.excludedFromShownWindowsMenu",
      "tldr": "A `Boolean` property that determines whether the window is excluded from the application’s Windows menu.",
      "slug": "browserwindowexcludedfromshownwindowsmenu",
      "url": "https://electronjs.org/docs/api/browser-window#browserwindowexcludedfromshownwindowsmenu",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:excludedFromShownWindowsMenu",
        "api:browserwindowexcludedfromshownwindowsmenu",
        "api:BrowserWindow.excludedFromShownWindowsMenu",
        "doc:excludedFromShownWindowsMenu",
        "doc:browserwindowexcludedfromshownwindowsmenu",
        "doc:BrowserWindow.excludedFromShownWindowsMenu"
      ]
    },
    {
      "objectID": "api-browser-window#browserwindowgetallwindows",
      "name": "getAllWindows",
      "signature": "()",
      "description": "An array of all opened browser windows.",
      "parameters": [],
      "returns": {
        "collection": true,
        "type": "BrowserWindow"
      },
      "additionalTags": [],
      "apiType": "staticMethod",
      "fullSignature": "BrowserWindow.getAllWindows()",
      "tldr": "An array of all opened browser windows.",
      "slug": "browserwindowgetallwindows",
      "url": "https://electronjs.org/docs/api/browser-window#browserwindowgetallwindows",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:getAllWindows",
        "api:browserwindowgetallwindows",
        "api:BrowserWindow.getAllWindows()",
        "doc:getAllWindows",
        "doc:browserwindowgetallwindows",
        "doc:BrowserWindow.getAllWindows()"
      ]
    },
    {
      "objectID": "api-browser-window#browserwindowgetfocusedwindow",
      "name": "getFocusedWindow",
      "signature": "()",
      "description": "The window that is focused in this application, otherwise returns `null`.",
      "parameters": [],
      "returns": {
        "collection": false,
        "type": [
          {
            "collection": false,
            "type": "BrowserWindow"
          },
          {
            "type": "null",
            "collection": false
          }
        ]
      },
      "additionalTags": [],
      "apiType": "staticMethod",
      "fullSignature": "BrowserWindow.getFocusedWindow()",
      "tldr": "The window that is focused in this application, otherwise returns `null`.",
      "slug": "browserwindowgetfocusedwindow",
      "url": "https://electronjs.org/docs/api/browser-window#browserwindowgetfocusedwindow",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:getFocusedWindow",
        "api:browserwindowgetfocusedwindow",
        "api:BrowserWindow.getFocusedWindow()",
        "doc:getFocusedWindow",
        "doc:browserwindowgetfocusedwindow",
        "doc:BrowserWindow.getFocusedWindow()"
      ]
    },
    {
      "objectID": "api-browser-window#browserwindowfromwebcontentswebcontents",
      "name": "fromWebContents",
      "signature": "(webContents)",
      "description": "The window that owns the given `webContents`.",
      "parameters": [
        {
          "name": "webContents",
          "description": "",
          "required": true,
          "collection": false,
          "type": "WebContents"
        }
      ],
      "returns": {
        "collection": false,
        "type": "BrowserWindow"
      },
      "additionalTags": [],
      "apiType": "staticMethod",
      "fullSignature": "BrowserWindow.fromWebContents(webContents)",
      "tldr": "The window that owns the given `webContents`.",
      "slug": "browserwindowfromwebcontentswebcontents",
      "url": "https://electronjs.org/docs/api/browser-window#browserwindowfromwebcontentswebcontents",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:fromWebContents",
        "api:browserwindowfromwebcontentswebcontents",
        "api:BrowserWindow.fromWebContents(webContents)",
        "doc:fromWebContents",
        "doc:browserwindowfromwebcontentswebcontents",
        "doc:BrowserWindow.fromWebContents(webContents)"
      ]
    },
    {
      "objectID": "api-browser-window#browserwindowfrombrowserviewbrowserview",
      "name": "fromBrowserView",
      "signature": "(browserView)",
      "description": "The window that owns the given `browserView`. If the given view is not attached to any window, returns `null`.",
      "parameters": [
        {
          "name": "browserView",
          "description": "",
          "required": true,
          "collection": false,
          "type": "BrowserView"
        }
      ],
      "returns": {
        "collection": false,
        "type": [
          {
            "collection": false,
            "type": "BrowserWindow"
          },
          {
            "type": "null",
            "collection": false
          }
        ]
      },
      "additionalTags": [],
      "apiType": "staticMethod",
      "fullSignature": "BrowserWindow.fromBrowserView(browserView)",
      "tldr": "The window that owns the given `browserView`.",
      "slug": "browserwindowfrombrowserviewbrowserview",
      "url": "https://electronjs.org/docs/api/browser-window#browserwindowfrombrowserviewbrowserview",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:fromBrowserView",
        "api:browserwindowfrombrowserviewbrowserview",
        "api:BrowserWindow.fromBrowserView(browserView)",
        "doc:fromBrowserView",
        "doc:browserwindowfrombrowserviewbrowserview",
        "doc:BrowserWindow.fromBrowserView(browserView)"
      ]
    },
    {
      "objectID": "api-browser-window#browserwindowfromidid",
      "name": "fromId",
      "signature": "(id)",
      "description": "The window with the given `id`.",
      "parameters": [
        {
          "name": "id",
          "description": "",
          "required": true,
          "collection": false,
          "type": "Integer"
        }
      ],
      "returns": {
        "collection": false,
        "type": "BrowserWindow"
      },
      "additionalTags": [],
      "apiType": "staticMethod",
      "fullSignature": "BrowserWindow.fromId(id)",
      "tldr": "The window with the given `id`.",
      "slug": "browserwindowfromidid",
      "url": "https://electronjs.org/docs/api/browser-window#browserwindowfromidid",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:fromId",
        "api:browserwindowfromidid",
        "api:BrowserWindow.fromId(id)",
        "doc:fromId",
        "doc:browserwindowfromidid",
        "doc:BrowserWindow.fromId(id)"
      ]
    },
    {
      "objectID": "api-browser-window#browserwindowaddextensionpath",
      "name": "addExtension",
      "signature": "(path)",
      "description": "Adds Chrome extension located at `path`, and returns extension's name.\n\nThe method will also not return if the extension's manifest is missing or incomplete.\n\n**Note:** This API cannot be called before the `ready` event of the `app` module is emitted.",
      "parameters": [
        {
          "name": "path",
          "description": "",
          "required": true,
          "collection": false,
          "type": "String",
          "possibleValues": null
        }
      ],
      "returns": null,
      "additionalTags": [],
      "apiType": "staticMethod",
      "fullSignature": "BrowserWindow.addExtension(path)",
      "tldr": "Adds Chrome extension located at `path`, and returns extension's name.\n\nThe method will also not return if the extension's manifest is missing or incomplete.\n\n**Note:** This API cannot be called before the `ready` event of the `app` module is emitted.",
      "slug": "browserwindowaddextensionpath",
      "url": "https://electronjs.org/docs/api/browser-window#browserwindowaddextensionpath",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:addExtension",
        "api:browserwindowaddextensionpath",
        "api:BrowserWindow.addExtension(path)",
        "doc:addExtension",
        "doc:browserwindowaddextensionpath",
        "doc:BrowserWindow.addExtension(path)"
      ]
    },
    {
      "objectID": "api-browser-window#browserwindowremoveextensionname",
      "name": "removeExtension",
      "signature": "(name)",
      "description": "Remove a Chrome extension by name.\n\n**Note:** This API cannot be called before the `ready` event of the `app` module is emitted.",
      "parameters": [
        {
          "name": "name",
          "description": "",
          "required": true,
          "collection": false,
          "type": "String",
          "possibleValues": null
        }
      ],
      "returns": null,
      "additionalTags": [],
      "apiType": "staticMethod",
      "fullSignature": "BrowserWindow.removeExtension(name)",
      "tldr": "Remove a Chrome extension by name.\n\n**Note:** This API cannot be called before the `ready` event of the `app` module is emitted.",
      "slug": "browserwindowremoveextensionname",
      "url": "https://electronjs.org/docs/api/browser-window#browserwindowremoveextensionname",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:removeExtension",
        "api:browserwindowremoveextensionname",
        "api:BrowserWindow.removeExtension(name)",
        "doc:removeExtension",
        "doc:browserwindowremoveextensionname",
        "doc:BrowserWindow.removeExtension(name)"
      ]
    },
    {
      "objectID": "api-browser-window#browserwindowgetextensions",
      "name": "getExtensions",
      "signature": "()",
      "description": "The keys are the extension names and each value is an Object containing `name` and `version` properties.\n\n**Note:** This API cannot be called before the `ready` event of the `app` module is emitted.",
      "parameters": [],
      "returns": {
        "collection": false,
        "type": "Record",
        "innerTypes": [
          {
            "collection": false,
            "type": "String",
            "possibleValues": null
          },
          {
            "collection": false,
            "type": "ExtensionInfo"
          }
        ]
      },
      "additionalTags": [],
      "apiType": "staticMethod",
      "fullSignature": "BrowserWindow.getExtensions()",
      "tldr": "The keys are the extension names and each value is an Object containing `name` and `version` properties.\n\n**Note:** This API cannot be called before the `ready` event of the `app` module is emitted.",
      "slug": "browserwindowgetextensions",
      "url": "https://electronjs.org/docs/api/browser-window#browserwindowgetextensions",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:getExtensions",
        "api:browserwindowgetextensions",
        "api:BrowserWindow.getExtensions()",
        "doc:getExtensions",
        "doc:browserwindowgetextensions",
        "doc:BrowserWindow.getExtensions()"
      ]
    },
    {
      "objectID": "api-browser-window#browserwindowadddevtoolsextensionpath",
      "name": "addDevToolsExtension",
      "signature": "(path)",
      "description": "Adds DevTools extension located at `path`, and returns extension's name.\n\nThe extension will be remembered so you only need to call this API once, this API is not for programming use. If you try to add an extension that has already been loaded, this method will not return and instead log a warning to the console.\n\nThe method will also not return if the extension's manifest is missing or incomplete.\n\n**Note:** This API cannot be called before the `ready` event of the `app` module is emitted.",
      "parameters": [
        {
          "name": "path",
          "description": "",
          "required": true,
          "collection": false,
          "type": "String",
          "possibleValues": null
        }
      ],
      "returns": null,
      "additionalTags": [],
      "apiType": "staticMethod",
      "fullSignature": "BrowserWindow.addDevToolsExtension(path)",
      "tldr": "Adds DevTools extension located at `path`, and returns extension's name.\n\nThe extension will be remembered so you only need to call this API once, this API is not for programming use.",
      "slug": "browserwindowadddevtoolsextensionpath",
      "url": "https://electronjs.org/docs/api/browser-window#browserwindowadddevtoolsextensionpath",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:addDevToolsExtension",
        "api:browserwindowadddevtoolsextensionpath",
        "api:BrowserWindow.addDevToolsExtension(path)",
        "doc:addDevToolsExtension",
        "doc:browserwindowadddevtoolsextensionpath",
        "doc:BrowserWindow.addDevToolsExtension(path)"
      ]
    },
    {
      "objectID": "api-browser-window#browserwindowremovedevtoolsextensionname",
      "name": "removeDevToolsExtension",
      "signature": "(name)",
      "description": "Remove a DevTools extension by name.\n\n**Note:** This API cannot be called before the `ready` event of the `app` module is emitted.",
      "parameters": [
        {
          "name": "name",
          "description": "",
          "required": true,
          "collection": false,
          "type": "String",
          "possibleValues": null
        }
      ],
      "returns": null,
      "additionalTags": [],
      "apiType": "staticMethod",
      "fullSignature": "BrowserWindow.removeDevToolsExtension(name)",
      "tldr": "Remove a DevTools extension by name.\n\n**Note:** This API cannot be called before the `ready` event of the `app` module is emitted.",
      "slug": "browserwindowremovedevtoolsextensionname",
      "url": "https://electronjs.org/docs/api/browser-window#browserwindowremovedevtoolsextensionname",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:removeDevToolsExtension",
        "api:browserwindowremovedevtoolsextensionname",
        "api:BrowserWindow.removeDevToolsExtension(name)",
        "doc:removeDevToolsExtension",
        "doc:browserwindowremovedevtoolsextensionname",
        "doc:BrowserWindow.removeDevToolsExtension(name)"
      ]
    },
    {
      "objectID": "api-browser-window#browserwindowgetdevtoolsextensions",
      "name": "getDevToolsExtensions",
      "signature": "()",
      "description": "The keys are the extension names and each value is an Object containing `name` and `version` properties.\n\nTo check if a DevTools extension is installed you can run the following:\n\n**Note:** This API cannot be called before the `ready` event of the `app` module is emitted.",
      "parameters": [],
      "returns": {
        "collection": false,
        "type": "Record",
        "innerTypes": [
          {
            "collection": false,
            "type": "string"
          },
          {
            "collection": false,
            "type": "ExtensionInfo"
          }
        ]
      },
      "additionalTags": [],
      "apiType": "staticMethod",
      "fullSignature": "BrowserWindow.getDevToolsExtensions()",
      "tldr": "The keys are the extension names and each value is an Object containing `name` and `version` properties.\n\nTo check if a DevTools extension is installed you can run the following:\n\n**Note:** This API cannot be called before the `ready` event of the `app` module is emitted.",
      "slug": "browserwindowgetdevtoolsextensions",
      "url": "https://electronjs.org/docs/api/browser-window#browserwindowgetdevtoolsextensions",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:getDevToolsExtensions",
        "api:browserwindowgetdevtoolsextensions",
        "api:BrowserWindow.getDevToolsExtensions()",
        "doc:getDevToolsExtensions",
        "doc:browserwindowgetdevtoolsextensions",
        "doc:BrowserWindow.getDevToolsExtensions()"
      ]
    },
    {
      "objectID": "api-browser-window#browserwindowdestroy",
      "name": "destroy",
      "signature": "()",
      "description": "Force closing the window, the `unload` and `beforeunload` event won't be emitted for the web page, and `close` event will also not be emitted for this window, but it guarantees the `closed` event will be emitted.",
      "parameters": [],
      "returns": null,
      "additionalTags": [],
      "apiType": "instanceMethod",
      "fullSignature": "browserWindow.destroy()",
      "tldr": "Force closing the window, the `unload` and `beforeunload` event won't be emitted for the web page, and `close` event will also not be emitted for this window, but it guarantees the `closed` event will be emitted.",
      "slug": "browserwindowdestroy",
      "url": "https://electronjs.org/docs/api/browser-window#browserwindowdestroy",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:destroy",
        "api:browserwindowdestroy",
        "api:browserWindow.destroy()",
        "doc:destroy",
        "doc:browserwindowdestroy",
        "doc:browserWindow.destroy()"
      ]
    },
    {
      "objectID": "api-browser-window#browserwindowclose",
      "name": "close",
      "signature": "()",
      "description": "Try to close the window. This has the same effect as a user manually clicking the close button of the window. The web page may cancel the close though. See the close event.",
      "parameters": [],
      "returns": null,
      "additionalTags": [],
      "apiType": "instanceMethod",
      "fullSignature": "browserWindow.close()",
      "tldr": "Try to close the window.",
      "slug": "browserwindowclose",
      "url": "https://electronjs.org/docs/api/browser-window#browserwindowclose",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:close",
        "api:browserwindowclose",
        "api:browserWindow.close()",
        "doc:close",
        "doc:browserwindowclose",
        "doc:browserWindow.close()"
      ]
    },
    {
      "objectID": "api-browser-window#browserwindowfocus",
      "name": "focus",
      "signature": "()",
      "description": "Focuses on the window.",
      "parameters": [],
      "returns": null,
      "additionalTags": [],
      "apiType": "instanceMethod",
      "fullSignature": "browserWindow.focus()",
      "tldr": "Focuses on the window.",
      "slug": "browserwindowfocus",
      "url": "https://electronjs.org/docs/api/browser-window#browserwindowfocus",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:focus",
        "api:browserwindowfocus",
        "api:browserWindow.focus()",
        "doc:focus",
        "doc:browserwindowfocus",
        "doc:browserWindow.focus()"
      ]
    },
    {
      "objectID": "api-browser-window#browserwindowblur",
      "name": "blur",
      "signature": "()",
      "description": "Removes focus from the window.",
      "parameters": [],
      "returns": null,
      "additionalTags": [],
      "apiType": "instanceMethod",
      "fullSignature": "browserWindow.blur()",
      "tldr": "Removes focus from the window.",
      "slug": "browserwindowblur",
      "url": "https://electronjs.org/docs/api/browser-window#browserwindowblur",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:blur",
        "api:browserwindowblur",
        "api:browserWindow.blur()",
        "doc:blur",
        "doc:browserwindowblur",
        "doc:browserWindow.blur()"
      ]
    },
    {
      "objectID": "api-browser-window#browserwindowisfocused",
      "name": "isFocused",
      "signature": "()",
      "description": "Whether the window is focused.",
      "parameters": [],
      "returns": {
        "collection": false,
        "type": "Boolean"
      },
      "additionalTags": [],
      "apiType": "instanceMethod",
      "fullSignature": "browserWindow.isFocused()",
      "tldr": "Whether the window is focused.",
      "slug": "browserwindowisfocused",
      "url": "https://electronjs.org/docs/api/browser-window#browserwindowisfocused",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:isFocused",
        "api:browserwindowisfocused",
        "api:browserWindow.isFocused()",
        "doc:isFocused",
        "doc:browserwindowisfocused",
        "doc:browserWindow.isFocused()"
      ]
    },
    {
      "objectID": "api-browser-window#browserwindowisdestroyed",
      "name": "isDestroyed",
      "signature": "()",
      "description": "Whether the window is destroyed.",
      "parameters": [],
      "returns": {
        "collection": false,
        "type": "Boolean"
      },
      "additionalTags": [],
      "apiType": "instanceMethod",
      "fullSignature": "browserWindow.isDestroyed()",
      "tldr": "Whether the window is destroyed.",
      "slug": "browserwindowisdestroyed",
      "url": "https://electronjs.org/docs/api/browser-window#browserwindowisdestroyed",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:isDestroyed",
        "api:browserwindowisdestroyed",
        "api:browserWindow.isDestroyed()",
        "doc:isDestroyed",
        "doc:browserwindowisdestroyed",
        "doc:browserWindow.isDestroyed()"
      ]
    },
    {
      "objectID": "api-browser-window#browserwindowshow",
      "name": "show",
      "signature": "()",
      "description": "Shows and gives focus to the window.",
      "parameters": [],
      "returns": null,
      "additionalTags": [],
      "apiType": "instanceMethod",
      "fullSignature": "browserWindow.show()",
      "tldr": "Shows and gives focus to the window.",
      "slug": "browserwindowshow",
      "url": "https://electronjs.org/docs/api/browser-window#browserwindowshow",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:show",
        "api:browserwindowshow",
        "api:browserWindow.show()",
        "doc:show",
        "doc:browserwindowshow",
        "doc:browserWindow.show()"
      ]
    },
    {
      "objectID": "api-browser-window#browserwindowshowinactive",
      "name": "showInactive",
      "signature": "()",
      "description": "Shows the window but doesn't focus on it.",
      "parameters": [],
      "returns": null,
      "additionalTags": [],
      "apiType": "instanceMethod",
      "fullSignature": "browserWindow.showInactive()",
      "tldr": "Shows the window but doesn't focus on it.",
      "slug": "browserwindowshowinactive",
      "url": "https://electronjs.org/docs/api/browser-window#browserwindowshowinactive",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:showInactive",
        "api:browserwindowshowinactive",
        "api:browserWindow.showInactive()",
        "doc:showInactive",
        "doc:browserwindowshowinactive",
        "doc:browserWindow.showInactive()"
      ]
    },
    {
      "objectID": "api-browser-window#browserwindowhide",
      "name": "hide",
      "signature": "()",
      "description": "Hides the window.",
      "parameters": [],
      "returns": null,
      "additionalTags": [],
      "apiType": "instanceMethod",
      "fullSignature": "browserWindow.hide()",
      "tldr": "Hides the window.",
      "slug": "browserwindowhide",
      "url": "https://electronjs.org/docs/api/browser-window#browserwindowhide",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:hide",
        "api:browserwindowhide",
        "api:browserWindow.hide()",
        "doc:hide",
        "doc:browserwindowhide",
        "doc:browserWindow.hide()"
      ]
    },
    {
      "objectID": "api-browser-window#browserwindowisvisible",
      "name": "isVisible",
      "signature": "()",
      "description": "Whether the window is visible to the user.",
      "parameters": [],
      "returns": {
        "collection": false,
        "type": "Boolean"
      },
      "additionalTags": [],
      "apiType": "instanceMethod",
      "fullSignature": "browserWindow.isVisible()",
      "tldr": "Whether the window is visible to the user.",
      "slug": "browserwindowisvisible",
      "url": "https://electronjs.org/docs/api/browser-window#browserwindowisvisible",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:isVisible",
        "api:browserwindowisvisible",
        "api:browserWindow.isVisible()",
        "doc:isVisible",
        "doc:browserwindowisvisible",
        "doc:browserWindow.isVisible()"
      ]
    },
    {
      "objectID": "api-browser-window#browserwindowismodal",
      "name": "isModal",
      "signature": "()",
      "description": "Whether current window is a modal window.",
      "parameters": [],
      "returns": {
        "collection": false,
        "type": "Boolean"
      },
      "additionalTags": [],
      "apiType": "instanceMethod",
      "fullSignature": "browserWindow.isModal()",
      "tldr": "Whether current window is a modal window.",
      "slug": "browserwindowismodal",
      "url": "https://electronjs.org/docs/api/browser-window#browserwindowismodal",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:isModal",
        "api:browserwindowismodal",
        "api:browserWindow.isModal()",
        "doc:isModal",
        "doc:browserwindowismodal",
        "doc:browserWindow.isModal()"
      ]
    },
    {
      "objectID": "api-browser-window#browserwindowmaximize",
      "name": "maximize",
      "signature": "()",
      "description": "Maximizes the window. This will also show (but not focus) the window if it isn't being displayed already.",
      "parameters": [],
      "returns": null,
      "additionalTags": [],
      "apiType": "instanceMethod",
      "fullSignature": "browserWindow.maximize()",
      "tldr": "Maximizes the window.",
      "slug": "browserwindowmaximize",
      "url": "https://electronjs.org/docs/api/browser-window#browserwindowmaximize",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:maximize",
        "api:browserwindowmaximize",
        "api:browserWindow.maximize()",
        "doc:maximize",
        "doc:browserwindowmaximize",
        "doc:browserWindow.maximize()"
      ]
    },
    {
      "objectID": "api-browser-window#browserwindowunmaximize",
      "name": "unmaximize",
      "signature": "()",
      "description": "Unmaximizes the window.",
      "parameters": [],
      "returns": null,
      "additionalTags": [],
      "apiType": "instanceMethod",
      "fullSignature": "browserWindow.unmaximize()",
      "tldr": "Unmaximizes the window.",
      "slug": "browserwindowunmaximize",
      "url": "https://electronjs.org/docs/api/browser-window#browserwindowunmaximize",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:unmaximize",
        "api:browserwindowunmaximize",
        "api:browserWindow.unmaximize()",
        "doc:unmaximize",
        "doc:browserwindowunmaximize",
        "doc:browserWindow.unmaximize()"
      ]
    },
    {
      "objectID": "api-browser-window#browserwindowismaximized",
      "name": "isMaximized",
      "signature": "()",
      "description": "Whether the window is maximized.",
      "parameters": [],
      "returns": {
        "collection": false,
        "type": "Boolean"
      },
      "additionalTags": [],
      "apiType": "instanceMethod",
      "fullSignature": "browserWindow.isMaximized()",
      "tldr": "Whether the window is maximized.",
      "slug": "browserwindowismaximized",
      "url": "https://electronjs.org/docs/api/browser-window#browserwindowismaximized",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:isMaximized",
        "api:browserwindowismaximized",
        "api:browserWindow.isMaximized()",
        "doc:isMaximized",
        "doc:browserwindowismaximized",
        "doc:browserWindow.isMaximized()"
      ]
    },
    {
      "objectID": "api-browser-window#browserwindowminimize",
      "name": "minimize",
      "signature": "()",
      "description": "Minimizes the window. On some platforms the minimized window will be shown in the Dock.",
      "parameters": [],
      "returns": null,
      "additionalTags": [],
      "apiType": "instanceMethod",
      "fullSignature": "browserWindow.minimize()",
      "tldr": "Minimizes the window.",
      "slug": "browserwindowminimize",
      "url": "https://electronjs.org/docs/api/browser-window#browserwindowminimize",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:minimize",
        "api:browserwindowminimize",
        "api:browserWindow.minimize()",
        "doc:minimize",
        "doc:browserwindowminimize",
        "doc:browserWindow.minimize()"
      ]
    },
    {
      "objectID": "api-browser-window#browserwindowrestore",
      "name": "restore",
      "signature": "()",
      "description": "Restores the window from minimized state to its previous state.",
      "parameters": [],
      "returns": null,
      "additionalTags": [],
      "apiType": "instanceMethod",
      "fullSignature": "browserWindow.restore()",
      "tldr": "Restores the window from minimized state to its previous state.",
      "slug": "browserwindowrestore",
      "url": "https://electronjs.org/docs/api/browser-window#browserwindowrestore",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:restore",
        "api:browserwindowrestore",
        "api:browserWindow.restore()",
        "doc:restore",
        "doc:browserwindowrestore",
        "doc:browserWindow.restore()"
      ]
    },
    {
      "objectID": "api-browser-window#browserwindowisminimized",
      "name": "isMinimized",
      "signature": "()",
      "description": "Whether the window is minimized.",
      "parameters": [],
      "returns": {
        "collection": false,
        "type": "Boolean"
      },
      "additionalTags": [],
      "apiType": "instanceMethod",
      "fullSignature": "browserWindow.isMinimized()",
      "tldr": "Whether the window is minimized.",
      "slug": "browserwindowisminimized",
      "url": "https://electronjs.org/docs/api/browser-window#browserwindowisminimized",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:isMinimized",
        "api:browserwindowisminimized",
        "api:browserWindow.isMinimized()",
        "doc:isMinimized",
        "doc:browserwindowisminimized",
        "doc:browserWindow.isMinimized()"
      ]
    },
    {
      "objectID": "api-browser-window#browserwindowsetfullscreenflag",
      "name": "setFullScreen",
      "signature": "(flag)",
      "description": "Sets whether the window should be in fullscreen mode.",
      "parameters": [
        {
          "name": "flag",
          "description": "",
          "required": true,
          "collection": false,
          "type": "Boolean"
        }
      ],
      "returns": null,
      "additionalTags": [],
      "apiType": "instanceMethod",
      "fullSignature": "browserWindow.setFullScreen(flag)",
      "tldr": "Sets whether the window should be in fullscreen mode.",
      "slug": "browserwindowsetfullscreenflag",
      "url": "https://electronjs.org/docs/api/browser-window#browserwindowsetfullscreenflag",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:setFullScreen",
        "api:browserwindowsetfullscreenflag",
        "api:browserWindow.setFullScreen(flag)",
        "doc:setFullScreen",
        "doc:browserwindowsetfullscreenflag",
        "doc:browserWindow.setFullScreen(flag)"
      ]
    },
    {
      "objectID": "api-browser-window#browserwindowisfullscreen",
      "name": "isFullScreen",
      "signature": "()",
      "description": "Whether the window is in fullscreen mode.",
      "parameters": [],
      "returns": {
        "collection": false,
        "type": "Boolean"
      },
      "additionalTags": [],
      "apiType": "instanceMethod",
      "fullSignature": "browserWindow.isFullScreen()",
      "tldr": "Whether the window is in fullscreen mode.",
      "slug": "browserwindowisfullscreen",
      "url": "https://electronjs.org/docs/api/browser-window#browserwindowisfullscreen",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:isFullScreen",
        "api:browserwindowisfullscreen",
        "api:browserWindow.isFullScreen()",
        "doc:isFullScreen",
        "doc:browserwindowisfullscreen",
        "doc:browserWindow.isFullScreen()"
      ]
    },
    {
      "objectID": "api-browser-window#browserwindowsetsimplefullscreenflag",
      "name": "setSimpleFullScreen",
      "signature": "(flag)",
      "description": "Enters or leaves simple fullscreen mode.\n\nSimple fullscreen mode emulates the native fullscreen behavior found in versions of Mac OS X prior to Lion (10.7).",
      "parameters": [
        {
          "name": "flag",
          "description": "",
          "required": true,
          "collection": false,
          "type": "Boolean"
        }
      ],
      "returns": null,
      "additionalTags": [
        "os_macos"
      ],
      "apiType": "instanceMethod",
      "fullSignature": "browserWindow.setSimpleFullScreen(flag)",
      "tldr": "Enters or leaves simple fullscreen mode.\n\nSimple fullscreen mode emulates the native fullscreen behavior found in versions of Mac OS X prior to Lion (10.7).",
      "slug": "browserwindowsetsimplefullscreenflag",
      "url": "https://electronjs.org/docs/api/browser-window#browserwindowsetsimplefullscreenflag",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:setSimpleFullScreen",
        "api:browserwindowsetsimplefullscreenflag",
        "api:browserWindow.setSimpleFullScreen(flag)",
        "doc:setSimpleFullScreen",
        "doc:browserwindowsetsimplefullscreenflag",
        "doc:browserWindow.setSimpleFullScreen(flag)"
      ]
    },
    {
      "objectID": "api-browser-window#browserwindowissimplefullscreen",
      "name": "isSimpleFullScreen",
      "signature": "()",
      "description": "Whether the window is in simple (pre-Lion) fullscreen mode.",
      "parameters": [],
      "returns": {
        "collection": false,
        "type": "Boolean"
      },
      "additionalTags": [
        "os_macos"
      ],
      "apiType": "instanceMethod",
      "fullSignature": "browserWindow.isSimpleFullScreen()",
      "tldr": "Whether the window is in simple (pre-Lion) fullscreen mode.",
      "slug": "browserwindowissimplefullscreen",
      "url": "https://electronjs.org/docs/api/browser-window#browserwindowissimplefullscreen",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:isSimpleFullScreen",
        "api:browserwindowissimplefullscreen",
        "api:browserWindow.isSimpleFullScreen()",
        "doc:isSimpleFullScreen",
        "doc:browserwindowissimplefullscreen",
        "doc:browserWindow.isSimpleFullScreen()"
      ]
    },
    {
      "objectID": "api-browser-window#browserwindowisnormal",
      "name": "isNormal",
      "signature": "()",
      "description": "Whether the window is in normal state (not maximized, not minimized, not in fullscreen mode).",
      "parameters": [],
      "returns": {
        "collection": false,
        "type": "Boolean"
      },
      "additionalTags": [],
      "apiType": "instanceMethod",
      "fullSignature": "browserWindow.isNormal()",
      "tldr": "Whether the window is in normal state (not maximized, not minimized, not in fullscreen mode).",
      "slug": "browserwindowisnormal",
      "url": "https://electronjs.org/docs/api/browser-window#browserwindowisnormal",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:isNormal",
        "api:browserwindowisnormal",
        "api:browserWindow.isNormal()",
        "doc:isNormal",
        "doc:browserwindowisnormal",
        "doc:browserWindow.isNormal()"
      ]
    },
    {
      "objectID": "api-browser-window#browserwindowsetaspectratioaspectratio-extrasize",
      "name": "setAspectRatio",
      "signature": "(aspectRatio[, extraSize])",
      "description": "This will make a window maintain an aspect ratio. The extra size allows a developer to have space, specified in pixels, not included within the aspect ratio calculations. This API already takes into account the difference between a window's size and its content size.\n\nConsider a normal window with an HD video player and associated controls. Perhaps there are 15 pixels of controls on the left edge, 25 pixels of controls on the right edge and 50 pixels of controls below the player. In order to maintain a 16:9 aspect ratio (standard aspect ratio for HD @1920x1080) within the player itself we would call this function with arguments of 16/9 and [ 40, 50 ]. The second argument doesn't care where the extra width and height are within the content view--only that they exist. Sum any extra width and height areas you have within the overall content view.\n\nCalling this function with a value of `0` will remove any previously set aspect ratios.",
      "parameters": [
        {
          "name": "aspectRatio",
          "description": "The aspect ratio to maintain for some portion of the content view.",
          "required": true,
          "collection": false,
          "type": "Float"
        },
        {
          "name": "extraSize",
          "description": "The extra size not to be included while maintaining the aspect ratio.",
          "required": false,
          "collection": false,
          "type": "Size"
        }
      ],
      "returns": null,
      "additionalTags": [
        "os_macos"
      ],
      "apiType": "instanceMethod",
      "fullSignature": "browserWindow.setAspectRatio(aspectRatio[, extraSize])",
      "tldr": "This will make a window maintain an aspect ratio.",
      "slug": "browserwindowsetaspectratioaspectratio-extrasize",
      "url": "https://electronjs.org/docs/api/browser-window#browserwindowsetaspectratioaspectratio-extrasize",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:setAspectRatio",
        "api:browserwindowsetaspectratioaspectratio-extrasize",
        "api:browserWindow.setAspectRatio(aspectRatio[, extraSize])",
        "doc:setAspectRatio",
        "doc:browserwindowsetaspectratioaspectratio-extrasize",
        "doc:browserWindow.setAspectRatio(aspectRatio[, extraSize])"
      ]
    },
    {
      "objectID": "api-browser-window#browserwindowsetbackgroundcolorbackgroundcolor",
      "name": "setBackgroundColor",
      "signature": "(backgroundColor)",
      "description": "Sets the background color of the window. See Setting `backgroundColor`.",
      "parameters": [
        {
          "name": "backgroundColor",
          "description": "Window's background color as a hexadecimal value, like `#66CD00` or `#FFF` or `#80FFFFFF` (alpha is supported if `transparent` is `true`). Default is `#FFF` (white).",
          "required": true,
          "collection": false,
          "type": "String",
          "possibleValues": null
        }
      ],
      "returns": null,
      "additionalTags": [],
      "apiType": "instanceMethod",
      "fullSignature": "browserWindow.setBackgroundColor(backgroundColor)",
      "tldr": "Sets the background color of the window.",
      "slug": "browserwindowsetbackgroundcolorbackgroundcolor",
      "url": "https://electronjs.org/docs/api/browser-window#browserwindowsetbackgroundcolorbackgroundcolor",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:setBackgroundColor",
        "api:browserwindowsetbackgroundcolorbackgroundcolor",
        "api:browserWindow.setBackgroundColor(backgroundColor)",
        "doc:setBackgroundColor",
        "doc:browserwindowsetbackgroundcolorbackgroundcolor",
        "doc:browserWindow.setBackgroundColor(backgroundColor)"
      ]
    },
    {
      "objectID": "api-browser-window#browserwindowpreviewfilepath-displayname",
      "name": "previewFile",
      "signature": "(path[, displayName])",
      "description": "Uses Quick Look to preview a file at a given path.",
      "parameters": [
        {
          "name": "path",
          "description": "The absolute path to the file to preview with QuickLook. This is important as Quick Look uses the file name and file extension on the path to determine the content type of the file to open.",
          "required": true,
          "collection": false,
          "type": "String",
          "possibleValues": null
        },
        {
          "name": "displayName",
          "description": "The name of the file to display on the Quick Look modal view. This is purely visual and does not affect the content type of the file. Defaults to `path`.",
          "required": false,
          "collection": false,
          "type": "String",
          "possibleValues": null
        }
      ],
      "returns": null,
      "additionalTags": [
        "os_macos"
      ],
      "apiType": "instanceMethod",
      "fullSignature": "browserWindow.previewFile(path[, displayName])",
      "tldr": "Uses Quick Look to preview a file at a given path.",
      "slug": "browserwindowpreviewfilepath-displayname",
      "url": "https://electronjs.org/docs/api/browser-window#browserwindowpreviewfilepath-displayname",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:previewFile",
        "api:browserwindowpreviewfilepath-displayname",
        "api:browserWindow.previewFile(path[, displayName])",
        "doc:previewFile",
        "doc:browserwindowpreviewfilepath-displayname",
        "doc:browserWindow.previewFile(path[, displayName])"
      ]
    },
    {
      "objectID": "api-browser-window#browserwindowclosefilepreview",
      "name": "closeFilePreview",
      "signature": "()",
      "description": "Closes the currently open Quick Look panel.",
      "parameters": [],
      "returns": null,
      "additionalTags": [
        "os_macos"
      ],
      "apiType": "instanceMethod",
      "fullSignature": "browserWindow.closeFilePreview()",
      "tldr": "Closes the currently open Quick Look panel.",
      "slug": "browserwindowclosefilepreview",
      "url": "https://electronjs.org/docs/api/browser-window#browserwindowclosefilepreview",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:closeFilePreview",
        "api:browserwindowclosefilepreview",
        "api:browserWindow.closeFilePreview()",
        "doc:closeFilePreview",
        "doc:browserwindowclosefilepreview",
        "doc:browserWindow.closeFilePreview()"
      ]
    },
    {
      "objectID": "api-browser-window#browserwindowsetboundsbounds-animate",
      "name": "setBounds",
      "signature": "(bounds[, animate])",
      "description": "Resizes and moves the window to the supplied bounds. Any properties that are not supplied will default to their current values.",
      "parameters": [
        {
          "name": "bounds",
          "description": "",
          "required": true,
          "collection": false,
          "type": "Partial",
          "innerTypes": [
            {
              "collection": false,
              "type": "Rectangle"
            }
          ]
        },
        {
          "name": "animate",
          "description": "",
          "required": false,
          "collection": false,
          "type": "Boolean"
        }
      ],
      "returns": null,
      "additionalTags": [],
      "apiType": "instanceMethod",
      "fullSignature": "browserWindow.setBounds(bounds[, animate])",
      "tldr": "Resizes and moves the window to the supplied bounds.",
      "slug": "browserwindowsetboundsbounds-animate",
      "url": "https://electronjs.org/docs/api/browser-window#browserwindowsetboundsbounds-animate",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:setBounds",
        "api:browserwindowsetboundsbounds-animate",
        "api:browserWindow.setBounds(bounds[, animate])",
        "doc:setBounds",
        "doc:browserwindowsetboundsbounds-animate",
        "doc:browserWindow.setBounds(bounds[, animate])"
      ]
    },
    {
      "objectID": "api-browser-window#browserwindowgetbounds",
      "name": "getBounds",
      "signature": "()",
      "description": "The `bounds` of the window as `Object`.",
      "parameters": [],
      "returns": {
        "collection": false,
        "type": "Rectangle"
      },
      "additionalTags": [],
      "apiType": "instanceMethod",
      "fullSignature": "browserWindow.getBounds()",
      "tldr": "The `bounds` of the window as `Object`.",
      "slug": "browserwindowgetbounds",
      "url": "https://electronjs.org/docs/api/browser-window#browserwindowgetbounds",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:getBounds",
        "api:browserwindowgetbounds",
        "api:browserWindow.getBounds()",
        "doc:getBounds",
        "doc:browserwindowgetbounds",
        "doc:browserWindow.getBounds()"
      ]
    },
    {
      "objectID": "api-browser-window#browserwindowsetcontentboundsbounds-animate",
      "name": "setContentBounds",
      "signature": "(bounds[, animate])",
      "description": "Resizes and moves the window's client area (e.g. the web page) to the supplied bounds.",
      "parameters": [
        {
          "name": "bounds",
          "description": "",
          "required": true,
          "collection": false,
          "type": "Rectangle"
        },
        {
          "name": "animate",
          "description": "",
          "required": false,
          "collection": false,
          "type": "Boolean"
        }
      ],
      "returns": null,
      "additionalTags": [],
      "apiType": "instanceMethod",
      "fullSignature": "browserWindow.setContentBounds(bounds[, animate])",
      "tldr": "Resizes and moves the window's client area (e.g.",
      "slug": "browserwindowsetcontentboundsbounds-animate",
      "url": "https://electronjs.org/docs/api/browser-window#browserwindowsetcontentboundsbounds-animate",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:setContentBounds",
        "api:browserwindowsetcontentboundsbounds-animate",
        "api:browserWindow.setContentBounds(bounds[, animate])",
        "doc:setContentBounds",
        "doc:browserwindowsetcontentboundsbounds-animate",
        "doc:browserWindow.setContentBounds(bounds[, animate])"
      ]
    },
    {
      "objectID": "api-browser-window#browserwindowgetcontentbounds",
      "name": "getContentBounds",
      "signature": "()",
      "description": "The `bounds` of the window's client area as `Object`.",
      "parameters": [],
      "returns": {
        "collection": false,
        "type": "Rectangle"
      },
      "additionalTags": [],
      "apiType": "instanceMethod",
      "fullSignature": "browserWindow.getContentBounds()",
      "tldr": "The `bounds` of the window's client area as `Object`.",
      "slug": "browserwindowgetcontentbounds",
      "url": "https://electronjs.org/docs/api/browser-window#browserwindowgetcontentbounds",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:getContentBounds",
        "api:browserwindowgetcontentbounds",
        "api:browserWindow.getContentBounds()",
        "doc:getContentBounds",
        "doc:browserwindowgetcontentbounds",
        "doc:browserWindow.getContentBounds()"
      ]
    },
    {
      "objectID": "api-browser-window#browserwindowgetnormalbounds",
      "name": "getNormalBounds",
      "signature": "()",
      "description": "Contains the window bounds of the normal state\n\n**Note:** whatever the current state of the window : maximized, minimized or in fullscreen, this function always returns the position and size of the window in normal state. In normal state, getBounds and getNormalBounds returns the same `Rectangle`.",
      "parameters": [],
      "returns": {
        "collection": false,
        "type": "Rectangle"
      },
      "additionalTags": [],
      "apiType": "instanceMethod",
      "fullSignature": "browserWindow.getNormalBounds()",
      "tldr": "Contains the window bounds of the normal state\n\n**Note:** whatever the current state of the window : maximized, minimized or in fullscreen, this function always returns the position and size of the window in normal state.",
      "slug": "browserwindowgetnormalbounds",
      "url": "https://electronjs.org/docs/api/browser-window#browserwindowgetnormalbounds",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:getNormalBounds",
        "api:browserwindowgetnormalbounds",
        "api:browserWindow.getNormalBounds()",
        "doc:getNormalBounds",
        "doc:browserwindowgetnormalbounds",
        "doc:browserWindow.getNormalBounds()"
      ]
    },
    {
      "objectID": "api-browser-window#browserwindowsetenabledenable",
      "name": "setEnabled",
      "signature": "(enable)",
      "description": "Disable or enable the window.",
      "parameters": [
        {
          "name": "enable",
          "description": "",
          "required": true,
          "collection": false,
          "type": "Boolean"
        }
      ],
      "returns": null,
      "additionalTags": [],
      "apiType": "instanceMethod",
      "fullSignature": "browserWindow.setEnabled(enable)",
      "tldr": "Disable or enable the window.",
      "slug": "browserwindowsetenabledenable",
      "url": "https://electronjs.org/docs/api/browser-window#browserwindowsetenabledenable",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:setEnabled",
        "api:browserwindowsetenabledenable",
        "api:browserWindow.setEnabled(enable)",
        "doc:setEnabled",
        "doc:browserwindowsetenabledenable",
        "doc:browserWindow.setEnabled(enable)"
      ]
    },
    {
      "objectID": "api-browser-window#browserwindowisenabled",
      "name": "isEnabled",
      "signature": "()",
      "description": "Returns Boolean - whether the window is enabled.",
      "parameters": [],
      "returns": null,
      "additionalTags": [],
      "apiType": "instanceMethod",
      "fullSignature": "browserWindow.isEnabled()",
      "tldr": "Returns Boolean - whether the window is enabled.",
      "slug": "browserwindowisenabled",
      "url": "https://electronjs.org/docs/api/browser-window#browserwindowisenabled",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:isEnabled",
        "api:browserwindowisenabled",
        "api:browserWindow.isEnabled()",
        "doc:isEnabled",
        "doc:browserwindowisenabled",
        "doc:browserWindow.isEnabled()"
      ]
    },
    {
      "objectID": "api-browser-window#browserwindowsetsizewidth-height-animate",
      "name": "setSize",
      "signature": "(width, height[, animate])",
      "description": "Resizes the window to `width` and `height`. If `width` or `height` are below any set minimum size constraints the window will snap to its minimum size.",
      "parameters": [
        {
          "name": "width",
          "description": "",
          "required": true,
          "collection": false,
          "type": "Integer"
        },
        {
          "name": "height",
          "description": "",
          "required": true,
          "collection": false,
          "type": "Integer"
        },
        {
          "name": "animate",
          "description": "",
          "required": false,
          "collection": false,
          "type": "Boolean"
        }
      ],
      "returns": null,
      "additionalTags": [],
      "apiType": "instanceMethod",
      "fullSignature": "browserWindow.setSize(width, height[, animate])",
      "tldr": "Resizes the window to `width` and `height`.",
      "slug": "browserwindowsetsizewidth-height-animate",
      "url": "https://electronjs.org/docs/api/browser-window#browserwindowsetsizewidth-height-animate",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:setSize",
        "api:browserwindowsetsizewidth-height-animate",
        "api:browserWindow.setSize(width, height[, animate])",
        "doc:setSize",
        "doc:browserwindowsetsizewidth-height-animate",
        "doc:browserWindow.setSize(width, height[, animate])"
      ]
    },
    {
      "objectID": "api-browser-window#browserwindowgetsize",
      "name": "getSize",
      "signature": "()",
      "description": "Contains the window's width and height.",
      "parameters": [],
      "returns": {
        "collection": true,
        "type": "Integer"
      },
      "additionalTags": [],
      "apiType": "instanceMethod",
      "fullSignature": "browserWindow.getSize()",
      "tldr": "Contains the window's width and height.",
      "slug": "browserwindowgetsize",
      "url": "https://electronjs.org/docs/api/browser-window#browserwindowgetsize",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:getSize",
        "api:browserwindowgetsize",
        "api:browserWindow.getSize()",
        "doc:getSize",
        "doc:browserwindowgetsize",
        "doc:browserWindow.getSize()"
      ]
    },
    {
      "objectID": "api-browser-window#browserwindowsetcontentsizewidth-height-animate",
      "name": "setContentSize",
      "signature": "(width, height[, animate])",
      "description": "Resizes the window's client area (e.g. the web page) to `width` and `height`.",
      "parameters": [
        {
          "name": "width",
          "description": "",
          "required": true,
          "collection": false,
          "type": "Integer"
        },
        {
          "name": "height",
          "description": "",
          "required": true,
          "collection": false,
          "type": "Integer"
        },
        {
          "name": "animate",
          "description": "",
          "required": false,
          "collection": false,
          "type": "Boolean"
        }
      ],
      "returns": null,
      "additionalTags": [],
      "apiType": "instanceMethod",
      "fullSignature": "browserWindow.setContentSize(width, height[, animate])",
      "tldr": "Resizes the window's client area (e.g.",
      "slug": "browserwindowsetcontentsizewidth-height-animate",
      "url": "https://electronjs.org/docs/api/browser-window#browserwindowsetcontentsizewidth-height-animate",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:setContentSize",
        "api:browserwindowsetcontentsizewidth-height-animate",
        "api:browserWindow.setContentSize(width, height[, animate])",
        "doc:setContentSize",
        "doc:browserwindowsetcontentsizewidth-height-animate",
        "doc:browserWindow.setContentSize(width, height[, animate])"
      ]
    },
    {
      "objectID": "api-browser-window#browserwindowgetcontentsize",
      "name": "getContentSize",
      "signature": "()",
      "description": "Contains the window's client area's width and height.",
      "parameters": [],
      "returns": {
        "collection": true,
        "type": "Integer"
      },
      "additionalTags": [],
      "apiType": "instanceMethod",
      "fullSignature": "browserWindow.getContentSize()",
      "tldr": "Contains the window's client area's width and height.",
      "slug": "browserwindowgetcontentsize",
      "url": "https://electronjs.org/docs/api/browser-window#browserwindowgetcontentsize",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:getContentSize",
        "api:browserwindowgetcontentsize",
        "api:browserWindow.getContentSize()",
        "doc:getContentSize",
        "doc:browserwindowgetcontentsize",
        "doc:browserWindow.getContentSize()"
      ]
    },
    {
      "objectID": "api-browser-window#browserwindowsetminimumsizewidth-height",
      "name": "setMinimumSize",
      "signature": "(width, height)",
      "description": "Sets the minimum size of window to `width` and `height`.",
      "parameters": [
        {
          "name": "width",
          "description": "",
          "required": true,
          "collection": false,
          "type": "Integer"
        },
        {
          "name": "height",
          "description": "",
          "required": true,
          "collection": false,
          "type": "Integer"
        }
      ],
      "returns": null,
      "additionalTags": [],
      "apiType": "instanceMethod",
      "fullSignature": "browserWindow.setMinimumSize(width, height)",
      "tldr": "Sets the minimum size of window to `width` and `height`.",
      "slug": "browserwindowsetminimumsizewidth-height",
      "url": "https://electronjs.org/docs/api/browser-window#browserwindowsetminimumsizewidth-height",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:setMinimumSize",
        "api:browserwindowsetminimumsizewidth-height",
        "api:browserWindow.setMinimumSize(width, height)",
        "doc:setMinimumSize",
        "doc:browserwindowsetminimumsizewidth-height",
        "doc:browserWindow.setMinimumSize(width, height)"
      ]
    },
    {
      "objectID": "api-browser-window#browserwindowgetminimumsize",
      "name": "getMinimumSize",
      "signature": "()",
      "description": "Contains the window's minimum width and height.",
      "parameters": [],
      "returns": {
        "collection": true,
        "type": "Integer"
      },
      "additionalTags": [],
      "apiType": "instanceMethod",
      "fullSignature": "browserWindow.getMinimumSize()",
      "tldr": "Contains the window's minimum width and height.",
      "slug": "browserwindowgetminimumsize",
      "url": "https://electronjs.org/docs/api/browser-window#browserwindowgetminimumsize",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:getMinimumSize",
        "api:browserwindowgetminimumsize",
        "api:browserWindow.getMinimumSize()",
        "doc:getMinimumSize",
        "doc:browserwindowgetminimumsize",
        "doc:browserWindow.getMinimumSize()"
      ]
    },
    {
      "objectID": "api-browser-window#browserwindowsetmaximumsizewidth-height",
      "name": "setMaximumSize",
      "signature": "(width, height)",
      "description": "Sets the maximum size of window to `width` and `height`.",
      "parameters": [
        {
          "name": "width",
          "description": "",
          "required": true,
          "collection": false,
          "type": "Integer"
        },
        {
          "name": "height",
          "description": "",
          "required": true,
          "collection": false,
          "type": "Integer"
        }
      ],
      "returns": null,
      "additionalTags": [],
      "apiType": "instanceMethod",
      "fullSignature": "browserWindow.setMaximumSize(width, height)",
      "tldr": "Sets the maximum size of window to `width` and `height`.",
      "slug": "browserwindowsetmaximumsizewidth-height",
      "url": "https://electronjs.org/docs/api/browser-window#browserwindowsetmaximumsizewidth-height",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:setMaximumSize",
        "api:browserwindowsetmaximumsizewidth-height",
        "api:browserWindow.setMaximumSize(width, height)",
        "doc:setMaximumSize",
        "doc:browserwindowsetmaximumsizewidth-height",
        "doc:browserWindow.setMaximumSize(width, height)"
      ]
    },
    {
      "objectID": "api-browser-window#browserwindowgetmaximumsize",
      "name": "getMaximumSize",
      "signature": "()",
      "description": "Contains the window's maximum width and height.",
      "parameters": [],
      "returns": {
        "collection": true,
        "type": "Integer"
      },
      "additionalTags": [],
      "apiType": "instanceMethod",
      "fullSignature": "browserWindow.getMaximumSize()",
      "tldr": "Contains the window's maximum width and height.",
      "slug": "browserwindowgetmaximumsize",
      "url": "https://electronjs.org/docs/api/browser-window#browserwindowgetmaximumsize",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:getMaximumSize",
        "api:browserwindowgetmaximumsize",
        "api:browserWindow.getMaximumSize()",
        "doc:getMaximumSize",
        "doc:browserwindowgetmaximumsize",
        "doc:browserWindow.getMaximumSize()"
      ]
    },
    {
      "objectID": "api-browser-window#browserwindowsetresizableresizable",
      "name": "setResizable",
      "signature": "(resizable)",
      "description": "Sets whether the window can be manually resized by user.\n\n**Deprecated**",
      "parameters": [
        {
          "name": "resizable",
          "description": "",
          "required": true,
          "collection": false,
          "type": "Boolean"
        }
      ],
      "returns": null,
      "additionalTags": [],
      "apiType": "instanceMethod",
      "fullSignature": "browserWindow.setResizable(resizable)",
      "tldr": "Sets whether the window can be manually resized by user.\n\n**Deprecated**.",
      "slug": "browserwindowsetresizableresizable",
      "url": "https://electronjs.org/docs/api/browser-window#browserwindowsetresizableresizable",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:setResizable",
        "api:browserwindowsetresizableresizable",
        "api:browserWindow.setResizable(resizable)",
        "doc:setResizable",
        "doc:browserwindowsetresizableresizable",
        "doc:browserWindow.setResizable(resizable)"
      ]
    },
    {
      "objectID": "api-browser-window#browserwindowisresizable",
      "name": "isResizable",
      "signature": "()",
      "description": "Whether the window can be manually resized by user.\n\n**Deprecated**",
      "parameters": [],
      "returns": {
        "collection": false,
        "type": "Boolean"
      },
      "additionalTags": [],
      "apiType": "instanceMethod",
      "fullSignature": "browserWindow.isResizable()",
      "tldr": "Whether the window can be manually resized by user.\n\n**Deprecated**.",
      "slug": "browserwindowisresizable",
      "url": "https://electronjs.org/docs/api/browser-window#browserwindowisresizable",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:isResizable",
        "api:browserwindowisresizable",
        "api:browserWindow.isResizable()",
        "doc:isResizable",
        "doc:browserwindowisresizable",
        "doc:browserWindow.isResizable()"
      ]
    },
    {
      "objectID": "api-browser-window#browserwindowsetmovablemovable",
      "name": "setMovable",
      "signature": "(movable)",
      "description": "Sets whether the window can be moved by user. On Linux does nothing.\n\n**Deprecated**",
      "parameters": [
        {
          "name": "movable",
          "description": "",
          "required": true,
          "collection": false,
          "type": "Boolean"
        }
      ],
      "returns": null,
      "additionalTags": [
        "os_macos",
        "os_windows"
      ],
      "apiType": "instanceMethod",
      "fullSignature": "browserWindow.setMovable(movable)",
      "tldr": "Sets whether the window can be moved by user.",
      "slug": "browserwindowsetmovablemovable",
      "url": "https://electronjs.org/docs/api/browser-window#browserwindowsetmovablemovable",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:setMovable",
        "api:browserwindowsetmovablemovable",
        "api:browserWindow.setMovable(movable)",
        "doc:setMovable",
        "doc:browserwindowsetmovablemovable",
        "doc:browserWindow.setMovable(movable)"
      ]
    },
    {
      "objectID": "api-browser-window#browserwindowismovable",
      "name": "isMovable",
      "signature": "()",
      "description": "Whether the window can be moved by user.\n\nOn Linux always returns `true`.\n\n**Deprecated**",
      "parameters": [],
      "returns": {
        "collection": false,
        "type": "Boolean"
      },
      "additionalTags": [
        "os_macos",
        "os_windows"
      ],
      "apiType": "instanceMethod",
      "fullSignature": "browserWindow.isMovable()",
      "tldr": "Whether the window can be moved by user.\n\nOn Linux always returns `true`.\n\n**Deprecated**.",
      "slug": "browserwindowismovable",
      "url": "https://electronjs.org/docs/api/browser-window#browserwindowismovable",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:isMovable",
        "api:browserwindowismovable",
        "api:browserWindow.isMovable()",
        "doc:isMovable",
        "doc:browserwindowismovable",
        "doc:browserWindow.isMovable()"
      ]
    },
    {
      "objectID": "api-browser-window#browserwindowsetminimizableminimizable",
      "name": "setMinimizable",
      "signature": "(minimizable)",
      "description": "Sets whether the window can be manually minimized by user. On Linux does nothing.\n\n**Deprecated**",
      "parameters": [
        {
          "name": "minimizable",
          "description": "",
          "required": true,
          "collection": false,
          "type": "Boolean"
        }
      ],
      "returns": null,
      "additionalTags": [
        "os_macos",
        "os_windows"
      ],
      "apiType": "instanceMethod",
      "fullSignature": "browserWindow.setMinimizable(minimizable)",
      "tldr": "Sets whether the window can be manually minimized by user.",
      "slug": "browserwindowsetminimizableminimizable",
      "url": "https://electronjs.org/docs/api/browser-window#browserwindowsetminimizableminimizable",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:setMinimizable",
        "api:browserwindowsetminimizableminimizable",
        "api:browserWindow.setMinimizable(minimizable)",
        "doc:setMinimizable",
        "doc:browserwindowsetminimizableminimizable",
        "doc:browserWindow.setMinimizable(minimizable)"
      ]
    },
    {
      "objectID": "api-browser-window#browserwindowisminimizable",
      "name": "isMinimizable",
      "signature": "()",
      "description": "Whether the window can be manually minimized by user\n\nOn Linux always returns `true`.\n\n**Deprecated**",
      "parameters": [],
      "returns": {
        "collection": false,
        "type": "Boolean"
      },
      "additionalTags": [
        "os_macos",
        "os_windows"
      ],
      "apiType": "instanceMethod",
      "fullSignature": "browserWindow.isMinimizable()",
      "tldr": "Whether the window can be manually minimized by user\n\nOn Linux always returns `true`.\n\n**Deprecated**.",
      "slug": "browserwindowisminimizable",
      "url": "https://electronjs.org/docs/api/browser-window#browserwindowisminimizable",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:isMinimizable",
        "api:browserwindowisminimizable",
        "api:browserWindow.isMinimizable()",
        "doc:isMinimizable",
        "doc:browserwindowisminimizable",
        "doc:browserWindow.isMinimizable()"
      ]
    },
    {
      "objectID": "api-browser-window#browserwindowsetmaximizablemaximizable",
      "name": "setMaximizable",
      "signature": "(maximizable)",
      "description": "Sets whether the window can be manually maximized by user. On Linux does nothing.\n\n**Deprecated**",
      "parameters": [
        {
          "name": "maximizable",
          "description": "",
          "required": true,
          "collection": false,
          "type": "Boolean"
        }
      ],
      "returns": null,
      "additionalTags": [
        "os_macos",
        "os_windows"
      ],
      "apiType": "instanceMethod",
      "fullSignature": "browserWindow.setMaximizable(maximizable)",
      "tldr": "Sets whether the window can be manually maximized by user.",
      "slug": "browserwindowsetmaximizablemaximizable",
      "url": "https://electronjs.org/docs/api/browser-window#browserwindowsetmaximizablemaximizable",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:setMaximizable",
        "api:browserwindowsetmaximizablemaximizable",
        "api:browserWindow.setMaximizable(maximizable)",
        "doc:setMaximizable",
        "doc:browserwindowsetmaximizablemaximizable",
        "doc:browserWindow.setMaximizable(maximizable)"
      ]
    },
    {
      "objectID": "api-browser-window#browserwindowismaximizable",
      "name": "isMaximizable",
      "signature": "()",
      "description": "Whether the window can be manually maximized by user.\n\nOn Linux always returns `true`.\n\n**Deprecated**",
      "parameters": [],
      "returns": {
        "collection": false,
        "type": "Boolean"
      },
      "additionalTags": [
        "os_macos",
        "os_windows"
      ],
      "apiType": "instanceMethod",
      "fullSignature": "browserWindow.isMaximizable()",
      "tldr": "Whether the window can be manually maximized by user.\n\nOn Linux always returns `true`.\n\n**Deprecated**.",
      "slug": "browserwindowismaximizable",
      "url": "https://electronjs.org/docs/api/browser-window#browserwindowismaximizable",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:isMaximizable",
        "api:browserwindowismaximizable",
        "api:browserWindow.isMaximizable()",
        "doc:isMaximizable",
        "doc:browserwindowismaximizable",
        "doc:browserWindow.isMaximizable()"
      ]
    },
    {
      "objectID": "api-browser-window#browserwindowsetfullscreenablefullscreenable",
      "name": "setFullScreenable",
      "signature": "(fullscreenable)",
      "description": "Sets whether the maximize/zoom window button toggles fullscreen mode or maximizes the window.\n\n**Deprecated**",
      "parameters": [
        {
          "name": "fullscreenable",
          "description": "",
          "required": true,
          "collection": false,
          "type": "Boolean"
        }
      ],
      "returns": null,
      "additionalTags": [],
      "apiType": "instanceMethod",
      "fullSignature": "browserWindow.setFullScreenable(fullscreenable)",
      "tldr": "Sets whether the maximize/zoom window button toggles fullscreen mode or maximizes the window.\n\n**Deprecated**.",
      "slug": "browserwindowsetfullscreenablefullscreenable",
      "url": "https://electronjs.org/docs/api/browser-window#browserwindowsetfullscreenablefullscreenable",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:setFullScreenable",
        "api:browserwindowsetfullscreenablefullscreenable",
        "api:browserWindow.setFullScreenable(fullscreenable)",
        "doc:setFullScreenable",
        "doc:browserwindowsetfullscreenablefullscreenable",
        "doc:browserWindow.setFullScreenable(fullscreenable)"
      ]
    },
    {
      "objectID": "api-browser-window#browserwindowisfullscreenable",
      "name": "isFullScreenable",
      "signature": "()",
      "description": "Whether the maximize/zoom window button toggles fullscreen mode or maximizes the window.\n\n**Deprecated**",
      "parameters": [],
      "returns": {
        "collection": false,
        "type": "Boolean"
      },
      "additionalTags": [],
      "apiType": "instanceMethod",
      "fullSignature": "browserWindow.isFullScreenable()",
      "tldr": "Whether the maximize/zoom window button toggles fullscreen mode or maximizes the window.\n\n**Deprecated**.",
      "slug": "browserwindowisfullscreenable",
      "url": "https://electronjs.org/docs/api/browser-window#browserwindowisfullscreenable",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:isFullScreenable",
        "api:browserwindowisfullscreenable",
        "api:browserWindow.isFullScreenable()",
        "doc:isFullScreenable",
        "doc:browserwindowisfullscreenable",
        "doc:browserWindow.isFullScreenable()"
      ]
    },
    {
      "objectID": "api-browser-window#browserwindowsetclosableclosable",
      "name": "setClosable",
      "signature": "(closable)",
      "description": "Sets whether the window can be manually closed by user. On Linux does nothing.\n\n**Deprecated**",
      "parameters": [
        {
          "name": "closable",
          "description": "",
          "required": true,
          "collection": false,
          "type": "Boolean"
        }
      ],
      "returns": null,
      "additionalTags": [
        "os_macos",
        "os_windows"
      ],
      "apiType": "instanceMethod",
      "fullSignature": "browserWindow.setClosable(closable)",
      "tldr": "Sets whether the window can be manually closed by user.",
      "slug": "browserwindowsetclosableclosable",
      "url": "https://electronjs.org/docs/api/browser-window#browserwindowsetclosableclosable",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:setClosable",
        "api:browserwindowsetclosableclosable",
        "api:browserWindow.setClosable(closable)",
        "doc:setClosable",
        "doc:browserwindowsetclosableclosable",
        "doc:browserWindow.setClosable(closable)"
      ]
    },
    {
      "objectID": "api-browser-window#browserwindowisclosable",
      "name": "isClosable",
      "signature": "()",
      "description": "Whether the window can be manually closed by user.\n\nOn Linux always returns `true`.\n\n**Deprecated**",
      "parameters": [],
      "returns": {
        "collection": false,
        "type": "Boolean"
      },
      "additionalTags": [
        "os_macos",
        "os_windows"
      ],
      "apiType": "instanceMethod",
      "fullSignature": "browserWindow.isClosable()",
      "tldr": "Whether the window can be manually closed by user.\n\nOn Linux always returns `true`.\n\n**Deprecated**.",
      "slug": "browserwindowisclosable",
      "url": "https://electronjs.org/docs/api/browser-window#browserwindowisclosable",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:isClosable",
        "api:browserwindowisclosable",
        "api:browserWindow.isClosable()",
        "doc:isClosable",
        "doc:browserwindowisclosable",
        "doc:browserWindow.isClosable()"
      ]
    },
    {
      "objectID": "api-browser-window#browserwindowsetalwaysontopflag-level-relativelevel",
      "name": "setAlwaysOnTop",
      "signature": "(flag[, level][, relativeLevel])",
      "description": "Sets whether the window should show always on top of other windows. After setting this, the window is still a normal window, not a toolbox window which can not be focused on.",
      "parameters": [
        {
          "name": "flag",
          "description": "",
          "required": true,
          "collection": false,
          "type": "Boolean"
        },
        {
          "name": "level",
          "description": "Values include `normal`, `floating`, `torn-off-menu`, `modal-panel`, `main-menu`, `status`, `pop-up-menu`, `screen-saver`, and ~~`dock`~~ (Deprecated). The default is `floating` when `flag` is true. The `level` is reset to `normal` when the flag is false. Note that from `floating` to `status` included, the window is placed below the Dock on macOS and below the taskbar on Windows. From `pop-up-menu` to a higher it is shown above the Dock on macOS and above the taskbar on Windows. See the macOS docs for more details.",
          "required": false,
          "collection": false,
          "type": "String",
          "possibleValues": [
            {
              "value": "normal",
              "description": ""
            },
            {
              "value": "floating",
              "description": ""
            },
            {
              "value": "torn-off-menu",
              "description": ""
            },
            {
              "value": "modal-panel",
              "description": ""
            },
            {
              "value": "main-menu",
              "description": ""
            },
            {
              "value": "status",
              "description": ""
            },
            {
              "value": "pop-up-menu",
              "description": ""
            },
            {
              "value": "screen-saver",
              "description": ""
            }
          ]
        },
        {
          "name": "relativeLevel",
          "description": "The number of layers higher to set this window relative to the given `level`. The default is `0`. Note that Apple discourages setting levels higher than 1 above `screen-saver`.",
          "required": false,
          "collection": false,
          "type": "Integer"
        }
      ],
      "returns": null,
      "additionalTags": [],
      "apiType": "instanceMethod",
      "fullSignature": "browserWindow.setAlwaysOnTop(flag[, level][, relativeLevel])",
      "tldr": "Sets whether the window should show always on top of other windows.",
      "slug": "browserwindowsetalwaysontopflag-level-relativelevel",
      "url": "https://electronjs.org/docs/api/browser-window#browserwindowsetalwaysontopflag-level-relativelevel",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:setAlwaysOnTop",
        "api:browserwindowsetalwaysontopflag-level-relativelevel",
        "api:browserWindow.setAlwaysOnTop(flag[, level][, relativeLevel])",
        "doc:setAlwaysOnTop",
        "doc:browserwindowsetalwaysontopflag-level-relativelevel",
        "doc:browserWindow.setAlwaysOnTop(flag[, level][, relativeLevel])"
      ]
    },
    {
      "objectID": "api-browser-window#browserwindowisalwaysontop",
      "name": "isAlwaysOnTop",
      "signature": "()",
      "description": "Whether the window is always on top of other windows.",
      "parameters": [],
      "returns": {
        "collection": false,
        "type": "Boolean"
      },
      "additionalTags": [],
      "apiType": "instanceMethod",
      "fullSignature": "browserWindow.isAlwaysOnTop()",
      "tldr": "Whether the window is always on top of other windows.",
      "slug": "browserwindowisalwaysontop",
      "url": "https://electronjs.org/docs/api/browser-window#browserwindowisalwaysontop",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:isAlwaysOnTop",
        "api:browserwindowisalwaysontop",
        "api:browserWindow.isAlwaysOnTop()",
        "doc:isAlwaysOnTop",
        "doc:browserwindowisalwaysontop",
        "doc:browserWindow.isAlwaysOnTop()"
      ]
    },
    {
      "objectID": "api-browser-window#browserwindowmovetop",
      "name": "moveTop",
      "signature": "()",
      "description": "Moves window to top(z-order) regardless of focus",
      "parameters": [],
      "returns": null,
      "additionalTags": [],
      "apiType": "instanceMethod",
      "fullSignature": "browserWindow.moveTop()",
      "tldr": "Moves window to top(z-order) regardless of focus.",
      "slug": "browserwindowmovetop",
      "url": "https://electronjs.org/docs/api/browser-window#browserwindowmovetop",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:moveTop",
        "api:browserwindowmovetop",
        "api:browserWindow.moveTop()",
        "doc:moveTop",
        "doc:browserwindowmovetop",
        "doc:browserWindow.moveTop()"
      ]
    },
    {
      "objectID": "api-browser-window#browserwindowcenter",
      "name": "center",
      "signature": "()",
      "description": "Moves window to the center of the screen.",
      "parameters": [],
      "returns": null,
      "additionalTags": [],
      "apiType": "instanceMethod",
      "fullSignature": "browserWindow.center()",
      "tldr": "Moves window to the center of the screen.",
      "slug": "browserwindowcenter",
      "url": "https://electronjs.org/docs/api/browser-window#browserwindowcenter",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:center",
        "api:browserwindowcenter",
        "api:browserWindow.center()",
        "doc:center",
        "doc:browserwindowcenter",
        "doc:browserWindow.center()"
      ]
    },
    {
      "objectID": "api-browser-window#browserwindowsetpositionx-y-animate",
      "name": "setPosition",
      "signature": "(x, y[, animate])",
      "description": "Moves window to `x` and `y`.",
      "parameters": [
        {
          "name": "x",
          "description": "",
          "required": true,
          "collection": false,
          "type": "Integer"
        },
        {
          "name": "y",
          "description": "",
          "required": true,
          "collection": false,
          "type": "Integer"
        },
        {
          "name": "animate",
          "description": "",
          "required": false,
          "collection": false,
          "type": "Boolean"
        }
      ],
      "returns": null,
      "additionalTags": [],
      "apiType": "instanceMethod",
      "fullSignature": "browserWindow.setPosition(x, y[, animate])",
      "tldr": "Moves window to `x` and `y`.",
      "slug": "browserwindowsetpositionx-y-animate",
      "url": "https://electronjs.org/docs/api/browser-window#browserwindowsetpositionx-y-animate",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:setPosition",
        "api:browserwindowsetpositionx-y-animate",
        "api:browserWindow.setPosition(x, y[, animate])",
        "doc:setPosition",
        "doc:browserwindowsetpositionx-y-animate",
        "doc:browserWindow.setPosition(x, y[, animate])"
      ]
    },
    {
      "objectID": "api-browser-window#browserwindowgetposition",
      "name": "getPosition",
      "signature": "()",
      "description": "Contains the window's current position.",
      "parameters": [],
      "returns": {
        "collection": true,
        "type": "Integer"
      },
      "additionalTags": [],
      "apiType": "instanceMethod",
      "fullSignature": "browserWindow.getPosition()",
      "tldr": "Contains the window's current position.",
      "slug": "browserwindowgetposition",
      "url": "https://electronjs.org/docs/api/browser-window#browserwindowgetposition",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:getPosition",
        "api:browserwindowgetposition",
        "api:browserWindow.getPosition()",
        "doc:getPosition",
        "doc:browserwindowgetposition",
        "doc:browserWindow.getPosition()"
      ]
    },
    {
      "objectID": "api-browser-window#browserwindowsettitletitle",
      "name": "setTitle",
      "signature": "(title)",
      "description": "Changes the title of native window to `title`.",
      "parameters": [
        {
          "name": "title",
          "description": "",
          "required": true,
          "collection": false,
          "type": "String",
          "possibleValues": null
        }
      ],
      "returns": null,
      "additionalTags": [],
      "apiType": "instanceMethod",
      "fullSignature": "browserWindow.setTitle(title)",
      "tldr": "Changes the title of native window to `title`.",
      "slug": "browserwindowsettitletitle",
      "url": "https://electronjs.org/docs/api/browser-window#browserwindowsettitletitle",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:setTitle",
        "api:browserwindowsettitletitle",
        "api:browserWindow.setTitle(title)",
        "doc:setTitle",
        "doc:browserwindowsettitletitle",
        "doc:browserWindow.setTitle(title)"
      ]
    },
    {
      "objectID": "api-browser-window#browserwindowgettitle",
      "name": "getTitle",
      "signature": "()",
      "description": "The title of the native window.\n\n**Note:** The title of the web page can be different from the title of the native window.",
      "parameters": [],
      "returns": {
        "collection": false,
        "type": "String",
        "possibleValues": null
      },
      "additionalTags": [],
      "apiType": "instanceMethod",
      "fullSignature": "browserWindow.getTitle()",
      "tldr": "The title of the native window.\n\n**Note:** The title of the web page can be different from the title of the native window.",
      "slug": "browserwindowgettitle",
      "url": "https://electronjs.org/docs/api/browser-window#browserwindowgettitle",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:getTitle",
        "api:browserwindowgettitle",
        "api:browserWindow.getTitle()",
        "doc:getTitle",
        "doc:browserwindowgettitle",
        "doc:browserWindow.getTitle()"
      ]
    },
    {
      "objectID": "api-browser-window#browserwindowsetsheetoffsetoffsety-offsetx",
      "name": "setSheetOffset",
      "signature": "(offsetY[, offsetX])",
      "description": "Changes the attachment point for sheets on macOS. By default, sheets are attached just below the window frame, but you may want to display them beneath a HTML-rendered toolbar. For example:",
      "parameters": [
        {
          "name": "offsetY",
          "description": "",
          "required": true,
          "collection": false,
          "type": "Float"
        },
        {
          "name": "offsetX",
          "description": "",
          "required": false,
          "collection": false,
          "type": "Float"
        }
      ],
      "returns": null,
      "additionalTags": [
        "os_macos"
      ],
      "apiType": "instanceMethod",
      "fullSignature": "browserWindow.setSheetOffset(offsetY[, offsetX])",
      "tldr": "Changes the attachment point for sheets on macOS.",
      "slug": "browserwindowsetsheetoffsetoffsety-offsetx",
      "url": "https://electronjs.org/docs/api/browser-window#browserwindowsetsheetoffsetoffsety-offsetx",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:setSheetOffset",
        "api:browserwindowsetsheetoffsetoffsety-offsetx",
        "api:browserWindow.setSheetOffset(offsetY[, offsetX])",
        "doc:setSheetOffset",
        "doc:browserwindowsetsheetoffsetoffsety-offsetx",
        "doc:browserWindow.setSheetOffset(offsetY[, offsetX])"
      ]
    },
    {
      "objectID": "api-browser-window#browserwindowflashframeflag",
      "name": "flashFrame",
      "signature": "(flag)",
      "description": "Starts or stops flashing the window to attract user's attention.",
      "parameters": [
        {
          "name": "flag",
          "description": "",
          "required": true,
          "collection": false,
          "type": "Boolean"
        }
      ],
      "returns": null,
      "additionalTags": [],
      "apiType": "instanceMethod",
      "fullSignature": "browserWindow.flashFrame(flag)",
      "tldr": "Starts or stops flashing the window to attract user's attention.",
      "slug": "browserwindowflashframeflag",
      "url": "https://electronjs.org/docs/api/browser-window#browserwindowflashframeflag",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:flashFrame",
        "api:browserwindowflashframeflag",
        "api:browserWindow.flashFrame(flag)",
        "doc:flashFrame",
        "doc:browserwindowflashframeflag",
        "doc:browserWindow.flashFrame(flag)"
      ]
    },
    {
      "objectID": "api-browser-window#browserwindowsetskiptaskbarskip",
      "name": "setSkipTaskbar",
      "signature": "(skip)",
      "description": "Makes the window not show in the taskbar.",
      "parameters": [
        {
          "name": "skip",
          "description": "",
          "required": true,
          "collection": false,
          "type": "Boolean"
        }
      ],
      "returns": null,
      "additionalTags": [],
      "apiType": "instanceMethod",
      "fullSignature": "browserWindow.setSkipTaskbar(skip)",
      "tldr": "Makes the window not show in the taskbar.",
      "slug": "browserwindowsetskiptaskbarskip",
      "url": "https://electronjs.org/docs/api/browser-window#browserwindowsetskiptaskbarskip",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:setSkipTaskbar",
        "api:browserwindowsetskiptaskbarskip",
        "api:browserWindow.setSkipTaskbar(skip)",
        "doc:setSkipTaskbar",
        "doc:browserwindowsetskiptaskbarskip",
        "doc:browserWindow.setSkipTaskbar(skip)"
      ]
    },
    {
      "objectID": "api-browser-window#browserwindowsetkioskflag",
      "name": "setKiosk",
      "signature": "(flag)",
      "description": "Enters or leaves the kiosk mode.",
      "parameters": [
        {
          "name": "flag",
          "description": "",
          "required": true,
          "collection": false,
          "type": "Boolean"
        }
      ],
      "returns": null,
      "additionalTags": [],
      "apiType": "instanceMethod",
      "fullSignature": "browserWindow.setKiosk(flag)",
      "tldr": "Enters or leaves the kiosk mode.",
      "slug": "browserwindowsetkioskflag",
      "url": "https://electronjs.org/docs/api/browser-window#browserwindowsetkioskflag",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:setKiosk",
        "api:browserwindowsetkioskflag",
        "api:browserWindow.setKiosk(flag)",
        "doc:setKiosk",
        "doc:browserwindowsetkioskflag",
        "doc:browserWindow.setKiosk(flag)"
      ]
    },
    {
      "objectID": "api-browser-window#browserwindowiskiosk",
      "name": "isKiosk",
      "signature": "()",
      "description": "Whether the window is in kiosk mode.",
      "parameters": [],
      "returns": {
        "collection": false,
        "type": "Boolean"
      },
      "additionalTags": [],
      "apiType": "instanceMethod",
      "fullSignature": "browserWindow.isKiosk()",
      "tldr": "Whether the window is in kiosk mode.",
      "slug": "browserwindowiskiosk",
      "url": "https://electronjs.org/docs/api/browser-window#browserwindowiskiosk",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:isKiosk",
        "api:browserwindowiskiosk",
        "api:browserWindow.isKiosk()",
        "doc:isKiosk",
        "doc:browserwindowiskiosk",
        "doc:browserWindow.isKiosk()"
      ]
    },
    {
      "objectID": "api-browser-window#browserwindowgetnativewindowhandle",
      "name": "getNativeWindowHandle",
      "signature": "()",
      "description": "The platform-specific handle of the window.\n\nThe native type of the handle is `HWND` on Windows, `NSView*` on macOS, and `Window` (`unsigned long`) on Linux.",
      "parameters": [],
      "returns": {
        "collection": false,
        "type": "Buffer"
      },
      "additionalTags": [],
      "apiType": "instanceMethod",
      "fullSignature": "browserWindow.getNativeWindowHandle()",
      "tldr": "The platform-specific handle of the window.\n\nThe native type of the handle is `HWND` on Windows, `NSView*` on macOS, and `Window` (`unsigned long`) on Linux.",
      "slug": "browserwindowgetnativewindowhandle",
      "url": "https://electronjs.org/docs/api/browser-window#browserwindowgetnativewindowhandle",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:getNativeWindowHandle",
        "api:browserwindowgetnativewindowhandle",
        "api:browserWindow.getNativeWindowHandle()",
        "doc:getNativeWindowHandle",
        "doc:browserwindowgetnativewindowhandle",
        "doc:browserWindow.getNativeWindowHandle()"
      ]
    },
    {
      "objectID": "api-browser-window#browserwindowhookwindowmessagemessage-callback",
      "name": "hookWindowMessage",
      "signature": "(message, callback)",
      "description": "Hooks a windows message. The `callback` is called when the message is received in the WndProc.",
      "parameters": [
        {
          "name": "message",
          "description": "",
          "required": true,
          "collection": false,
          "type": "Integer"
        },
        {
          "name": "callback",
          "description": "",
          "required": true,
          "collection": false,
          "type": "Function",
          "parameters": [],
          "returns": null
        }
      ],
      "returns": null,
      "additionalTags": [
        "os_windows"
      ],
      "apiType": "instanceMethod",
      "fullSignature": "browserWindow.hookWindowMessage(message, callback)",
      "tldr": "Hooks a windows message.",
      "slug": "browserwindowhookwindowmessagemessage-callback",
      "url": "https://electronjs.org/docs/api/browser-window#browserwindowhookwindowmessagemessage-callback",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:hookWindowMessage",
        "api:browserwindowhookwindowmessagemessage-callback",
        "api:browserWindow.hookWindowMessage(message, callback)",
        "doc:hookWindowMessage",
        "doc:browserwindowhookwindowmessagemessage-callback",
        "doc:browserWindow.hookWindowMessage(message, callback)"
      ]
    },
    {
      "objectID": "api-browser-window#browserwindowiswindowmessagehookedmessage",
      "name": "isWindowMessageHooked",
      "signature": "(message)",
      "description": "`true` or `false` depending on whether the message is hooked.",
      "parameters": [
        {
          "name": "message",
          "description": "",
          "required": true,
          "collection": false,
          "type": "Integer"
        }
      ],
      "returns": {
        "collection": false,
        "type": "Boolean"
      },
      "additionalTags": [
        "os_windows"
      ],
      "apiType": "instanceMethod",
      "fullSignature": "browserWindow.isWindowMessageHooked(message)",
      "tldr": "`true` or `false` depending on whether the message is hooked.",
      "slug": "browserwindowiswindowmessagehookedmessage",
      "url": "https://electronjs.org/docs/api/browser-window#browserwindowiswindowmessagehookedmessage",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:isWindowMessageHooked",
        "api:browserwindowiswindowmessagehookedmessage",
        "api:browserWindow.isWindowMessageHooked(message)",
        "doc:isWindowMessageHooked",
        "doc:browserwindowiswindowmessagehookedmessage",
        "doc:browserWindow.isWindowMessageHooked(message)"
      ]
    },
    {
      "objectID": "api-browser-window#browserwindowunhookwindowmessagemessage",
      "name": "unhookWindowMessage",
      "signature": "(message)",
      "description": "Unhook the window message.",
      "parameters": [
        {
          "name": "message",
          "description": "",
          "required": true,
          "collection": false,
          "type": "Integer"
        }
      ],
      "returns": null,
      "additionalTags": [
        "os_windows"
      ],
      "apiType": "instanceMethod",
      "fullSignature": "browserWindow.unhookWindowMessage(message)",
      "tldr": "Unhook the window message.",
      "slug": "browserwindowunhookwindowmessagemessage",
      "url": "https://electronjs.org/docs/api/browser-window#browserwindowunhookwindowmessagemessage",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:unhookWindowMessage",
        "api:browserwindowunhookwindowmessagemessage",
        "api:browserWindow.unhookWindowMessage(message)",
        "doc:unhookWindowMessage",
        "doc:browserwindowunhookwindowmessagemessage",
        "doc:browserWindow.unhookWindowMessage(message)"
      ]
    },
    {
      "objectID": "api-browser-window#browserwindowunhookallwindowmessages",
      "name": "unhookAllWindowMessages",
      "signature": "()",
      "description": "Unhooks all of the window messages.",
      "parameters": [],
      "returns": null,
      "additionalTags": [
        "os_windows"
      ],
      "apiType": "instanceMethod",
      "fullSignature": "browserWindow.unhookAllWindowMessages()",
      "tldr": "Unhooks all of the window messages.",
      "slug": "browserwindowunhookallwindowmessages",
      "url": "https://electronjs.org/docs/api/browser-window#browserwindowunhookallwindowmessages",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:unhookAllWindowMessages",
        "api:browserwindowunhookallwindowmessages",
        "api:browserWindow.unhookAllWindowMessages()",
        "doc:unhookAllWindowMessages",
        "doc:browserwindowunhookallwindowmessages",
        "doc:browserWindow.unhookAllWindowMessages()"
      ]
    },
    {
      "objectID": "api-browser-window#browserwindowsetrepresentedfilenamefilename",
      "name": "setRepresentedFilename",
      "signature": "(filename)",
      "description": "Sets the pathname of the file the window represents, and the icon of the file will show in window's title bar.",
      "parameters": [
        {
          "name": "filename",
          "description": "",
          "required": true,
          "collection": false,
          "type": "String",
          "possibleValues": null
        }
      ],
      "returns": null,
      "additionalTags": [
        "os_macos"
      ],
      "apiType": "instanceMethod",
      "fullSignature": "browserWindow.setRepresentedFilename(filename)",
      "tldr": "Sets the pathname of the file the window represents, and the icon of the file will show in window's title bar.",
      "slug": "browserwindowsetrepresentedfilenamefilename",
      "url": "https://electronjs.org/docs/api/browser-window#browserwindowsetrepresentedfilenamefilename",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:setRepresentedFilename",
        "api:browserwindowsetrepresentedfilenamefilename",
        "api:browserWindow.setRepresentedFilename(filename)",
        "doc:setRepresentedFilename",
        "doc:browserwindowsetrepresentedfilenamefilename",
        "doc:browserWindow.setRepresentedFilename(filename)"
      ]
    },
    {
      "objectID": "api-browser-window#browserwindowgetrepresentedfilename",
      "name": "getRepresentedFilename",
      "signature": "()",
      "description": "The pathname of the file the window represents.",
      "parameters": [],
      "returns": {
        "collection": false,
        "type": "String",
        "possibleValues": null
      },
      "additionalTags": [
        "os_macos"
      ],
      "apiType": "instanceMethod",
      "fullSignature": "browserWindow.getRepresentedFilename()",
      "tldr": "The pathname of the file the window represents.",
      "slug": "browserwindowgetrepresentedfilename",
      "url": "https://electronjs.org/docs/api/browser-window#browserwindowgetrepresentedfilename",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:getRepresentedFilename",
        "api:browserwindowgetrepresentedfilename",
        "api:browserWindow.getRepresentedFilename()",
        "doc:getRepresentedFilename",
        "doc:browserwindowgetrepresentedfilename",
        "doc:browserWindow.getRepresentedFilename()"
      ]
    },
    {
      "objectID": "api-browser-window#browserwindowsetdocumenteditededited",
      "name": "setDocumentEdited",
      "signature": "(edited)",
      "description": "Specifies whether the window’s document has been edited, and the icon in title bar will become gray when set to `true`.",
      "parameters": [
        {
          "name": "edited",
          "description": "",
          "required": true,
          "collection": false,
          "type": "Boolean"
        }
      ],
      "returns": null,
      "additionalTags": [
        "os_macos"
      ],
      "apiType": "instanceMethod",
      "fullSignature": "browserWindow.setDocumentEdited(edited)",
      "tldr": "Specifies whether the window’s document has been edited, and the icon in title bar will become gray when set to `true`.",
      "slug": "browserwindowsetdocumenteditededited",
      "url": "https://electronjs.org/docs/api/browser-window#browserwindowsetdocumenteditededited",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:setDocumentEdited",
        "api:browserwindowsetdocumenteditededited",
        "api:browserWindow.setDocumentEdited(edited)",
        "doc:setDocumentEdited",
        "doc:browserwindowsetdocumenteditededited",
        "doc:browserWindow.setDocumentEdited(edited)"
      ]
    },
    {
      "objectID": "api-browser-window#browserwindowisdocumentedited",
      "name": "isDocumentEdited",
      "signature": "()",
      "description": "Whether the window's document has been edited.",
      "parameters": [],
      "returns": {
        "collection": false,
        "type": "Boolean"
      },
      "additionalTags": [
        "os_macos"
      ],
      "apiType": "instanceMethod",
      "fullSignature": "browserWindow.isDocumentEdited()",
      "tldr": "Whether the window's document has been edited.",
      "slug": "browserwindowisdocumentedited",
      "url": "https://electronjs.org/docs/api/browser-window#browserwindowisdocumentedited",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:isDocumentEdited",
        "api:browserwindowisdocumentedited",
        "api:browserWindow.isDocumentEdited()",
        "doc:isDocumentEdited",
        "doc:browserwindowisdocumentedited",
        "doc:browserWindow.isDocumentEdited()"
      ]
    },
    {
      "objectID": "api-browser-window#browserwindowfocusonwebview",
      "name": "focusOnWebView",
      "signature": "()",
      "description": "",
      "parameters": [],
      "returns": null,
      "additionalTags": [],
      "apiType": "instanceMethod",
      "fullSignature": "browserWindow.focusOnWebView()",
      "tldr": null,
      "slug": "browserwindowfocusonwebview",
      "url": "https://electronjs.org/docs/api/browser-window#browserwindowfocusonwebview",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:focusOnWebView",
        "api:browserwindowfocusonwebview",
        "api:browserWindow.focusOnWebView()",
        "doc:focusOnWebView",
        "doc:browserwindowfocusonwebview",
        "doc:browserWindow.focusOnWebView()"
      ]
    },
    {
      "objectID": "api-browser-window#browserwindowblurwebview",
      "name": "blurWebView",
      "signature": "()",
      "description": "",
      "parameters": [],
      "returns": null,
      "additionalTags": [],
      "apiType": "instanceMethod",
      "fullSignature": "browserWindow.blurWebView()",
      "tldr": null,
      "slug": "browserwindowblurwebview",
      "url": "https://electronjs.org/docs/api/browser-window#browserwindowblurwebview",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:blurWebView",
        "api:browserwindowblurwebview",
        "api:browserWindow.blurWebView()",
        "doc:blurWebView",
        "doc:browserwindowblurwebview",
        "doc:browserWindow.blurWebView()"
      ]
    },
    {
      "objectID": "api-browser-window#browserwindowcapturepagerect",
      "name": "capturePage",
      "signature": "([rect])",
      "description": "Resolves with a NativeImage\n\nCaptures a snapshot of the page within `rect`. Omitting `rect` will capture the whole visible page.",
      "parameters": [
        {
          "name": "rect",
          "description": "The bounds to capture",
          "required": false,
          "collection": false,
          "type": "Rectangle"
        }
      ],
      "returns": {
        "collection": false,
        "type": "Promise",
        "innerTypes": [
          {
            "collection": false,
            "type": "NativeImage"
          }
        ]
      },
      "additionalTags": [],
      "apiType": "instanceMethod",
      "fullSignature": "browserWindow.capturePage([rect])",
      "tldr": "Resolves with a NativeImage\n\nCaptures a snapshot of the page within `rect`.",
      "slug": "browserwindowcapturepagerect",
      "url": "https://electronjs.org/docs/api/browser-window#browserwindowcapturepagerect",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:capturePage",
        "api:browserwindowcapturepagerect",
        "api:browserWindow.capturePage([rect])",
        "doc:capturePage",
        "doc:browserwindowcapturepagerect",
        "doc:browserWindow.capturePage([rect])"
      ]
    },
    {
      "objectID": "api-browser-window#browserwindowloadurlurl-options",
      "name": "loadURL",
      "signature": "(url[, options])",
      "description": "the promise will resolve when the page has finished loading (see `did-finish-load`), and rejects if the page fails to load (see `did-fail-load`).\n\nSame as `webContents.loadURL(url[, options])`.\n\nThe `url` can be a remote address (e.g. `http://`) or a path to a local HTML file using the `file://` protocol.\n\nTo ensure that file URLs are properly formatted, it is recommended to use Node's `url.format` method:\n\nYou can load a URL using a `POST` request with URL-encoded data by doing the following:",
      "parameters": [
        {
          "name": "url",
          "description": "",
          "required": true,
          "collection": false,
          "type": "String",
          "possibleValues": null
        },
        {
          "name": "options",
          "description": "",
          "required": false,
          "collection": false,
          "type": "Object",
          "properties": [
            {
              "name": "httpReferrer",
              "description": "An HTTP Referrer URL.",
              "required": false,
              "additionalTags": [],
              "collection": false,
              "type": [
                {
                  "collection": false,
                  "type": "String",
                  "possibleValues": null
                },
                {
                  "collection": false,
                  "type": "Referrer"
                }
              ]
            },
            {
              "name": "userAgent",
              "description": "A user agent originating the request.",
              "required": false,
              "additionalTags": [],
              "collection": false,
              "type": "String",
              "possibleValues": null
            },
            {
              "name": "extraHeaders",
              "description": "Extra headers separated by \"\\n\"",
              "required": false,
              "additionalTags": [],
              "collection": false,
              "type": "String",
              "possibleValues": null
            },
            {
              "name": "postData",
              "description": "",
              "required": false,
              "additionalTags": [],
              "collection": false,
              "type": [
                {
                  "collection": true,
                  "type": "UploadRawData"
                },
                {
                  "collection": true,
                  "type": "UploadFile"
                },
                {
                  "collection": true,
                  "type": "UploadBlob"
                }
              ]
            },
            {
              "name": "baseURLForDataURL",
              "description": "Base URL (with trailing path separator) for files to be loaded by the data URL. This is needed only if the specified `url` is a data URL and needs to load other files.",
              "required": false,
              "additionalTags": [],
              "collection": false,
              "type": "String",
              "possibleValues": null
            }
          ]
        }
      ],
      "returns": {
        "collection": false,
        "type": "Promise",
        "innerTypes": [
          {
            "collection": false,
            "type": "void"
          }
        ]
      },
      "additionalTags": [],
      "apiType": "instanceMethod",
      "fullSignature": "browserWindow.loadURL(url[, options])",
      "tldr": "the promise will resolve when the page has finished loading (see `did-finish-load`), and rejects if the page fails to load (see `did-fail-load`).\n\nSame as `webContents.loadURL(url[, options])`.\n\nThe `url` can be a remote address (e.g.",
      "slug": "browserwindowloadurlurl-options",
      "url": "https://electronjs.org/docs/api/browser-window#browserwindowloadurlurl-options",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:loadURL",
        "api:browserwindowloadurlurl-options",
        "api:browserWindow.loadURL(url[, options])",
        "doc:loadURL",
        "doc:browserwindowloadurlurl-options",
        "doc:browserWindow.loadURL(url[, options])"
      ]
    },
    {
      "objectID": "api-browser-window#browserwindowloadfilefilepath-options",
      "name": "loadFile",
      "signature": "(filePath[, options])",
      "description": "the promise will resolve when the page has finished loading (see `did-finish-load`), and rejects if the page fails to load (see `did-fail-load`).\n\nSame as `webContents.loadFile`, `filePath` should be a path to an HTML file relative to the root of your application.  See the `webContents` docs for more information.",
      "parameters": [
        {
          "name": "filePath",
          "description": "",
          "required": true,
          "collection": false,
          "type": "String",
          "possibleValues": null
        },
        {
          "name": "options",
          "description": "",
          "required": false,
          "collection": false,
          "type": "Object",
          "properties": [
            {
              "name": "query",
              "description": "Passed to `url.format()`.",
              "required": false,
              "additionalTags": [],
              "collection": false,
              "type": "Record",
              "innerTypes": [
                {
                  "collection": false,
                  "type": "String",
                  "possibleValues": null
                },
                {
                  "collection": false,
                  "type": "String",
                  "possibleValues": null
                }
              ]
            },
            {
              "name": "search",
              "description": "Passed to `url.format()`.",
              "required": false,
              "additionalTags": [],
              "collection": false,
              "type": "String",
              "possibleValues": null
            },
            {
              "name": "hash",
              "description": "Passed to `url.format()`.",
              "required": false,
              "additionalTags": [],
              "collection": false,
              "type": "String",
              "possibleValues": null
            }
          ]
        }
      ],
      "returns": {
        "collection": false,
        "type": "Promise",
        "innerTypes": [
          {
            "collection": false,
            "type": "void"
          }
        ]
      },
      "additionalTags": [],
      "apiType": "instanceMethod",
      "fullSignature": "browserWindow.loadFile(filePath[, options])",
      "tldr": "the promise will resolve when the page has finished loading (see `did-finish-load`), and rejects if the page fails to load (see `did-fail-load`).\n\nSame as `webContents.loadFile`, `filePath` should be a path to an HTML file relative to the root of your application.",
      "slug": "browserwindowloadfilefilepath-options",
      "url": "https://electronjs.org/docs/api/browser-window#browserwindowloadfilefilepath-options",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:loadFile",
        "api:browserwindowloadfilefilepath-options",
        "api:browserWindow.loadFile(filePath[, options])",
        "doc:loadFile",
        "doc:browserwindowloadfilefilepath-options",
        "doc:browserWindow.loadFile(filePath[, options])"
      ]
    },
    {
      "objectID": "api-browser-window#browserwindowreload",
      "name": "reload",
      "signature": "()",
      "description": "Same as `webContents.reload`.",
      "parameters": [],
      "returns": null,
      "additionalTags": [],
      "apiType": "instanceMethod",
      "fullSignature": "browserWindow.reload()",
      "tldr": "Same as `webContents.reload`.",
      "slug": "browserwindowreload",
      "url": "https://electronjs.org/docs/api/browser-window#browserwindowreload",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:reload",
        "api:browserwindowreload",
        "api:browserWindow.reload()",
        "doc:reload",
        "doc:browserwindowreload",
        "doc:browserWindow.reload()"
      ]
    },
    {
      "objectID": "api-browser-window#browserwindowsetmenumenu",
      "name": "setMenu",
      "signature": "(menu)",
      "description": "Sets the `menu` as the window's menu bar.",
      "parameters": [
        {
          "name": "menu",
          "description": "",
          "required": true,
          "collection": false,
          "type": [
            {
              "collection": false,
              "type": "Menu"
            },
            {
              "type": "null",
              "collection": false
            }
          ]
        }
      ],
      "returns": null,
      "additionalTags": [
        "os_linux",
        "os_windows"
      ],
      "apiType": "instanceMethod",
      "fullSignature": "browserWindow.setMenu(menu)",
      "tldr": "Sets the `menu` as the window's menu bar.",
      "slug": "browserwindowsetmenumenu",
      "url": "https://electronjs.org/docs/api/browser-window#browserwindowsetmenumenu",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:setMenu",
        "api:browserwindowsetmenumenu",
        "api:browserWindow.setMenu(menu)",
        "doc:setMenu",
        "doc:browserwindowsetmenumenu",
        "doc:browserWindow.setMenu(menu)"
      ]
    },
    {
      "objectID": "api-browser-window#browserwindowremovemenu",
      "name": "removeMenu",
      "signature": "()",
      "description": "Remove the window's menu bar.",
      "parameters": [],
      "returns": null,
      "additionalTags": [
        "os_linux",
        "os_windows"
      ],
      "apiType": "instanceMethod",
      "fullSignature": "browserWindow.removeMenu()",
      "tldr": "Remove the window's menu bar.",
      "slug": "browserwindowremovemenu",
      "url": "https://electronjs.org/docs/api/browser-window#browserwindowremovemenu",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:removeMenu",
        "api:browserwindowremovemenu",
        "api:browserWindow.removeMenu()",
        "doc:removeMenu",
        "doc:browserwindowremovemenu",
        "doc:browserWindow.removeMenu()"
      ]
    },
    {
      "objectID": "api-browser-window#browserwindowsetprogressbarprogress-options",
      "name": "setProgressBar",
      "signature": "(progress[, options])",
      "description": "Sets progress value in progress bar. Valid range is [0, 1.0].\n\nRemove progress bar when progress < 0; Change to indeterminate mode when progress > 1.\n\nOn Linux platform, only supports Unity desktop environment, you need to specify the `*.desktop` file name to `desktopName` field in `package.json`. By default, it will assume `{app.name}.desktop`.\n\nOn Windows, a mode can be passed. Accepted values are `none`, `normal`, `indeterminate`, `error`, and `paused`. If you call `setProgressBar` without a mode set (but with a value within the valid range), `normal` will be assumed.",
      "parameters": [
        {
          "name": "progress",
          "description": "",
          "required": true,
          "collection": false,
          "type": "Double"
        },
        {
          "name": "options",
          "description": "",
          "required": false,
          "collection": false,
          "type": "Object",
          "properties": [
            {
              "name": "mode",
              "description": "Mode for the progress bar. Can be `none`, `normal`, `indeterminate`, `error` or `paused`.",
              "required": true,
              "additionalTags": [
                "os_windows"
              ],
              "collection": false,
              "type": "String",
              "possibleValues": [
                {
                  "value": "none",
                  "description": ""
                },
                {
                  "value": "normal",
                  "description": ""
                },
                {
                  "value": "indeterminate",
                  "description": ""
                },
                {
                  "value": "error",
                  "description": ""
                },
                {
                  "value": "paused",
                  "description": ""
                }
              ]
            }
          ]
        }
      ],
      "returns": null,
      "additionalTags": [],
      "apiType": "instanceMethod",
      "fullSignature": "browserWindow.setProgressBar(progress[, options])",
      "tldr": "Sets progress value in progress bar.",
      "slug": "browserwindowsetprogressbarprogress-options",
      "url": "https://electronjs.org/docs/api/browser-window#browserwindowsetprogressbarprogress-options",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:setProgressBar",
        "api:browserwindowsetprogressbarprogress-options",
        "api:browserWindow.setProgressBar(progress[, options])",
        "doc:setProgressBar",
        "doc:browserwindowsetprogressbarprogress-options",
        "doc:browserWindow.setProgressBar(progress[, options])"
      ]
    },
    {
      "objectID": "api-browser-window#browserwindowsetoverlayiconoverlay-description",
      "name": "setOverlayIcon",
      "signature": "(overlay, description)",
      "description": "Sets a 16 x 16 pixel overlay onto the current taskbar icon, usually used to convey some sort of application status or to passively notify the user.",
      "parameters": [
        {
          "name": "overlay",
          "description": "the icon to display on the bottom right corner of the taskbar icon. If this parameter is `null`, the overlay is cleared",
          "required": true,
          "collection": false,
          "type": [
            {
              "collection": false,
              "type": "NativeImage"
            },
            {
              "type": "null",
              "collection": false
            }
          ]
        },
        {
          "name": "description",
          "description": "a description that will be provided to Accessibility screen readers",
          "required": true,
          "collection": false,
          "type": "String",
          "possibleValues": null
        }
      ],
      "returns": null,
      "additionalTags": [
        "os_windows"
      ],
      "apiType": "instanceMethod",
      "fullSignature": "browserWindow.setOverlayIcon(overlay, description)",
      "tldr": "Sets a 16 x 16 pixel overlay onto the current taskbar icon, usually used to convey some sort of application status or to passively notify the user.",
      "slug": "browserwindowsetoverlayiconoverlay-description",
      "url": "https://electronjs.org/docs/api/browser-window#browserwindowsetoverlayiconoverlay-description",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:setOverlayIcon",
        "api:browserwindowsetoverlayiconoverlay-description",
        "api:browserWindow.setOverlayIcon(overlay, description)",
        "doc:setOverlayIcon",
        "doc:browserwindowsetoverlayiconoverlay-description",
        "doc:browserWindow.setOverlayIcon(overlay, description)"
      ]
    },
    {
      "objectID": "api-browser-window#browserwindowsethasshadowhasshadow",
      "name": "setHasShadow",
      "signature": "(hasShadow)",
      "description": "Sets whether the window should have a shadow.",
      "parameters": [
        {
          "name": "hasShadow",
          "description": "",
          "required": true,
          "collection": false,
          "type": "Boolean"
        }
      ],
      "returns": null,
      "additionalTags": [],
      "apiType": "instanceMethod",
      "fullSignature": "browserWindow.setHasShadow(hasShadow)",
      "tldr": "Sets whether the window should have a shadow.",
      "slug": "browserwindowsethasshadowhasshadow",
      "url": "https://electronjs.org/docs/api/browser-window#browserwindowsethasshadowhasshadow",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:setHasShadow",
        "api:browserwindowsethasshadowhasshadow",
        "api:browserWindow.setHasShadow(hasShadow)",
        "doc:setHasShadow",
        "doc:browserwindowsethasshadowhasshadow",
        "doc:browserWindow.setHasShadow(hasShadow)"
      ]
    },
    {
      "objectID": "api-browser-window#browserwindowhasshadow",
      "name": "hasShadow",
      "signature": "()",
      "description": "Whether the window has a shadow.",
      "parameters": [],
      "returns": {
        "collection": false,
        "type": "Boolean"
      },
      "additionalTags": [],
      "apiType": "instanceMethod",
      "fullSignature": "browserWindow.hasShadow()",
      "tldr": "Whether the window has a shadow.",
      "slug": "browserwindowhasshadow",
      "url": "https://electronjs.org/docs/api/browser-window#browserwindowhasshadow",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:hasShadow",
        "api:browserwindowhasshadow",
        "api:browserWindow.hasShadow()",
        "doc:hasShadow",
        "doc:browserwindowhasshadow",
        "doc:browserWindow.hasShadow()"
      ]
    },
    {
      "objectID": "api-browser-window#browserwindowsetopacityopacity",
      "name": "setOpacity",
      "signature": "(opacity)",
      "description": "Sets the opacity of the window. On Linux, does nothing. Out of bound number values are clamped to the [0, 1] range.",
      "parameters": [
        {
          "name": "opacity",
          "description": "between 0.0 (fully transparent) and 1.0 (fully opaque)",
          "required": true,
          "collection": false,
          "type": "Number"
        }
      ],
      "returns": null,
      "additionalTags": [
        "os_windows",
        "os_macos"
      ],
      "apiType": "instanceMethod",
      "fullSignature": "browserWindow.setOpacity(opacity)",
      "tldr": "Sets the opacity of the window.",
      "slug": "browserwindowsetopacityopacity",
      "url": "https://electronjs.org/docs/api/browser-window#browserwindowsetopacityopacity",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:setOpacity",
        "api:browserwindowsetopacityopacity",
        "api:browserWindow.setOpacity(opacity)",
        "doc:setOpacity",
        "doc:browserwindowsetopacityopacity",
        "doc:browserWindow.setOpacity(opacity)"
      ]
    },
    {
      "objectID": "api-browser-window#browserwindowgetopacity",
      "name": "getOpacity",
      "signature": "()",
      "description": "between 0.0 (fully transparent) and 1.0 (fully opaque). On Linux, always returns 1.",
      "parameters": [],
      "returns": {
        "collection": false,
        "type": "Number"
      },
      "additionalTags": [],
      "apiType": "instanceMethod",
      "fullSignature": "browserWindow.getOpacity()",
      "tldr": "between 0.0 (fully transparent) and 1.0 (fully opaque).",
      "slug": "browserwindowgetopacity",
      "url": "https://electronjs.org/docs/api/browser-window#browserwindowgetopacity",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:getOpacity",
        "api:browserwindowgetopacity",
        "api:browserWindow.getOpacity()",
        "doc:getOpacity",
        "doc:browserwindowgetopacity",
        "doc:browserWindow.getOpacity()"
      ]
    },
    {
      "objectID": "api-browser-window#browserwindowsetshaperects",
      "name": "setShape",
      "signature": "(rects)",
      "description": "Setting a window shape determines the area within the window where the system permits drawing and user interaction. Outside of the given region, no pixels will be drawn and no mouse events will be registered. Mouse events outside of the region will not be received by that window, but will fall through to whatever is behind the window.",
      "parameters": [
        {
          "name": "rects",
          "description": "Sets a shape on the window. Passing an empty list reverts the window to being rectangular.",
          "required": true,
          "collection": true,
          "type": "Rectangle"
        }
      ],
      "returns": null,
      "additionalTags": [
        "os_windows",
        "os_linux",
        "stability_experimental"
      ],
      "apiType": "instanceMethod",
      "fullSignature": "browserWindow.setShape(rects)",
      "tldr": "Setting a window shape determines the area within the window where the system permits drawing and user interaction.",
      "slug": "browserwindowsetshaperects",
      "url": "https://electronjs.org/docs/api/browser-window#browserwindowsetshaperects",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:setShape",
        "api:browserwindowsetshaperects",
        "api:browserWindow.setShape(rects)",
        "doc:setShape",
        "doc:browserwindowsetshaperects",
        "doc:browserWindow.setShape(rects)"
      ]
    },
    {
      "objectID": "api-browser-window#browserwindowsetthumbarbuttonsbuttons",
      "name": "setThumbarButtons",
      "signature": "(buttons)",
      "description": "Whether the buttons were added successfully\n\nAdd a thumbnail toolbar with a specified set of buttons to the thumbnail image of a window in a taskbar button layout. Returns a `Boolean` object indicates whether the thumbnail has been added successfully.\n\nThe number of buttons in thumbnail toolbar should be no greater than 7 due to the limited room. Once you setup the thumbnail toolbar, the toolbar cannot be removed due to the platform's limitation. But you can call the API with an empty array to clean the buttons.\n\nThe `buttons` is an array of `Button` objects:\n\n* `Button` Object\n  * `icon` NativeImage - The icon showing in thumbnail toolbar.\n  * `click` Function\n  * `tooltip` String (optional) - The text of the button's tooltip.\n  * `flags` String[] (optional) - Control specific states and behaviors of the button. By default, it is `['enabled']`.\n\nThe `flags` is an array that can include following `String`s:\n\n* `enabled` - The button is active and available to the user.\n* `disabled` - The button is disabled. It is present, but has a visual state indicating it will not respond to user action.\n* `dismissonclick` - When the button is clicked, the thumbnail window closes immediately.\n* `nobackground` - Do not draw a button border, use only the image.\n* `hidden` - The button is not shown to the user.\n* `noninteractive` - The button is enabled but not interactive; no pressed button state is drawn. This value is intended for instances where the button is used in a notification.",
      "parameters": [
        {
          "name": "buttons",
          "description": "",
          "required": true,
          "collection": true,
          "type": "ThumbarButton"
        }
      ],
      "returns": {
        "collection": false,
        "type": "Boolean"
      },
      "additionalTags": [
        "os_windows"
      ],
      "apiType": "instanceMethod",
      "fullSignature": "browserWindow.setThumbarButtons(buttons)",
      "tldr": "Whether the buttons were added successfully\n\nAdd a thumbnail toolbar with a specified set of buttons to the thumbnail image of a window in a taskbar button layout.",
      "slug": "browserwindowsetthumbarbuttonsbuttons",
      "url": "https://electronjs.org/docs/api/browser-window#browserwindowsetthumbarbuttonsbuttons",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:setThumbarButtons",
        "api:browserwindowsetthumbarbuttonsbuttons",
        "api:browserWindow.setThumbarButtons(buttons)",
        "doc:setThumbarButtons",
        "doc:browserwindowsetthumbarbuttonsbuttons",
        "doc:browserWindow.setThumbarButtons(buttons)"
      ]
    },
    {
      "objectID": "api-browser-window#browserwindowsetthumbnailclipregion",
      "name": "setThumbnailClip",
      "signature": "(region)",
      "description": "Sets the region of the window to show as the thumbnail image displayed when hovering over the window in the taskbar. You can reset the thumbnail to be the entire window by specifying an empty region: `{ x: 0, y: 0, width: 0, height: 0 }`.",
      "parameters": [
        {
          "name": "region",
          "description": "Region of the window",
          "required": true,
          "collection": false,
          "type": "Rectangle"
        }
      ],
      "returns": null,
      "additionalTags": [
        "os_windows"
      ],
      "apiType": "instanceMethod",
      "fullSignature": "browserWindow.setThumbnailClip(region)",
      "tldr": "Sets the region of the window to show as the thumbnail image displayed when hovering over the window in the taskbar.",
      "slug": "browserwindowsetthumbnailclipregion",
      "url": "https://electronjs.org/docs/api/browser-window#browserwindowsetthumbnailclipregion",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:setThumbnailClip",
        "api:browserwindowsetthumbnailclipregion",
        "api:browserWindow.setThumbnailClip(region)",
        "doc:setThumbnailClip",
        "doc:browserwindowsetthumbnailclipregion",
        "doc:browserWindow.setThumbnailClip(region)"
      ]
    },
    {
      "objectID": "api-browser-window#browserwindowsetthumbnailtooltiptooltip",
      "name": "setThumbnailToolTip",
      "signature": "(toolTip)",
      "description": "Sets the toolTip that is displayed when hovering over the window thumbnail in the taskbar.",
      "parameters": [
        {
          "name": "toolTip",
          "description": "",
          "required": true,
          "collection": false,
          "type": "String",
          "possibleValues": null
        }
      ],
      "returns": null,
      "additionalTags": [
        "os_windows"
      ],
      "apiType": "instanceMethod",
      "fullSignature": "browserWindow.setThumbnailToolTip(toolTip)",
      "tldr": "Sets the toolTip that is displayed when hovering over the window thumbnail in the taskbar.",
      "slug": "browserwindowsetthumbnailtooltiptooltip",
      "url": "https://electronjs.org/docs/api/browser-window#browserwindowsetthumbnailtooltiptooltip",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:setThumbnailToolTip",
        "api:browserwindowsetthumbnailtooltiptooltip",
        "api:browserWindow.setThumbnailToolTip(toolTip)",
        "doc:setThumbnailToolTip",
        "doc:browserwindowsetthumbnailtooltiptooltip",
        "doc:browserWindow.setThumbnailToolTip(toolTip)"
      ]
    },
    {
      "objectID": "api-browser-window#browserwindowsetappdetailsoptions",
      "name": "setAppDetails",
      "signature": "(options)",
      "description": "Sets the properties for the window's taskbar button.\n\n**Note:** `relaunchCommand` and `relaunchDisplayName` must always be set together. If one of those properties is not set, then neither will be used.",
      "parameters": [
        {
          "name": "options",
          "description": "",
          "required": true,
          "collection": false,
          "type": "Object",
          "properties": [
            {
              "name": "appId",
              "description": "Window's App User Model ID. It has to be set, otherwise the other options will have no effect.",
              "required": false,
              "additionalTags": [],
              "collection": false,
              "type": "String",
              "possibleValues": null
            },
            {
              "name": "appIconPath",
              "description": "Window's Relaunch Icon.",
              "required": false,
              "additionalTags": [],
              "collection": false,
              "type": "String",
              "possibleValues": null
            },
            {
              "name": "appIconIndex",
              "description": "Index of the icon in `appIconPath`. Ignored when `appIconPath` is not set. Default is `0`.",
              "required": false,
              "additionalTags": [],
              "collection": false,
              "type": "Integer"
            },
            {
              "name": "relaunchCommand",
              "description": "Window's Relaunch Command.",
              "required": false,
              "additionalTags": [],
              "collection": false,
              "type": "String",
              "possibleValues": null
            },
            {
              "name": "relaunchDisplayName",
              "description": "Window's Relaunch Display Name.",
              "required": false,
              "additionalTags": [],
              "collection": false,
              "type": "String",
              "possibleValues": null
            }
          ]
        }
      ],
      "returns": null,
      "additionalTags": [
        "os_windows"
      ],
      "apiType": "instanceMethod",
      "fullSignature": "browserWindow.setAppDetails(options)",
      "tldr": "Sets the properties for the window's taskbar button.\n\n**Note:** `relaunchCommand` and `relaunchDisplayName` must always be set together.",
      "slug": "browserwindowsetappdetailsoptions",
      "url": "https://electronjs.org/docs/api/browser-window#browserwindowsetappdetailsoptions",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:setAppDetails",
        "api:browserwindowsetappdetailsoptions",
        "api:browserWindow.setAppDetails(options)",
        "doc:setAppDetails",
        "doc:browserwindowsetappdetailsoptions",
        "doc:browserWindow.setAppDetails(options)"
      ]
    },
    {
      "objectID": "api-browser-window#browserwindowshowdefinitionforselection",
      "name": "showDefinitionForSelection",
      "signature": "()",
      "description": "Same as `webContents.showDefinitionForSelection()`.",
      "parameters": [],
      "returns": null,
      "additionalTags": [
        "os_macos"
      ],
      "apiType": "instanceMethod",
      "fullSignature": "browserWindow.showDefinitionForSelection()",
      "tldr": "Same as `webContents.showDefinitionForSelection()`.",
      "slug": "browserwindowshowdefinitionforselection",
      "url": "https://electronjs.org/docs/api/browser-window#browserwindowshowdefinitionforselection",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:showDefinitionForSelection",
        "api:browserwindowshowdefinitionforselection",
        "api:browserWindow.showDefinitionForSelection()",
        "doc:showDefinitionForSelection",
        "doc:browserwindowshowdefinitionforselection",
        "doc:browserWindow.showDefinitionForSelection()"
      ]
    },
    {
      "objectID": "api-browser-window#browserwindowseticonicon",
      "name": "setIcon",
      "signature": "(icon)",
      "description": "Changes window icon.",
      "parameters": [
        {
          "name": "icon",
          "description": "",
          "required": true,
          "collection": false,
          "type": [
            {
              "collection": false,
              "type": "NativeImage"
            },
            {
              "collection": false,
              "type": "String",
              "possibleValues": null
            }
          ]
        }
      ],
      "returns": null,
      "additionalTags": [
        "os_windows",
        "os_linux"
      ],
      "apiType": "instanceMethod",
      "fullSignature": "browserWindow.setIcon(icon)",
      "tldr": "Changes window icon.",
      "slug": "browserwindowseticonicon",
      "url": "https://electronjs.org/docs/api/browser-window#browserwindowseticonicon",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:setIcon",
        "api:browserwindowseticonicon",
        "api:browserWindow.setIcon(icon)",
        "doc:setIcon",
        "doc:browserwindowseticonicon",
        "doc:browserWindow.setIcon(icon)"
      ]
    },
    {
      "objectID": "api-browser-window#browserwindowsetwindowbuttonvisibilityvisible",
      "name": "setWindowButtonVisibility",
      "signature": "(visible)",
      "description": "Sets whether the window traffic light buttons should be visible.\n\nThis cannot be called when `titleBarStyle` is set to `customButtonsOnHover`.",
      "parameters": [
        {
          "name": "visible",
          "description": "",
          "required": true,
          "collection": false,
          "type": "Boolean"
        }
      ],
      "returns": null,
      "additionalTags": [
        "os_macos"
      ],
      "apiType": "instanceMethod",
      "fullSignature": "browserWindow.setWindowButtonVisibility(visible)",
      "tldr": "Sets whether the window traffic light buttons should be visible.\n\nThis cannot be called when `titleBarStyle` is set to `customButtonsOnHover`.",
      "slug": "browserwindowsetwindowbuttonvisibilityvisible",
      "url": "https://electronjs.org/docs/api/browser-window#browserwindowsetwindowbuttonvisibilityvisible",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:setWindowButtonVisibility",
        "api:browserwindowsetwindowbuttonvisibilityvisible",
        "api:browserWindow.setWindowButtonVisibility(visible)",
        "doc:setWindowButtonVisibility",
        "doc:browserwindowsetwindowbuttonvisibilityvisible",
        "doc:browserWindow.setWindowButtonVisibility(visible)"
      ]
    },
    {
      "objectID": "api-browser-window#browserwindowsetautohidemenubarhide",
      "name": "setAutoHideMenuBar",
      "signature": "(hide)",
      "description": "Sets whether the window menu bar should hide itself automatically. Once set the menu bar will only show when users press the single `Alt` key.\n\nIf the menu bar is already visible, calling `setAutoHideMenuBar(true)` won't hide it immediately.\n\n**Deprecated**",
      "parameters": [
        {
          "name": "hide",
          "description": "",
          "required": true,
          "collection": false,
          "type": "Boolean"
        }
      ],
      "returns": null,
      "additionalTags": [],
      "apiType": "instanceMethod",
      "fullSignature": "browserWindow.setAutoHideMenuBar(hide)",
      "tldr": "Sets whether the window menu bar should hide itself automatically.",
      "slug": "browserwindowsetautohidemenubarhide",
      "url": "https://electronjs.org/docs/api/browser-window#browserwindowsetautohidemenubarhide",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:setAutoHideMenuBar",
        "api:browserwindowsetautohidemenubarhide",
        "api:browserWindow.setAutoHideMenuBar(hide)",
        "doc:setAutoHideMenuBar",
        "doc:browserwindowsetautohidemenubarhide",
        "doc:browserWindow.setAutoHideMenuBar(hide)"
      ]
    },
    {
      "objectID": "api-browser-window#browserwindowismenubarautohide",
      "name": "isMenuBarAutoHide",
      "signature": "()",
      "description": "Whether menu bar automatically hides itself.\n\n**Deprecated**",
      "parameters": [],
      "returns": {
        "collection": false,
        "type": "Boolean"
      },
      "additionalTags": [],
      "apiType": "instanceMethod",
      "fullSignature": "browserWindow.isMenuBarAutoHide()",
      "tldr": "Whether menu bar automatically hides itself.\n\n**Deprecated**.",
      "slug": "browserwindowismenubarautohide",
      "url": "https://electronjs.org/docs/api/browser-window#browserwindowismenubarautohide",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:isMenuBarAutoHide",
        "api:browserwindowismenubarautohide",
        "api:browserWindow.isMenuBarAutoHide()",
        "doc:isMenuBarAutoHide",
        "doc:browserwindowismenubarautohide",
        "doc:browserWindow.isMenuBarAutoHide()"
      ]
    },
    {
      "objectID": "api-browser-window#browserwindowsetmenubarvisibilityvisible",
      "name": "setMenuBarVisibility",
      "signature": "(visible)",
      "description": "Sets whether the menu bar should be visible. If the menu bar is auto-hide, users can still bring up the menu bar by pressing the single `Alt` key.",
      "parameters": [
        {
          "name": "visible",
          "description": "",
          "required": true,
          "collection": false,
          "type": "Boolean"
        }
      ],
      "returns": null,
      "additionalTags": [
        "os_windows",
        "os_linux"
      ],
      "apiType": "instanceMethod",
      "fullSignature": "browserWindow.setMenuBarVisibility(visible)",
      "tldr": "Sets whether the menu bar should be visible.",
      "slug": "browserwindowsetmenubarvisibilityvisible",
      "url": "https://electronjs.org/docs/api/browser-window#browserwindowsetmenubarvisibilityvisible",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:setMenuBarVisibility",
        "api:browserwindowsetmenubarvisibilityvisible",
        "api:browserWindow.setMenuBarVisibility(visible)",
        "doc:setMenuBarVisibility",
        "doc:browserwindowsetmenubarvisibilityvisible",
        "doc:browserWindow.setMenuBarVisibility(visible)"
      ]
    },
    {
      "objectID": "api-browser-window#browserwindowismenubarvisible",
      "name": "isMenuBarVisible",
      "signature": "()",
      "description": "Whether the menu bar is visible.",
      "parameters": [],
      "returns": {
        "collection": false,
        "type": "Boolean"
      },
      "additionalTags": [],
      "apiType": "instanceMethod",
      "fullSignature": "browserWindow.isMenuBarVisible()",
      "tldr": "Whether the menu bar is visible.",
      "slug": "browserwindowismenubarvisible",
      "url": "https://electronjs.org/docs/api/browser-window#browserwindowismenubarvisible",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:isMenuBarVisible",
        "api:browserwindowismenubarvisible",
        "api:browserWindow.isMenuBarVisible()",
        "doc:isMenuBarVisible",
        "doc:browserwindowismenubarvisible",
        "doc:browserWindow.isMenuBarVisible()"
      ]
    },
    {
      "objectID": "api-browser-window#browserwindowsetvisibleonallworkspacesvisible-options",
      "name": "setVisibleOnAllWorkspaces",
      "signature": "(visible[, options])",
      "description": "Sets whether the window should be visible on all workspaces.\n\n**Note:** This API does nothing on Windows.",
      "parameters": [
        {
          "name": "visible",
          "description": "",
          "required": true,
          "collection": false,
          "type": "Boolean"
        },
        {
          "name": "options",
          "description": "",
          "required": false,
          "collection": false,
          "type": "Object",
          "properties": [
            {
              "name": "visibleOnFullScreen",
              "description": "Sets whether the window should be visible above fullscreen windows",
              "required": false,
              "additionalTags": [
                "os_macos"
              ],
              "collection": false,
              "type": "Boolean"
            }
          ]
        }
      ],
      "returns": null,
      "additionalTags": [],
      "apiType": "instanceMethod",
      "fullSignature": "browserWindow.setVisibleOnAllWorkspaces(visible[, options])",
      "tldr": "Sets whether the window should be visible on all workspaces.\n\n**Note:** This API does nothing on Windows.",
      "slug": "browserwindowsetvisibleonallworkspacesvisible-options",
      "url": "https://electronjs.org/docs/api/browser-window#browserwindowsetvisibleonallworkspacesvisible-options",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:setVisibleOnAllWorkspaces",
        "api:browserwindowsetvisibleonallworkspacesvisible-options",
        "api:browserWindow.setVisibleOnAllWorkspaces(visible[, options])",
        "doc:setVisibleOnAllWorkspaces",
        "doc:browserwindowsetvisibleonallworkspacesvisible-options",
        "doc:browserWindow.setVisibleOnAllWorkspaces(visible[, options])"
      ]
    },
    {
      "objectID": "api-browser-window#browserwindowisvisibleonallworkspaces",
      "name": "isVisibleOnAllWorkspaces",
      "signature": "()",
      "description": "Whether the window is visible on all workspaces.\n\n**Note:** This API always returns false on Windows.",
      "parameters": [],
      "returns": {
        "collection": false,
        "type": "Boolean"
      },
      "additionalTags": [],
      "apiType": "instanceMethod",
      "fullSignature": "browserWindow.isVisibleOnAllWorkspaces()",
      "tldr": "Whether the window is visible on all workspaces.\n\n**Note:** This API always returns false on Windows.",
      "slug": "browserwindowisvisibleonallworkspaces",
      "url": "https://electronjs.org/docs/api/browser-window#browserwindowisvisibleonallworkspaces",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:isVisibleOnAllWorkspaces",
        "api:browserwindowisvisibleonallworkspaces",
        "api:browserWindow.isVisibleOnAllWorkspaces()",
        "doc:isVisibleOnAllWorkspaces",
        "doc:browserwindowisvisibleonallworkspaces",
        "doc:browserWindow.isVisibleOnAllWorkspaces()"
      ]
    },
    {
      "objectID": "api-browser-window#browserwindowsetignoremouseeventsignore-options",
      "name": "setIgnoreMouseEvents",
      "signature": "(ignore[, options])",
      "description": "Makes the window ignore all mouse events.\n\nAll mouse events happened in this window will be passed to the window below this window, but if this window has focus, it will still receive keyboard events.",
      "parameters": [
        {
          "name": "ignore",
          "description": "",
          "required": true,
          "collection": false,
          "type": "Boolean"
        },
        {
          "name": "options",
          "description": "",
          "required": false,
          "collection": false,
          "type": "Object",
          "properties": [
            {
              "name": "forward",
              "description": "If true, forwards mouse move messages to Chromium, enabling mouse related events such as `mouseleave`. Only used when `ignore` is true. If `ignore` is false, forwarding is always disabled regardless of this value.",
              "required": false,
              "additionalTags": [
                "os_macos",
                "os_windows"
              ],
              "collection": false,
              "type": "Boolean"
            }
          ]
        }
      ],
      "returns": null,
      "additionalTags": [],
      "apiType": "instanceMethod",
      "fullSignature": "browserWindow.setIgnoreMouseEvents(ignore[, options])",
      "tldr": "Makes the window ignore all mouse events.\n\nAll mouse events happened in this window will be passed to the window below this window, but if this window has focus, it will still receive keyboard events.",
      "slug": "browserwindowsetignoremouseeventsignore-options",
      "url": "https://electronjs.org/docs/api/browser-window#browserwindowsetignoremouseeventsignore-options",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:setIgnoreMouseEvents",
        "api:browserwindowsetignoremouseeventsignore-options",
        "api:browserWindow.setIgnoreMouseEvents(ignore[, options])",
        "doc:setIgnoreMouseEvents",
        "doc:browserwindowsetignoremouseeventsignore-options",
        "doc:browserWindow.setIgnoreMouseEvents(ignore[, options])"
      ]
    },
    {
      "objectID": "api-browser-window#browserwindowsetcontentprotectionenable",
      "name": "setContentProtection",
      "signature": "(enable)",
      "description": "Prevents the window contents from being captured by other apps.\n\nOn macOS it sets the NSWindow's sharingType to NSWindowSharingNone. On Windows it calls SetWindowDisplayAffinity with `WDA_MONITOR`.",
      "parameters": [
        {
          "name": "enable",
          "description": "",
          "required": true,
          "collection": false,
          "type": "Boolean"
        }
      ],
      "returns": null,
      "additionalTags": [
        "os_macos",
        "os_windows"
      ],
      "apiType": "instanceMethod",
      "fullSignature": "browserWindow.setContentProtection(enable)",
      "tldr": "Prevents the window contents from being captured by other apps.\n\nOn macOS it sets the NSWindow's sharingType to NSWindowSharingNone.",
      "slug": "browserwindowsetcontentprotectionenable",
      "url": "https://electronjs.org/docs/api/browser-window#browserwindowsetcontentprotectionenable",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:setContentProtection",
        "api:browserwindowsetcontentprotectionenable",
        "api:browserWindow.setContentProtection(enable)",
        "doc:setContentProtection",
        "doc:browserwindowsetcontentprotectionenable",
        "doc:browserWindow.setContentProtection(enable)"
      ]
    },
    {
      "objectID": "api-browser-window#browserwindowsetfocusablefocusable",
      "name": "setFocusable",
      "signature": "(focusable)",
      "description": "Changes whether the window can be focused.\n\nOn macOS it does not remove the focus from the window.",
      "parameters": [
        {
          "name": "focusable",
          "description": "",
          "required": true,
          "collection": false,
          "type": "Boolean"
        }
      ],
      "returns": null,
      "additionalTags": [
        "os_macos",
        "os_windows"
      ],
      "apiType": "instanceMethod",
      "fullSignature": "browserWindow.setFocusable(focusable)",
      "tldr": "Changes whether the window can be focused.\n\nOn macOS it does not remove the focus from the window.",
      "slug": "browserwindowsetfocusablefocusable",
      "url": "https://electronjs.org/docs/api/browser-window#browserwindowsetfocusablefocusable",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:setFocusable",
        "api:browserwindowsetfocusablefocusable",
        "api:browserWindow.setFocusable(focusable)",
        "doc:setFocusable",
        "doc:browserwindowsetfocusablefocusable",
        "doc:browserWindow.setFocusable(focusable)"
      ]
    },
    {
      "objectID": "api-browser-window#browserwindowsetparentwindowparent",
      "name": "setParentWindow",
      "signature": "(parent)",
      "description": "Sets `parent` as current window's parent window, passing `null` will turn current window into a top-level window.",
      "parameters": [
        {
          "name": "parent",
          "description": "",
          "required": true,
          "collection": false,
          "type": [
            {
              "collection": false,
              "type": "BrowserWindow"
            },
            {
              "type": "null",
              "collection": false
            }
          ]
        }
      ],
      "returns": null,
      "additionalTags": [],
      "apiType": "instanceMethod",
      "fullSignature": "browserWindow.setParentWindow(parent)",
      "tldr": "Sets `parent` as current window's parent window, passing `null` will turn current window into a top-level window.",
      "slug": "browserwindowsetparentwindowparent",
      "url": "https://electronjs.org/docs/api/browser-window#browserwindowsetparentwindowparent",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:setParentWindow",
        "api:browserwindowsetparentwindowparent",
        "api:browserWindow.setParentWindow(parent)",
        "doc:setParentWindow",
        "doc:browserwindowsetparentwindowparent",
        "doc:browserWindow.setParentWindow(parent)"
      ]
    },
    {
      "objectID": "api-browser-window#browserwindowgetparentwindow",
      "name": "getParentWindow",
      "signature": "()",
      "description": "The parent window.",
      "parameters": [],
      "returns": {
        "collection": false,
        "type": "BrowserWindow"
      },
      "additionalTags": [],
      "apiType": "instanceMethod",
      "fullSignature": "browserWindow.getParentWindow()",
      "tldr": "The parent window.",
      "slug": "browserwindowgetparentwindow",
      "url": "https://electronjs.org/docs/api/browser-window#browserwindowgetparentwindow",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:getParentWindow",
        "api:browserwindowgetparentwindow",
        "api:browserWindow.getParentWindow()",
        "doc:getParentWindow",
        "doc:browserwindowgetparentwindow",
        "doc:browserWindow.getParentWindow()"
      ]
    },
    {
      "objectID": "api-browser-window#browserwindowgetchildwindows",
      "name": "getChildWindows",
      "signature": "()",
      "description": "All child windows.",
      "parameters": [],
      "returns": {
        "collection": true,
        "type": "BrowserWindow"
      },
      "additionalTags": [],
      "apiType": "instanceMethod",
      "fullSignature": "browserWindow.getChildWindows()",
      "tldr": "All child windows.",
      "slug": "browserwindowgetchildwindows",
      "url": "https://electronjs.org/docs/api/browser-window#browserwindowgetchildwindows",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:getChildWindows",
        "api:browserwindowgetchildwindows",
        "api:browserWindow.getChildWindows()",
        "doc:getChildWindows",
        "doc:browserwindowgetchildwindows",
        "doc:browserWindow.getChildWindows()"
      ]
    },
    {
      "objectID": "api-browser-window#browserwindowsetautohidecursorautohide",
      "name": "setAutoHideCursor",
      "signature": "(autoHide)",
      "description": "Controls whether to hide cursor when typing.",
      "parameters": [
        {
          "name": "autoHide",
          "description": "",
          "required": true,
          "collection": false,
          "type": "Boolean"
        }
      ],
      "returns": null,
      "additionalTags": [
        "os_macos"
      ],
      "apiType": "instanceMethod",
      "fullSignature": "browserWindow.setAutoHideCursor(autoHide)",
      "tldr": "Controls whether to hide cursor when typing.",
      "slug": "browserwindowsetautohidecursorautohide",
      "url": "https://electronjs.org/docs/api/browser-window#browserwindowsetautohidecursorautohide",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:setAutoHideCursor",
        "api:browserwindowsetautohidecursorautohide",
        "api:browserWindow.setAutoHideCursor(autoHide)",
        "doc:setAutoHideCursor",
        "doc:browserwindowsetautohidecursorautohide",
        "doc:browserWindow.setAutoHideCursor(autoHide)"
      ]
    },
    {
      "objectID": "api-browser-window#browserwindowselectprevioustab",
      "name": "selectPreviousTab",
      "signature": "()",
      "description": "Selects the previous tab when native tabs are enabled and there are other tabs in the window.",
      "parameters": [],
      "returns": null,
      "additionalTags": [
        "os_macos"
      ],
      "apiType": "instanceMethod",
      "fullSignature": "browserWindow.selectPreviousTab()",
      "tldr": "Selects the previous tab when native tabs are enabled and there are other tabs in the window.",
      "slug": "browserwindowselectprevioustab",
      "url": "https://electronjs.org/docs/api/browser-window#browserwindowselectprevioustab",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:selectPreviousTab",
        "api:browserwindowselectprevioustab",
        "api:browserWindow.selectPreviousTab()",
        "doc:selectPreviousTab",
        "doc:browserwindowselectprevioustab",
        "doc:browserWindow.selectPreviousTab()"
      ]
    },
    {
      "objectID": "api-browser-window#browserwindowselectnexttab",
      "name": "selectNextTab",
      "signature": "()",
      "description": "Selects the next tab when native tabs are enabled and there are other tabs in the window.",
      "parameters": [],
      "returns": null,
      "additionalTags": [
        "os_macos"
      ],
      "apiType": "instanceMethod",
      "fullSignature": "browserWindow.selectNextTab()",
      "tldr": "Selects the next tab when native tabs are enabled and there are other tabs in the window.",
      "slug": "browserwindowselectnexttab",
      "url": "https://electronjs.org/docs/api/browser-window#browserwindowselectnexttab",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:selectNextTab",
        "api:browserwindowselectnexttab",
        "api:browserWindow.selectNextTab()",
        "doc:selectNextTab",
        "doc:browserwindowselectnexttab",
        "doc:browserWindow.selectNextTab()"
      ]
    },
    {
      "objectID": "api-browser-window#browserwindowmergeallwindows",
      "name": "mergeAllWindows",
      "signature": "()",
      "description": "Merges all windows into one window with multiple tabs when native tabs are enabled and there is more than one open window.",
      "parameters": [],
      "returns": null,
      "additionalTags": [
        "os_macos"
      ],
      "apiType": "instanceMethod",
      "fullSignature": "browserWindow.mergeAllWindows()",
      "tldr": "Merges all windows into one window with multiple tabs when native tabs are enabled and there is more than one open window.",
      "slug": "browserwindowmergeallwindows",
      "url": "https://electronjs.org/docs/api/browser-window#browserwindowmergeallwindows",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:mergeAllWindows",
        "api:browserwindowmergeallwindows",
        "api:browserWindow.mergeAllWindows()",
        "doc:mergeAllWindows",
        "doc:browserwindowmergeallwindows",
        "doc:browserWindow.mergeAllWindows()"
      ]
    },
    {
      "objectID": "api-browser-window#browserwindowmovetabtonewwindow",
      "name": "moveTabToNewWindow",
      "signature": "()",
      "description": "Moves the current tab into a new window if native tabs are enabled and there is more than one tab in the current window.",
      "parameters": [],
      "returns": null,
      "additionalTags": [
        "os_macos"
      ],
      "apiType": "instanceMethod",
      "fullSignature": "browserWindow.moveTabToNewWindow()",
      "tldr": "Moves the current tab into a new window if native tabs are enabled and there is more than one tab in the current window.",
      "slug": "browserwindowmovetabtonewwindow",
      "url": "https://electronjs.org/docs/api/browser-window#browserwindowmovetabtonewwindow",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:moveTabToNewWindow",
        "api:browserwindowmovetabtonewwindow",
        "api:browserWindow.moveTabToNewWindow()",
        "doc:moveTabToNewWindow",
        "doc:browserwindowmovetabtonewwindow",
        "doc:browserWindow.moveTabToNewWindow()"
      ]
    },
    {
      "objectID": "api-browser-window#browserwindowtoggletabbar",
      "name": "toggleTabBar",
      "signature": "()",
      "description": "Toggles the visibility of the tab bar if native tabs are enabled and there is only one tab in the current window.",
      "parameters": [],
      "returns": null,
      "additionalTags": [
        "os_macos"
      ],
      "apiType": "instanceMethod",
      "fullSignature": "browserWindow.toggleTabBar()",
      "tldr": "Toggles the visibility of the tab bar if native tabs are enabled and there is only one tab in the current window.",
      "slug": "browserwindowtoggletabbar",
      "url": "https://electronjs.org/docs/api/browser-window#browserwindowtoggletabbar",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:toggleTabBar",
        "api:browserwindowtoggletabbar",
        "api:browserWindow.toggleTabBar()",
        "doc:toggleTabBar",
        "doc:browserwindowtoggletabbar",
        "doc:browserWindow.toggleTabBar()"
      ]
    },
    {
      "objectID": "api-browser-window#browserwindowaddtabbedwindowbrowserwindow",
      "name": "addTabbedWindow",
      "signature": "(browserWindow)",
      "description": "Adds a window as a tab on this window, after the tab for the window instance.",
      "parameters": [
        {
          "name": "browserWindow",
          "description": "",
          "required": true,
          "collection": false,
          "type": "BrowserWindow"
        }
      ],
      "returns": null,
      "additionalTags": [
        "os_macos"
      ],
      "apiType": "instanceMethod",
      "fullSignature": "browserWindow.addTabbedWindow(browserWindow)",
      "tldr": "Adds a window as a tab on this window, after the tab for the window instance.",
      "slug": "browserwindowaddtabbedwindowbrowserwindow",
      "url": "https://electronjs.org/docs/api/browser-window#browserwindowaddtabbedwindowbrowserwindow",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:addTabbedWindow",
        "api:browserwindowaddtabbedwindowbrowserwindow",
        "api:browserWindow.addTabbedWindow(browserWindow)",
        "doc:addTabbedWindow",
        "doc:browserwindowaddtabbedwindowbrowserwindow",
        "doc:browserWindow.addTabbedWindow(browserWindow)"
      ]
    },
    {
      "objectID": "api-browser-window#browserwindowsetvibrancytype",
      "name": "setVibrancy",
      "signature": "(type)",
      "description": "Adds a vibrancy effect to the browser window. Passing `null` or an empty string will remove the vibrancy effect on the window.\n\nNote that `appearance-based`, `light`, `dark`, `medium-light`, and `ultra-dark` have been deprecated and will be removed in an upcoming version of macOS.",
      "parameters": [
        {
          "name": "type",
          "description": "Can be `appearance-based`, `light`, `dark`, `titlebar`, `selection`, `menu`, `popover`, `sidebar`, `medium-light`, `ultra-dark`, `header`, `sheet`, `window`, `hud`, `fullscreen-ui`, `tooltip`, `content`, `under-window`, or `under-page`. See the macOS documentation for more details.",
          "required": true,
          "collection": false,
          "type": [
            {
              "collection": false,
              "type": "String",
              "possibleValues": [
                {
                  "value": "appearance-based",
                  "description": ""
                },
                {
                  "value": "light",
                  "description": ""
                },
                {
                  "value": "dark",
                  "description": ""
                },
                {
                  "value": "titlebar",
                  "description": ""
                },
                {
                  "value": "selection",
                  "description": ""
                },
                {
                  "value": "menu",
                  "description": ""
                },
                {
                  "value": "popover",
                  "description": ""
                },
                {
                  "value": "sidebar",
                  "description": ""
                },
                {
                  "value": "medium-light",
                  "description": ""
                },
                {
                  "value": "ultra-dark",
                  "description": ""
                },
                {
                  "value": "header",
                  "description": ""
                },
                {
                  "value": "sheet",
                  "description": ""
                },
                {
                  "value": "window",
                  "description": ""
                },
                {
                  "value": "hud",
                  "description": ""
                },
                {
                  "value": "fullscreen-ui",
                  "description": ""
                },
                {
                  "value": "tooltip",
                  "description": ""
                },
                {
                  "value": "content",
                  "description": ""
                },
                {
                  "value": "under-window",
                  "description": ""
                },
                {
                  "value": "under-page",
                  "description": ""
                }
              ]
            },
            {
              "type": "null",
              "collection": false
            }
          ]
        }
      ],
      "returns": null,
      "additionalTags": [
        "os_macos"
      ],
      "apiType": "instanceMethod",
      "fullSignature": "browserWindow.setVibrancy(type)",
      "tldr": "Adds a vibrancy effect to the browser window.",
      "slug": "browserwindowsetvibrancytype",
      "url": "https://electronjs.org/docs/api/browser-window#browserwindowsetvibrancytype",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:setVibrancy",
        "api:browserwindowsetvibrancytype",
        "api:browserWindow.setVibrancy(type)",
        "doc:setVibrancy",
        "doc:browserwindowsetvibrancytype",
        "doc:browserWindow.setVibrancy(type)"
      ]
    },
    {
      "objectID": "api-browser-window#browserwindowsettouchbartouchbar",
      "name": "setTouchBar",
      "signature": "(touchBar)",
      "description": "Sets the touchBar layout for the current window. Specifying `null` or `undefined` clears the touch bar. This method only has an effect if the machine has a touch bar and is running on macOS 10.12.1+.\n\n**Note:** The TouchBar API is currently experimental and may change or be removed in future Electron releases.",
      "parameters": [
        {
          "name": "touchBar",
          "description": "",
          "required": true,
          "collection": false,
          "type": [
            {
              "collection": false,
              "type": "TouchBar"
            },
            {
              "type": "null",
              "collection": false
            }
          ]
        }
      ],
      "returns": null,
      "additionalTags": [
        "os_macos",
        "stability_experimental"
      ],
      "apiType": "instanceMethod",
      "fullSignature": "browserWindow.setTouchBar(touchBar)",
      "tldr": "Sets the touchBar layout for the current window.",
      "slug": "browserwindowsettouchbartouchbar",
      "url": "https://electronjs.org/docs/api/browser-window#browserwindowsettouchbartouchbar",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:setTouchBar",
        "api:browserwindowsettouchbartouchbar",
        "api:browserWindow.setTouchBar(touchBar)",
        "doc:setTouchBar",
        "doc:browserwindowsettouchbartouchbar",
        "doc:browserWindow.setTouchBar(touchBar)"
      ]
    },
    {
      "objectID": "api-browser-window#browserwindowsetbrowserviewbrowserview",
      "name": "setBrowserView",
      "signature": "(browserView)",
      "description": "",
      "parameters": [
        {
          "name": "browserView",
          "description": "Attach browserView to win. If there is some other browserViews was attached they will be removed from this window.",
          "required": true,
          "collection": false,
          "type": [
            {
              "collection": false,
              "type": "BrowserView"
            },
            {
              "type": "null",
              "collection": false
            }
          ]
        }
      ],
      "returns": null,
      "additionalTags": [
        "stability_experimental"
      ],
      "apiType": "instanceMethod",
      "fullSignature": "browserWindow.setBrowserView(browserView)",
      "tldr": null,
      "slug": "browserwindowsetbrowserviewbrowserview",
      "url": "https://electronjs.org/docs/api/browser-window#browserwindowsetbrowserviewbrowserview",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:setBrowserView",
        "api:browserwindowsetbrowserviewbrowserview",
        "api:browserWindow.setBrowserView(browserView)",
        "doc:setBrowserView",
        "doc:browserwindowsetbrowserviewbrowserview",
        "doc:browserWindow.setBrowserView(browserView)"
      ]
    },
    {
      "objectID": "api-browser-window#browserwindowgetbrowserview",
      "name": "getBrowserView",
      "signature": "()",
      "description": "an BrowserView what is attached. Returns `null` if none is attached. Throw error if multiple BrowserViews is attached.",
      "parameters": [],
      "returns": {
        "collection": false,
        "type": [
          {
            "collection": false,
            "type": "BrowserView"
          },
          {
            "type": "null",
            "collection": false
          }
        ]
      },
      "additionalTags": [
        "stability_experimental"
      ],
      "apiType": "instanceMethod",
      "fullSignature": "browserWindow.getBrowserView()",
      "tldr": "an BrowserView what is attached.",
      "slug": "browserwindowgetbrowserview",
      "url": "https://electronjs.org/docs/api/browser-window#browserwindowgetbrowserview",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:getBrowserView",
        "api:browserwindowgetbrowserview",
        "api:browserWindow.getBrowserView()",
        "doc:getBrowserView",
        "doc:browserwindowgetbrowserview",
        "doc:browserWindow.getBrowserView()"
      ]
    },
    {
      "objectID": "api-browser-window#browserwindowaddbrowserviewbrowserview",
      "name": "addBrowserView",
      "signature": "(browserView)",
      "description": "Replacement API for setBrowserView supporting work with multi browser views.",
      "parameters": [
        {
          "name": "browserView",
          "description": "",
          "required": true,
          "collection": false,
          "type": "BrowserView"
        }
      ],
      "returns": null,
      "additionalTags": [
        "stability_experimental"
      ],
      "apiType": "instanceMethod",
      "fullSignature": "browserWindow.addBrowserView(browserView)",
      "tldr": "Replacement API for setBrowserView supporting work with multi browser views.",
      "slug": "browserwindowaddbrowserviewbrowserview",
      "url": "https://electronjs.org/docs/api/browser-window#browserwindowaddbrowserviewbrowserview",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:addBrowserView",
        "api:browserwindowaddbrowserviewbrowserview",
        "api:browserWindow.addBrowserView(browserView)",
        "doc:addBrowserView",
        "doc:browserwindowaddbrowserviewbrowserview",
        "doc:browserWindow.addBrowserView(browserView)"
      ]
    },
    {
      "objectID": "api-browser-window#browserwindowremovebrowserviewbrowserview",
      "name": "removeBrowserView",
      "signature": "(browserView)",
      "description": "",
      "parameters": [
        {
          "name": "browserView",
          "description": "",
          "required": true,
          "collection": false,
          "type": "BrowserView"
        }
      ],
      "returns": null,
      "additionalTags": [
        "stability_experimental"
      ],
      "apiType": "instanceMethod",
      "fullSignature": "browserWindow.removeBrowserView(browserView)",
      "tldr": null,
      "slug": "browserwindowremovebrowserviewbrowserview",
      "url": "https://electronjs.org/docs/api/browser-window#browserwindowremovebrowserviewbrowserview",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:removeBrowserView",
        "api:browserwindowremovebrowserviewbrowserview",
        "api:browserWindow.removeBrowserView(browserView)",
        "doc:removeBrowserView",
        "doc:browserwindowremovebrowserviewbrowserview",
        "doc:browserWindow.removeBrowserView(browserView)"
      ]
    },
    {
      "objectID": "api-browser-window#browserwindowgetbrowserviews",
      "name": "getBrowserViews",
      "signature": "()",
      "description": "an array of all BrowserViews that have been attached with `addBrowserView` or `setBrowserView`.\n\n**Note:** The BrowserView API is currently experimental and may change or be removed in future Electron releases.",
      "parameters": [],
      "returns": {
        "collection": true,
        "type": "BrowserView"
      },
      "additionalTags": [
        "stability_experimental"
      ],
      "apiType": "instanceMethod",
      "fullSignature": "browserWindow.getBrowserViews()",
      "tldr": "an array of all BrowserViews that have been attached with `addBrowserView` or `setBrowserView`.\n\n**Note:** The BrowserView API is currently experimental and may change or be removed in future Electron releases.",
      "slug": "browserwindowgetbrowserviews",
      "url": "https://electronjs.org/docs/api/browser-window#browserwindowgetbrowserviews",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:getBrowserViews",
        "api:browserwindowgetbrowserviews",
        "api:browserWindow.getBrowserViews()",
        "doc:getBrowserViews",
        "doc:browserwindowgetbrowserviews",
        "doc:browserWindow.getBrowserViews()"
      ]
    },
    {
      "objectID": "api-browser-window#event-page-title-updated",
      "name": "page-title-updated",
      "description": "Emitted when the document changed its title, calling `event.preventDefault()` will prevent the native window's title from changing. `explicitSet` is false when title is synthesized from file URL.",
      "parameters": [
        {
          "name": "event",
          "description": "",
          "collection": false,
          "type": "Event",
          "required": true
        },
        {
          "name": "title",
          "description": "",
          "collection": false,
          "type": "String",
          "possibleValues": null,
          "required": true
        },
        {
          "name": "explicitSet",
          "description": "",
          "collection": false,
          "type": "Boolean",
          "required": true
        }
      ],
      "additionalTags": [],
      "apiType": "event",
      "fullSignature": "browserWindow.on('page-title-updated')",
      "url": "https://electronjs.org/docs/api/browser-window#event-page-title-updated",
      "slug": "browserwindowonpage-title-updated",
      "tldr": "Emitted when the document changed its title, calling `event.preventDefault()` will prevent the native window's title from changing.",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:page-title-updated",
        "api:browserwindowonpage-title-updated",
        "api:browserWindow.on('page-title-updated')",
        "doc:page-title-updated",
        "doc:browserwindowonpage-title-updated",
        "doc:browserWindow.on('page-title-updated')"
      ]
    },
    {
      "objectID": "api-browser-window#event-close",
      "name": "close",
      "description": "Emitted when the window is going to be closed. It's emitted before the `beforeunload` and `unload` event of the DOM. Calling `event.preventDefault()` will cancel the close.\n\nUsually you would want to use the `beforeunload` handler to decide whether the window should be closed, which will also be called when the window is reloaded. In Electron, returning any value other than `undefined` would cancel the close. For example:\n\n_**Note**: There is a subtle difference between the behaviors of `window.onbeforeunload = handler` and `window.addEventListener('beforeunload', handler)`. It is recommended to always set the `event.returnValue` explicitly, instead of only returning a value, as the former works more consistently within Electron._",
      "parameters": [
        {
          "name": "event",
          "description": "",
          "collection": false,
          "type": "Event",
          "required": true
        }
      ],
      "additionalTags": [],
      "apiType": "event",
      "fullSignature": "browserWindow.on('close')",
      "url": "https://electronjs.org/docs/api/browser-window#event-close",
      "slug": "browserwindowonclose",
      "tldr": "Emitted when the window is going to be closed.",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:close",
        "api:browserwindowonclose",
        "api:browserWindow.on('close')",
        "doc:close",
        "doc:browserwindowonclose",
        "doc:browserWindow.on('close')"
      ]
    },
    {
      "objectID": "api-browser-window#event-closed",
      "name": "closed",
      "description": "Emitted when the window is closed. After you have received this event you should remove the reference to the window and avoid using it any more.",
      "parameters": [],
      "additionalTags": [],
      "apiType": "event",
      "fullSignature": "browserWindow.on('closed')",
      "url": "https://electronjs.org/docs/api/browser-window#event-closed",
      "slug": "browserwindowonclosed",
      "tldr": "Emitted when the window is closed.",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:closed",
        "api:browserwindowonclosed",
        "api:browserWindow.on('closed')",
        "doc:closed",
        "doc:browserwindowonclosed",
        "doc:browserWindow.on('closed')"
      ]
    },
    {
      "objectID": "api-browser-window#event-session-end",
      "name": "session-end",
      "description": "Emitted when window session is going to end due to force shutdown or machine restart or session log off.",
      "parameters": [],
      "additionalTags": [
        "os_windows"
      ],
      "apiType": "event",
      "fullSignature": "browserWindow.on('session-end')",
      "url": "https://electronjs.org/docs/api/browser-window#event-session-end",
      "slug": "browserwindowonsession-end",
      "tldr": "Emitted when window session is going to end due to force shutdown or machine restart or session log off.",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:session-end",
        "api:browserwindowonsession-end",
        "api:browserWindow.on('session-end')",
        "doc:session-end",
        "doc:browserwindowonsession-end",
        "doc:browserWindow.on('session-end')"
      ]
    },
    {
      "objectID": "api-browser-window#event-unresponsive",
      "name": "unresponsive",
      "description": "Emitted when the web page becomes unresponsive.",
      "parameters": [],
      "additionalTags": [],
      "apiType": "event",
      "fullSignature": "browserWindow.on('unresponsive')",
      "url": "https://electronjs.org/docs/api/browser-window#event-unresponsive",
      "slug": "browserwindowonunresponsive",
      "tldr": "Emitted when the web page becomes unresponsive.",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:unresponsive",
        "api:browserwindowonunresponsive",
        "api:browserWindow.on('unresponsive')",
        "doc:unresponsive",
        "doc:browserwindowonunresponsive",
        "doc:browserWindow.on('unresponsive')"
      ]
    },
    {
      "objectID": "api-browser-window#event-responsive",
      "name": "responsive",
      "description": "Emitted when the unresponsive web page becomes responsive again.",
      "parameters": [],
      "additionalTags": [],
      "apiType": "event",
      "fullSignature": "browserWindow.on('responsive')",
      "url": "https://electronjs.org/docs/api/browser-window#event-responsive",
      "slug": "browserwindowonresponsive",
      "tldr": "Emitted when the unresponsive web page becomes responsive again.",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:responsive",
        "api:browserwindowonresponsive",
        "api:browserWindow.on('responsive')",
        "doc:responsive",
        "doc:browserwindowonresponsive",
        "doc:browserWindow.on('responsive')"
      ]
    },
    {
      "objectID": "api-browser-window#event-blur",
      "name": "blur",
      "description": "Emitted when the window loses focus.",
      "parameters": [],
      "additionalTags": [],
      "apiType": "event",
      "fullSignature": "browserWindow.on('blur')",
      "url": "https://electronjs.org/docs/api/browser-window#event-blur",
      "slug": "browserwindowonblur",
      "tldr": "Emitted when the window loses focus.",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:blur",
        "api:browserwindowonblur",
        "api:browserWindow.on('blur')",
        "doc:blur",
        "doc:browserwindowonblur",
        "doc:browserWindow.on('blur')"
      ]
    },
    {
      "objectID": "api-browser-window#event-focus",
      "name": "focus",
      "description": "Emitted when the window gains focus.",
      "parameters": [],
      "additionalTags": [],
      "apiType": "event",
      "fullSignature": "browserWindow.on('focus')",
      "url": "https://electronjs.org/docs/api/browser-window#event-focus",
      "slug": "browserwindowonfocus",
      "tldr": "Emitted when the window gains focus.",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:focus",
        "api:browserwindowonfocus",
        "api:browserWindow.on('focus')",
        "doc:focus",
        "doc:browserwindowonfocus",
        "doc:browserWindow.on('focus')"
      ]
    },
    {
      "objectID": "api-browser-window#event-show",
      "name": "show",
      "description": "Emitted when the window is shown.",
      "parameters": [],
      "additionalTags": [],
      "apiType": "event",
      "fullSignature": "browserWindow.on('show')",
      "url": "https://electronjs.org/docs/api/browser-window#event-show",
      "slug": "browserwindowonshow",
      "tldr": "Emitted when the window is shown.",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:show",
        "api:browserwindowonshow",
        "api:browserWindow.on('show')",
        "doc:show",
        "doc:browserwindowonshow",
        "doc:browserWindow.on('show')"
      ]
    },
    {
      "objectID": "api-browser-window#event-hide",
      "name": "hide",
      "description": "Emitted when the window is hidden.",
      "parameters": [],
      "additionalTags": [],
      "apiType": "event",
      "fullSignature": "browserWindow.on('hide')",
      "url": "https://electronjs.org/docs/api/browser-window#event-hide",
      "slug": "browserwindowonhide",
      "tldr": "Emitted when the window is hidden.",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:hide",
        "api:browserwindowonhide",
        "api:browserWindow.on('hide')",
        "doc:hide",
        "doc:browserwindowonhide",
        "doc:browserWindow.on('hide')"
      ]
    },
    {
      "objectID": "api-browser-window#event-ready-to-show",
      "name": "ready-to-show",
      "description": "Emitted when the web page has been rendered (while not being shown) and window can be displayed without a visual flash.\n\nPlease note that using this event implies that the renderer will be considered \"visible\" and paint even though `show` is false.  This event will never fire if you use `paintWhenInitiallyHidden: false`",
      "parameters": [],
      "additionalTags": [],
      "apiType": "event",
      "fullSignature": "browserWindow.on('ready-to-show')",
      "url": "https://electronjs.org/docs/api/browser-window#event-ready-to-show",
      "slug": "browserwindowonready-to-show",
      "tldr": "Emitted when the web page has been rendered (while not being shown) and window can be displayed without a visual flash.\n\nPlease note that using this event implies that the renderer will be considered \"visible\" and paint even though `show` is false.",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:ready-to-show",
        "api:browserwindowonready-to-show",
        "api:browserWindow.on('ready-to-show')",
        "doc:ready-to-show",
        "doc:browserwindowonready-to-show",
        "doc:browserWindow.on('ready-to-show')"
      ]
    },
    {
      "objectID": "api-browser-window#event-maximize",
      "name": "maximize",
      "description": "Emitted when window is maximized.",
      "parameters": [],
      "additionalTags": [],
      "apiType": "event",
      "fullSignature": "browserWindow.on('maximize')",
      "url": "https://electronjs.org/docs/api/browser-window#event-maximize",
      "slug": "browserwindowonmaximize",
      "tldr": "Emitted when window is maximized.",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:maximize",
        "api:browserwindowonmaximize",
        "api:browserWindow.on('maximize')",
        "doc:maximize",
        "doc:browserwindowonmaximize",
        "doc:browserWindow.on('maximize')"
      ]
    },
    {
      "objectID": "api-browser-window#event-unmaximize",
      "name": "unmaximize",
      "description": "Emitted when the window exits from a maximized state.",
      "parameters": [],
      "additionalTags": [],
      "apiType": "event",
      "fullSignature": "browserWindow.on('unmaximize')",
      "url": "https://electronjs.org/docs/api/browser-window#event-unmaximize",
      "slug": "browserwindowonunmaximize",
      "tldr": "Emitted when the window exits from a maximized state.",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:unmaximize",
        "api:browserwindowonunmaximize",
        "api:browserWindow.on('unmaximize')",
        "doc:unmaximize",
        "doc:browserwindowonunmaximize",
        "doc:browserWindow.on('unmaximize')"
      ]
    },
    {
      "objectID": "api-browser-window#event-minimize",
      "name": "minimize",
      "description": "Emitted when the window is minimized.",
      "parameters": [],
      "additionalTags": [],
      "apiType": "event",
      "fullSignature": "browserWindow.on('minimize')",
      "url": "https://electronjs.org/docs/api/browser-window#event-minimize",
      "slug": "browserwindowonminimize",
      "tldr": "Emitted when the window is minimized.",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:minimize",
        "api:browserwindowonminimize",
        "api:browserWindow.on('minimize')",
        "doc:minimize",
        "doc:browserwindowonminimize",
        "doc:browserWindow.on('minimize')"
      ]
    },
    {
      "objectID": "api-browser-window#event-restore",
      "name": "restore",
      "description": "Emitted when the window is restored from a minimized state.",
      "parameters": [],
      "additionalTags": [],
      "apiType": "event",
      "fullSignature": "browserWindow.on('restore')",
      "url": "https://electronjs.org/docs/api/browser-window#event-restore",
      "slug": "browserwindowonrestore",
      "tldr": "Emitted when the window is restored from a minimized state.",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:restore",
        "api:browserwindowonrestore",
        "api:browserWindow.on('restore')",
        "doc:restore",
        "doc:browserwindowonrestore",
        "doc:browserWindow.on('restore')"
      ]
    },
    {
      "objectID": "api-browser-window#event-will-resize",
      "name": "will-resize",
      "description": "Emitted before the window is resized. Calling `event.preventDefault()` will prevent the window from being resized.\n\nNote that this is only emitted when the window is being resized manually. Resizing the window with `setBounds`/`setSize` will not emit this event.",
      "parameters": [
        {
          "name": "event",
          "description": "",
          "collection": false,
          "type": "Event",
          "required": true
        },
        {
          "name": "newBounds",
          "description": "Size the window is being resized to.",
          "collection": false,
          "type": "`Rectangle`",
          "required": true
        }
      ],
      "additionalTags": [
        "os_macos",
        "os_windows"
      ],
      "apiType": "event",
      "fullSignature": "browserWindow.on('will-resize')",
      "url": "https://electronjs.org/docs/api/browser-window#event-will-resize",
      "slug": "browserwindowonwill-resize",
      "tldr": "Emitted before the window is resized.",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:will-resize",
        "api:browserwindowonwill-resize",
        "api:browserWindow.on('will-resize')",
        "doc:will-resize",
        "doc:browserwindowonwill-resize",
        "doc:browserWindow.on('will-resize')"
      ]
    },
    {
      "objectID": "api-browser-window#event-resize",
      "name": "resize",
      "description": "Emitted after the window has been resized.",
      "parameters": [],
      "additionalTags": [],
      "apiType": "event",
      "fullSignature": "browserWindow.on('resize')",
      "url": "https://electronjs.org/docs/api/browser-window#event-resize",
      "slug": "browserwindowonresize",
      "tldr": "Emitted after the window has been resized.",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:resize",
        "api:browserwindowonresize",
        "api:browserWindow.on('resize')",
        "doc:resize",
        "doc:browserwindowonresize",
        "doc:browserWindow.on('resize')"
      ]
    },
    {
      "objectID": "api-browser-window#event-will-move",
      "name": "will-move",
      "description": "Emitted before the window is moved. Calling `event.preventDefault()` will prevent the window from being moved.\n\nNote that this is only emitted when the window is being resized manually. Resizing the window with `setBounds`/`setSize` will not emit this event.",
      "parameters": [
        {
          "name": "event",
          "description": "",
          "collection": false,
          "type": "Event",
          "required": true
        },
        {
          "name": "newBounds",
          "description": "Location the window is being moved to.",
          "collection": false,
          "type": "`Rectangle`",
          "required": true
        }
      ],
      "additionalTags": [
        "os_windows"
      ],
      "apiType": "event",
      "fullSignature": "browserWindow.on('will-move')",
      "url": "https://electronjs.org/docs/api/browser-window#event-will-move",
      "slug": "browserwindowonwill-move",
      "tldr": "Emitted before the window is moved.",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:will-move",
        "api:browserwindowonwill-move",
        "api:browserWindow.on('will-move')",
        "doc:will-move",
        "doc:browserwindowonwill-move",
        "doc:browserWindow.on('will-move')"
      ]
    },
    {
      "objectID": "api-browser-window#event-move",
      "name": "move",
      "description": "Emitted when the window is being moved to a new position.\n\n__Note__: On macOS this event is an alias of `moved`.",
      "parameters": [],
      "additionalTags": [],
      "apiType": "event",
      "fullSignature": "browserWindow.on('move')",
      "url": "https://electronjs.org/docs/api/browser-window#event-move",
      "slug": "browserwindowonmove",
      "tldr": "Emitted when the window is being moved to a new position.\n\n__Note__: On macOS this event is an alias of `moved`.",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:move",
        "api:browserwindowonmove",
        "api:browserWindow.on('move')",
        "doc:move",
        "doc:browserwindowonmove",
        "doc:browserWindow.on('move')"
      ]
    },
    {
      "objectID": "api-browser-window#event-moved",
      "name": "moved",
      "description": "Emitted once when the window is moved to a new position.",
      "parameters": [],
      "additionalTags": [
        "os_macos"
      ],
      "apiType": "event",
      "fullSignature": "browserWindow.on('moved')",
      "url": "https://electronjs.org/docs/api/browser-window#event-moved",
      "slug": "browserwindowonmoved",
      "tldr": "Emitted once when the window is moved to a new position.",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:moved",
        "api:browserwindowonmoved",
        "api:browserWindow.on('moved')",
        "doc:moved",
        "doc:browserwindowonmoved",
        "doc:browserWindow.on('moved')"
      ]
    },
    {
      "objectID": "api-browser-window#event-enter-full-screen",
      "name": "enter-full-screen",
      "description": "Emitted when the window enters a full-screen state.",
      "parameters": [],
      "additionalTags": [],
      "apiType": "event",
      "fullSignature": "browserWindow.on('enter-full-screen')",
      "url": "https://electronjs.org/docs/api/browser-window#event-enter-full-screen",
      "slug": "browserwindowonenter-full-screen",
      "tldr": "Emitted when the window enters a full-screen state.",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:enter-full-screen",
        "api:browserwindowonenter-full-screen",
        "api:browserWindow.on('enter-full-screen')",
        "doc:enter-full-screen",
        "doc:browserwindowonenter-full-screen",
        "doc:browserWindow.on('enter-full-screen')"
      ]
    },
    {
      "objectID": "api-browser-window#event-leave-full-screen",
      "name": "leave-full-screen",
      "description": "Emitted when the window leaves a full-screen state.",
      "parameters": [],
      "additionalTags": [],
      "apiType": "event",
      "fullSignature": "browserWindow.on('leave-full-screen')",
      "url": "https://electronjs.org/docs/api/browser-window#event-leave-full-screen",
      "slug": "browserwindowonleave-full-screen",
      "tldr": "Emitted when the window leaves a full-screen state.",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:leave-full-screen",
        "api:browserwindowonleave-full-screen",
        "api:browserWindow.on('leave-full-screen')",
        "doc:leave-full-screen",
        "doc:browserwindowonleave-full-screen",
        "doc:browserWindow.on('leave-full-screen')"
      ]
    },
    {
      "objectID": "api-browser-window#event-enter-html-full-screen",
      "name": "enter-html-full-screen",
      "description": "Emitted when the window enters a full-screen state triggered by HTML API.",
      "parameters": [],
      "additionalTags": [],
      "apiType": "event",
      "fullSignature": "browserWindow.on('enter-html-full-screen')",
      "url": "https://electronjs.org/docs/api/browser-window#event-enter-html-full-screen",
      "slug": "browserwindowonenter-html-full-screen",
      "tldr": "Emitted when the window enters a full-screen state triggered by HTML API.",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:enter-html-full-screen",
        "api:browserwindowonenter-html-full-screen",
        "api:browserWindow.on('enter-html-full-screen')",
        "doc:enter-html-full-screen",
        "doc:browserwindowonenter-html-full-screen",
        "doc:browserWindow.on('enter-html-full-screen')"
      ]
    },
    {
      "objectID": "api-browser-window#event-leave-html-full-screen",
      "name": "leave-html-full-screen",
      "description": "Emitted when the window leaves a full-screen state triggered by HTML API.",
      "parameters": [],
      "additionalTags": [],
      "apiType": "event",
      "fullSignature": "browserWindow.on('leave-html-full-screen')",
      "url": "https://electronjs.org/docs/api/browser-window#event-leave-html-full-screen",
      "slug": "browserwindowonleave-html-full-screen",
      "tldr": "Emitted when the window leaves a full-screen state triggered by HTML API.",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:leave-html-full-screen",
        "api:browserwindowonleave-html-full-screen",
        "api:browserWindow.on('leave-html-full-screen')",
        "doc:leave-html-full-screen",
        "doc:browserwindowonleave-html-full-screen",
        "doc:browserWindow.on('leave-html-full-screen')"
      ]
    },
    {
      "objectID": "api-browser-window#event-always-on-top-changed",
      "name": "always-on-top-changed",
      "description": "Emitted when the window is set or unset to show always on top of other windows.",
      "parameters": [
        {
          "name": "event",
          "description": "",
          "collection": false,
          "type": "Event",
          "required": true
        },
        {
          "name": "isAlwaysOnTop",
          "description": "",
          "collection": false,
          "type": "Boolean",
          "required": true
        }
      ],
      "additionalTags": [],
      "apiType": "event",
      "fullSignature": "browserWindow.on('always-on-top-changed')",
      "url": "https://electronjs.org/docs/api/browser-window#event-always-on-top-changed",
      "slug": "browserwindowonalways-on-top-changed",
      "tldr": "Emitted when the window is set or unset to show always on top of other windows.",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:always-on-top-changed",
        "api:browserwindowonalways-on-top-changed",
        "api:browserWindow.on('always-on-top-changed')",
        "doc:always-on-top-changed",
        "doc:browserwindowonalways-on-top-changed",
        "doc:browserWindow.on('always-on-top-changed')"
      ]
    },
    {
      "objectID": "api-browser-window#event-app-command",
      "name": "app-command",
      "description": "Emitted when an App Command is invoked. These are typically related to keyboard media keys or browser commands, as well as the \"Back\" button built into some mice on Windows.\n\nCommands are lowercased, underscores are replaced with hyphens, and the `APPCOMMAND_` prefix is stripped off. e.g. `APPCOMMAND_BROWSER_BACKWARD` is emitted as `browser-backward`.\n\nThe following app commands are explicitly supported on Linux:\n\n* `browser-backward`\n* `browser-forward`",
      "parameters": [
        {
          "name": "event",
          "description": "",
          "collection": false,
          "type": "Event",
          "required": true
        },
        {
          "name": "command",
          "description": "",
          "collection": false,
          "type": "String",
          "possibleValues": null,
          "required": true
        }
      ],
      "additionalTags": [
        "os_windows",
        "os_linux"
      ],
      "apiType": "event",
      "fullSignature": "browserWindow.on('app-command')",
      "url": "https://electronjs.org/docs/api/browser-window#event-app-command",
      "slug": "browserwindowonapp-command",
      "tldr": "Emitted when an App Command is invoked.",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:app-command",
        "api:browserwindowonapp-command",
        "api:browserWindow.on('app-command')",
        "doc:app-command",
        "doc:browserwindowonapp-command",
        "doc:browserWindow.on('app-command')"
      ]
    },
    {
      "objectID": "api-browser-window#event-scroll-touch-begin",
      "name": "scroll-touch-begin",
      "description": "Emitted when scroll wheel event phase has begun.",
      "parameters": [],
      "additionalTags": [
        "os_macos"
      ],
      "apiType": "event",
      "fullSignature": "browserWindow.on('scroll-touch-begin')",
      "url": "https://electronjs.org/docs/api/browser-window#event-scroll-touch-begin",
      "slug": "browserwindowonscroll-touch-begin",
      "tldr": "Emitted when scroll wheel event phase has begun.",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:scroll-touch-begin",
        "api:browserwindowonscroll-touch-begin",
        "api:browserWindow.on('scroll-touch-begin')",
        "doc:scroll-touch-begin",
        "doc:browserwindowonscroll-touch-begin",
        "doc:browserWindow.on('scroll-touch-begin')"
      ]
    },
    {
      "objectID": "api-browser-window#event-scroll-touch-end",
      "name": "scroll-touch-end",
      "description": "Emitted when scroll wheel event phase has ended.",
      "parameters": [],
      "additionalTags": [
        "os_macos"
      ],
      "apiType": "event",
      "fullSignature": "browserWindow.on('scroll-touch-end')",
      "url": "https://electronjs.org/docs/api/browser-window#event-scroll-touch-end",
      "slug": "browserwindowonscroll-touch-end",
      "tldr": "Emitted when scroll wheel event phase has ended.",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:scroll-touch-end",
        "api:browserwindowonscroll-touch-end",
        "api:browserWindow.on('scroll-touch-end')",
        "doc:scroll-touch-end",
        "doc:browserwindowonscroll-touch-end",
        "doc:browserWindow.on('scroll-touch-end')"
      ]
    },
    {
      "objectID": "api-browser-window#event-scroll-touch-edge",
      "name": "scroll-touch-edge",
      "description": "Emitted when scroll wheel event phase filed upon reaching the edge of element.",
      "parameters": [],
      "additionalTags": [
        "os_macos"
      ],
      "apiType": "event",
      "fullSignature": "browserWindow.on('scroll-touch-edge')",
      "url": "https://electronjs.org/docs/api/browser-window#event-scroll-touch-edge",
      "slug": "browserwindowonscroll-touch-edge",
      "tldr": "Emitted when scroll wheel event phase filed upon reaching the edge of element.",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:scroll-touch-edge",
        "api:browserwindowonscroll-touch-edge",
        "api:browserWindow.on('scroll-touch-edge')",
        "doc:scroll-touch-edge",
        "doc:browserwindowonscroll-touch-edge",
        "doc:browserWindow.on('scroll-touch-edge')"
      ]
    },
    {
      "objectID": "api-browser-window#event-swipe",
      "name": "swipe",
      "description": "Emitted on 3-finger swipe. Possible directions are `up`, `right`, `down`, `left`.",
      "parameters": [
        {
          "name": "event",
          "description": "",
          "collection": false,
          "type": "Event",
          "required": true
        },
        {
          "name": "direction",
          "description": "",
          "collection": false,
          "type": "String",
          "possibleValues": null,
          "required": true
        }
      ],
      "additionalTags": [
        "os_macos"
      ],
      "apiType": "event",
      "fullSignature": "browserWindow.on('swipe')",
      "url": "https://electronjs.org/docs/api/browser-window#event-swipe",
      "slug": "browserwindowonswipe",
      "tldr": "Emitted on 3-finger swipe.",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:swipe",
        "api:browserwindowonswipe",
        "api:browserWindow.on('swipe')",
        "doc:swipe",
        "doc:browserwindowonswipe",
        "doc:browserWindow.on('swipe')"
      ]
    },
    {
      "objectID": "api-browser-window#event-rotate-gesture",
      "name": "rotate-gesture",
      "description": "Emitted on trackpad rotation gesture. Continually emitted until rotation gesture is ended. The `rotation` value on each emission is the angle in degrees rotated since the last emission. The last emitted event upon a rotation gesture will always be of value `0`. Counter-clockwise rotation values are positive, while clockwise ones are negative.",
      "parameters": [
        {
          "name": "event",
          "description": "",
          "collection": false,
          "type": "Event",
          "required": true
        },
        {
          "name": "rotation",
          "description": "",
          "collection": false,
          "type": "Float",
          "required": true
        }
      ],
      "additionalTags": [
        "os_macos"
      ],
      "apiType": "event",
      "fullSignature": "browserWindow.on('rotate-gesture')",
      "url": "https://electronjs.org/docs/api/browser-window#event-rotate-gesture",
      "slug": "browserwindowonrotate-gesture",
      "tldr": "Emitted on trackpad rotation gesture.",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:rotate-gesture",
        "api:browserwindowonrotate-gesture",
        "api:browserWindow.on('rotate-gesture')",
        "doc:rotate-gesture",
        "doc:browserwindowonrotate-gesture",
        "doc:browserWindow.on('rotate-gesture')"
      ]
    },
    {
      "objectID": "api-browser-window#event-sheet-begin",
      "name": "sheet-begin",
      "description": "Emitted when the window opens a sheet.",
      "parameters": [],
      "additionalTags": [
        "os_macos"
      ],
      "apiType": "event",
      "fullSignature": "browserWindow.on('sheet-begin')",
      "url": "https://electronjs.org/docs/api/browser-window#event-sheet-begin",
      "slug": "browserwindowonsheet-begin",
      "tldr": "Emitted when the window opens a sheet.",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:sheet-begin",
        "api:browserwindowonsheet-begin",
        "api:browserWindow.on('sheet-begin')",
        "doc:sheet-begin",
        "doc:browserwindowonsheet-begin",
        "doc:browserWindow.on('sheet-begin')"
      ]
    },
    {
      "objectID": "api-browser-window#event-sheet-end",
      "name": "sheet-end",
      "description": "Emitted when the window has closed a sheet.",
      "parameters": [],
      "additionalTags": [
        "os_macos"
      ],
      "apiType": "event",
      "fullSignature": "browserWindow.on('sheet-end')",
      "url": "https://electronjs.org/docs/api/browser-window#event-sheet-end",
      "slug": "browserwindowonsheet-end",
      "tldr": "Emitted when the window has closed a sheet.",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:sheet-end",
        "api:browserwindowonsheet-end",
        "api:browserWindow.on('sheet-end')",
        "doc:sheet-end",
        "doc:browserwindowonsheet-end",
        "doc:browserWindow.on('sheet-end')"
      ]
    },
    {
      "objectID": "api-browser-window#event-new-window-for-tab",
      "name": "new-window-for-tab",
      "description": "Emitted when the native new tab button is clicked.",
      "parameters": [],
      "additionalTags": [
        "os_macos"
      ],
      "apiType": "event",
      "fullSignature": "browserWindow.on('new-window-for-tab')",
      "url": "https://electronjs.org/docs/api/browser-window#event-new-window-for-tab",
      "slug": "browserwindowonnew-window-for-tab",
      "tldr": "Emitted when the native new tab button is clicked.",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:new-window-for-tab",
        "api:browserwindowonnew-window-for-tab",
        "api:browserWindow.on('new-window-for-tab')",
        "doc:new-window-for-tab",
        "doc:browserwindowonnew-window-for-tab",
        "doc:browserWindow.on('new-window-for-tab')"
      ]
    },
    {
      "objectID": "api-client-request#clientrequestchunkedencoding",
      "name": "chunkedEncoding",
      "description": "A `Boolean` specifying whether the request will use HTTP chunked transfer encoding or not. Defaults to false. The property is readable and writable, however it can be set only before the first write operation as the HTTP headers are not yet put on the wire. Trying to set the `chunkedEncoding` property after the first write will throw an error.\n\nUsing chunked encoding is strongly recommended if you need to send a large request body as data will be streamed in small chunks instead of being internally buffered inside Electron process memory.",
      "required": true,
      "additionalTags": [],
      "collection": false,
      "type": "Boolean",
      "apiType": "instanceProperties",
      "fullSignature": "ClientRequest.chunkedEncoding",
      "tldr": "A `Boolean` specifying whether the request will use HTTP chunked transfer encoding or not.",
      "slug": "clientrequestchunkedencoding",
      "url": "https://electronjs.org/docs/api/client-request#clientrequestchunkedencoding",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:chunkedEncoding",
        "api:clientrequestchunkedencoding",
        "api:ClientRequest.chunkedEncoding",
        "doc:chunkedEncoding",
        "doc:clientrequestchunkedencoding",
        "doc:ClientRequest.chunkedEncoding"
      ]
    },
    {
      "objectID": "api-client-request#clientrequestsetheadername-value",
      "name": "setHeader",
      "signature": "(name, value)",
      "description": "Adds an extra HTTP header. The header name will be issued as-is without lowercasing. It can be called only before first write. Calling this method after the first write will throw an error. If the passed value is not a `String`, its `toString()` method will be called to obtain the final value.",
      "parameters": [
        {
          "name": "name",
          "description": "An extra HTTP header name.",
          "required": true,
          "collection": false,
          "type": "String",
          "possibleValues": null
        },
        {
          "name": "value",
          "description": "An extra HTTP header value.",
          "required": true,
          "collection": false,
          "type": "String",
          "possibleValues": null
        }
      ],
      "returns": null,
      "additionalTags": [],
      "apiType": "instanceMethod",
      "fullSignature": "clientRequest.setHeader(name, value)",
      "tldr": "Adds an extra HTTP header.",
      "slug": "clientrequestsetheadername-value",
      "url": "https://electronjs.org/docs/api/client-request#clientrequestsetheadername-value",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:setHeader",
        "api:clientrequestsetheadername-value",
        "api:clientRequest.setHeader(name, value)",
        "doc:setHeader",
        "doc:clientrequestsetheadername-value",
        "doc:clientRequest.setHeader(name, value)"
      ]
    },
    {
      "objectID": "api-client-request#clientrequestgetheadername",
      "name": "getHeader",
      "signature": "(name)",
      "description": "The value of a previously set extra header name.",
      "parameters": [
        {
          "name": "name",
          "description": "Specify an extra header name.",
          "required": true,
          "collection": false,
          "type": "String",
          "possibleValues": null
        }
      ],
      "returns": {
        "collection": false,
        "type": "String",
        "possibleValues": null
      },
      "additionalTags": [],
      "apiType": "instanceMethod",
      "fullSignature": "clientRequest.getHeader(name)",
      "tldr": "The value of a previously set extra header name.",
      "slug": "clientrequestgetheadername",
      "url": "https://electronjs.org/docs/api/client-request#clientrequestgetheadername",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:getHeader",
        "api:clientrequestgetheadername",
        "api:clientRequest.getHeader(name)",
        "doc:getHeader",
        "doc:clientrequestgetheadername",
        "doc:clientRequest.getHeader(name)"
      ]
    },
    {
      "objectID": "api-client-request#clientrequestremoveheadername",
      "name": "removeHeader",
      "signature": "(name)",
      "description": "Removes a previously set extra header name. This method can be called only before first write. Trying to call it after the first write will throw an error.",
      "parameters": [
        {
          "name": "name",
          "description": "Specify an extra header name.",
          "required": true,
          "collection": false,
          "type": "String",
          "possibleValues": null
        }
      ],
      "returns": null,
      "additionalTags": [],
      "apiType": "instanceMethod",
      "fullSignature": "clientRequest.removeHeader(name)",
      "tldr": "Removes a previously set extra header name.",
      "slug": "clientrequestremoveheadername",
      "url": "https://electronjs.org/docs/api/client-request#clientrequestremoveheadername",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:removeHeader",
        "api:clientrequestremoveheadername",
        "api:clientRequest.removeHeader(name)",
        "doc:removeHeader",
        "doc:clientrequestremoveheadername",
        "doc:clientRequest.removeHeader(name)"
      ]
    },
    {
      "objectID": "api-client-request#clientrequestwritechunk-encoding-callback",
      "name": "write",
      "signature": "(chunk[, encoding][, callback])",
      "description": "`callback` is essentially a dummy function introduced in the purpose of keeping similarity with the Node.js API. It is called asynchronously in the next tick after `chunk` content have been delivered to the Chromium networking layer. Contrary to the Node.js implementation, it is not guaranteed that `chunk` content have been flushed on the wire before `callback` is called.\n\nAdds a chunk of data to the request body. The first write operation may cause the request headers to be issued on the wire. After the first write operation, it is not allowed to add or remove a custom header.",
      "parameters": [
        {
          "name": "chunk",
          "description": "A chunk of the request body's data. If it is a string, it is converted into a Buffer using the specified encoding.",
          "required": true,
          "collection": false,
          "type": [
            {
              "collection": false,
              "type": "String",
              "possibleValues": null
            },
            {
              "collection": false,
              "type": "Buffer"
            }
          ]
        },
        {
          "name": "encoding",
          "description": "Used to convert string chunks into Buffer objects. Defaults to 'utf-8'.",
          "required": false,
          "collection": false,
          "type": "String",
          "possibleValues": null
        },
        {
          "name": "callback",
          "description": "Called after the write operation ends.",
          "required": false,
          "collection": false,
          "type": "Function",
          "parameters": [],
          "returns": null
        }
      ],
      "returns": null,
      "additionalTags": [],
      "apiType": "instanceMethod",
      "fullSignature": "clientRequest.write(chunk[, encoding][, callback])",
      "tldr": "`callback` is essentially a dummy function introduced in the purpose of keeping similarity with the Node.js API.",
      "slug": "clientrequestwritechunk-encoding-callback",
      "url": "https://electronjs.org/docs/api/client-request#clientrequestwritechunk-encoding-callback",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:write",
        "api:clientrequestwritechunk-encoding-callback",
        "api:clientRequest.write(chunk[, encoding][, callback])",
        "doc:write",
        "doc:clientrequestwritechunk-encoding-callback",
        "doc:clientRequest.write(chunk[, encoding][, callback])"
      ]
    },
    {
      "objectID": "api-client-request#clientrequestendchunk-encoding-callback",
      "name": "end",
      "signature": "([chunk][, encoding][, callback])",
      "description": "Sends the last chunk of the request data. Subsequent write or end operations will not be allowed. The `finish` event is emitted just after the end operation.",
      "parameters": [
        {
          "name": "chunk",
          "description": "",
          "required": false,
          "collection": false,
          "type": [
            {
              "collection": false,
              "type": "String",
              "possibleValues": null
            },
            {
              "collection": false,
              "type": "Buffer"
            }
          ]
        },
        {
          "name": "encoding",
          "description": "",
          "required": false,
          "collection": false,
          "type": "String",
          "possibleValues": null
        },
        {
          "name": "callback",
          "description": "",
          "required": false,
          "collection": false,
          "type": "Function",
          "parameters": [],
          "returns": null
        }
      ],
      "returns": null,
      "additionalTags": [],
      "apiType": "instanceMethod",
      "fullSignature": "clientRequest.end([chunk][, encoding][, callback])",
      "tldr": "Sends the last chunk of the request data.",
      "slug": "clientrequestendchunk-encoding-callback",
      "url": "https://electronjs.org/docs/api/client-request#clientrequestendchunk-encoding-callback",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:end",
        "api:clientrequestendchunk-encoding-callback",
        "api:clientRequest.end([chunk][, encoding][, callback])",
        "doc:end",
        "doc:clientrequestendchunk-encoding-callback",
        "doc:clientRequest.end([chunk][, encoding][, callback])"
      ]
    },
    {
      "objectID": "api-client-request#clientrequestabort",
      "name": "abort",
      "signature": "()",
      "description": "Cancels an ongoing HTTP transaction. If the request has already emitted the `close` event, the abort operation will have no effect. Otherwise an ongoing event will emit `abort` and `close` events. Additionally, if there is an ongoing response object,it will emit the `aborted` event.",
      "parameters": [],
      "returns": null,
      "additionalTags": [],
      "apiType": "instanceMethod",
      "fullSignature": "clientRequest.abort()",
      "tldr": "Cancels an ongoing HTTP transaction.",
      "slug": "clientrequestabort",
      "url": "https://electronjs.org/docs/api/client-request#clientrequestabort",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:abort",
        "api:clientrequestabort",
        "api:clientRequest.abort()",
        "doc:abort",
        "doc:clientrequestabort",
        "doc:clientRequest.abort()"
      ]
    },
    {
      "objectID": "api-client-request#clientrequestfollowredirect",
      "name": "followRedirect",
      "signature": "()",
      "description": "Continues any deferred redirection request when the redirection mode is `manual`.",
      "parameters": [],
      "returns": null,
      "additionalTags": [],
      "apiType": "instanceMethod",
      "fullSignature": "clientRequest.followRedirect()",
      "tldr": "Continues any deferred redirection request when the redirection mode is `manual`.",
      "slug": "clientrequestfollowredirect",
      "url": "https://electronjs.org/docs/api/client-request#clientrequestfollowredirect",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:followRedirect",
        "api:clientrequestfollowredirect",
        "api:clientRequest.followRedirect()",
        "doc:followRedirect",
        "doc:clientrequestfollowredirect",
        "doc:clientRequest.followRedirect()"
      ]
    },
    {
      "objectID": "api-client-request#clientrequestgetuploadprogress",
      "name": "getUploadProgress",
      "signature": "()",
      "description": "* `active` Boolean - Whether the request is currently active. If this is false no other properties will be set\n* `started` Boolean - Whether the upload has started. If this is false both `current` and `total` will be set to 0.\n* `current` Integer - The number of bytes that have been uploaded so far\n* `total` Integer - The number of bytes that will be uploaded this request\n\nYou can use this method in conjunction with `POST` requests to get the progress of a file upload or other data transfer.",
      "parameters": [],
      "returns": {
        "collection": false,
        "type": "Object",
        "properties": [
          {
            "name": "active",
            "description": "Whether the request is currently active. If this is false no other properties will be set",
            "required": true,
            "additionalTags": [],
            "collection": false,
            "type": "Boolean"
          },
          {
            "name": "started",
            "description": "Whether the upload has started. If this is false both `current` and `total` will be set to 0.",
            "required": true,
            "additionalTags": [],
            "collection": false,
            "type": "Boolean"
          },
          {
            "name": "current",
            "description": "The number of bytes that have been uploaded so far",
            "required": true,
            "additionalTags": [],
            "collection": false,
            "type": "Integer"
          },
          {
            "name": "total",
            "description": "The number of bytes that will be uploaded this request",
            "required": true,
            "additionalTags": [],
            "collection": false,
            "type": "Integer"
          }
        ]
      },
      "additionalTags": [],
      "apiType": "instanceMethod",
      "fullSignature": "clientRequest.getUploadProgress()",
      "tldr": "* `active` Boolean - Whether the request is currently active.",
      "slug": "clientrequestgetuploadprogress",
      "url": "https://electronjs.org/docs/api/client-request#clientrequestgetuploadprogress",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:getUploadProgress",
        "api:clientrequestgetuploadprogress",
        "api:clientRequest.getUploadProgress()",
        "doc:getUploadProgress",
        "doc:clientrequestgetuploadprogress",
        "doc:clientRequest.getUploadProgress()"
      ]
    },
    {
      "objectID": "api-client-request#event-response",
      "name": "response",
      "description": "",
      "parameters": [
        {
          "name": "response",
          "description": "An object representing the HTTP response message.",
          "collection": false,
          "type": "IncomingMessage",
          "required": true
        }
      ],
      "additionalTags": [],
      "apiType": "event",
      "fullSignature": "clientRequest.on('response')",
      "url": "https://electronjs.org/docs/api/client-request#event-response",
      "slug": "clientrequestonresponse",
      "tldr": null,
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:response",
        "api:clientrequestonresponse",
        "api:clientRequest.on('response')",
        "doc:response",
        "doc:clientrequestonresponse",
        "doc:clientRequest.on('response')"
      ]
    },
    {
      "objectID": "api-client-request#event-login",
      "name": "login",
      "description": "Emitted when an authenticating proxy is asking for user credentials.\n\nThe `callback` function is expected to be called back with user credentials:\n\n* `username` String\n* `password` String\n\nProviding empty credentials will cancel the request and report an authentication error on the response object:",
      "parameters": [
        {
          "name": "authInfo",
          "description": "",
          "collection": false,
          "type": "Object",
          "properties": [
            {
              "name": "isProxy",
              "description": "",
              "required": true,
              "additionalTags": [],
              "collection": false,
              "type": "Boolean"
            },
            {
              "name": "scheme",
              "description": "",
              "required": true,
              "additionalTags": [],
              "collection": false,
              "type": "String",
              "possibleValues": null
            },
            {
              "name": "host",
              "description": "",
              "required": true,
              "additionalTags": [],
              "collection": false,
              "type": "String",
              "possibleValues": null
            },
            {
              "name": "port",
              "description": "",
              "required": true,
              "additionalTags": [],
              "collection": false,
              "type": "Integer"
            },
            {
              "name": "realm",
              "description": "",
              "required": true,
              "additionalTags": [],
              "collection": false,
              "type": "String",
              "possibleValues": null
            }
          ],
          "required": true
        },
        {
          "name": "callback",
          "description": "",
          "collection": false,
          "type": "Function",
          "parameters": [
            {
              "name": "username",
              "description": "",
              "required": true,
              "collection": false,
              "type": "String",
              "possibleValues": null
            },
            {
              "name": "password",
              "description": "",
              "required": true,
              "collection": false,
              "type": "String",
              "possibleValues": null
            }
          ],
          "returns": null,
          "required": true
        }
      ],
      "additionalTags": [],
      "apiType": "event",
      "fullSignature": "clientRequest.on('login')",
      "url": "https://electronjs.org/docs/api/client-request#event-login",
      "slug": "clientrequestonlogin",
      "tldr": "Emitted when an authenticating proxy is asking for user credentials.\n\nThe `callback` function is expected to be called back with user credentials:\n\n* `username` String\n* `password` String\n\nProviding empty credentials will cancel the request and report an authentication error on the response object:.",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:login",
        "api:clientrequestonlogin",
        "api:clientRequest.on('login')",
        "doc:login",
        "doc:clientrequestonlogin",
        "doc:clientRequest.on('login')"
      ]
    },
    {
      "objectID": "api-client-request#event-finish",
      "name": "finish",
      "description": "Emitted just after the last chunk of the `request`'s data has been written into the `request` object.",
      "parameters": [],
      "additionalTags": [],
      "apiType": "event",
      "fullSignature": "clientRequest.on('finish')",
      "url": "https://electronjs.org/docs/api/client-request#event-finish",
      "slug": "clientrequestonfinish",
      "tldr": "Emitted just after the last chunk of the `request`'s data has been written into the `request` object.",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:finish",
        "api:clientrequestonfinish",
        "api:clientRequest.on('finish')",
        "doc:finish",
        "doc:clientrequestonfinish",
        "doc:clientRequest.on('finish')"
      ]
    },
    {
      "objectID": "api-client-request#event-abort",
      "name": "abort",
      "description": "Emitted when the `request` is aborted. The `abort` event will not be fired if the `request` is already closed.",
      "parameters": [],
      "additionalTags": [],
      "apiType": "event",
      "fullSignature": "clientRequest.on('abort')",
      "url": "https://electronjs.org/docs/api/client-request#event-abort",
      "slug": "clientrequestonabort",
      "tldr": "Emitted when the `request` is aborted.",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:abort",
        "api:clientrequestonabort",
        "api:clientRequest.on('abort')",
        "doc:abort",
        "doc:clientrequestonabort",
        "doc:clientRequest.on('abort')"
      ]
    },
    {
      "objectID": "api-client-request#event-error",
      "name": "error",
      "description": "Emitted when the `net` module fails to issue a network request. Typically when the `request` object emits an `error` event, a `close` event will subsequently follow and no response object will be provided.",
      "parameters": [
        {
          "name": "error",
          "description": "an error object providing some information about the failure.",
          "collection": false,
          "type": "Error",
          "required": true
        }
      ],
      "additionalTags": [],
      "apiType": "event",
      "fullSignature": "clientRequest.on('error')",
      "url": "https://electronjs.org/docs/api/client-request#event-error",
      "slug": "clientrequestonerror",
      "tldr": "Emitted when the `net` module fails to issue a network request.",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:error",
        "api:clientrequestonerror",
        "api:clientRequest.on('error')",
        "doc:error",
        "doc:clientrequestonerror",
        "doc:clientRequest.on('error')"
      ]
    },
    {
      "objectID": "api-client-request#event-close",
      "name": "close",
      "description": "Emitted as the last event in the HTTP request-response transaction. The `close` event indicates that no more events will be emitted on either the `request` or `response` objects.",
      "parameters": [],
      "additionalTags": [],
      "apiType": "event",
      "fullSignature": "clientRequest.on('close')",
      "url": "https://electronjs.org/docs/api/client-request#event-close",
      "slug": "clientrequestonclose",
      "tldr": "Emitted as the last event in the HTTP request-response transaction.",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:close",
        "api:clientrequestonclose",
        "api:clientRequest.on('close')",
        "doc:close",
        "doc:clientrequestonclose",
        "doc:clientRequest.on('close')"
      ]
    },
    {
      "objectID": "api-client-request#event-redirect",
      "name": "redirect",
      "description": "Emitted when there is redirection and the mode is `manual`. Calling `request.followRedirect` will continue with the redirection.",
      "parameters": [
        {
          "name": "statusCode",
          "description": "",
          "collection": false,
          "type": "Integer",
          "required": true
        },
        {
          "name": "method",
          "description": "",
          "collection": false,
          "type": "String",
          "possibleValues": null,
          "required": true
        },
        {
          "name": "redirectUrl",
          "description": "",
          "collection": false,
          "type": "String",
          "possibleValues": null,
          "required": true
        },
        {
          "name": "responseHeaders",
          "description": "",
          "collection": false,
          "type": "Record",
          "innerTypes": [
            {
              "collection": false,
              "type": "String",
              "possibleValues": null
            },
            {
              "collection": true,
              "type": "String",
              "possibleValues": null
            }
          ],
          "required": true
        }
      ],
      "additionalTags": [],
      "apiType": "event",
      "fullSignature": "clientRequest.on('redirect')",
      "url": "https://electronjs.org/docs/api/client-request#event-redirect",
      "slug": "clientrequestonredirect",
      "tldr": "Emitted when there is redirection and the mode is `manual`.",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:redirect",
        "api:clientrequestonredirect",
        "api:clientRequest.on('redirect')",
        "doc:redirect",
        "doc:clientrequestonredirect",
        "doc:clientRequest.on('redirect')"
      ]
    },
    {
      "objectID": "api-clipboard#clipboardreadtexttype",
      "name": "readText",
      "signature": "([type])",
      "description": "The content in the clipboard as plain text.",
      "parameters": [
        {
          "name": "type",
          "description": "Can be `selection` or `clipboard`; default is 'clipboard'. `selection` is only available on Linux.",
          "required": false,
          "collection": false,
          "type": "String",
          "possibleValues": [
            {
              "value": "selection",
              "description": ""
            },
            {
              "value": "clipboard",
              "description": ""
            }
          ]
        }
      ],
      "returns": {
        "collection": false,
        "type": "String",
        "possibleValues": null
      },
      "additionalTags": [],
      "apiType": "methods",
      "fullSignature": "clipboard.readText([type])",
      "tldr": "The content in the clipboard as plain text.",
      "slug": "clipboardreadtexttype",
      "url": "https://electronjs.org/docs/api/clipboard#clipboardreadtexttype",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:readText",
        "api:clipboardreadtexttype",
        "api:clipboard.readText([type])",
        "doc:readText",
        "doc:clipboardreadtexttype",
        "doc:clipboard.readText([type])"
      ]
    },
    {
      "objectID": "api-clipboard#clipboardwritetexttext-type",
      "name": "writeText",
      "signature": "(text[, type])",
      "description": "Writes the `text` into the clipboard as plain text.",
      "parameters": [
        {
          "name": "text",
          "description": "",
          "required": true,
          "collection": false,
          "type": "String",
          "possibleValues": null
        },
        {
          "name": "type",
          "description": "Can be `selection` or `clipboard`; default is 'clipboard'. `selection` is only available on Linux.",
          "required": false,
          "collection": false,
          "type": "String",
          "possibleValues": [
            {
              "value": "selection",
              "description": ""
            },
            {
              "value": "clipboard",
              "description": ""
            }
          ]
        }
      ],
      "returns": null,
      "additionalTags": [],
      "apiType": "methods",
      "fullSignature": "clipboard.writeText(text[, type])",
      "tldr": "Writes the `text` into the clipboard as plain text.",
      "slug": "clipboardwritetexttext-type",
      "url": "https://electronjs.org/docs/api/clipboard#clipboardwritetexttext-type",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:writeText",
        "api:clipboardwritetexttext-type",
        "api:clipboard.writeText(text[, type])",
        "doc:writeText",
        "doc:clipboardwritetexttext-type",
        "doc:clipboard.writeText(text[, type])"
      ]
    },
    {
      "objectID": "api-clipboard#clipboardreadhtmltype",
      "name": "readHTML",
      "signature": "([type])",
      "description": "The content in the clipboard as markup.",
      "parameters": [
        {
          "name": "type",
          "description": "Can be `selection` or `clipboard`; default is 'clipboard'. `selection` is only available on Linux.",
          "required": false,
          "collection": false,
          "type": "String",
          "possibleValues": [
            {
              "value": "selection",
              "description": ""
            },
            {
              "value": "clipboard",
              "description": ""
            }
          ]
        }
      ],
      "returns": {
        "collection": false,
        "type": "String",
        "possibleValues": null
      },
      "additionalTags": [],
      "apiType": "methods",
      "fullSignature": "clipboard.readHTML([type])",
      "tldr": "The content in the clipboard as markup.",
      "slug": "clipboardreadhtmltype",
      "url": "https://electronjs.org/docs/api/clipboard#clipboardreadhtmltype",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:readHTML",
        "api:clipboardreadhtmltype",
        "api:clipboard.readHTML([type])",
        "doc:readHTML",
        "doc:clipboardreadhtmltype",
        "doc:clipboard.readHTML([type])"
      ]
    },
    {
      "objectID": "api-clipboard#clipboardwritehtmlmarkup-type",
      "name": "writeHTML",
      "signature": "(markup[, type])",
      "description": "Writes `markup` to the clipboard.",
      "parameters": [
        {
          "name": "markup",
          "description": "",
          "required": true,
          "collection": false,
          "type": "String",
          "possibleValues": null
        },
        {
          "name": "type",
          "description": "Can be `selection` or `clipboard`; default is 'clipboard'. `selection` is only available on Linux.",
          "required": false,
          "collection": false,
          "type": "String",
          "possibleValues": [
            {
              "value": "selection",
              "description": ""
            },
            {
              "value": "clipboard",
              "description": ""
            }
          ]
        }
      ],
      "returns": null,
      "additionalTags": [],
      "apiType": "methods",
      "fullSignature": "clipboard.writeHTML(markup[, type])",
      "tldr": "Writes `markup` to the clipboard.",
      "slug": "clipboardwritehtmlmarkup-type",
      "url": "https://electronjs.org/docs/api/clipboard#clipboardwritehtmlmarkup-type",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:writeHTML",
        "api:clipboardwritehtmlmarkup-type",
        "api:clipboard.writeHTML(markup[, type])",
        "doc:writeHTML",
        "doc:clipboardwritehtmlmarkup-type",
        "doc:clipboard.writeHTML(markup[, type])"
      ]
    },
    {
      "objectID": "api-clipboard#clipboardreadimagetype",
      "name": "readImage",
      "signature": "([type])",
      "description": "The image content in the clipboard.",
      "parameters": [
        {
          "name": "type",
          "description": "Can be `selection` or `clipboard`; default is 'clipboard'. `selection` is only available on Linux.",
          "required": false,
          "collection": false,
          "type": "String",
          "possibleValues": [
            {
              "value": "selection",
              "description": ""
            },
            {
              "value": "clipboard",
              "description": ""
            }
          ]
        }
      ],
      "returns": {
        "collection": false,
        "type": "NativeImage"
      },
      "additionalTags": [],
      "apiType": "methods",
      "fullSignature": "clipboard.readImage([type])",
      "tldr": "The image content in the clipboard.",
      "slug": "clipboardreadimagetype",
      "url": "https://electronjs.org/docs/api/clipboard#clipboardreadimagetype",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:readImage",
        "api:clipboardreadimagetype",
        "api:clipboard.readImage([type])",
        "doc:readImage",
        "doc:clipboardreadimagetype",
        "doc:clipboard.readImage([type])"
      ]
    },
    {
      "objectID": "api-clipboard#clipboardwriteimageimage-type",
      "name": "writeImage",
      "signature": "(image[, type])",
      "description": "Writes `image` to the clipboard.",
      "parameters": [
        {
          "name": "image",
          "description": "",
          "required": true,
          "collection": false,
          "type": "NativeImage"
        },
        {
          "name": "type",
          "description": "Can be `selection` or `clipboard`; default is 'clipboard'. `selection` is only available on Linux.",
          "required": false,
          "collection": false,
          "type": "String",
          "possibleValues": [
            {
              "value": "selection",
              "description": ""
            },
            {
              "value": "clipboard",
              "description": ""
            }
          ]
        }
      ],
      "returns": null,
      "additionalTags": [],
      "apiType": "methods",
      "fullSignature": "clipboard.writeImage(image[, type])",
      "tldr": "Writes `image` to the clipboard.",
      "slug": "clipboardwriteimageimage-type",
      "url": "https://electronjs.org/docs/api/clipboard#clipboardwriteimageimage-type",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:writeImage",
        "api:clipboardwriteimageimage-type",
        "api:clipboard.writeImage(image[, type])",
        "doc:writeImage",
        "doc:clipboardwriteimageimage-type",
        "doc:clipboard.writeImage(image[, type])"
      ]
    },
    {
      "objectID": "api-clipboard#clipboardreadrtftype",
      "name": "readRTF",
      "signature": "([type])",
      "description": "The content in the clipboard as RTF.",
      "parameters": [
        {
          "name": "type",
          "description": "Can be `selection` or `clipboard`; default is 'clipboard'. `selection` is only available on Linux.",
          "required": false,
          "collection": false,
          "type": "String",
          "possibleValues": [
            {
              "value": "selection",
              "description": ""
            },
            {
              "value": "clipboard",
              "description": ""
            }
          ]
        }
      ],
      "returns": {
        "collection": false,
        "type": "String",
        "possibleValues": null
      },
      "additionalTags": [],
      "apiType": "methods",
      "fullSignature": "clipboard.readRTF([type])",
      "tldr": "The content in the clipboard as RTF.",
      "slug": "clipboardreadrtftype",
      "url": "https://electronjs.org/docs/api/clipboard#clipboardreadrtftype",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:readRTF",
        "api:clipboardreadrtftype",
        "api:clipboard.readRTF([type])",
        "doc:readRTF",
        "doc:clipboardreadrtftype",
        "doc:clipboard.readRTF([type])"
      ]
    },
    {
      "objectID": "api-clipboard#clipboardwritertftext-type",
      "name": "writeRTF",
      "signature": "(text[, type])",
      "description": "Writes the `text` into the clipboard in RTF.",
      "parameters": [
        {
          "name": "text",
          "description": "",
          "required": true,
          "collection": false,
          "type": "String",
          "possibleValues": null
        },
        {
          "name": "type",
          "description": "Can be `selection` or `clipboard`; default is 'clipboard'. `selection` is only available on Linux.",
          "required": false,
          "collection": false,
          "type": "String",
          "possibleValues": [
            {
              "value": "selection",
              "description": ""
            },
            {
              "value": "clipboard",
              "description": ""
            }
          ]
        }
      ],
      "returns": null,
      "additionalTags": [],
      "apiType": "methods",
      "fullSignature": "clipboard.writeRTF(text[, type])",
      "tldr": "Writes the `text` into the clipboard in RTF.",
      "slug": "clipboardwritertftext-type",
      "url": "https://electronjs.org/docs/api/clipboard#clipboardwritertftext-type",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:writeRTF",
        "api:clipboardwritertftext-type",
        "api:clipboard.writeRTF(text[, type])",
        "doc:writeRTF",
        "doc:clipboardwritertftext-type",
        "doc:clipboard.writeRTF(text[, type])"
      ]
    },
    {
      "objectID": "api-clipboard#clipboardreadbookmark",
      "name": "readBookmark",
      "signature": "()",
      "description": "* `title` String\n* `url` String\n\nReturns an Object containing `title` and `url` keys representing the bookmark in the clipboard. The `title` and `url` values will be empty strings when the bookmark is unavailable.",
      "parameters": [],
      "returns": {
        "collection": false,
        "type": "Object",
        "properties": [
          {
            "name": "title",
            "description": "",
            "required": true,
            "additionalTags": [],
            "collection": false,
            "type": "String",
            "possibleValues": null
          },
          {
            "name": "url",
            "description": "",
            "required": true,
            "additionalTags": [],
            "collection": false,
            "type": "String",
            "possibleValues": null
          }
        ]
      },
      "additionalTags": [
        "os_macos",
        "os_windows"
      ],
      "apiType": "methods",
      "fullSignature": "clipboard.readBookmark()",
      "tldr": "* `title` String\n* `url` String\n\nReturns an Object containing `title` and `url` keys representing the bookmark in the clipboard.",
      "slug": "clipboardreadbookmark",
      "url": "https://electronjs.org/docs/api/clipboard#clipboardreadbookmark",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:readBookmark",
        "api:clipboardreadbookmark",
        "api:clipboard.readBookmark()",
        "doc:readBookmark",
        "doc:clipboardreadbookmark",
        "doc:clipboard.readBookmark()"
      ]
    },
    {
      "objectID": "api-clipboard#clipboardwritebookmarktitle-url-type",
      "name": "writeBookmark",
      "signature": "(title, url[, type])",
      "description": "Writes the `title` and `url` into the clipboard as a bookmark.\n\n**Note:** Most apps on Windows don't support pasting bookmarks into them so you can use `clipboard.write` to write both a bookmark and fallback text to the clipboard.",
      "parameters": [
        {
          "name": "title",
          "description": "",
          "required": true,
          "collection": false,
          "type": "String",
          "possibleValues": null
        },
        {
          "name": "url",
          "description": "",
          "required": true,
          "collection": false,
          "type": "String",
          "possibleValues": null
        },
        {
          "name": "type",
          "description": "Can be `selection` or `clipboard`; default is 'clipboard'. `selection` is only available on Linux.",
          "required": false,
          "collection": false,
          "type": "String",
          "possibleValues": [
            {
              "value": "selection",
              "description": ""
            },
            {
              "value": "clipboard",
              "description": ""
            }
          ]
        }
      ],
      "returns": null,
      "additionalTags": [
        "os_macos",
        "os_windows"
      ],
      "apiType": "methods",
      "fullSignature": "clipboard.writeBookmark(title, url[, type])",
      "tldr": "Writes the `title` and `url` into the clipboard as a bookmark.\n\n**Note:** Most apps on Windows don't support pasting bookmarks into them so you can use `clipboard.write` to write both a bookmark and fallback text to the clipboard.",
      "slug": "clipboardwritebookmarktitle-url-type",
      "url": "https://electronjs.org/docs/api/clipboard#clipboardwritebookmarktitle-url-type",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:writeBookmark",
        "api:clipboardwritebookmarktitle-url-type",
        "api:clipboard.writeBookmark(title, url[, type])",
        "doc:writeBookmark",
        "doc:clipboardwritebookmarktitle-url-type",
        "doc:clipboard.writeBookmark(title, url[, type])"
      ]
    },
    {
      "objectID": "api-clipboard#clipboardreadfindtext",
      "name": "readFindText",
      "signature": "()",
      "description": "The text on the find pasteboard, which is the pasteboard that holds information about the current state of the active application’s find panel.\n\nThis method uses synchronous IPC when called from the renderer process. The cached value is reread from the find pasteboard whenever the application is activated.",
      "parameters": [],
      "returns": {
        "collection": false,
        "type": "String",
        "possibleValues": null
      },
      "additionalTags": [
        "os_macos"
      ],
      "apiType": "methods",
      "fullSignature": "clipboard.readFindText()",
      "tldr": "The text on the find pasteboard, which is the pasteboard that holds information about the current state of the active application’s find panel.\n\nThis method uses synchronous IPC when called from the renderer process.",
      "slug": "clipboardreadfindtext",
      "url": "https://electronjs.org/docs/api/clipboard#clipboardreadfindtext",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:readFindText",
        "api:clipboardreadfindtext",
        "api:clipboard.readFindText()",
        "doc:readFindText",
        "doc:clipboardreadfindtext",
        "doc:clipboard.readFindText()"
      ]
    },
    {
      "objectID": "api-clipboard#clipboardwritefindtexttext",
      "name": "writeFindText",
      "signature": "(text)",
      "description": "Writes the `text` into the find pasteboard (the pasteboard that holds information about the current state of the active application’s find panel) as plain text. This method uses synchronous IPC when called from the renderer process.",
      "parameters": [
        {
          "name": "text",
          "description": "",
          "required": true,
          "collection": false,
          "type": "String",
          "possibleValues": null
        }
      ],
      "returns": null,
      "additionalTags": [
        "os_macos"
      ],
      "apiType": "methods",
      "fullSignature": "clipboard.writeFindText(text)",
      "tldr": "Writes the `text` into the find pasteboard (the pasteboard that holds information about the current state of the active application’s find panel) as plain text.",
      "slug": "clipboardwritefindtexttext",
      "url": "https://electronjs.org/docs/api/clipboard#clipboardwritefindtexttext",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:writeFindText",
        "api:clipboardwritefindtexttext",
        "api:clipboard.writeFindText(text)",
        "doc:writeFindText",
        "doc:clipboardwritefindtexttext",
        "doc:clipboard.writeFindText(text)"
      ]
    },
    {
      "objectID": "api-clipboard#clipboardcleartype",
      "name": "clear",
      "signature": "([type])",
      "description": "Clears the clipboard content.",
      "parameters": [
        {
          "name": "type",
          "description": "Can be `selection` or `clipboard`; default is 'clipboard'. `selection` is only available on Linux.",
          "required": false,
          "collection": false,
          "type": "String",
          "possibleValues": [
            {
              "value": "selection",
              "description": ""
            },
            {
              "value": "clipboard",
              "description": ""
            }
          ]
        }
      ],
      "returns": null,
      "additionalTags": [],
      "apiType": "methods",
      "fullSignature": "clipboard.clear([type])",
      "tldr": "Clears the clipboard content.",
      "slug": "clipboardcleartype",
      "url": "https://electronjs.org/docs/api/clipboard#clipboardcleartype",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:clear",
        "api:clipboardcleartype",
        "api:clipboard.clear([type])",
        "doc:clear",
        "doc:clipboardcleartype",
        "doc:clipboard.clear([type])"
      ]
    },
    {
      "objectID": "api-clipboard#clipboardavailableformatstype",
      "name": "availableFormats",
      "signature": "([type])",
      "description": "An array of supported formats for the clipboard `type`.",
      "parameters": [
        {
          "name": "type",
          "description": "Can be `selection` or `clipboard`; default is 'clipboard'. `selection` is only available on Linux.",
          "required": false,
          "collection": false,
          "type": "String",
          "possibleValues": [
            {
              "value": "selection",
              "description": ""
            },
            {
              "value": "clipboard",
              "description": ""
            }
          ]
        }
      ],
      "returns": {
        "collection": true,
        "type": "String",
        "possibleValues": null
      },
      "additionalTags": [],
      "apiType": "methods",
      "fullSignature": "clipboard.availableFormats([type])",
      "tldr": "An array of supported formats for the clipboard `type`.",
      "slug": "clipboardavailableformatstype",
      "url": "https://electronjs.org/docs/api/clipboard#clipboardavailableformatstype",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:availableFormats",
        "api:clipboardavailableformatstype",
        "api:clipboard.availableFormats([type])",
        "doc:availableFormats",
        "doc:clipboardavailableformatstype",
        "doc:clipboard.availableFormats([type])"
      ]
    },
    {
      "objectID": "api-clipboard#clipboardhasformat-type",
      "name": "has",
      "signature": "(format[, type])",
      "description": "Whether the clipboard supports the specified `format`.",
      "parameters": [
        {
          "name": "format",
          "description": "",
          "required": true,
          "collection": false,
          "type": "String",
          "possibleValues": null
        },
        {
          "name": "type",
          "description": "Can be `selection` or `clipboard`; default is 'clipboard'. `selection` is only available on Linux.",
          "required": false,
          "collection": false,
          "type": "String",
          "possibleValues": [
            {
              "value": "selection",
              "description": ""
            },
            {
              "value": "clipboard",
              "description": ""
            }
          ]
        }
      ],
      "returns": {
        "collection": false,
        "type": "Boolean"
      },
      "additionalTags": [
        "stability_experimental"
      ],
      "apiType": "methods",
      "fullSignature": "clipboard.has(format[, type])",
      "tldr": "Whether the clipboard supports the specified `format`.",
      "slug": "clipboardhasformat-type",
      "url": "https://electronjs.org/docs/api/clipboard#clipboardhasformat-type",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:has",
        "api:clipboardhasformat-type",
        "api:clipboard.has(format[, type])",
        "doc:has",
        "doc:clipboardhasformat-type",
        "doc:clipboard.has(format[, type])"
      ]
    },
    {
      "objectID": "api-clipboard#clipboardreadformat",
      "name": "read",
      "signature": "(format)",
      "description": "Reads `format` type from the clipboard.",
      "parameters": [
        {
          "name": "format",
          "description": "",
          "required": true,
          "collection": false,
          "type": "String",
          "possibleValues": null
        }
      ],
      "returns": {
        "collection": false,
        "type": "String",
        "possibleValues": null
      },
      "additionalTags": [
        "stability_experimental"
      ],
      "apiType": "methods",
      "fullSignature": "clipboard.read(format)",
      "tldr": "Reads `format` type from the clipboard.",
      "slug": "clipboardreadformat",
      "url": "https://electronjs.org/docs/api/clipboard#clipboardreadformat",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:read",
        "api:clipboardreadformat",
        "api:clipboard.read(format)",
        "doc:read",
        "doc:clipboardreadformat",
        "doc:clipboard.read(format)"
      ]
    },
    {
      "objectID": "api-clipboard#clipboardreadbufferformat",
      "name": "readBuffer",
      "signature": "(format)",
      "description": "Reads `format` type from the clipboard.",
      "parameters": [
        {
          "name": "format",
          "description": "",
          "required": true,
          "collection": false,
          "type": "String",
          "possibleValues": null
        }
      ],
      "returns": {
        "collection": false,
        "type": "Buffer"
      },
      "additionalTags": [
        "stability_experimental"
      ],
      "apiType": "methods",
      "fullSignature": "clipboard.readBuffer(format)",
      "tldr": "Reads `format` type from the clipboard.",
      "slug": "clipboardreadbufferformat",
      "url": "https://electronjs.org/docs/api/clipboard#clipboardreadbufferformat",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:readBuffer",
        "api:clipboardreadbufferformat",
        "api:clipboard.readBuffer(format)",
        "doc:readBuffer",
        "doc:clipboardreadbufferformat",
        "doc:clipboard.readBuffer(format)"
      ]
    },
    {
      "objectID": "api-clipboard#clipboardwritebufferformat-buffer-type",
      "name": "writeBuffer",
      "signature": "(format, buffer[, type])",
      "description": "Writes the `buffer` into the clipboard as `format`.",
      "parameters": [
        {
          "name": "format",
          "description": "",
          "required": true,
          "collection": false,
          "type": "String",
          "possibleValues": null
        },
        {
          "name": "buffer",
          "description": "",
          "required": true,
          "collection": false,
          "type": "Buffer"
        },
        {
          "name": "type",
          "description": "Can be `selection` or `clipboard`; default is 'clipboard'. `selection` is only available on Linux.",
          "required": false,
          "collection": false,
          "type": "String",
          "possibleValues": [
            {
              "value": "selection",
              "description": ""
            },
            {
              "value": "clipboard",
              "description": ""
            }
          ]
        }
      ],
      "returns": null,
      "additionalTags": [
        "stability_experimental"
      ],
      "apiType": "methods",
      "fullSignature": "clipboard.writeBuffer(format, buffer[, type])",
      "tldr": "Writes the `buffer` into the clipboard as `format`.",
      "slug": "clipboardwritebufferformat-buffer-type",
      "url": "https://electronjs.org/docs/api/clipboard#clipboardwritebufferformat-buffer-type",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:writeBuffer",
        "api:clipboardwritebufferformat-buffer-type",
        "api:clipboard.writeBuffer(format, buffer[, type])",
        "doc:writeBuffer",
        "doc:clipboardwritebufferformat-buffer-type",
        "doc:clipboard.writeBuffer(format, buffer[, type])"
      ]
    },
    {
      "objectID": "api-clipboard#clipboardwritedata-type",
      "name": "write",
      "signature": "(data[, type])",
      "description": "Writes `data` to the clipboard.",
      "parameters": [
        {
          "name": "data",
          "description": "",
          "required": true,
          "collection": false,
          "type": "Object",
          "properties": [
            {
              "name": "text",
              "description": "",
              "required": false,
              "additionalTags": [],
              "collection": false,
              "type": "String",
              "possibleValues": null
            },
            {
              "name": "html",
              "description": "",
              "required": false,
              "additionalTags": [],
              "collection": false,
              "type": "String",
              "possibleValues": null
            },
            {
              "name": "image",
              "description": "",
              "required": false,
              "additionalTags": [],
              "collection": false,
              "type": "NativeImage"
            },
            {
              "name": "rtf",
              "description": "",
              "required": false,
              "additionalTags": [],
              "collection": false,
              "type": "String",
              "possibleValues": null
            },
            {
              "name": "bookmark",
              "description": "The title of the URL at `text`.",
              "required": false,
              "additionalTags": [],
              "collection": false,
              "type": "String",
              "possibleValues": null
            }
          ]
        },
        {
          "name": "type",
          "description": "Can be `selection` or `clipboard`; default is 'clipboard'. `selection` is only available on Linux.",
          "required": false,
          "collection": false,
          "type": "String",
          "possibleValues": [
            {
              "value": "selection",
              "description": ""
            },
            {
              "value": "clipboard",
              "description": ""
            }
          ]
        }
      ],
      "returns": null,
      "additionalTags": [],
      "apiType": "methods",
      "fullSignature": "clipboard.write(data[, type])",
      "tldr": "Writes `data` to the clipboard.",
      "slug": "clipboardwritedata-type",
      "url": "https://electronjs.org/docs/api/clipboard#clipboardwritedata-type",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:write",
        "api:clipboardwritedata-type",
        "api:clipboard.write(data[, type])",
        "doc:write",
        "doc:clipboardwritedata-type",
        "doc:clipboard.write(data[, type])"
      ]
    },
    {
      "objectID": "api-command-line#commandlineappendswitchswitch-value",
      "name": "appendSwitch",
      "signature": "(switch[, value])",
      "description": "Append a switch (with optional `value`) to Chromium's command line.\n\n**Note:** This will not affect `process.argv`. The intended usage of this function is to control Chromium's behavior.",
      "parameters": [
        {
          "name": "switch",
          "description": "A command-line switch, without the leading `--`",
          "required": true,
          "collection": false,
          "type": "String",
          "possibleValues": null
        },
        {
          "name": "value",
          "description": "A value for the given switch",
          "required": false,
          "collection": false,
          "type": "String",
          "possibleValues": null
        }
      ],
      "returns": null,
      "additionalTags": [],
      "apiType": "instanceMethod",
      "fullSignature": "commandLine.appendSwitch(switch[, value])",
      "tldr": "Append a switch (with optional `value`) to Chromium's command line.\n\n**Note:** This will not affect `process.argv`.",
      "slug": "commandlineappendswitchswitch-value",
      "url": "https://electronjs.org/docs/api/command-line#commandlineappendswitchswitch-value",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:appendSwitch",
        "api:commandlineappendswitchswitch-value",
        "api:commandLine.appendSwitch(switch[, value])",
        "doc:appendSwitch",
        "doc:commandlineappendswitchswitch-value",
        "doc:commandLine.appendSwitch(switch[, value])"
      ]
    },
    {
      "objectID": "api-command-line#commandlineappendargumentvalue",
      "name": "appendArgument",
      "signature": "(value)",
      "description": "Append an argument to Chromium's command line. The argument will be quoted correctly. Switches will precede arguments regardless of appending order.\n\nIf you're appending an argument like `--switch=value`, consider using `appendSwitch('switch', 'value')` instead.\n\n**Note:** This will not affect `process.argv`. The intended usage of this function is to control Chromium's behavior.",
      "parameters": [
        {
          "name": "value",
          "description": "The argument to append to the command line",
          "required": true,
          "collection": false,
          "type": "String",
          "possibleValues": null
        }
      ],
      "returns": null,
      "additionalTags": [],
      "apiType": "instanceMethod",
      "fullSignature": "commandLine.appendArgument(value)",
      "tldr": "Append an argument to Chromium's command line.",
      "slug": "commandlineappendargumentvalue",
      "url": "https://electronjs.org/docs/api/command-line#commandlineappendargumentvalue",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:appendArgument",
        "api:commandlineappendargumentvalue",
        "api:commandLine.appendArgument(value)",
        "doc:appendArgument",
        "doc:commandlineappendargumentvalue",
        "doc:commandLine.appendArgument(value)"
      ]
    },
    {
      "objectID": "api-command-line#commandlinehasswitchswitch",
      "name": "hasSwitch",
      "signature": "(switch)",
      "description": "Whether the command-line switch is present.",
      "parameters": [
        {
          "name": "switch",
          "description": "A command-line switch",
          "required": true,
          "collection": false,
          "type": "String",
          "possibleValues": null
        }
      ],
      "returns": {
        "collection": false,
        "type": "Boolean"
      },
      "additionalTags": [],
      "apiType": "instanceMethod",
      "fullSignature": "commandLine.hasSwitch(switch)",
      "tldr": "Whether the command-line switch is present.",
      "slug": "commandlinehasswitchswitch",
      "url": "https://electronjs.org/docs/api/command-line#commandlinehasswitchswitch",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:hasSwitch",
        "api:commandlinehasswitchswitch",
        "api:commandLine.hasSwitch(switch)",
        "doc:hasSwitch",
        "doc:commandlinehasswitchswitch",
        "doc:commandLine.hasSwitch(switch)"
      ]
    },
    {
      "objectID": "api-command-line#commandlinegetswitchvalueswitch",
      "name": "getSwitchValue",
      "signature": "(switch)",
      "description": "The command-line switch value.\n\n**Note:** When the switch is not present or has no value, it returns empty string.",
      "parameters": [
        {
          "name": "switch",
          "description": "A command-line switch",
          "required": true,
          "collection": false,
          "type": "String",
          "possibleValues": null
        }
      ],
      "returns": {
        "collection": false,
        "type": "String",
        "possibleValues": null
      },
      "additionalTags": [],
      "apiType": "instanceMethod",
      "fullSignature": "commandLine.getSwitchValue(switch)",
      "tldr": "The command-line switch value.\n\n**Note:** When the switch is not present or has no value, it returns empty string.",
      "slug": "commandlinegetswitchvalueswitch",
      "url": "https://electronjs.org/docs/api/command-line#commandlinegetswitchvalueswitch",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:getSwitchValue",
        "api:commandlinegetswitchvalueswitch",
        "api:commandLine.getSwitchValue(switch)",
        "doc:getSwitchValue",
        "doc:commandlinegetswitchvalueswitch",
        "doc:commandLine.getSwitchValue(switch)"
      ]
    },
    {
      "objectID": "api-content-tracing#contenttracinggetcategories",
      "name": "getCategories",
      "signature": "()",
      "description": "resolves with an array of category groups once all child processes have acknowledged the `getCategories` request\n\nGet a set of category groups. The category groups can change as new code paths are reached. See also the list of built-in tracing categories.",
      "parameters": [],
      "returns": {
        "collection": false,
        "type": "Promise",
        "innerTypes": [
          {
            "collection": true,
            "type": "String",
            "possibleValues": null
          }
        ]
      },
      "additionalTags": [],
      "apiType": "methods",
      "fullSignature": "contentTracing.getCategories()",
      "tldr": "resolves with an array of category groups once all child processes have acknowledged the `getCategories` request\n\nGet a set of category groups.",
      "slug": "contenttracinggetcategories",
      "url": "https://electronjs.org/docs/api/content-tracing#contenttracinggetcategories",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:getCategories",
        "api:contenttracinggetcategories",
        "api:contentTracing.getCategories()",
        "doc:getCategories",
        "doc:contenttracinggetcategories",
        "doc:contentTracing.getCategories()"
      ]
    },
    {
      "objectID": "api-content-tracing#contenttracingstartrecordingoptions",
      "name": "startRecording",
      "signature": "(options)",
      "description": "resolved once all child processes have acknowledged the `startRecording` request.\n\nStart recording on all processes.\n\nRecording begins immediately locally and asynchronously on child processes as soon as they receive the EnableRecording request.\n\nIf a recording is already running, the promise will be immediately resolved, as only one trace operation can be in progress at a time.",
      "parameters": [
        {
          "name": "options",
          "description": "",
          "required": true,
          "collection": false,
          "type": [
            {
              "collection": false,
              "type": "TraceConfig"
            },
            {
              "collection": false,
              "type": "TraceCategoriesAndOptions"
            }
          ]
        }
      ],
      "returns": {
        "collection": false,
        "type": "Promise",
        "innerTypes": [
          {
            "collection": false,
            "type": "void"
          }
        ]
      },
      "additionalTags": [],
      "apiType": "methods",
      "fullSignature": "contentTracing.startRecording(options)",
      "tldr": "resolved once all child processes have acknowledged the `startRecording` request.\n\nStart recording on all processes.\n\nRecording begins immediately locally and asynchronously on child processes as soon as they receive the EnableRecording request.\n\nIf a recording is already running, the promise will be immediately resolved, as only one trace operation can be in progress at a time.",
      "slug": "contenttracingstartrecordingoptions",
      "url": "https://electronjs.org/docs/api/content-tracing#contenttracingstartrecordingoptions",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:startRecording",
        "api:contenttracingstartrecordingoptions",
        "api:contentTracing.startRecording(options)",
        "doc:startRecording",
        "doc:contenttracingstartrecordingoptions",
        "doc:contentTracing.startRecording(options)"
      ]
    },
    {
      "objectID": "api-content-tracing#contenttracingstoprecordingresultfilepath",
      "name": "stopRecording",
      "signature": "([resultFilePath])",
      "description": "resolves with a path to a file that contains the traced data once all child processes have acknowledged the `stopRecording` request\n\nStop recording on all processes.\n\nChild processes typically cache trace data and only rarely flush and send trace data back to the main process. This helps to minimize the runtime overhead of tracing since sending trace data over IPC can be an expensive operation. So, to end tracing, Chromium asynchronously asks all child processes to flush any pending trace data.\n\nTrace data will be written into `resultFilePath`. If `resultFilePath` is empty or not provided, trace data will be written to a temporary file, and the path will be returned in the promise.",
      "parameters": [
        {
          "name": "resultFilePath",
          "description": "",
          "required": false,
          "collection": false,
          "type": "String",
          "possibleValues": null
        }
      ],
      "returns": {
        "collection": false,
        "type": "Promise",
        "innerTypes": [
          {
            "collection": false,
            "type": "String",
            "possibleValues": null
          }
        ]
      },
      "additionalTags": [],
      "apiType": "methods",
      "fullSignature": "contentTracing.stopRecording([resultFilePath])",
      "tldr": "resolves with a path to a file that contains the traced data once all child processes have acknowledged the `stopRecording` request\n\nStop recording on all processes.\n\nChild processes typically cache trace data and only rarely flush and send trace data back to the main process.",
      "slug": "contenttracingstoprecordingresultfilepath",
      "url": "https://electronjs.org/docs/api/content-tracing#contenttracingstoprecordingresultfilepath",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:stopRecording",
        "api:contenttracingstoprecordingresultfilepath",
        "api:contentTracing.stopRecording([resultFilePath])",
        "doc:stopRecording",
        "doc:contenttracingstoprecordingresultfilepath",
        "doc:contentTracing.stopRecording([resultFilePath])"
      ]
    },
    {
      "objectID": "api-content-tracing#contenttracinggettracebufferusage",
      "name": "getTraceBufferUsage",
      "signature": "()",
      "description": "Resolves with an object containing the `value` and `percentage` of trace buffer maximum usage\n\n* `value` Number\n* `percentage` Number\n\nGet the maximum usage across processes of trace buffer as a percentage of the full state.",
      "parameters": [],
      "returns": {
        "collection": false,
        "type": "Promise",
        "innerTypes": [
          {
            "collection": false,
            "type": "Object",
            "properties": [
              {
                "name": "value",
                "description": "",
                "required": true,
                "additionalTags": [],
                "collection": false,
                "type": "Number"
              },
              {
                "name": "percentage",
                "description": "",
                "required": true,
                "additionalTags": [],
                "collection": false,
                "type": "Number"
              }
            ]
          }
        ]
      },
      "additionalTags": [],
      "apiType": "methods",
      "fullSignature": "contentTracing.getTraceBufferUsage()",
      "tldr": "Resolves with an object containing the `value` and `percentage` of trace buffer maximum usage\n\n* `value` Number\n* `percentage` Number\n\nGet the maximum usage across processes of trace buffer as a percentage of the full state.",
      "slug": "contenttracinggettracebufferusage",
      "url": "https://electronjs.org/docs/api/content-tracing#contenttracinggettracebufferusage",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:getTraceBufferUsage",
        "api:contenttracinggettracebufferusage",
        "api:contentTracing.getTraceBufferUsage()",
        "doc:getTraceBufferUsage",
        "doc:contenttracinggettracebufferusage",
        "doc:contentTracing.getTraceBufferUsage()"
      ]
    },
    {
      "objectID": "api-context-bridge#contextbridgeexposeinmainworldapikey-api",
      "name": "exposeInMainWorld",
      "signature": "(apiKey, api)",
      "description": "",
      "parameters": [
        {
          "name": "apiKey",
          "description": "The key to inject the API onto `window` with.  The API will be accessible on `window[apiKey]`.",
          "required": true,
          "collection": false,
          "type": "String",
          "possibleValues": null
        },
        {
          "name": "api",
          "description": "Your API object, more information on what this API can be and how it works is available below.",
          "required": true,
          "collection": false,
          "type": "Record",
          "innerTypes": [
            {
              "collection": false,
              "type": "String",
              "possibleValues": null
            },
            {
              "collection": false,
              "type": "any"
            }
          ]
        }
      ],
      "returns": null,
      "additionalTags": [
        "stability_experimental"
      ],
      "apiType": "methods",
      "fullSignature": "contextBridge.exposeInMainWorld(apiKey, api)",
      "tldr": null,
      "slug": "contextbridgeexposeinmainworldapikey-api",
      "url": "https://electronjs.org/docs/api/context-bridge#contextbridgeexposeinmainworldapikey-api",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:exposeInMainWorld",
        "api:contextbridgeexposeinmainworldapikey-api",
        "api:contextBridge.exposeInMainWorld(apiKey, api)",
        "doc:exposeInMainWorld",
        "doc:contextbridgeexposeinmainworldapikey-api",
        "doc:contextBridge.exposeInMainWorld(apiKey, api)"
      ]
    },
    {
      "objectID": "api-cookies#cookiesgetfilter",
      "name": "get",
      "signature": "(filter)",
      "description": "A promise which resolves an array of cookie objects.\n\nSends a request to get all cookies matching `filter`, and resolves a promise with the response.",
      "parameters": [
        {
          "name": "filter",
          "description": "",
          "required": true,
          "collection": false,
          "type": "Object",
          "properties": [
            {
              "name": "url",
              "description": "Retrieves cookies which are associated with `url`. Empty implies retrieving cookies of all URLs.",
              "required": false,
              "additionalTags": [],
              "collection": false,
              "type": "String",
              "possibleValues": null
            },
            {
              "name": "name",
              "description": "Filters cookies by name.",
              "required": false,
              "additionalTags": [],
              "collection": false,
              "type": "String",
              "possibleValues": null
            },
            {
              "name": "domain",
              "description": "Retrieves cookies whose domains match or are subdomains of `domains`.",
              "required": false,
              "additionalTags": [],
              "collection": false,
              "type": "String",
              "possibleValues": null
            },
            {
              "name": "path",
              "description": "Retrieves cookies whose path matches `path`.",
              "required": false,
              "additionalTags": [],
              "collection": false,
              "type": "String",
              "possibleValues": null
            },
            {
              "name": "secure",
              "description": "Filters cookies by their Secure property.",
              "required": false,
              "additionalTags": [],
              "collection": false,
              "type": "Boolean"
            },
            {
              "name": "session",
              "description": "Filters out session or persistent cookies.",
              "required": false,
              "additionalTags": [],
              "collection": false,
              "type": "Boolean"
            }
          ]
        }
      ],
      "returns": {
        "collection": false,
        "type": "Promise",
        "innerTypes": [
          {
            "collection": true,
            "type": "Cookie"
          }
        ]
      },
      "additionalTags": [],
      "apiType": "instanceMethod",
      "fullSignature": "cookies.get(filter)",
      "tldr": "A promise which resolves an array of cookie objects.\n\nSends a request to get all cookies matching `filter`, and resolves a promise with the response.",
      "slug": "cookiesgetfilter",
      "url": "https://electronjs.org/docs/api/cookies#cookiesgetfilter",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:get",
        "api:cookiesgetfilter",
        "api:cookies.get(filter)",
        "doc:get",
        "doc:cookiesgetfilter",
        "doc:cookies.get(filter)"
      ]
    },
    {
      "objectID": "api-cookies#cookiessetdetails",
      "name": "set",
      "signature": "(details)",
      "description": "A promise which resolves when the cookie has been set\n\nSets a cookie with `details`.",
      "parameters": [
        {
          "name": "details",
          "description": "",
          "required": true,
          "collection": false,
          "type": "Object",
          "properties": [
            {
              "name": "url",
              "description": "The URL to associate the cookie with. The promise will be rejected if the URL is invalid.",
              "required": true,
              "additionalTags": [],
              "collection": false,
              "type": "String",
              "possibleValues": null
            },
            {
              "name": "name",
              "description": "The name of the cookie. Empty by default if omitted.",
              "required": false,
              "additionalTags": [],
              "collection": false,
              "type": "String",
              "possibleValues": null
            },
            {
              "name": "value",
              "description": "The value of the cookie. Empty by default if omitted.",
              "required": false,
              "additionalTags": [],
              "collection": false,
              "type": "String",
              "possibleValues": null
            },
            {
              "name": "domain",
              "description": "The domain of the cookie; this will be normalized with a preceding dot so that it's also valid for subdomains. Empty by default if omitted.",
              "required": false,
              "additionalTags": [],
              "collection": false,
              "type": "String",
              "possibleValues": null
            },
            {
              "name": "path",
              "description": "The path of the cookie. Empty by default if omitted.",
              "required": false,
              "additionalTags": [],
              "collection": false,
              "type": "String",
              "possibleValues": null
            },
            {
              "name": "secure",
              "description": "Whether the cookie should be marked as Secure. Defaults to false.",
              "required": false,
              "additionalTags": [],
              "collection": false,
              "type": "Boolean"
            },
            {
              "name": "httpOnly",
              "description": "Whether the cookie should be marked as HTTP only. Defaults to false.",
              "required": false,
              "additionalTags": [],
              "collection": false,
              "type": "Boolean"
            },
            {
              "name": "expirationDate",
              "description": "The expiration date of the cookie as the number of seconds since the UNIX epoch. If omitted then the cookie becomes a session cookie and will not be retained between sessions.",
              "required": false,
              "additionalTags": [],
              "collection": false,
              "type": "Double"
            }
          ]
        }
      ],
      "returns": {
        "collection": false,
        "type": "Promise",
        "innerTypes": [
          {
            "collection": false,
            "type": "void"
          }
        ]
      },
      "additionalTags": [],
      "apiType": "instanceMethod",
      "fullSignature": "cookies.set(details)",
      "tldr": "A promise which resolves when the cookie has been set\n\nSets a cookie with `details`.",
      "slug": "cookiessetdetails",
      "url": "https://electronjs.org/docs/api/cookies#cookiessetdetails",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:set",
        "api:cookiessetdetails",
        "api:cookies.set(details)",
        "doc:set",
        "doc:cookiessetdetails",
        "doc:cookies.set(details)"
      ]
    },
    {
      "objectID": "api-cookies#cookiesremoveurl-name",
      "name": "remove",
      "signature": "(url, name)",
      "description": "A promise which resolves when the cookie has been removed\n\nRemoves the cookies matching `url` and `name`",
      "parameters": [
        {
          "name": "url",
          "description": "The URL associated with the cookie.",
          "required": true,
          "collection": false,
          "type": "String",
          "possibleValues": null
        },
        {
          "name": "name",
          "description": "The name of cookie to remove.",
          "required": true,
          "collection": false,
          "type": "String",
          "possibleValues": null
        }
      ],
      "returns": {
        "collection": false,
        "type": "Promise",
        "innerTypes": [
          {
            "collection": false,
            "type": "void"
          }
        ]
      },
      "additionalTags": [],
      "apiType": "instanceMethod",
      "fullSignature": "cookies.remove(url, name)",
      "tldr": "A promise which resolves when the cookie has been removed\n\nRemoves the cookies matching `url` and `name`.",
      "slug": "cookiesremoveurl-name",
      "url": "https://electronjs.org/docs/api/cookies#cookiesremoveurl-name",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:remove",
        "api:cookiesremoveurl-name",
        "api:cookies.remove(url, name)",
        "doc:remove",
        "doc:cookiesremoveurl-name",
        "doc:cookies.remove(url, name)"
      ]
    },
    {
      "objectID": "api-cookies#cookiesflushstore",
      "name": "flushStore",
      "signature": "()",
      "description": "A promise which resolves when the cookie store has been flushed\n\nWrites any unwritten cookies data to disk.",
      "parameters": [],
      "returns": {
        "collection": false,
        "type": "Promise",
        "innerTypes": [
          {
            "collection": false,
            "type": "void"
          }
        ]
      },
      "additionalTags": [],
      "apiType": "instanceMethod",
      "fullSignature": "cookies.flushStore()",
      "tldr": "A promise which resolves when the cookie store has been flushed\n\nWrites any unwritten cookies data to disk.",
      "slug": "cookiesflushstore",
      "url": "https://electronjs.org/docs/api/cookies#cookiesflushstore",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:flushStore",
        "api:cookiesflushstore",
        "api:cookies.flushStore()",
        "doc:flushStore",
        "doc:cookiesflushstore",
        "doc:cookies.flushStore()"
      ]
    },
    {
      "objectID": "api-cookies#event-changed",
      "name": "changed",
      "description": "Emitted when a cookie is changed because it was added, edited, removed, or expired.",
      "parameters": [],
      "additionalTags": [],
      "apiType": "event",
      "fullSignature": "cookies.on('changed')",
      "url": "https://electronjs.org/docs/api/cookies#event-changed",
      "slug": "cookiesonchanged",
      "tldr": "Emitted when a cookie is changed because it was added, edited, removed, or expired.",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:changed",
        "api:cookiesonchanged",
        "api:cookies.on('changed')",
        "doc:changed",
        "doc:cookiesonchanged",
        "doc:cookies.on('changed')"
      ]
    },
    {
      "objectID": "api-crash-reporter#crashreporterstartoptions",
      "name": "start",
      "signature": "(options)",
      "description": "You are required to call this method before using any other `crashReporter` APIs and in each process (main/renderer) from which you want to collect crash reports. You can pass different options to `crashReporter.start` when calling from different processes.\n\n**Note** Child processes created via the `child_process` module will not have access to the Electron modules. Therefore, to collect crash reports from them, use `process.crashReporter.start` instead. Pass the same options as above along with an additional one called `crashesDirectory` that should point to a directory to store the crash reports temporarily. You can test this out by calling `process.crash()` to crash the child process.\n\n**Note:** If you need send additional/updated `extra` parameters after your first call `start` you can call `addExtraParameter` on macOS or call `start` again with the new/updated `extra` parameters on Linux and Windows.\n\n**Note:** On macOS and windows, Electron uses a new `crashpad` client for crash collection and reporting. If you want to enable crash reporting, initializing `crashpad` from the main process using `crashReporter.start` is required regardless of which process you want to collect crashes from. Once initialized this way, the crashpad handler collects crashes from all processes. You still have to call `crashReporter.start` from the renderer or child process, otherwise crashes from them will get reported without `companyName`, `productName` or any of the `extra` information.",
      "parameters": [
        {
          "name": "options",
          "description": "",
          "required": true,
          "collection": false,
          "type": "Object",
          "properties": [
            {
              "name": "companyName",
              "description": "",
              "required": true,
              "additionalTags": [],
              "collection": false,
              "type": "String",
              "possibleValues": null
            },
            {
              "name": "submitURL",
              "description": "URL that crash reports will be sent to as POST.",
              "required": true,
              "additionalTags": [],
              "collection": false,
              "type": "String",
              "possibleValues": null
            },
            {
              "name": "productName",
              "description": "Defaults to `app.name`.",
              "required": false,
              "additionalTags": [],
              "collection": false,
              "type": "String",
              "possibleValues": null
            },
            {
              "name": "uploadToServer",
              "description": "Whether crash reports should be sent to the server. Default is `true`.",
              "required": false,
              "additionalTags": [],
              "collection": false,
              "type": "Boolean"
            },
            {
              "name": "ignoreSystemCrashHandler",
              "description": "Default is `false`.",
              "required": false,
              "additionalTags": [],
              "collection": false,
              "type": "Boolean"
            },
            {
              "name": "extra",
              "description": "An object you can define that will be sent along with the report. Only string properties are sent correctly. Nested objects are not supported. When using Windows, the property names and values must be fewer than 64 characters.",
              "required": false,
              "additionalTags": [],
              "collection": false,
              "type": "Record",
              "innerTypes": [
                {
                  "collection": false,
                  "type": "String",
                  "possibleValues": null
                },
                {
                  "collection": false,
                  "type": "String",
                  "possibleValues": null
                }
              ]
            },
            {
              "name": "crashesDirectory",
              "description": "Directory to store the crash reports temporarily (only used when the crash reporter is started via `process.crashReporter.start`).",
              "required": false,
              "additionalTags": [],
              "collection": false,
              "type": "String",
              "possibleValues": null
            }
          ]
        }
      ],
      "returns": null,
      "additionalTags": [],
      "apiType": "methods",
      "fullSignature": "crashReporter.start(options)",
      "tldr": "You are required to call this method before using any other `crashReporter` APIs and in each process (main/renderer) from which you want to collect crash reports.",
      "slug": "crashreporterstartoptions",
      "url": "https://electronjs.org/docs/api/crash-reporter#crashreporterstartoptions",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:start",
        "api:crashreporterstartoptions",
        "api:crashReporter.start(options)",
        "doc:start",
        "doc:crashreporterstartoptions",
        "doc:crashReporter.start(options)"
      ]
    },
    {
      "objectID": "api-crash-reporter#crashreportergetlastcrashreport",
      "name": "getLastCrashReport",
      "signature": "()",
      "description": "Returns the date and ID of the last crash report. Only crash reports that have been uploaded will be returned; even if a crash report is present on disk it will not be returned until it is uploaded. In the case that there are no uploaded reports, `null` is returned.",
      "parameters": [],
      "returns": {
        "collection": false,
        "type": "CrashReport"
      },
      "additionalTags": [],
      "apiType": "methods",
      "fullSignature": "crashReporter.getLastCrashReport()",
      "tldr": "Returns the date and ID of the last crash report.",
      "slug": "crashreportergetlastcrashreport",
      "url": "https://electronjs.org/docs/api/crash-reporter#crashreportergetlastcrashreport",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:getLastCrashReport",
        "api:crashreportergetlastcrashreport",
        "api:crashReporter.getLastCrashReport()",
        "doc:getLastCrashReport",
        "doc:crashreportergetlastcrashreport",
        "doc:crashReporter.getLastCrashReport()"
      ]
    },
    {
      "objectID": "api-crash-reporter#crashreportergetuploadedreports",
      "name": "getUploadedReports",
      "signature": "()",
      "description": "Returns all uploaded crash reports. Each report contains the date and uploaded ID.",
      "parameters": [],
      "returns": {
        "collection": true,
        "type": "CrashReport"
      },
      "additionalTags": [],
      "apiType": "methods",
      "fullSignature": "crashReporter.getUploadedReports()",
      "tldr": "Returns all uploaded crash reports.",
      "slug": "crashreportergetuploadedreports",
      "url": "https://electronjs.org/docs/api/crash-reporter#crashreportergetuploadedreports",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:getUploadedReports",
        "api:crashreportergetuploadedreports",
        "api:crashReporter.getUploadedReports()",
        "doc:getUploadedReports",
        "doc:crashreportergetuploadedreports",
        "doc:crashReporter.getUploadedReports()"
      ]
    },
    {
      "objectID": "api-crash-reporter#crashreportergetuploadtoserver",
      "name": "getUploadToServer",
      "signature": "()",
      "description": "Whether reports should be submitted to the server. Set through the `start` method or `setUploadToServer`.\n\n**Note:** This API can only be called from the main process.",
      "parameters": [],
      "returns": {
        "collection": false,
        "type": "Boolean"
      },
      "additionalTags": [],
      "apiType": "methods",
      "fullSignature": "crashReporter.getUploadToServer()",
      "tldr": "Whether reports should be submitted to the server.",
      "slug": "crashreportergetuploadtoserver",
      "url": "https://electronjs.org/docs/api/crash-reporter#crashreportergetuploadtoserver",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:getUploadToServer",
        "api:crashreportergetuploadtoserver",
        "api:crashReporter.getUploadToServer()",
        "doc:getUploadToServer",
        "doc:crashreportergetuploadtoserver",
        "doc:crashReporter.getUploadToServer()"
      ]
    },
    {
      "objectID": "api-crash-reporter#crashreportersetuploadtoserveruploadtoserver",
      "name": "setUploadToServer",
      "signature": "(uploadToServer)",
      "description": "This would normally be controlled by user preferences. This has no effect if called before `start` is called.\n\n**Note:** This API can only be called from the main process.",
      "parameters": [
        {
          "name": "uploadToServer",
          "description": "Whether reports should be submitted to the server.",
          "required": true,
          "collection": false,
          "type": "Boolean"
        }
      ],
      "returns": null,
      "additionalTags": [],
      "apiType": "methods",
      "fullSignature": "crashReporter.setUploadToServer(uploadToServer)",
      "tldr": "This would normally be controlled by user preferences.",
      "slug": "crashreportersetuploadtoserveruploadtoserver",
      "url": "https://electronjs.org/docs/api/crash-reporter#crashreportersetuploadtoserveruploadtoserver",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:setUploadToServer",
        "api:crashreportersetuploadtoserveruploadtoserver",
        "api:crashReporter.setUploadToServer(uploadToServer)",
        "doc:setUploadToServer",
        "doc:crashreportersetuploadtoserveruploadtoserver",
        "doc:crashReporter.setUploadToServer(uploadToServer)"
      ]
    },
    {
      "objectID": "api-crash-reporter#crashreporteraddextraparameterkey-value",
      "name": "addExtraParameter",
      "signature": "(key, value)",
      "description": "Set an extra parameter to be sent with the crash report. The values specified here will be sent in addition to any values set via the `extra` option when `start` was called. This API is only available on macOS and windows, if you need to add/update extra parameters on Linux after your first call to `start` you can call `start` again with the updated `extra` options.",
      "parameters": [
        {
          "name": "key",
          "description": "Parameter key, must be less than 64 characters long.",
          "required": true,
          "collection": false,
          "type": "String",
          "possibleValues": null
        },
        {
          "name": "value",
          "description": "Parameter value, must be less than 64 characters long.",
          "required": true,
          "collection": false,
          "type": "String",
          "possibleValues": null
        }
      ],
      "returns": null,
      "additionalTags": [
        "os_macos",
        "os_windows"
      ],
      "apiType": "methods",
      "fullSignature": "crashReporter.addExtraParameter(key, value)",
      "tldr": "Set an extra parameter to be sent with the crash report.",
      "slug": "crashreporteraddextraparameterkey-value",
      "url": "https://electronjs.org/docs/api/crash-reporter#crashreporteraddextraparameterkey-value",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:addExtraParameter",
        "api:crashreporteraddextraparameterkey-value",
        "api:crashReporter.addExtraParameter(key, value)",
        "doc:addExtraParameter",
        "doc:crashreporteraddextraparameterkey-value",
        "doc:crashReporter.addExtraParameter(key, value)"
      ]
    },
    {
      "objectID": "api-crash-reporter#crashreporterremoveextraparameterkey",
      "name": "removeExtraParameter",
      "signature": "(key)",
      "description": "Remove a extra parameter from the current set of parameters so that it will not be sent with the crash report.",
      "parameters": [
        {
          "name": "key",
          "description": "Parameter key, must be less than 64 characters long.",
          "required": true,
          "collection": false,
          "type": "String",
          "possibleValues": null
        }
      ],
      "returns": null,
      "additionalTags": [
        "os_macos",
        "os_windows"
      ],
      "apiType": "methods",
      "fullSignature": "crashReporter.removeExtraParameter(key)",
      "tldr": "Remove a extra parameter from the current set of parameters so that it will not be sent with the crash report.",
      "slug": "crashreporterremoveextraparameterkey",
      "url": "https://electronjs.org/docs/api/crash-reporter#crashreporterremoveextraparameterkey",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:removeExtraParameter",
        "api:crashreporterremoveextraparameterkey",
        "api:crashReporter.removeExtraParameter(key)",
        "doc:removeExtraParameter",
        "doc:crashreporterremoveextraparameterkey",
        "doc:crashReporter.removeExtraParameter(key)"
      ]
    },
    {
      "objectID": "api-crash-reporter#crashreportergetparameters",
      "name": "getParameters",
      "signature": "()",
      "description": "See all of the current parameters being passed to the crash reporter.",
      "parameters": [],
      "returns": null,
      "additionalTags": [],
      "apiType": "methods",
      "fullSignature": "crashReporter.getParameters()",
      "tldr": "See all of the current parameters being passed to the crash reporter.",
      "slug": "crashreportergetparameters",
      "url": "https://electronjs.org/docs/api/crash-reporter#crashreportergetparameters",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:getParameters",
        "api:crashreportergetparameters",
        "api:crashReporter.getParameters()",
        "doc:getParameters",
        "doc:crashreportergetparameters",
        "doc:crashReporter.getParameters()"
      ]
    },
    {
      "objectID": "api-debugger#debuggerattachprotocolversion",
      "name": "attach",
      "signature": "([protocolVersion])",
      "description": "Attaches the debugger to the `webContents`.",
      "parameters": [
        {
          "name": "protocolVersion",
          "description": "Requested debugging protocol version.",
          "required": false,
          "collection": false,
          "type": "String",
          "possibleValues": null
        }
      ],
      "returns": null,
      "additionalTags": [],
      "apiType": "instanceMethod",
      "fullSignature": "debugger.attach([protocolVersion])",
      "tldr": "Attaches the debugger to the `webContents`.",
      "slug": "debuggerattachprotocolversion",
      "url": "https://electronjs.org/docs/api/debugger#debuggerattachprotocolversion",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:attach",
        "api:debuggerattachprotocolversion",
        "api:debugger.attach([protocolVersion])",
        "doc:attach",
        "doc:debuggerattachprotocolversion",
        "doc:debugger.attach([protocolVersion])"
      ]
    },
    {
      "objectID": "api-debugger#debuggerisattached",
      "name": "isAttached",
      "signature": "()",
      "description": "Whether a debugger is attached to the `webContents`.",
      "parameters": [],
      "returns": {
        "collection": false,
        "type": "Boolean"
      },
      "additionalTags": [],
      "apiType": "instanceMethod",
      "fullSignature": "debugger.isAttached()",
      "tldr": "Whether a debugger is attached to the `webContents`.",
      "slug": "debuggerisattached",
      "url": "https://electronjs.org/docs/api/debugger#debuggerisattached",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:isAttached",
        "api:debuggerisattached",
        "api:debugger.isAttached()",
        "doc:isAttached",
        "doc:debuggerisattached",
        "doc:debugger.isAttached()"
      ]
    },
    {
      "objectID": "api-debugger#debuggerdetach",
      "name": "detach",
      "signature": "()",
      "description": "Detaches the debugger from the `webContents`.",
      "parameters": [],
      "returns": null,
      "additionalTags": [],
      "apiType": "instanceMethod",
      "fullSignature": "debugger.detach()",
      "tldr": "Detaches the debugger from the `webContents`.",
      "slug": "debuggerdetach",
      "url": "https://electronjs.org/docs/api/debugger#debuggerdetach",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:detach",
        "api:debuggerdetach",
        "api:debugger.detach()",
        "doc:detach",
        "doc:debuggerdetach",
        "doc:debugger.detach()"
      ]
    },
    {
      "objectID": "api-debugger#debuggersendcommandmethod-commandparams",
      "name": "sendCommand",
      "signature": "(method[, commandParams])",
      "description": "A promise that resolves with the response defined by the 'returns' attribute of the command description in the remote debugging protocol or is rejected indicating the failure of the command.\n\nSend given command to the debugging target.",
      "parameters": [
        {
          "name": "method",
          "description": "Method name, should be one of the methods defined by the remote debugging protocol.",
          "required": true,
          "collection": false,
          "type": "String",
          "possibleValues": null
        },
        {
          "name": "commandParams",
          "description": "JSON object with request parameters.",
          "required": false,
          "collection": false,
          "type": "any"
        }
      ],
      "returns": {
        "collection": false,
        "type": "Promise",
        "innerTypes": [
          {
            "collection": false,
            "type": "any"
          }
        ]
      },
      "additionalTags": [],
      "apiType": "instanceMethod",
      "fullSignature": "debugger.sendCommand(method[, commandParams])",
      "tldr": "A promise that resolves with the response defined by the 'returns' attribute of the command description in the remote debugging protocol or is rejected indicating the failure of the command.\n\nSend given command to the debugging target.",
      "slug": "debuggersendcommandmethod-commandparams",
      "url": "https://electronjs.org/docs/api/debugger#debuggersendcommandmethod-commandparams",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:sendCommand",
        "api:debuggersendcommandmethod-commandparams",
        "api:debugger.sendCommand(method[, commandParams])",
        "doc:sendCommand",
        "doc:debuggersendcommandmethod-commandparams",
        "doc:debugger.sendCommand(method[, commandParams])"
      ]
    },
    {
      "objectID": "api-debugger#event-detach",
      "name": "detach",
      "description": "Emitted when the debugging session is terminated. This happens either when `webContents` is closed or devtools is invoked for the attached `webContents`.",
      "parameters": [
        {
          "name": "event",
          "description": "",
          "collection": false,
          "type": "Event",
          "required": true
        },
        {
          "name": "reason",
          "description": "Reason for detaching debugger.",
          "collection": false,
          "type": "String",
          "possibleValues": null,
          "required": true
        }
      ],
      "additionalTags": [],
      "apiType": "event",
      "fullSignature": "debugger.on('detach')",
      "url": "https://electronjs.org/docs/api/debugger#event-detach",
      "slug": "debuggerondetach",
      "tldr": "Emitted when the debugging session is terminated.",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:detach",
        "api:debuggerondetach",
        "api:debugger.on('detach')",
        "doc:detach",
        "doc:debuggerondetach",
        "doc:debugger.on('detach')"
      ]
    },
    {
      "objectID": "api-debugger#event-message",
      "name": "message",
      "description": "Emitted whenever the debugging target issues an instrumentation event.",
      "parameters": [
        {
          "name": "event",
          "description": "",
          "collection": false,
          "type": "Event",
          "required": true
        },
        {
          "name": "method",
          "description": "Method name.",
          "collection": false,
          "type": "String",
          "possibleValues": null,
          "required": true
        },
        {
          "name": "params",
          "description": "Event parameters defined by the 'parameters' attribute in the remote debugging protocol.",
          "collection": false,
          "type": "unknown",
          "required": true
        }
      ],
      "additionalTags": [],
      "apiType": "event",
      "fullSignature": "debugger.on('message')",
      "url": "https://electronjs.org/docs/api/debugger#event-message",
      "slug": "debuggeronmessage",
      "tldr": "Emitted whenever the debugging target issues an instrumentation event.",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:message",
        "api:debuggeronmessage",
        "api:debugger.on('message')",
        "doc:message",
        "doc:debuggeronmessage",
        "doc:debugger.on('message')"
      ]
    },
    {
      "objectID": "api-desktop-capturer#desktopcapturergetsourcesoptions",
      "name": "getSources",
      "signature": "(options)",
      "description": "Resolves with an array of `DesktopCapturerSource` objects, each `DesktopCapturerSource` represents a screen or an individual window that can be captured.",
      "parameters": [
        {
          "name": "options",
          "description": "",
          "required": true,
          "collection": false,
          "type": "Object",
          "properties": [
            {
              "name": "types",
              "description": "An array of Strings that lists the types of desktop sources to be captured, available types are `screen` and `window`.",
              "required": true,
              "additionalTags": [],
              "collection": true,
              "type": "String",
              "possibleValues": null
            },
            {
              "name": "thumbnailSize",
              "description": "The size that the media source thumbnail should be scaled to. Default is `150` x `150`. Set width or height to 0 when you do not need the thumbnails. This will save the processing time required for capturing the content of each window and screen.",
              "required": false,
              "additionalTags": [],
              "collection": false,
              "type": "Size"
            },
            {
              "name": "fetchWindowIcons",
              "description": "Set to true to enable fetching window icons. The default value is false. When false the appIcon property of the sources return null. Same if a source has the type screen.",
              "required": false,
              "additionalTags": [],
              "collection": false,
              "type": "Boolean"
            }
          ]
        }
      ],
      "returns": {
        "collection": false,
        "type": "Promise",
        "innerTypes": [
          {
            "collection": true,
            "type": "DesktopCapturerSource"
          }
        ]
      },
      "additionalTags": [],
      "apiType": "methods",
      "fullSignature": "desktopCapturer.getSources(options)",
      "tldr": "Resolves with an array of `DesktopCapturerSource` objects, each `DesktopCapturerSource` represents a screen or an individual window that can be captured.",
      "slug": "desktopcapturergetsourcesoptions",
      "url": "https://electronjs.org/docs/api/desktop-capturer#desktopcapturergetsourcesoptions",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:getSources",
        "api:desktopcapturergetsourcesoptions",
        "api:desktopCapturer.getSources(options)",
        "doc:getSources",
        "doc:desktopcapturergetsourcesoptions",
        "doc:desktopCapturer.getSources(options)"
      ]
    },
    {
      "objectID": "api-dialog#dialogshowopendialogsyncbrowserwindow-options",
      "name": "showOpenDialogSync",
      "signature": "([browserWindow, ]options)",
      "description": "the file paths chosen by the user; if the dialog is cancelled it returns `undefined`.\n\nThe `browserWindow` argument allows the dialog to attach itself to a parent window, making it modal.\n\nThe `filters` specifies an array of file types that can be displayed or selected when you want to limit the user to a specific type. For example:\n\nThe `extensions` array should contain extensions without wildcards or dots (e.g. `'png'` is good but `'.png'` and `'*.png'` are bad). To show all files, use the `'*'` wildcard (no other wildcard is supported).\n\n**Note:** On Windows and Linux an open dialog can not be both a file selector and a directory selector, so if you set `properties` to `['openFile', 'openDirectory']` on these platforms, a directory selector will be shown.",
      "parameters": [
        {
          "name": "browserWindow",
          "description": "",
          "required": false,
          "collection": false,
          "type": "BrowserWindow"
        },
        {
          "name": "options",
          "description": "",
          "required": true,
          "collection": false,
          "type": "Object",
          "properties": [
            {
              "name": "title",
              "description": "",
              "required": false,
              "additionalTags": [],
              "collection": false,
              "type": "String",
              "possibleValues": null
            },
            {
              "name": "defaultPath",
              "description": "",
              "required": false,
              "additionalTags": [],
              "collection": false,
              "type": "String",
              "possibleValues": null
            },
            {
              "name": "buttonLabel",
              "description": "Custom label for the confirmation button, when left empty the default label will be used.",
              "required": false,
              "additionalTags": [],
              "collection": false,
              "type": "String",
              "possibleValues": null
            },
            {
              "name": "filters",
              "description": "",
              "required": false,
              "additionalTags": [],
              "collection": true,
              "type": "FileFilter"
            },
            {
              "name": "properties",
              "description": "Contains which features the dialog should use. The following values are supported:",
              "required": false,
              "additionalTags": [],
              "collection": true,
              "type": "String",
              "possibleValues": [
                {
                  "value": "openFile",
                  "description": "Allow files to be selected."
                },
                {
                  "value": "openDirectory",
                  "description": "Allow directories to be selected."
                },
                {
                  "value": "multiSelections",
                  "description": "Allow multiple paths to be selected."
                },
                {
                  "value": "showHiddenFiles",
                  "description": "Show hidden files in dialog."
                },
                {
                  "value": "createDirectory",
                  "description": "Allow creating new directories from dialog."
                },
                {
                  "value": "promptToCreate",
                  "description": "Prompt for creation if the file path entered in the dialog does not exist. This does not actually create the file at the path but allows non-existent paths to be returned that should be created by the application."
                },
                {
                  "value": "noResolveAliases",
                  "description": "Disable the automatic alias (symlink) path resolution. Selected aliases will now return the alias path instead of their target path."
                },
                {
                  "value": "treatPackageAsDirectory",
                  "description": "Treat packages, such as `.app` folders, as a directory instead of a file."
                }
              ]
            },
            {
              "name": "message",
              "description": "Message to display above input boxes.",
              "required": false,
              "additionalTags": [
                "os_macos"
              ],
              "collection": false,
              "type": "String",
              "possibleValues": null
            },
            {
              "name": "securityScopedBookmarks",
              "description": "Create security scoped bookmarks when packaged for the Mac App Store.",
              "required": false,
              "additionalTags": [
                "os_macos",
                "os_mas"
              ],
              "collection": false,
              "type": "Boolean"
            }
          ]
        }
      ],
      "returns": {
        "collection": false,
        "type": [
          {
            "collection": true,
            "type": "String",
            "possibleValues": null
          },
          {
            "collection": false,
            "type": "undefined"
          }
        ]
      },
      "additionalTags": [],
      "apiType": "methods",
      "fullSignature": "dialog.showOpenDialogSync([browserWindow, ]options)",
      "tldr": "the file paths chosen by the user; if the dialog is cancelled it returns `undefined`.\n\nThe `browserWindow` argument allows the dialog to attach itself to a parent window, making it modal.\n\nThe `filters` specifies an array of file types that can be displayed or selected when you want to limit the user to a specific type.",
      "slug": "dialogshowopendialogsyncbrowserwindow-options",
      "url": "https://electronjs.org/docs/api/dialog#dialogshowopendialogsyncbrowserwindow-options",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:showOpenDialogSync",
        "api:dialogshowopendialogsyncbrowserwindow-options",
        "api:dialog.showOpenDialogSync([browserWindow, ]options)",
        "doc:showOpenDialogSync",
        "doc:dialogshowopendialogsyncbrowserwindow-options",
        "doc:dialog.showOpenDialogSync([browserWindow, ]options)"
      ]
    },
    {
      "objectID": "api-dialog#dialogshowopendialogbrowserwindow-options",
      "name": "showOpenDialog",
      "signature": "([browserWindow, ]options)",
      "description": "Resolve with an object containing the following:\n\n* `canceled` Boolean - whether or not the dialog was canceled.\n* `filePaths` String[] - An array of file paths chosen by the user. If the dialog is cancelled this will be an empty array.\n* `bookmarks` String[] (optional) _macOS_ _mas_ - An array matching the `filePaths` array of base64 encoded strings which contains security scoped bookmark data. `securityScopedBookmarks` must be enabled for this to be populated.\n\nThe `browserWindow` argument allows the dialog to attach itself to a parent window, making it modal.\n\nThe `filters` specifies an array of file types that can be displayed or selected when you want to limit the user to a specific type. For example:\n\nThe `extensions` array should contain extensions without wildcards or dots (e.g. `'png'` is good but `'.png'` and `'*.png'` are bad). To show all files, use the `'*'` wildcard (no other wildcard is supported).\n\n**Note:** On Windows and Linux an open dialog can not be both a file selector and a directory selector, so if you set `properties` to `['openFile', 'openDirectory']` on these platforms, a directory selector will be shown.",
      "parameters": [
        {
          "name": "browserWindow",
          "description": "",
          "required": false,
          "collection": false,
          "type": "BrowserWindow"
        },
        {
          "name": "options",
          "description": "",
          "required": true,
          "collection": false,
          "type": "Object",
          "properties": [
            {
              "name": "title",
              "description": "",
              "required": false,
              "additionalTags": [],
              "collection": false,
              "type": "String",
              "possibleValues": null
            },
            {
              "name": "defaultPath",
              "description": "",
              "required": false,
              "additionalTags": [],
              "collection": false,
              "type": "String",
              "possibleValues": null
            },
            {
              "name": "buttonLabel",
              "description": "Custom label for the confirmation button, when left empty the default label will be used.",
              "required": false,
              "additionalTags": [],
              "collection": false,
              "type": "String",
              "possibleValues": null
            },
            {
              "name": "filters",
              "description": "",
              "required": false,
              "additionalTags": [],
              "collection": true,
              "type": "FileFilter"
            },
            {
              "name": "properties",
              "description": "Contains which features the dialog should use. The following values are supported:",
              "required": false,
              "additionalTags": [],
              "collection": true,
              "type": "String",
              "possibleValues": [
                {
                  "value": "openFile",
                  "description": "Allow files to be selected."
                },
                {
                  "value": "openDirectory",
                  "description": "Allow directories to be selected."
                },
                {
                  "value": "multiSelections",
                  "description": "Allow multiple paths to be selected."
                },
                {
                  "value": "showHiddenFiles",
                  "description": "Show hidden files in dialog."
                },
                {
                  "value": "createDirectory",
                  "description": "Allow creating new directories from dialog."
                },
                {
                  "value": "promptToCreate",
                  "description": "Prompt for creation if the file path entered in the dialog does not exist. This does not actually create the file at the path but allows non-existent paths to be returned that should be created by the application."
                },
                {
                  "value": "noResolveAliases",
                  "description": "Disable the automatic alias (symlink) path resolution. Selected aliases will now return the alias path instead of their target path."
                },
                {
                  "value": "treatPackageAsDirectory",
                  "description": "Treat packages, such as `.app` folders, as a directory instead of a file."
                }
              ]
            },
            {
              "name": "message",
              "description": "Message to display above input boxes.",
              "required": false,
              "additionalTags": [
                "os_macos"
              ],
              "collection": false,
              "type": "String",
              "possibleValues": null
            },
            {
              "name": "securityScopedBookmarks",
              "description": "Create security scoped bookmarks when packaged for the Mac App Store.",
              "required": false,
              "additionalTags": [
                "os_macos",
                "os_mas"
              ],
              "collection": false,
              "type": "Boolean"
            }
          ]
        }
      ],
      "returns": {
        "collection": false,
        "type": "Promise",
        "innerTypes": [
          {
            "collection": false,
            "type": "Object",
            "properties": [
              {
                "name": "canceled",
                "description": "whether or not the dialog was canceled.",
                "required": true,
                "additionalTags": [],
                "collection": false,
                "type": "Boolean"
              },
              {
                "name": "filePaths",
                "description": "An array of file paths chosen by the user. If the dialog is cancelled this will be an empty array.",
                "required": true,
                "additionalTags": [],
                "collection": true,
                "type": "String",
                "possibleValues": null
              },
              {
                "name": "bookmarks",
                "description": "An array matching the `filePaths` array of base64 encoded strings which contains security scoped bookmark data. `securityScopedBookmarks` must be enabled for this to be populated.",
                "required": false,
                "additionalTags": [
                  "os_macos",
                  "os_mas"
                ],
                "collection": true,
                "type": "String",
                "possibleValues": null
              }
            ]
          }
        ]
      },
      "additionalTags": [],
      "apiType": "methods",
      "fullSignature": "dialog.showOpenDialog([browserWindow, ]options)",
      "tldr": "Resolve with an object containing the following:\n\n* `canceled` Boolean - whether or not the dialog was canceled.\n* `filePaths` String[] - An array of file paths chosen by the user.",
      "slug": "dialogshowopendialogbrowserwindow-options",
      "url": "https://electronjs.org/docs/api/dialog#dialogshowopendialogbrowserwindow-options",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:showOpenDialog",
        "api:dialogshowopendialogbrowserwindow-options",
        "api:dialog.showOpenDialog([browserWindow, ]options)",
        "doc:showOpenDialog",
        "doc:dialogshowopendialogbrowserwindow-options",
        "doc:dialog.showOpenDialog([browserWindow, ]options)"
      ]
    },
    {
      "objectID": "api-dialog#dialogshowsavedialogsyncbrowserwindow-options",
      "name": "showSaveDialogSync",
      "signature": "([browserWindow, ]options)",
      "description": "the path of the file chosen by the user; if the dialog is cancelled it returns `undefined`.\n\nThe `browserWindow` argument allows the dialog to attach itself to a parent window, making it modal.\n\nThe `filters` specifies an array of file types that can be displayed, see `dialog.showOpenDialog` for an example.",
      "parameters": [
        {
          "name": "browserWindow",
          "description": "",
          "required": false,
          "collection": false,
          "type": "BrowserWindow"
        },
        {
          "name": "options",
          "description": "",
          "required": true,
          "collection": false,
          "type": "Object",
          "properties": [
            {
              "name": "title",
              "description": "",
              "required": false,
              "additionalTags": [],
              "collection": false,
              "type": "String",
              "possibleValues": null
            },
            {
              "name": "defaultPath",
              "description": "Absolute directory path, absolute file path, or file name to use by default.",
              "required": false,
              "additionalTags": [],
              "collection": false,
              "type": "String",
              "possibleValues": null
            },
            {
              "name": "buttonLabel",
              "description": "Custom label for the confirmation button, when left empty the default label will be used.",
              "required": false,
              "additionalTags": [],
              "collection": false,
              "type": "String",
              "possibleValues": null
            },
            {
              "name": "filters",
              "description": "",
              "required": false,
              "additionalTags": [],
              "collection": true,
              "type": "FileFilter"
            },
            {
              "name": "message",
              "description": "Message to display above text fields.",
              "required": false,
              "additionalTags": [
                "os_macos"
              ],
              "collection": false,
              "type": "String",
              "possibleValues": null
            },
            {
              "name": "nameFieldLabel",
              "description": "Custom label for the text displayed in front of the filename text field.",
              "required": false,
              "additionalTags": [
                "os_macos"
              ],
              "collection": false,
              "type": "String",
              "possibleValues": null
            },
            {
              "name": "showsTagField",
              "description": "Show the tags input box, defaults to `true`.",
              "required": false,
              "additionalTags": [
                "os_macos"
              ],
              "collection": false,
              "type": "Boolean"
            },
            {
              "name": "securityScopedBookmarks",
              "description": "Create a security scoped bookmark when packaged for the Mac App Store. If this option is enabled and the file doesn't already exist a blank file will be created at the chosen path.",
              "required": false,
              "additionalTags": [
                "os_macos",
                "os_mas"
              ],
              "collection": false,
              "type": "Boolean"
            }
          ]
        }
      ],
      "returns": {
        "collection": false,
        "type": [
          {
            "collection": false,
            "type": "String",
            "possibleValues": null
          },
          {
            "collection": false,
            "type": "undefined"
          }
        ]
      },
      "additionalTags": [],
      "apiType": "methods",
      "fullSignature": "dialog.showSaveDialogSync([browserWindow, ]options)",
      "tldr": "the path of the file chosen by the user; if the dialog is cancelled it returns `undefined`.\n\nThe `browserWindow` argument allows the dialog to attach itself to a parent window, making it modal.\n\nThe `filters` specifies an array of file types that can be displayed, see `dialog.showOpenDialog` for an example.",
      "slug": "dialogshowsavedialogsyncbrowserwindow-options",
      "url": "https://electronjs.org/docs/api/dialog#dialogshowsavedialogsyncbrowserwindow-options",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:showSaveDialogSync",
        "api:dialogshowsavedialogsyncbrowserwindow-options",
        "api:dialog.showSaveDialogSync([browserWindow, ]options)",
        "doc:showSaveDialogSync",
        "doc:dialogshowsavedialogsyncbrowserwindow-options",
        "doc:dialog.showSaveDialogSync([browserWindow, ]options)"
      ]
    },
    {
      "objectID": "api-dialog#dialogshowsavedialogbrowserwindow-options",
      "name": "showSaveDialog",
      "signature": "([browserWindow, ]options)",
      "description": "Resolve with an object containing the following:\n\n* `canceled` Boolean - whether or not the dialog was canceled.\n* `filePath` String (optional) - If the dialog is canceled, this will be `undefined`.\n* `bookmark` String (optional) _macOS_ _mas_ - Base64 encoded string which contains the security scoped bookmark data for the saved file. `securityScopedBookmarks` must be enabled for this to be present.\n\nThe `browserWindow` argument allows the dialog to attach itself to a parent window, making it modal.\n\nThe `filters` specifies an array of file types that can be displayed, see `dialog.showOpenDialog` for an example.\n\n**Note:** On macOS, using the asynchronous version is recommended to avoid issues when expanding and collapsing the dialog.",
      "parameters": [
        {
          "name": "browserWindow",
          "description": "",
          "required": false,
          "collection": false,
          "type": "BrowserWindow"
        },
        {
          "name": "options",
          "description": "",
          "required": true,
          "collection": false,
          "type": "Object",
          "properties": [
            {
              "name": "title",
              "description": "",
              "required": false,
              "additionalTags": [],
              "collection": false,
              "type": "String",
              "possibleValues": null
            },
            {
              "name": "defaultPath",
              "description": "Absolute directory path, absolute file path, or file name to use by default.",
              "required": false,
              "additionalTags": [],
              "collection": false,
              "type": "String",
              "possibleValues": null
            },
            {
              "name": "buttonLabel",
              "description": "Custom label for the confirmation button, when left empty the default label will be used.",
              "required": false,
              "additionalTags": [],
              "collection": false,
              "type": "String",
              "possibleValues": null
            },
            {
              "name": "filters",
              "description": "",
              "required": false,
              "additionalTags": [],
              "collection": true,
              "type": "FileFilter"
            },
            {
              "name": "message",
              "description": "Message to display above text fields.",
              "required": false,
              "additionalTags": [
                "os_macos"
              ],
              "collection": false,
              "type": "String",
              "possibleValues": null
            },
            {
              "name": "nameFieldLabel",
              "description": "Custom label for the text displayed in front of the filename text field.",
              "required": false,
              "additionalTags": [
                "os_macos"
              ],
              "collection": false,
              "type": "String",
              "possibleValues": null
            },
            {
              "name": "showsTagField",
              "description": "Show the tags input box, defaults to `true`.",
              "required": false,
              "additionalTags": [
                "os_macos"
              ],
              "collection": false,
              "type": "Boolean"
            },
            {
              "name": "securityScopedBookmarks",
              "description": "Create a security scoped bookmark when packaged for the Mac App Store. If this option is enabled and the file doesn't already exist a blank file will be created at the chosen path.",
              "required": false,
              "additionalTags": [
                "os_macos",
                "os_mas"
              ],
              "collection": false,
              "type": "Boolean"
            }
          ]
        }
      ],
      "returns": {
        "collection": false,
        "type": "Promise",
        "innerTypes": [
          {
            "collection": false,
            "type": "Object",
            "properties": [
              {
                "name": "canceled",
                "description": "whether or not the dialog was canceled.",
                "required": true,
                "additionalTags": [],
                "collection": false,
                "type": "Boolean"
              },
              {
                "name": "filePath",
                "description": "If the dialog is canceled, this will be `undefined`.",
                "required": false,
                "additionalTags": [],
                "collection": false,
                "type": "String",
                "possibleValues": null
              },
              {
                "name": "bookmark",
                "description": "Base64 encoded string which contains the security scoped bookmark data for the saved file. `securityScopedBookmarks` must be enabled for this to be present.",
                "required": false,
                "additionalTags": [
                  "os_macos",
                  "os_mas"
                ],
                "collection": false,
                "type": "String",
                "possibleValues": null
              }
            ]
          }
        ]
      },
      "additionalTags": [],
      "apiType": "methods",
      "fullSignature": "dialog.showSaveDialog([browserWindow, ]options)",
      "tldr": "Resolve with an object containing the following:\n\n* `canceled` Boolean - whether or not the dialog was canceled.\n* `filePath` String (optional) - If the dialog is canceled, this will be `undefined`.\n* `bookmark` String (optional) _macOS_ _mas_ - Base64 encoded string which contains the security scoped bookmark data for the saved file.",
      "slug": "dialogshowsavedialogbrowserwindow-options",
      "url": "https://electronjs.org/docs/api/dialog#dialogshowsavedialogbrowserwindow-options",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:showSaveDialog",
        "api:dialogshowsavedialogbrowserwindow-options",
        "api:dialog.showSaveDialog([browserWindow, ]options)",
        "doc:showSaveDialog",
        "doc:dialogshowsavedialogbrowserwindow-options",
        "doc:dialog.showSaveDialog([browserWindow, ]options)"
      ]
    },
    {
      "objectID": "api-dialog#dialogshowmessageboxsyncbrowserwindow-options",
      "name": "showMessageBoxSync",
      "signature": "([browserWindow, ]options)",
      "description": "the index of the clicked button.\n\nShows a message box, it will block the process until the message box is closed. It returns the index of the clicked button.\n\nThe `browserWindow` argument allows the dialog to attach itself to a parent window, making it modal.",
      "parameters": [
        {
          "name": "browserWindow",
          "description": "",
          "required": false,
          "collection": false,
          "type": "BrowserWindow"
        },
        {
          "name": "options",
          "description": "",
          "required": true,
          "collection": false,
          "type": "Object",
          "properties": [
            {
              "name": "type",
              "description": "Can be `\"none\"`, `\"info\"`, `\"error\"`, `\"question\"` or `\"warning\"`. On Windows, `\"question\"` displays the same icon as `\"info\"`, unless you set an icon using the `\"icon\"` option. On macOS, both `\"warning\"` and `\"error\"` display the same warning icon.",
              "required": false,
              "additionalTags": [],
              "collection": false,
              "type": "String",
              "possibleValues": null
            },
            {
              "name": "buttons",
              "description": "Array of texts for buttons. On Windows, an empty array will result in one button labeled \"OK\".",
              "required": false,
              "additionalTags": [],
              "collection": true,
              "type": "String",
              "possibleValues": null
            },
            {
              "name": "defaultId",
              "description": "Index of the button in the buttons array which will be selected by default when the message box opens.",
              "required": false,
              "additionalTags": [],
              "collection": false,
              "type": "Integer"
            },
            {
              "name": "title",
              "description": "Title of the message box, some platforms will not show it.",
              "required": false,
              "additionalTags": [],
              "collection": false,
              "type": "String",
              "possibleValues": null
            },
            {
              "name": "message",
              "description": "Content of the message box.",
              "required": true,
              "additionalTags": [],
              "collection": false,
              "type": "String",
              "possibleValues": null
            },
            {
              "name": "detail",
              "description": "Extra information of the message.",
              "required": false,
              "additionalTags": [],
              "collection": false,
              "type": "String",
              "possibleValues": null
            },
            {
              "name": "checkboxLabel",
              "description": "If provided, the message box will include a checkbox with the given label.",
              "required": false,
              "additionalTags": [],
              "collection": false,
              "type": "String",
              "possibleValues": null
            },
            {
              "name": "checkboxChecked",
              "description": "Initial checked state of the checkbox. `false` by default.",
              "required": false,
              "additionalTags": [],
              "collection": false,
              "type": "Boolean"
            },
            {
              "name": "icon",
              "description": "",
              "required": false,
              "additionalTags": [],
              "collection": false,
              "type": [
                {
                  "collection": false,
                  "type": "NativeImage"
                },
                {
                  "collection": false,
                  "type": "String",
                  "possibleValues": null
                }
              ]
            },
            {
              "name": "cancelId",
              "description": "The index of the button to be used to cancel the dialog, via the `Esc` key. By default this is assigned to the first button with \"cancel\" or \"no\" as the label. If no such labeled buttons exist and this option is not set, `0` will be used as the return value.",
              "required": false,
              "additionalTags": [],
              "collection": false,
              "type": "Integer"
            },
            {
              "name": "noLink",
              "description": "On Windows Electron will try to figure out which one of the `buttons` are common buttons (like \"Cancel\" or \"Yes\"), and show the others as command links in the dialog. This can make the dialog appear in the style of modern Windows apps. If you don't like this behavior, you can set `noLink` to `true`.",
              "required": false,
              "additionalTags": [],
              "collection": false,
              "type": "Boolean"
            },
            {
              "name": "normalizeAccessKeys",
              "description": "Normalize the keyboard access keys across platforms. Default is `false`. Enabling this assumes `&` is used in the button labels for the placement of the keyboard shortcut access key and labels will be converted so they work correctly on each platform, `&` characters are removed on macOS, converted to `_` on Linux, and left untouched on Windows. For example, a button label of `Vie&w` will be converted to `Vie_w` on Linux and `View` on macOS and can be selected via `Alt-W` on Windows and Linux.",
              "required": false,
              "additionalTags": [],
              "collection": false,
              "type": "Boolean"
            }
          ]
        }
      ],
      "returns": {
        "collection": false,
        "type": "Integer"
      },
      "additionalTags": [],
      "apiType": "methods",
      "fullSignature": "dialog.showMessageBoxSync([browserWindow, ]options)",
      "tldr": "the index of the clicked button.\n\nShows a message box, it will block the process until the message box is closed.",
      "slug": "dialogshowmessageboxsyncbrowserwindow-options",
      "url": "https://electronjs.org/docs/api/dialog#dialogshowmessageboxsyncbrowserwindow-options",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:showMessageBoxSync",
        "api:dialogshowmessageboxsyncbrowserwindow-options",
        "api:dialog.showMessageBoxSync([browserWindow, ]options)",
        "doc:showMessageBoxSync",
        "doc:dialogshowmessageboxsyncbrowserwindow-options",
        "doc:dialog.showMessageBoxSync([browserWindow, ]options)"
      ]
    },
    {
      "objectID": "api-dialog#dialogshowmessageboxbrowserwindow-options",
      "name": "showMessageBox",
      "signature": "([browserWindow, ]options)",
      "description": "resolves with a promise containing the following properties:\n\n* `response` Number - The index of the clicked button.\n* `checkboxChecked` Boolean - The checked state of the checkbox if `checkboxLabel` was set. Otherwise `false`.\n\nShows a message box, it will block the process until the message box is closed.\n\nThe `browserWindow` argument allows the dialog to attach itself to a parent window, making it modal.",
      "parameters": [
        {
          "name": "browserWindow",
          "description": "",
          "required": false,
          "collection": false,
          "type": "BrowserWindow"
        },
        {
          "name": "options",
          "description": "",
          "required": true,
          "collection": false,
          "type": "Object",
          "properties": [
            {
              "name": "type",
              "description": "Can be `\"none\"`, `\"info\"`, `\"error\"`, `\"question\"` or `\"warning\"`. On Windows, `\"question\"` displays the same icon as `\"info\"`, unless you set an icon using the `\"icon\"` option. On macOS, both `\"warning\"` and `\"error\"` display the same warning icon.",
              "required": false,
              "additionalTags": [],
              "collection": false,
              "type": "String",
              "possibleValues": null
            },
            {
              "name": "buttons",
              "description": "Array of texts for buttons. On Windows, an empty array will result in one button labeled \"OK\".",
              "required": false,
              "additionalTags": [],
              "collection": true,
              "type": "String",
              "possibleValues": null
            },
            {
              "name": "defaultId",
              "description": "Index of the button in the buttons array which will be selected by default when the message box opens.",
              "required": false,
              "additionalTags": [],
              "collection": false,
              "type": "Integer"
            },
            {
              "name": "title",
              "description": "Title of the message box, some platforms will not show it.",
              "required": false,
              "additionalTags": [],
              "collection": false,
              "type": "String",
              "possibleValues": null
            },
            {
              "name": "message",
              "description": "Content of the message box.",
              "required": true,
              "additionalTags": [],
              "collection": false,
              "type": "String",
              "possibleValues": null
            },
            {
              "name": "detail",
              "description": "Extra information of the message.",
              "required": false,
              "additionalTags": [],
              "collection": false,
              "type": "String",
              "possibleValues": null
            },
            {
              "name": "checkboxLabel",
              "description": "If provided, the message box will include a checkbox with the given label.",
              "required": false,
              "additionalTags": [],
              "collection": false,
              "type": "String",
              "possibleValues": null
            },
            {
              "name": "checkboxChecked",
              "description": "Initial checked state of the checkbox. `false` by default.",
              "required": false,
              "additionalTags": [],
              "collection": false,
              "type": "Boolean"
            },
            {
              "name": "icon",
              "description": "",
              "required": false,
              "additionalTags": [],
              "collection": false,
              "type": "NativeImage"
            },
            {
              "name": "cancelId",
              "description": "The index of the button to be used to cancel the dialog, via the `Esc` key. By default this is assigned to the first button with \"cancel\" or \"no\" as the label. If no such labeled buttons exist and this option is not set, `0` will be used as the return value.",
              "required": false,
              "additionalTags": [],
              "collection": false,
              "type": "Integer"
            },
            {
              "name": "noLink",
              "description": "On Windows Electron will try to figure out which one of the `buttons` are common buttons (like \"Cancel\" or \"Yes\"), and show the others as command links in the dialog. This can make the dialog appear in the style of modern Windows apps. If you don't like this behavior, you can set `noLink` to `true`.",
              "required": false,
              "additionalTags": [],
              "collection": false,
              "type": "Boolean"
            },
            {
              "name": "normalizeAccessKeys",
              "description": "Normalize the keyboard access keys across platforms. Default is `false`. Enabling this assumes `&` is used in the button labels for the placement of the keyboard shortcut access key and labels will be converted so they work correctly on each platform, `&` characters are removed on macOS, converted to `_` on Linux, and left untouched on Windows. For example, a button label of `Vie&w` will be converted to `Vie_w` on Linux and `View` on macOS and can be selected via `Alt-W` on Windows and Linux.",
              "required": false,
              "additionalTags": [],
              "collection": false,
              "type": "Boolean"
            }
          ]
        }
      ],
      "returns": {
        "collection": false,
        "type": "Promise",
        "innerTypes": [
          {
            "collection": false,
            "type": "Object",
            "properties": [
              {
                "name": "response",
                "description": "The index of the clicked button.",
                "required": true,
                "additionalTags": [],
                "collection": false,
                "type": "Number"
              },
              {
                "name": "checkboxChecked",
                "description": "The checked state of the checkbox if `checkboxLabel` was set. Otherwise `false`.",
                "required": true,
                "additionalTags": [],
                "collection": false,
                "type": "Boolean"
              }
            ]
          }
        ]
      },
      "additionalTags": [],
      "apiType": "methods",
      "fullSignature": "dialog.showMessageBox([browserWindow, ]options)",
      "tldr": "resolves with a promise containing the following properties:\n\n* `response` Number - The index of the clicked button.\n* `checkboxChecked` Boolean - The checked state of the checkbox if `checkboxLabel` was set.",
      "slug": "dialogshowmessageboxbrowserwindow-options",
      "url": "https://electronjs.org/docs/api/dialog#dialogshowmessageboxbrowserwindow-options",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:showMessageBox",
        "api:dialogshowmessageboxbrowserwindow-options",
        "api:dialog.showMessageBox([browserWindow, ]options)",
        "doc:showMessageBox",
        "doc:dialogshowmessageboxbrowserwindow-options",
        "doc:dialog.showMessageBox([browserWindow, ]options)"
      ]
    },
    {
      "objectID": "api-dialog#dialogshowerrorboxtitle-content",
      "name": "showErrorBox",
      "signature": "(title, content)",
      "description": "Displays a modal dialog that shows an error message.\n\nThis API can be called safely before the `ready` event the `app` module emits, it is usually used to report errors in early stage of startup. If called before the app `ready`event on Linux, the message will be emitted to stderr, and no GUI dialog will appear.",
      "parameters": [
        {
          "name": "title",
          "description": "The title to display in the error box.",
          "required": true,
          "collection": false,
          "type": "String",
          "possibleValues": null
        },
        {
          "name": "content",
          "description": "The text content to display in the error box.",
          "required": true,
          "collection": false,
          "type": "String",
          "possibleValues": null
        }
      ],
      "returns": null,
      "additionalTags": [],
      "apiType": "methods",
      "fullSignature": "dialog.showErrorBox(title, content)",
      "tldr": "Displays a modal dialog that shows an error message.\n\nThis API can be called safely before the `ready` event the `app` module emits, it is usually used to report errors in early stage of startup.",
      "slug": "dialogshowerrorboxtitle-content",
      "url": "https://electronjs.org/docs/api/dialog#dialogshowerrorboxtitle-content",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:showErrorBox",
        "api:dialogshowerrorboxtitle-content",
        "api:dialog.showErrorBox(title, content)",
        "doc:showErrorBox",
        "doc:dialogshowerrorboxtitle-content",
        "doc:dialog.showErrorBox(title, content)"
      ]
    },
    {
      "objectID": "api-dialog#dialogshowcertificatetrustdialogbrowserwindow-options",
      "name": "showCertificateTrustDialog",
      "signature": "([browserWindow, ]options)",
      "description": "resolves when the certificate trust dialog is shown.\n\nOn macOS, this displays a modal dialog that shows a message and certificate information, and gives the user the option of trusting/importing the certificate. If you provide a `browserWindow` argument the dialog will be attached to the parent window, making it modal.\n\nOn Windows the options are more limited, due to the Win32 APIs used:\n\n* The `message` argument is not used, as the OS provides its own confirmation dialog.\n* The `browserWindow` argument is ignored since it is not possible to make this confirmation dialog modal.",
      "parameters": [
        {
          "name": "browserWindow",
          "description": "",
          "required": false,
          "collection": false,
          "type": "BrowserWindow"
        },
        {
          "name": "options",
          "description": "",
          "required": true,
          "collection": false,
          "type": "Object",
          "properties": [
            {
              "name": "certificate",
              "description": "The certificate to trust/import.",
              "required": true,
              "additionalTags": [],
              "collection": false,
              "type": "Certificate"
            },
            {
              "name": "message",
              "description": "The message to display to the user.",
              "required": true,
              "additionalTags": [],
              "collection": false,
              "type": "String",
              "possibleValues": null
            }
          ]
        }
      ],
      "returns": {
        "collection": false,
        "type": "Promise",
        "innerTypes": [
          {
            "collection": false,
            "type": "void"
          }
        ]
      },
      "additionalTags": [
        "os_macos",
        "os_windows"
      ],
      "apiType": "methods",
      "fullSignature": "dialog.showCertificateTrustDialog([browserWindow, ]options)",
      "tldr": "resolves when the certificate trust dialog is shown.\n\nOn macOS, this displays a modal dialog that shows a message and certificate information, and gives the user the option of trusting/importing the certificate.",
      "slug": "dialogshowcertificatetrustdialogbrowserwindow-options",
      "url": "https://electronjs.org/docs/api/dialog#dialogshowcertificatetrustdialogbrowserwindow-options",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:showCertificateTrustDialog",
        "api:dialogshowcertificatetrustdialogbrowserwindow-options",
        "api:dialog.showCertificateTrustDialog([browserWindow, ]options)",
        "doc:showCertificateTrustDialog",
        "doc:dialogshowcertificatetrustdialogbrowserwindow-options",
        "doc:dialog.showCertificateTrustDialog([browserWindow, ]options)"
      ]
    },
    {
      "objectID": "api-dock#dockbouncetype",
      "name": "bounce",
      "signature": "([type])",
      "description": "an ID representing the request.\n\nWhen `critical` is passed, the dock icon will bounce until either the application becomes active or the request is canceled.\n\nWhen `informational` is passed, the dock icon will bounce for one second. However, the request remains active until either the application becomes active or the request is canceled.\n\n**Nota Bene:** This method can only be used while the app is not focused; when the app is focused it will return -1.",
      "parameters": [
        {
          "name": "type",
          "description": "Can be `critical` or `informational`. The default is `informational`",
          "required": false,
          "collection": false,
          "type": "String",
          "possibleValues": [
            {
              "value": "critical",
              "description": ""
            },
            {
              "value": "informational",
              "description": ""
            }
          ]
        }
      ],
      "returns": {
        "collection": false,
        "type": "Integer"
      },
      "additionalTags": [
        "os_macos"
      ],
      "apiType": "instanceMethod",
      "fullSignature": "dock.bounce([type])",
      "tldr": "an ID representing the request.\n\nWhen `critical` is passed, the dock icon will bounce until either the application becomes active or the request is canceled.\n\nWhen `informational` is passed, the dock icon will bounce for one second.",
      "slug": "dockbouncetype",
      "url": "https://electronjs.org/docs/api/dock#dockbouncetype",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:bounce",
        "api:dockbouncetype",
        "api:dock.bounce([type])",
        "doc:bounce",
        "doc:dockbouncetype",
        "doc:dock.bounce([type])"
      ]
    },
    {
      "objectID": "api-dock#dockcancelbounceid",
      "name": "cancelBounce",
      "signature": "(id)",
      "description": "Cancel the bounce of `id`.",
      "parameters": [
        {
          "name": "id",
          "description": "",
          "required": true,
          "collection": false,
          "type": "Integer"
        }
      ],
      "returns": null,
      "additionalTags": [
        "os_macos"
      ],
      "apiType": "instanceMethod",
      "fullSignature": "dock.cancelBounce(id)",
      "tldr": "Cancel the bounce of `id`.",
      "slug": "dockcancelbounceid",
      "url": "https://electronjs.org/docs/api/dock#dockcancelbounceid",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:cancelBounce",
        "api:dockcancelbounceid",
        "api:dock.cancelBounce(id)",
        "doc:cancelBounce",
        "doc:dockcancelbounceid",
        "doc:dock.cancelBounce(id)"
      ]
    },
    {
      "objectID": "api-dock#dockdownloadfinishedfilepath",
      "name": "downloadFinished",
      "signature": "(filePath)",
      "description": "Bounces the Downloads stack if the filePath is inside the Downloads folder.",
      "parameters": [
        {
          "name": "filePath",
          "description": "",
          "required": true,
          "collection": false,
          "type": "String",
          "possibleValues": null
        }
      ],
      "returns": null,
      "additionalTags": [
        "os_macos"
      ],
      "apiType": "instanceMethod",
      "fullSignature": "dock.downloadFinished(filePath)",
      "tldr": "Bounces the Downloads stack if the filePath is inside the Downloads folder.",
      "slug": "dockdownloadfinishedfilepath",
      "url": "https://electronjs.org/docs/api/dock#dockdownloadfinishedfilepath",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:downloadFinished",
        "api:dockdownloadfinishedfilepath",
        "api:dock.downloadFinished(filePath)",
        "doc:downloadFinished",
        "doc:dockdownloadfinishedfilepath",
        "doc:dock.downloadFinished(filePath)"
      ]
    },
    {
      "objectID": "api-dock#docksetbadgetext",
      "name": "setBadge",
      "signature": "(text)",
      "description": "Sets the string to be displayed in the dock’s badging area.",
      "parameters": [
        {
          "name": "text",
          "description": "",
          "required": true,
          "collection": false,
          "type": "String",
          "possibleValues": null
        }
      ],
      "returns": null,
      "additionalTags": [
        "os_macos"
      ],
      "apiType": "instanceMethod",
      "fullSignature": "dock.setBadge(text)",
      "tldr": "Sets the string to be displayed in the dock’s badging area.",
      "slug": "docksetbadgetext",
      "url": "https://electronjs.org/docs/api/dock#docksetbadgetext",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:setBadge",
        "api:docksetbadgetext",
        "api:dock.setBadge(text)",
        "doc:setBadge",
        "doc:docksetbadgetext",
        "doc:dock.setBadge(text)"
      ]
    },
    {
      "objectID": "api-dock#dockgetbadge",
      "name": "getBadge",
      "signature": "()",
      "description": "The badge string of the dock.",
      "parameters": [],
      "returns": {
        "collection": false,
        "type": "String",
        "possibleValues": null
      },
      "additionalTags": [
        "os_macos"
      ],
      "apiType": "instanceMethod",
      "fullSignature": "dock.getBadge()",
      "tldr": "The badge string of the dock.",
      "slug": "dockgetbadge",
      "url": "https://electronjs.org/docs/api/dock#dockgetbadge",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:getBadge",
        "api:dockgetbadge",
        "api:dock.getBadge()",
        "doc:getBadge",
        "doc:dockgetbadge",
        "doc:dock.getBadge()"
      ]
    },
    {
      "objectID": "api-dock#dockhide",
      "name": "hide",
      "signature": "()",
      "description": "Hides the dock icon.",
      "parameters": [],
      "returns": null,
      "additionalTags": [
        "os_macos"
      ],
      "apiType": "instanceMethod",
      "fullSignature": "dock.hide()",
      "tldr": "Hides the dock icon.",
      "slug": "dockhide",
      "url": "https://electronjs.org/docs/api/dock#dockhide",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:hide",
        "api:dockhide",
        "api:dock.hide()",
        "doc:hide",
        "doc:dockhide",
        "doc:dock.hide()"
      ]
    },
    {
      "objectID": "api-dock#dockshow",
      "name": "show",
      "signature": "()",
      "description": "Resolves when the dock icon is shown.",
      "parameters": [],
      "returns": {
        "collection": false,
        "type": "Promise",
        "innerTypes": [
          {
            "collection": false,
            "type": "void"
          }
        ]
      },
      "additionalTags": [
        "os_macos"
      ],
      "apiType": "instanceMethod",
      "fullSignature": "dock.show()",
      "tldr": "Resolves when the dock icon is shown.",
      "slug": "dockshow",
      "url": "https://electronjs.org/docs/api/dock#dockshow",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:show",
        "api:dockshow",
        "api:dock.show()",
        "doc:show",
        "doc:dockshow",
        "doc:dock.show()"
      ]
    },
    {
      "objectID": "api-dock#dockisvisible",
      "name": "isVisible",
      "signature": "()",
      "description": "Whether the dock icon is visible.",
      "parameters": [],
      "returns": {
        "collection": false,
        "type": "Boolean"
      },
      "additionalTags": [
        "os_macos"
      ],
      "apiType": "instanceMethod",
      "fullSignature": "dock.isVisible()",
      "tldr": "Whether the dock icon is visible.",
      "slug": "dockisvisible",
      "url": "https://electronjs.org/docs/api/dock#dockisvisible",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:isVisible",
        "api:dockisvisible",
        "api:dock.isVisible()",
        "doc:isVisible",
        "doc:dockisvisible",
        "doc:dock.isVisible()"
      ]
    },
    {
      "objectID": "api-dock#docksetmenumenu",
      "name": "setMenu",
      "signature": "(menu)",
      "description": "Sets the application's [dock menu][dock-menu].",
      "parameters": [
        {
          "name": "menu",
          "description": "",
          "required": true,
          "collection": false,
          "type": "Menu"
        }
      ],
      "returns": null,
      "additionalTags": [
        "os_macos"
      ],
      "apiType": "instanceMethod",
      "fullSignature": "dock.setMenu(menu)",
      "tldr": "Sets the application's [dock menu][dock-menu].",
      "slug": "docksetmenumenu",
      "url": "https://electronjs.org/docs/api/dock#docksetmenumenu",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:setMenu",
        "api:docksetmenumenu",
        "api:dock.setMenu(menu)",
        "doc:setMenu",
        "doc:docksetmenumenu",
        "doc:dock.setMenu(menu)"
      ]
    },
    {
      "objectID": "api-dock#dockgetmenu",
      "name": "getMenu",
      "signature": "()",
      "description": "The application's [dock menu][dock-menu].",
      "parameters": [],
      "returns": {
        "collection": false,
        "type": [
          {
            "collection": false,
            "type": "Menu"
          },
          {
            "type": "null",
            "collection": false
          }
        ]
      },
      "additionalTags": [
        "os_macos"
      ],
      "apiType": "instanceMethod",
      "fullSignature": "dock.getMenu()",
      "tldr": "The application's [dock menu][dock-menu].",
      "slug": "dockgetmenu",
      "url": "https://electronjs.org/docs/api/dock#dockgetmenu",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:getMenu",
        "api:dockgetmenu",
        "api:dock.getMenu()",
        "doc:getMenu",
        "doc:dockgetmenu",
        "doc:dock.getMenu()"
      ]
    },
    {
      "objectID": "api-dock#dockseticonimage",
      "name": "setIcon",
      "signature": "(image)",
      "description": "Sets the `image` associated with this dock icon.",
      "parameters": [
        {
          "name": "image",
          "description": "",
          "required": true,
          "collection": false,
          "type": [
            {
              "collection": false,
              "type": "NativeImage"
            },
            {
              "collection": false,
              "type": "String",
              "possibleValues": null
            }
          ]
        }
      ],
      "returns": null,
      "additionalTags": [
        "os_macos"
      ],
      "apiType": "instanceMethod",
      "fullSignature": "dock.setIcon(image)",
      "tldr": "Sets the `image` associated with this dock icon.",
      "slug": "dockseticonimage",
      "url": "https://electronjs.org/docs/api/dock#dockseticonimage",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:setIcon",
        "api:dockseticonimage",
        "api:dock.setIcon(image)",
        "doc:setIcon",
        "doc:dockseticonimage",
        "doc:dock.setIcon(image)"
      ]
    },
    {
      "objectID": "api-download-item#downloaditemsavepath",
      "name": "savePath",
      "description": "A `String` property that determines the save file path of the download item.\n\nThe property is only available in session's `will-download` callback function. If user doesn't set the save path via the property, Electron will use the original routine to determine the save path; this usually prompts a save dialog.",
      "required": true,
      "additionalTags": [],
      "collection": false,
      "type": "String",
      "possibleValues": null,
      "apiType": "instanceProperties",
      "fullSignature": "DownloadItem.savePath",
      "tldr": "A `String` property that determines the save file path of the download item.\n\nThe property is only available in session's `will-download` callback function.",
      "slug": "downloaditemsavepath",
      "url": "https://electronjs.org/docs/api/download-item#downloaditemsavepath",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:savePath",
        "api:downloaditemsavepath",
        "api:DownloadItem.savePath",
        "doc:savePath",
        "doc:downloaditemsavepath",
        "doc:DownloadItem.savePath"
      ]
    },
    {
      "objectID": "api-download-item#downloaditemsetsavepathpath",
      "name": "setSavePath",
      "signature": "(path)",
      "description": "The API is only available in session's `will-download` callback function. If user doesn't set the save path via the API, Electron will use the original routine to determine the save path; this usually prompts a save dialog.\n\n**Deprecated: use the `savePath` property instead.**",
      "parameters": [
        {
          "name": "path",
          "description": "Set the save file path of the download item.",
          "required": true,
          "collection": false,
          "type": "String",
          "possibleValues": null
        }
      ],
      "returns": null,
      "additionalTags": [],
      "apiType": "instanceMethod",
      "fullSignature": "downloadItem.setSavePath(path)",
      "tldr": "The API is only available in session's `will-download` callback function.",
      "slug": "downloaditemsetsavepathpath",
      "url": "https://electronjs.org/docs/api/download-item#downloaditemsetsavepathpath",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:setSavePath",
        "api:downloaditemsetsavepathpath",
        "api:downloadItem.setSavePath(path)",
        "doc:setSavePath",
        "doc:downloaditemsetsavepathpath",
        "doc:downloadItem.setSavePath(path)"
      ]
    },
    {
      "objectID": "api-download-item#downloaditemgetsavepath",
      "name": "getSavePath",
      "signature": "()",
      "description": "The save path of the download item. This will be either the path set via `downloadItem.setSavePath(path)` or the path selected from the shown save dialog.\n\n**Deprecated: use the `savePath` property instead.**",
      "parameters": [],
      "returns": {
        "collection": false,
        "type": "String",
        "possibleValues": null
      },
      "additionalTags": [],
      "apiType": "instanceMethod",
      "fullSignature": "downloadItem.getSavePath()",
      "tldr": "The save path of the download item.",
      "slug": "downloaditemgetsavepath",
      "url": "https://electronjs.org/docs/api/download-item#downloaditemgetsavepath",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:getSavePath",
        "api:downloaditemgetsavepath",
        "api:downloadItem.getSavePath()",
        "doc:getSavePath",
        "doc:downloaditemgetsavepath",
        "doc:downloadItem.getSavePath()"
      ]
    },
    {
      "objectID": "api-download-item#downloaditemsetsavedialogoptionsoptions",
      "name": "setSaveDialogOptions",
      "signature": "(options)",
      "description": "This API allows the user to set custom options for the save dialog that opens for the download item by default. The API is only available in session's `will-download` callback function.",
      "parameters": [
        {
          "name": "options",
          "description": "Set the save file dialog options. This object has the same properties as the `options` parameter of `dialog.showSaveDialog()`.",
          "required": true,
          "collection": false,
          "type": "SaveDialogOptions"
        }
      ],
      "returns": null,
      "additionalTags": [],
      "apiType": "instanceMethod",
      "fullSignature": "downloadItem.setSaveDialogOptions(options)",
      "tldr": "This API allows the user to set custom options for the save dialog that opens for the download item by default.",
      "slug": "downloaditemsetsavedialogoptionsoptions",
      "url": "https://electronjs.org/docs/api/download-item#downloaditemsetsavedialogoptionsoptions",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:setSaveDialogOptions",
        "api:downloaditemsetsavedialogoptionsoptions",
        "api:downloadItem.setSaveDialogOptions(options)",
        "doc:setSaveDialogOptions",
        "doc:downloaditemsetsavedialogoptionsoptions",
        "doc:downloadItem.setSaveDialogOptions(options)"
      ]
    },
    {
      "objectID": "api-download-item#downloaditemgetsavedialogoptions",
      "name": "getSaveDialogOptions",
      "signature": "()",
      "description": "Returns the object previously set by `downloadItem.setSaveDialogOptions(options)`.",
      "parameters": [],
      "returns": {
        "collection": false,
        "type": "SaveDialogOptions"
      },
      "additionalTags": [],
      "apiType": "instanceMethod",
      "fullSignature": "downloadItem.getSaveDialogOptions()",
      "tldr": "Returns the object previously set by `downloadItem.setSaveDialogOptions(options)`.",
      "slug": "downloaditemgetsavedialogoptions",
      "url": "https://electronjs.org/docs/api/download-item#downloaditemgetsavedialogoptions",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:getSaveDialogOptions",
        "api:downloaditemgetsavedialogoptions",
        "api:downloadItem.getSaveDialogOptions()",
        "doc:getSaveDialogOptions",
        "doc:downloaditemgetsavedialogoptions",
        "doc:downloadItem.getSaveDialogOptions()"
      ]
    },
    {
      "objectID": "api-download-item#downloaditempause",
      "name": "pause",
      "signature": "()",
      "description": "Pauses the download.",
      "parameters": [],
      "returns": null,
      "additionalTags": [],
      "apiType": "instanceMethod",
      "fullSignature": "downloadItem.pause()",
      "tldr": "Pauses the download.",
      "slug": "downloaditempause",
      "url": "https://electronjs.org/docs/api/download-item#downloaditempause",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:pause",
        "api:downloaditempause",
        "api:downloadItem.pause()",
        "doc:pause",
        "doc:downloaditempause",
        "doc:downloadItem.pause()"
      ]
    },
    {
      "objectID": "api-download-item#downloaditemispaused",
      "name": "isPaused",
      "signature": "()",
      "description": "Whether the download is paused.",
      "parameters": [],
      "returns": {
        "collection": false,
        "type": "Boolean"
      },
      "additionalTags": [],
      "apiType": "instanceMethod",
      "fullSignature": "downloadItem.isPaused()",
      "tldr": "Whether the download is paused.",
      "slug": "downloaditemispaused",
      "url": "https://electronjs.org/docs/api/download-item#downloaditemispaused",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:isPaused",
        "api:downloaditemispaused",
        "api:downloadItem.isPaused()",
        "doc:isPaused",
        "doc:downloaditemispaused",
        "doc:downloadItem.isPaused()"
      ]
    },
    {
      "objectID": "api-download-item#downloaditemresume",
      "name": "resume",
      "signature": "()",
      "description": "Resumes the download that has been paused.\n\n**Note:** To enable resumable downloads the server you are downloading from must support range requests and provide both `Last-Modified` and `ETag` header values. Otherwise `resume()` will dismiss previously received bytes and restart the download from the beginning.",
      "parameters": [],
      "returns": null,
      "additionalTags": [],
      "apiType": "instanceMethod",
      "fullSignature": "downloadItem.resume()",
      "tldr": "Resumes the download that has been paused.\n\n**Note:** To enable resumable downloads the server you are downloading from must support range requests and provide both `Last-Modified` and `ETag` header values.",
      "slug": "downloaditemresume",
      "url": "https://electronjs.org/docs/api/download-item#downloaditemresume",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:resume",
        "api:downloaditemresume",
        "api:downloadItem.resume()",
        "doc:resume",
        "doc:downloaditemresume",
        "doc:downloadItem.resume()"
      ]
    },
    {
      "objectID": "api-download-item#downloaditemcanresume",
      "name": "canResume",
      "signature": "()",
      "description": "Whether the download can resume.",
      "parameters": [],
      "returns": {
        "collection": false,
        "type": "Boolean"
      },
      "additionalTags": [],
      "apiType": "instanceMethod",
      "fullSignature": "downloadItem.canResume()",
      "tldr": "Whether the download can resume.",
      "slug": "downloaditemcanresume",
      "url": "https://electronjs.org/docs/api/download-item#downloaditemcanresume",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:canResume",
        "api:downloaditemcanresume",
        "api:downloadItem.canResume()",
        "doc:canResume",
        "doc:downloaditemcanresume",
        "doc:downloadItem.canResume()"
      ]
    },
    {
      "objectID": "api-download-item#downloaditemcancel",
      "name": "cancel",
      "signature": "()",
      "description": "Cancels the download operation.",
      "parameters": [],
      "returns": null,
      "additionalTags": [],
      "apiType": "instanceMethod",
      "fullSignature": "downloadItem.cancel()",
      "tldr": "Cancels the download operation.",
      "slug": "downloaditemcancel",
      "url": "https://electronjs.org/docs/api/download-item#downloaditemcancel",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:cancel",
        "api:downloaditemcancel",
        "api:downloadItem.cancel()",
        "doc:cancel",
        "doc:downloaditemcancel",
        "doc:downloadItem.cancel()"
      ]
    },
    {
      "objectID": "api-download-item#downloaditemgeturl",
      "name": "getURL",
      "signature": "()",
      "description": "The origin URL where the item is downloaded from.",
      "parameters": [],
      "returns": {
        "collection": false,
        "type": "String",
        "possibleValues": null
      },
      "additionalTags": [],
      "apiType": "instanceMethod",
      "fullSignature": "downloadItem.getURL()",
      "tldr": "The origin URL where the item is downloaded from.",
      "slug": "downloaditemgeturl",
      "url": "https://electronjs.org/docs/api/download-item#downloaditemgeturl",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:getURL",
        "api:downloaditemgeturl",
        "api:downloadItem.getURL()",
        "doc:getURL",
        "doc:downloaditemgeturl",
        "doc:downloadItem.getURL()"
      ]
    },
    {
      "objectID": "api-download-item#downloaditemgetmimetype",
      "name": "getMimeType",
      "signature": "()",
      "description": "The files mime type.",
      "parameters": [],
      "returns": {
        "collection": false,
        "type": "String",
        "possibleValues": null
      },
      "additionalTags": [],
      "apiType": "instanceMethod",
      "fullSignature": "downloadItem.getMimeType()",
      "tldr": "The files mime type.",
      "slug": "downloaditemgetmimetype",
      "url": "https://electronjs.org/docs/api/download-item#downloaditemgetmimetype",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:getMimeType",
        "api:downloaditemgetmimetype",
        "api:downloadItem.getMimeType()",
        "doc:getMimeType",
        "doc:downloaditemgetmimetype",
        "doc:downloadItem.getMimeType()"
      ]
    },
    {
      "objectID": "api-download-item#downloaditemhasusergesture",
      "name": "hasUserGesture",
      "signature": "()",
      "description": "Whether the download has user gesture.",
      "parameters": [],
      "returns": {
        "collection": false,
        "type": "Boolean"
      },
      "additionalTags": [],
      "apiType": "instanceMethod",
      "fullSignature": "downloadItem.hasUserGesture()",
      "tldr": "Whether the download has user gesture.",
      "slug": "downloaditemhasusergesture",
      "url": "https://electronjs.org/docs/api/download-item#downloaditemhasusergesture",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:hasUserGesture",
        "api:downloaditemhasusergesture",
        "api:downloadItem.hasUserGesture()",
        "doc:hasUserGesture",
        "doc:downloaditemhasusergesture",
        "doc:downloadItem.hasUserGesture()"
      ]
    },
    {
      "objectID": "api-download-item#downloaditemgetfilename",
      "name": "getFilename",
      "signature": "()",
      "description": "The file name of the download item.\n\n**Note:** The file name is not always the same as the actual one saved in local disk. If user changes the file name in a prompted download saving dialog, the actual name of saved file will be different.",
      "parameters": [],
      "returns": {
        "collection": false,
        "type": "String",
        "possibleValues": null
      },
      "additionalTags": [],
      "apiType": "instanceMethod",
      "fullSignature": "downloadItem.getFilename()",
      "tldr": "The file name of the download item.\n\n**Note:** The file name is not always the same as the actual one saved in local disk.",
      "slug": "downloaditemgetfilename",
      "url": "https://electronjs.org/docs/api/download-item#downloaditemgetfilename",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:getFilename",
        "api:downloaditemgetfilename",
        "api:downloadItem.getFilename()",
        "doc:getFilename",
        "doc:downloaditemgetfilename",
        "doc:downloadItem.getFilename()"
      ]
    },
    {
      "objectID": "api-download-item#downloaditemgettotalbytes",
      "name": "getTotalBytes",
      "signature": "()",
      "description": "The total size in bytes of the download item.\n\nIf the size is unknown, it returns 0.",
      "parameters": [],
      "returns": {
        "collection": false,
        "type": "Integer"
      },
      "additionalTags": [],
      "apiType": "instanceMethod",
      "fullSignature": "downloadItem.getTotalBytes()",
      "tldr": "The total size in bytes of the download item.\n\nIf the size is unknown, it returns 0.",
      "slug": "downloaditemgettotalbytes",
      "url": "https://electronjs.org/docs/api/download-item#downloaditemgettotalbytes",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:getTotalBytes",
        "api:downloaditemgettotalbytes",
        "api:downloadItem.getTotalBytes()",
        "doc:getTotalBytes",
        "doc:downloaditemgettotalbytes",
        "doc:downloadItem.getTotalBytes()"
      ]
    },
    {
      "objectID": "api-download-item#downloaditemgetreceivedbytes",
      "name": "getReceivedBytes",
      "signature": "()",
      "description": "The received bytes of the download item.",
      "parameters": [],
      "returns": {
        "collection": false,
        "type": "Integer"
      },
      "additionalTags": [],
      "apiType": "instanceMethod",
      "fullSignature": "downloadItem.getReceivedBytes()",
      "tldr": "The received bytes of the download item.",
      "slug": "downloaditemgetreceivedbytes",
      "url": "https://electronjs.org/docs/api/download-item#downloaditemgetreceivedbytes",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:getReceivedBytes",
        "api:downloaditemgetreceivedbytes",
        "api:downloadItem.getReceivedBytes()",
        "doc:getReceivedBytes",
        "doc:downloaditemgetreceivedbytes",
        "doc:downloadItem.getReceivedBytes()"
      ]
    },
    {
      "objectID": "api-download-item#downloaditemgetcontentdisposition",
      "name": "getContentDisposition",
      "signature": "()",
      "description": "The Content-Disposition field from the response header.",
      "parameters": [],
      "returns": {
        "collection": false,
        "type": "String",
        "possibleValues": null
      },
      "additionalTags": [],
      "apiType": "instanceMethod",
      "fullSignature": "downloadItem.getContentDisposition()",
      "tldr": "The Content-Disposition field from the response header.",
      "slug": "downloaditemgetcontentdisposition",
      "url": "https://electronjs.org/docs/api/download-item#downloaditemgetcontentdisposition",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:getContentDisposition",
        "api:downloaditemgetcontentdisposition",
        "api:downloadItem.getContentDisposition()",
        "doc:getContentDisposition",
        "doc:downloaditemgetcontentdisposition",
        "doc:downloadItem.getContentDisposition()"
      ]
    },
    {
      "objectID": "api-download-item#downloaditemgetstate",
      "name": "getState",
      "signature": "()",
      "description": "The current state. Can be `progressing`, `completed`, `cancelled` or `interrupted`.\n\n**Note:** The following methods are useful specifically to resume a `cancelled` item when session is restarted.",
      "parameters": [],
      "returns": {
        "collection": false,
        "type": "String",
        "possibleValues": [
          {
            "value": "progressing",
            "description": ""
          },
          {
            "value": "completed",
            "description": ""
          },
          {
            "value": "cancelled",
            "description": ""
          },
          {
            "value": "interrupted",
            "description": ""
          }
        ]
      },
      "additionalTags": [],
      "apiType": "instanceMethod",
      "fullSignature": "downloadItem.getState()",
      "tldr": "The current state.",
      "slug": "downloaditemgetstate",
      "url": "https://electronjs.org/docs/api/download-item#downloaditemgetstate",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:getState",
        "api:downloaditemgetstate",
        "api:downloadItem.getState()",
        "doc:getState",
        "doc:downloaditemgetstate",
        "doc:downloadItem.getState()"
      ]
    },
    {
      "objectID": "api-download-item#downloaditemgeturlchain",
      "name": "getURLChain",
      "signature": "()",
      "description": "The complete URL chain of the item including any redirects.",
      "parameters": [],
      "returns": {
        "collection": true,
        "type": "String",
        "possibleValues": null
      },
      "additionalTags": [],
      "apiType": "instanceMethod",
      "fullSignature": "downloadItem.getURLChain()",
      "tldr": "The complete URL chain of the item including any redirects.",
      "slug": "downloaditemgeturlchain",
      "url": "https://electronjs.org/docs/api/download-item#downloaditemgeturlchain",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:getURLChain",
        "api:downloaditemgeturlchain",
        "api:downloadItem.getURLChain()",
        "doc:getURLChain",
        "doc:downloaditemgeturlchain",
        "doc:downloadItem.getURLChain()"
      ]
    },
    {
      "objectID": "api-download-item#downloaditemgetlastmodifiedtime",
      "name": "getLastModifiedTime",
      "signature": "()",
      "description": "Last-Modified header value.",
      "parameters": [],
      "returns": {
        "collection": false,
        "type": "String",
        "possibleValues": null
      },
      "additionalTags": [],
      "apiType": "instanceMethod",
      "fullSignature": "downloadItem.getLastModifiedTime()",
      "tldr": "Last-Modified header value.",
      "slug": "downloaditemgetlastmodifiedtime",
      "url": "https://electronjs.org/docs/api/download-item#downloaditemgetlastmodifiedtime",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:getLastModifiedTime",
        "api:downloaditemgetlastmodifiedtime",
        "api:downloadItem.getLastModifiedTime()",
        "doc:getLastModifiedTime",
        "doc:downloaditemgetlastmodifiedtime",
        "doc:downloadItem.getLastModifiedTime()"
      ]
    },
    {
      "objectID": "api-download-item#downloaditemgetetag",
      "name": "getETag",
      "signature": "()",
      "description": "ETag header value.",
      "parameters": [],
      "returns": {
        "collection": false,
        "type": "String",
        "possibleValues": null
      },
      "additionalTags": [],
      "apiType": "instanceMethod",
      "fullSignature": "downloadItem.getETag()",
      "tldr": "ETag header value.",
      "slug": "downloaditemgetetag",
      "url": "https://electronjs.org/docs/api/download-item#downloaditemgetetag",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:getETag",
        "api:downloaditemgetetag",
        "api:downloadItem.getETag()",
        "doc:getETag",
        "doc:downloaditemgetetag",
        "doc:downloadItem.getETag()"
      ]
    },
    {
      "objectID": "api-download-item#downloaditemgetstarttime",
      "name": "getStartTime",
      "signature": "()",
      "description": "Number of seconds since the UNIX epoch when the download was started.",
      "parameters": [],
      "returns": {
        "collection": false,
        "type": "Double"
      },
      "additionalTags": [],
      "apiType": "instanceMethod",
      "fullSignature": "downloadItem.getStartTime()",
      "tldr": "Number of seconds since the UNIX epoch when the download was started.",
      "slug": "downloaditemgetstarttime",
      "url": "https://electronjs.org/docs/api/download-item#downloaditemgetstarttime",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:getStartTime",
        "api:downloaditemgetstarttime",
        "api:downloadItem.getStartTime()",
        "doc:getStartTime",
        "doc:downloaditemgetstarttime",
        "doc:downloadItem.getStartTime()"
      ]
    },
    {
      "objectID": "api-download-item#event-updated",
      "name": "updated",
      "description": "Emitted when the download has been updated and is not done.\n\nThe `state` can be one of following:\n\n* `progressing` - The download is in-progress.\n* `interrupted` - The download has interrupted and can be resumed.",
      "parameters": [
        {
          "name": "event",
          "description": "",
          "collection": false,
          "type": "Event",
          "required": true
        },
        {
          "name": "state",
          "description": "Can be `progressing` or `interrupted`.",
          "collection": false,
          "type": "String",
          "possibleValues": [
            {
              "value": "progressing",
              "description": ""
            },
            {
              "value": "interrupted",
              "description": ""
            }
          ],
          "required": true
        }
      ],
      "additionalTags": [],
      "apiType": "event",
      "fullSignature": "downloadItem.on('updated')",
      "url": "https://electronjs.org/docs/api/download-item#event-updated",
      "slug": "downloaditemonupdated",
      "tldr": "Emitted when the download has been updated and is not done.\n\nThe `state` can be one of following:\n\n* `progressing` - The download is in-progress.\n* `interrupted` - The download has interrupted and can be resumed.",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:updated",
        "api:downloaditemonupdated",
        "api:downloadItem.on('updated')",
        "doc:updated",
        "doc:downloaditemonupdated",
        "doc:downloadItem.on('updated')"
      ]
    },
    {
      "objectID": "api-download-item#event-done",
      "name": "done",
      "description": "Emitted when the download is in a terminal state. This includes a completed download, a cancelled download (via `downloadItem.cancel()`), and interrupted download that can't be resumed.\n\nThe `state` can be one of following:\n\n* `completed` - The download completed successfully.\n* `cancelled` - The download has been cancelled.\n* `interrupted` - The download has interrupted and can not resume.",
      "parameters": [
        {
          "name": "event",
          "description": "",
          "collection": false,
          "type": "Event",
          "required": true
        },
        {
          "name": "state",
          "description": "Can be `completed`, `cancelled` or `interrupted`.",
          "collection": false,
          "type": "String",
          "possibleValues": [
            {
              "value": "completed",
              "description": ""
            },
            {
              "value": "cancelled",
              "description": ""
            },
            {
              "value": "interrupted",
              "description": ""
            }
          ],
          "required": true
        }
      ],
      "additionalTags": [],
      "apiType": "event",
      "fullSignature": "downloadItem.on('done')",
      "url": "https://electronjs.org/docs/api/download-item#event-done",
      "slug": "downloaditemondone",
      "tldr": "Emitted when the download is in a terminal state.",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:done",
        "api:downloaditemondone",
        "api:downloadItem.on('done')",
        "doc:done",
        "doc:downloaditemondone",
        "doc:downloadItem.on('done')"
      ]
    },
    {
      "objectID": "api-global-shortcut#globalshortcutregisteraccelerator-callback",
      "name": "register",
      "signature": "(accelerator, callback)",
      "description": "Whether or not the shortcut was registered successfully.\n\nRegisters a global shortcut of `accelerator`. The `callback` is called when the registered shortcut is pressed by the user.\n\nWhen the accelerator is already taken by other applications, this call will silently fail. This behavior is intended by operating systems, since they don't want applications to fight for global shortcuts.\n\nThe following accelerators will not be registered successfully on macOS 10.14 Mojave unless the app has been authorized as a trusted accessibility client:\n\n* \"Media Play/Pause\"\n* \"Media Next Track\"\n* \"Media Previous Track\"\n* \"Media Stop\"",
      "parameters": [
        {
          "name": "accelerator",
          "description": "",
          "required": true,
          "collection": false,
          "type": "Accelerator"
        },
        {
          "name": "callback",
          "description": "",
          "required": true,
          "collection": false,
          "type": "Function",
          "parameters": [],
          "returns": null
        }
      ],
      "returns": {
        "collection": false,
        "type": "Boolean"
      },
      "additionalTags": [],
      "apiType": "methods",
      "fullSignature": "globalShortcut.register(accelerator, callback)",
      "tldr": "Whether or not the shortcut was registered successfully.\n\nRegisters a global shortcut of `accelerator`.",
      "slug": "globalshortcutregisteraccelerator-callback",
      "url": "https://electronjs.org/docs/api/global-shortcut#globalshortcutregisteraccelerator-callback",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:register",
        "api:globalshortcutregisteraccelerator-callback",
        "api:globalShortcut.register(accelerator, callback)",
        "doc:register",
        "doc:globalshortcutregisteraccelerator-callback",
        "doc:globalShortcut.register(accelerator, callback)"
      ]
    },
    {
      "objectID": "api-global-shortcut#globalshortcutregisterallaccelerators-callback",
      "name": "registerAll",
      "signature": "(accelerators, callback)",
      "description": "Registers a global shortcut of all `accelerator` items in `accelerators`. The `callback` is called when any of the registered shortcuts are pressed by the user.\n\nWhen a given accelerator is already taken by other applications, this call will silently fail. This behavior is intended by operating systems, since they don't want applications to fight for global shortcuts.\n\nThe following accelerators will not be registered successfully on macOS 10.14 Mojave unless the app has been authorized as a trusted accessibility client:\n\n* \"Media Play/Pause\"\n* \"Media Next Track\"\n* \"Media Previous Track\"\n* \"Media Stop\"",
      "parameters": [
        {
          "name": "accelerators",
          "description": "an array of Accelerators.",
          "required": true,
          "collection": true,
          "type": "String",
          "possibleValues": null
        },
        {
          "name": "callback",
          "description": "",
          "required": true,
          "collection": false,
          "type": "Function",
          "parameters": [],
          "returns": null
        }
      ],
      "returns": null,
      "additionalTags": [],
      "apiType": "methods",
      "fullSignature": "globalShortcut.registerAll(accelerators, callback)",
      "tldr": "Registers a global shortcut of all `accelerator` items in `accelerators`.",
      "slug": "globalshortcutregisterallaccelerators-callback",
      "url": "https://electronjs.org/docs/api/global-shortcut#globalshortcutregisterallaccelerators-callback",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:registerAll",
        "api:globalshortcutregisterallaccelerators-callback",
        "api:globalShortcut.registerAll(accelerators, callback)",
        "doc:registerAll",
        "doc:globalshortcutregisterallaccelerators-callback",
        "doc:globalShortcut.registerAll(accelerators, callback)"
      ]
    },
    {
      "objectID": "api-global-shortcut#globalshortcutisregisteredaccelerator",
      "name": "isRegistered",
      "signature": "(accelerator)",
      "description": "Whether this application has registered `accelerator`.\n\nWhen the accelerator is already taken by other applications, this call will still return `false`. This behavior is intended by operating systems, since they don't want applications to fight for global shortcuts.",
      "parameters": [
        {
          "name": "accelerator",
          "description": "",
          "required": true,
          "collection": false,
          "type": "Accelerator"
        }
      ],
      "returns": {
        "collection": false,
        "type": "Boolean"
      },
      "additionalTags": [],
      "apiType": "methods",
      "fullSignature": "globalShortcut.isRegistered(accelerator)",
      "tldr": "Whether this application has registered `accelerator`.\n\nWhen the accelerator is already taken by other applications, this call will still return `false`.",
      "slug": "globalshortcutisregisteredaccelerator",
      "url": "https://electronjs.org/docs/api/global-shortcut#globalshortcutisregisteredaccelerator",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:isRegistered",
        "api:globalshortcutisregisteredaccelerator",
        "api:globalShortcut.isRegistered(accelerator)",
        "doc:isRegistered",
        "doc:globalshortcutisregisteredaccelerator",
        "doc:globalShortcut.isRegistered(accelerator)"
      ]
    },
    {
      "objectID": "api-global-shortcut#globalshortcutunregisteraccelerator",
      "name": "unregister",
      "signature": "(accelerator)",
      "description": "Unregisters the global shortcut of `accelerator`.",
      "parameters": [
        {
          "name": "accelerator",
          "description": "",
          "required": true,
          "collection": false,
          "type": "Accelerator"
        }
      ],
      "returns": null,
      "additionalTags": [],
      "apiType": "methods",
      "fullSignature": "globalShortcut.unregister(accelerator)",
      "tldr": "Unregisters the global shortcut of `accelerator`.",
      "slug": "globalshortcutunregisteraccelerator",
      "url": "https://electronjs.org/docs/api/global-shortcut#globalshortcutunregisteraccelerator",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:unregister",
        "api:globalshortcutunregisteraccelerator",
        "api:globalShortcut.unregister(accelerator)",
        "doc:unregister",
        "doc:globalshortcutunregisteraccelerator",
        "doc:globalShortcut.unregister(accelerator)"
      ]
    },
    {
      "objectID": "api-global-shortcut#globalshortcutunregisterall",
      "name": "unregisterAll",
      "signature": "()",
      "description": "Unregisters all of the global shortcuts.",
      "parameters": [],
      "returns": null,
      "additionalTags": [],
      "apiType": "methods",
      "fullSignature": "globalShortcut.unregisterAll()",
      "tldr": "Unregisters all of the global shortcuts.",
      "slug": "globalshortcutunregisterall",
      "url": "https://electronjs.org/docs/api/global-shortcut#globalshortcutunregisterall",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:unregisterAll",
        "api:globalshortcutunregisterall",
        "api:globalShortcut.unregisterAll()",
        "doc:unregisterAll",
        "doc:globalshortcutunregisterall",
        "doc:globalShortcut.unregisterAll()"
      ]
    },
    {
      "objectID": "api-in-app-purchase#inapppurchasepurchaseproductproductid-quantity",
      "name": "purchaseProduct",
      "signature": "(productID[, quantity])",
      "description": "Returns `true` if the product is valid and added to the payment queue.\n\nYou should listen for the `transactions-updated` event as soon as possible and certainly before you call `purchaseProduct`.",
      "parameters": [
        {
          "name": "productID",
          "description": "The identifiers of the product to purchase. (The identifier of `com.example.app.product1` is `product1`).",
          "required": true,
          "collection": false,
          "type": "String",
          "possibleValues": null
        },
        {
          "name": "quantity",
          "description": "The number of items the user wants to purchase.",
          "required": false,
          "collection": false,
          "type": "Integer"
        }
      ],
      "returns": {
        "collection": false,
        "type": "Promise",
        "innerTypes": [
          {
            "collection": false,
            "type": "Boolean"
          }
        ]
      },
      "additionalTags": [],
      "apiType": "methods",
      "fullSignature": "inAppPurchase.purchaseProduct(productID[, quantity])",
      "tldr": "Returns `true` if the product is valid and added to the payment queue.\n\nYou should listen for the `transactions-updated` event as soon as possible and certainly before you call `purchaseProduct`.",
      "slug": "inapppurchasepurchaseproductproductid-quantity",
      "url": "https://electronjs.org/docs/api/in-app-purchase#inapppurchasepurchaseproductproductid-quantity",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:purchaseProduct",
        "api:inapppurchasepurchaseproductproductid-quantity",
        "api:inAppPurchase.purchaseProduct(productID[, quantity])",
        "doc:purchaseProduct",
        "doc:inapppurchasepurchaseproductproductid-quantity",
        "doc:inAppPurchase.purchaseProduct(productID[, quantity])"
      ]
    },
    {
      "objectID": "api-in-app-purchase#inapppurchasegetproductsproductids",
      "name": "getProducts",
      "signature": "(productIDs)",
      "description": "Resolves with an array of `Product` objects.\n\nRetrieves the product descriptions.",
      "parameters": [
        {
          "name": "productIDs",
          "description": "The identifiers of the products to get.",
          "required": true,
          "collection": true,
          "type": "String",
          "possibleValues": null
        }
      ],
      "returns": {
        "collection": false,
        "type": "Promise",
        "innerTypes": [
          {
            "collection": true,
            "type": "Product"
          }
        ]
      },
      "additionalTags": [],
      "apiType": "methods",
      "fullSignature": "inAppPurchase.getProducts(productIDs)",
      "tldr": "Resolves with an array of `Product` objects.\n\nRetrieves the product descriptions.",
      "slug": "inapppurchasegetproductsproductids",
      "url": "https://electronjs.org/docs/api/in-app-purchase#inapppurchasegetproductsproductids",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:getProducts",
        "api:inapppurchasegetproductsproductids",
        "api:inAppPurchase.getProducts(productIDs)",
        "doc:getProducts",
        "doc:inapppurchasegetproductsproductids",
        "doc:inAppPurchase.getProducts(productIDs)"
      ]
    },
    {
      "objectID": "api-in-app-purchase#inapppurchasecanmakepayments",
      "name": "canMakePayments",
      "signature": "()",
      "description": "whether a user can make a payment.",
      "parameters": [],
      "returns": {
        "collection": false,
        "type": "Boolean"
      },
      "additionalTags": [],
      "apiType": "methods",
      "fullSignature": "inAppPurchase.canMakePayments()",
      "tldr": "whether a user can make a payment.",
      "slug": "inapppurchasecanmakepayments",
      "url": "https://electronjs.org/docs/api/in-app-purchase#inapppurchasecanmakepayments",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:canMakePayments",
        "api:inapppurchasecanmakepayments",
        "api:inAppPurchase.canMakePayments()",
        "doc:canMakePayments",
        "doc:inapppurchasecanmakepayments",
        "doc:inAppPurchase.canMakePayments()"
      ]
    },
    {
      "objectID": "api-in-app-purchase#inapppurchasegetreceipturl",
      "name": "getReceiptURL",
      "signature": "()",
      "description": "the path to the receipt.",
      "parameters": [],
      "returns": {
        "collection": false,
        "type": "String",
        "possibleValues": null
      },
      "additionalTags": [],
      "apiType": "methods",
      "fullSignature": "inAppPurchase.getReceiptURL()",
      "tldr": "the path to the receipt.",
      "slug": "inapppurchasegetreceipturl",
      "url": "https://electronjs.org/docs/api/in-app-purchase#inapppurchasegetreceipturl",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:getReceiptURL",
        "api:inapppurchasegetreceipturl",
        "api:inAppPurchase.getReceiptURL()",
        "doc:getReceiptURL",
        "doc:inapppurchasegetreceipturl",
        "doc:inAppPurchase.getReceiptURL()"
      ]
    },
    {
      "objectID": "api-in-app-purchase#inapppurchasefinishalltransactions",
      "name": "finishAllTransactions",
      "signature": "()",
      "description": "Completes all pending transactions.",
      "parameters": [],
      "returns": null,
      "additionalTags": [],
      "apiType": "methods",
      "fullSignature": "inAppPurchase.finishAllTransactions()",
      "tldr": "Completes all pending transactions.",
      "slug": "inapppurchasefinishalltransactions",
      "url": "https://electronjs.org/docs/api/in-app-purchase#inapppurchasefinishalltransactions",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:finishAllTransactions",
        "api:inapppurchasefinishalltransactions",
        "api:inAppPurchase.finishAllTransactions()",
        "doc:finishAllTransactions",
        "doc:inapppurchasefinishalltransactions",
        "doc:inAppPurchase.finishAllTransactions()"
      ]
    },
    {
      "objectID": "api-in-app-purchase#inapppurchasefinishtransactionbydatedate",
      "name": "finishTransactionByDate",
      "signature": "(date)",
      "description": "Completes the pending transactions corresponding to the date.",
      "parameters": [
        {
          "name": "date",
          "description": "The ISO formatted date of the transaction to finish.",
          "required": true,
          "collection": false,
          "type": "String",
          "possibleValues": null
        }
      ],
      "returns": null,
      "additionalTags": [],
      "apiType": "methods",
      "fullSignature": "inAppPurchase.finishTransactionByDate(date)",
      "tldr": "Completes the pending transactions corresponding to the date.",
      "slug": "inapppurchasefinishtransactionbydatedate",
      "url": "https://electronjs.org/docs/api/in-app-purchase#inapppurchasefinishtransactionbydatedate",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:finishTransactionByDate",
        "api:inapppurchasefinishtransactionbydatedate",
        "api:inAppPurchase.finishTransactionByDate(date)",
        "doc:finishTransactionByDate",
        "doc:inapppurchasefinishtransactionbydatedate",
        "doc:inAppPurchase.finishTransactionByDate(date)"
      ]
    },
    {
      "objectID": "api-in-app-purchase#event-transactions-updated",
      "name": "transactions-updated",
      "description": "",
      "parameters": [],
      "additionalTags": [],
      "apiType": "event",
      "fullSignature": "inAppPurchase.on('transactions-updated')",
      "url": "https://electronjs.org/docs/api/in-app-purchase#event-transactions-updated",
      "slug": "inapppurchaseontransactions-updated",
      "tldr": null,
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:transactions-updated",
        "api:inapppurchaseontransactions-updated",
        "api:inAppPurchase.on('transactions-updated')",
        "doc:transactions-updated",
        "doc:inapppurchaseontransactions-updated",
        "doc:inAppPurchase.on('transactions-updated')"
      ]
    },
    {
      "objectID": "api-incoming-message#incomingmessagestatuscode",
      "name": "statusCode",
      "description": "An `Integer` indicating the HTTP response status code.",
      "required": true,
      "additionalTags": [],
      "collection": false,
      "type": "Integer",
      "apiType": "instanceProperties",
      "fullSignature": "IncomingMessage.statusCode",
      "tldr": "An `Integer` indicating the HTTP response status code.",
      "slug": "incomingmessagestatuscode",
      "url": "https://electronjs.org/docs/api/incoming-message#incomingmessagestatuscode",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:statusCode",
        "api:incomingmessagestatuscode",
        "api:IncomingMessage.statusCode",
        "doc:statusCode",
        "doc:incomingmessagestatuscode",
        "doc:IncomingMessage.statusCode"
      ]
    },
    {
      "objectID": "api-incoming-message#incomingmessagestatusmessage",
      "name": "statusMessage",
      "description": "A `String` representing the HTTP status message.",
      "required": true,
      "additionalTags": [],
      "collection": false,
      "type": "String",
      "possibleValues": null,
      "apiType": "instanceProperties",
      "fullSignature": "IncomingMessage.statusMessage",
      "tldr": "A `String` representing the HTTP status message.",
      "slug": "incomingmessagestatusmessage",
      "url": "https://electronjs.org/docs/api/incoming-message#incomingmessagestatusmessage",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:statusMessage",
        "api:incomingmessagestatusmessage",
        "api:IncomingMessage.statusMessage",
        "doc:statusMessage",
        "doc:incomingmessagestatusmessage",
        "doc:IncomingMessage.statusMessage"
      ]
    },
    {
      "objectID": "api-incoming-message#incomingmessageheaders",
      "name": "headers",
      "description": "An `Record<string, string[]>` representing the response HTTP headers. The `headers` object is formatted as follows:\n\n* All header names are lowercased.\n* Each header name produces an array-valued property on the headers object.\n* Each header value is pushed into the array associated with its header name.",
      "required": true,
      "additionalTags": [],
      "collection": false,
      "type": "Record",
      "innerTypes": [
        {
          "collection": false,
          "type": "string"
        },
        {
          "collection": true,
          "type": "string"
        }
      ],
      "apiType": "instanceProperties",
      "fullSignature": "IncomingMessage.headers",
      "tldr": "An `Record<string, string[]>` representing the response HTTP headers.",
      "slug": "incomingmessageheaders",
      "url": "https://electronjs.org/docs/api/incoming-message#incomingmessageheaders",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:headers",
        "api:incomingmessageheaders",
        "api:IncomingMessage.headers",
        "doc:headers",
        "doc:incomingmessageheaders",
        "doc:IncomingMessage.headers"
      ]
    },
    {
      "objectID": "api-incoming-message#incomingmessagehttpversion",
      "name": "httpVersion",
      "description": "A `String` indicating the HTTP protocol version number. Typical values are '1.0' or '1.1'. Additionally `httpVersionMajor` and `httpVersionMinor` are two Integer-valued readable properties that return respectively the HTTP major and minor version numbers.",
      "required": true,
      "additionalTags": [],
      "collection": false,
      "type": "String",
      "possibleValues": null,
      "apiType": "instanceProperties",
      "fullSignature": "IncomingMessage.httpVersion",
      "tldr": "A `String` indicating the HTTP protocol version number.",
      "slug": "incomingmessagehttpversion",
      "url": "https://electronjs.org/docs/api/incoming-message#incomingmessagehttpversion",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:httpVersion",
        "api:incomingmessagehttpversion",
        "api:IncomingMessage.httpVersion",
        "doc:httpVersion",
        "doc:incomingmessagehttpversion",
        "doc:IncomingMessage.httpVersion"
      ]
    },
    {
      "objectID": "api-incoming-message#incomingmessagehttpversionmajor",
      "name": "httpVersionMajor",
      "description": "An `Integer` indicating the HTTP protocol major version number.",
      "required": true,
      "additionalTags": [],
      "collection": false,
      "type": "Integer",
      "apiType": "instanceProperties",
      "fullSignature": "IncomingMessage.httpVersionMajor",
      "tldr": "An `Integer` indicating the HTTP protocol major version number.",
      "slug": "incomingmessagehttpversionmajor",
      "url": "https://electronjs.org/docs/api/incoming-message#incomingmessagehttpversionmajor",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:httpVersionMajor",
        "api:incomingmessagehttpversionmajor",
        "api:IncomingMessage.httpVersionMajor",
        "doc:httpVersionMajor",
        "doc:incomingmessagehttpversionmajor",
        "doc:IncomingMessage.httpVersionMajor"
      ]
    },
    {
      "objectID": "api-incoming-message#incomingmessagehttpversionminor",
      "name": "httpVersionMinor",
      "description": "An `Integer` indicating the HTTP protocol minor version number.",
      "required": true,
      "additionalTags": [],
      "collection": false,
      "type": "Integer",
      "apiType": "instanceProperties",
      "fullSignature": "IncomingMessage.httpVersionMinor",
      "tldr": "An `Integer` indicating the HTTP protocol minor version number.",
      "slug": "incomingmessagehttpversionminor",
      "url": "https://electronjs.org/docs/api/incoming-message#incomingmessagehttpversionminor",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:httpVersionMinor",
        "api:incomingmessagehttpversionminor",
        "api:IncomingMessage.httpVersionMinor",
        "doc:httpVersionMinor",
        "doc:incomingmessagehttpversionminor",
        "doc:IncomingMessage.httpVersionMinor"
      ]
    },
    {
      "objectID": "api-incoming-message#event-data",
      "name": "data",
      "description": "The `data` event is the usual method of transferring response data into applicative code.",
      "parameters": [
        {
          "name": "chunk",
          "description": "A chunk of response body's data.",
          "collection": false,
          "type": "Buffer",
          "required": true
        }
      ],
      "additionalTags": [],
      "apiType": "event",
      "fullSignature": "incomingMessage.on('data')",
      "url": "https://electronjs.org/docs/api/incoming-message#event-data",
      "slug": "incomingmessageondata",
      "tldr": "The `data` event is the usual method of transferring response data into applicative code.",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:data",
        "api:incomingmessageondata",
        "api:incomingMessage.on('data')",
        "doc:data",
        "doc:incomingmessageondata",
        "doc:incomingMessage.on('data')"
      ]
    },
    {
      "objectID": "api-incoming-message#event-end",
      "name": "end",
      "description": "Indicates that response body has ended.",
      "parameters": [],
      "additionalTags": [],
      "apiType": "event",
      "fullSignature": "incomingMessage.on('end')",
      "url": "https://electronjs.org/docs/api/incoming-message#event-end",
      "slug": "incomingmessageonend",
      "tldr": "Indicates that response body has ended.",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:end",
        "api:incomingmessageonend",
        "api:incomingMessage.on('end')",
        "doc:end",
        "doc:incomingmessageonend",
        "doc:incomingMessage.on('end')"
      ]
    },
    {
      "objectID": "api-incoming-message#event-aborted",
      "name": "aborted",
      "description": "Emitted when a request has been canceled during an ongoing HTTP transaction.",
      "parameters": [],
      "additionalTags": [],
      "apiType": "event",
      "fullSignature": "incomingMessage.on('aborted')",
      "url": "https://electronjs.org/docs/api/incoming-message#event-aborted",
      "slug": "incomingmessageonaborted",
      "tldr": "Emitted when a request has been canceled during an ongoing HTTP transaction.",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:aborted",
        "api:incomingmessageonaborted",
        "api:incomingMessage.on('aborted')",
        "doc:aborted",
        "doc:incomingmessageonaborted",
        "doc:incomingMessage.on('aborted')"
      ]
    },
    {
      "objectID": "api-incoming-message#event-error",
      "name": "error",
      "description": "Returns:\n\n`error` Error - Typically holds an error string identifying failure root cause.\n\nEmitted when an error was encountered while streaming response data events. For instance, if the server closes the underlying while the response is still streaming, an `error` event will be emitted on the response object and a `close` event will subsequently follow on the request object.",
      "parameters": [],
      "additionalTags": [],
      "apiType": "event",
      "fullSignature": "incomingMessage.on('error')",
      "url": "https://electronjs.org/docs/api/incoming-message#event-error",
      "slug": "incomingmessageonerror",
      "tldr": "Returns:\n\n`error` Error - Typically holds an error string identifying failure root cause.\n\nEmitted when an error was encountered while streaming response data events.",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:error",
        "api:incomingmessageonerror",
        "api:incomingMessage.on('error')",
        "doc:error",
        "doc:incomingmessageonerror",
        "doc:incomingMessage.on('error')"
      ]
    },
    {
      "objectID": "api-ipc-main#ipcmainonchannel-listener",
      "name": "on",
      "signature": "(channel, listener)",
      "description": "Listens to `channel`, when a new message arrives `listener` would be called with `listener(event, args...)`.",
      "parameters": [
        {
          "name": "channel",
          "description": "",
          "required": true,
          "collection": false,
          "type": "String",
          "possibleValues": null
        },
        {
          "name": "listener",
          "description": "",
          "required": true,
          "collection": false,
          "type": "Function",
          "parameters": [
            {
              "name": "event",
              "description": "",
              "required": true,
              "collection": false,
              "type": "IpcMainEvent"
            },
            {
              "name": "...args",
              "description": "",
              "required": true,
              "collection": true,
              "type": "any"
            }
          ],
          "returns": null
        }
      ],
      "returns": null,
      "additionalTags": [],
      "apiType": "methods",
      "fullSignature": "ipcMain.on(channel, listener)",
      "tldr": "Listens to `channel`, when a new message arrives `listener` would be called with `listener(event, args...)`.",
      "slug": "ipcmainonchannel-listener",
      "url": "https://electronjs.org/docs/api/ipc-main#ipcmainonchannel-listener",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:on",
        "api:ipcmainonchannel-listener",
        "api:ipcMain.on(channel, listener)",
        "doc:on",
        "doc:ipcmainonchannel-listener",
        "doc:ipcMain.on(channel, listener)"
      ]
    },
    {
      "objectID": "api-ipc-main#ipcmainoncechannel-listener",
      "name": "once",
      "signature": "(channel, listener)",
      "description": "Adds a one time `listener` function for the event. This `listener` is invoked only the next time a message is sent to `channel`, after which it is removed.",
      "parameters": [
        {
          "name": "channel",
          "description": "",
          "required": true,
          "collection": false,
          "type": "String",
          "possibleValues": null
        },
        {
          "name": "listener",
          "description": "",
          "required": true,
          "collection": false,
          "type": "Function",
          "parameters": [
            {
              "name": "event",
              "description": "",
              "required": true,
              "collection": false,
              "type": "IpcMainEvent"
            },
            {
              "name": "...args",
              "description": "",
              "required": true,
              "collection": true,
              "type": "any"
            }
          ],
          "returns": null
        }
      ],
      "returns": null,
      "additionalTags": [],
      "apiType": "methods",
      "fullSignature": "ipcMain.once(channel, listener)",
      "tldr": "Adds a one time `listener` function for the event.",
      "slug": "ipcmainoncechannel-listener",
      "url": "https://electronjs.org/docs/api/ipc-main#ipcmainoncechannel-listener",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:once",
        "api:ipcmainoncechannel-listener",
        "api:ipcMain.once(channel, listener)",
        "doc:once",
        "doc:ipcmainoncechannel-listener",
        "doc:ipcMain.once(channel, listener)"
      ]
    },
    {
      "objectID": "api-ipc-main#ipcmainremovelistenerchannel-listener",
      "name": "removeListener",
      "signature": "(channel, listener)",
      "description": "Removes the specified `listener` from the listener array for the specified `channel`.",
      "parameters": [
        {
          "name": "channel",
          "description": "",
          "required": true,
          "collection": false,
          "type": "String",
          "possibleValues": null
        },
        {
          "name": "listener",
          "description": "",
          "required": true,
          "collection": false,
          "type": "Function",
          "parameters": [
            {
              "name": "...args",
              "description": "",
              "required": true,
              "collection": true,
              "type": "any"
            }
          ],
          "returns": null
        }
      ],
      "returns": null,
      "additionalTags": [],
      "apiType": "methods",
      "fullSignature": "ipcMain.removeListener(channel, listener)",
      "tldr": "Removes the specified `listener` from the listener array for the specified `channel`.",
      "slug": "ipcmainremovelistenerchannel-listener",
      "url": "https://electronjs.org/docs/api/ipc-main#ipcmainremovelistenerchannel-listener",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:removeListener",
        "api:ipcmainremovelistenerchannel-listener",
        "api:ipcMain.removeListener(channel, listener)",
        "doc:removeListener",
        "doc:ipcmainremovelistenerchannel-listener",
        "doc:ipcMain.removeListener(channel, listener)"
      ]
    },
    {
      "objectID": "api-ipc-main#ipcmainremovealllistenerschannel",
      "name": "removeAllListeners",
      "signature": "([channel])",
      "description": "Removes listeners of the specified `channel`.",
      "parameters": [
        {
          "name": "channel",
          "description": "",
          "required": false,
          "collection": false,
          "type": "String",
          "possibleValues": null
        }
      ],
      "returns": null,
      "additionalTags": [],
      "apiType": "methods",
      "fullSignature": "ipcMain.removeAllListeners([channel])",
      "tldr": "Removes listeners of the specified `channel`.",
      "slug": "ipcmainremovealllistenerschannel",
      "url": "https://electronjs.org/docs/api/ipc-main#ipcmainremovealllistenerschannel",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:removeAllListeners",
        "api:ipcmainremovealllistenerschannel",
        "api:ipcMain.removeAllListeners([channel])",
        "doc:removeAllListeners",
        "doc:ipcmainremovealllistenerschannel",
        "doc:ipcMain.removeAllListeners([channel])"
      ]
    },
    {
      "objectID": "api-ipc-main#ipcmainhandlechannel-listener",
      "name": "handle",
      "signature": "(channel, listener)",
      "description": "Adds a handler for an `invoke`able IPC. This handler will be called whenever a renderer calls `ipcRenderer.invoke(channel, ...args)`.\n\nIf `listener` returns a Promise, the eventual result of the promise will be returned as a reply to the remote caller. Otherwise, the return value of the listener will be used as the value of the reply.\n\nThe `event` that is passed as the first argument to the handler is the same as that passed to a regular event listener. It includes information about which WebContents is the source of the invoke request.",
      "parameters": [
        {
          "name": "channel",
          "description": "",
          "required": true,
          "collection": false,
          "type": "String",
          "possibleValues": null
        },
        {
          "name": "listener",
          "description": "",
          "required": true,
          "collection": false,
          "type": "Function",
          "parameters": [
            {
              "name": "event",
              "description": "",
              "required": true,
              "collection": false,
              "type": "IpcMainInvokeEvent"
            },
            {
              "name": "...args",
              "description": "",
              "required": true,
              "collection": true,
              "type": "any"
            }
          ],
          "returns": {
            "collection": false,
            "type": [
              {
                "collection": false,
                "type": "Promise",
                "innerTypes": [
                  {
                    "collection": false,
                    "type": "void"
                  }
                ]
              },
              {
                "collection": false,
                "type": "any"
              }
            ]
          }
        }
      ],
      "returns": null,
      "additionalTags": [],
      "apiType": "methods",
      "fullSignature": "ipcMain.handle(channel, listener)",
      "tldr": "Adds a handler for an `invoke`able IPC.",
      "slug": "ipcmainhandlechannel-listener",
      "url": "https://electronjs.org/docs/api/ipc-main#ipcmainhandlechannel-listener",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:handle",
        "api:ipcmainhandlechannel-listener",
        "api:ipcMain.handle(channel, listener)",
        "doc:handle",
        "doc:ipcmainhandlechannel-listener",
        "doc:ipcMain.handle(channel, listener)"
      ]
    },
    {
      "objectID": "api-ipc-main#ipcmainhandleoncechannel-listener",
      "name": "handleOnce",
      "signature": "(channel, listener)",
      "description": "Handles a single `invoke`able IPC message, then removes the listener. See `ipcMain.handle(channel, listener)`.",
      "parameters": [
        {
          "name": "channel",
          "description": "",
          "required": true,
          "collection": false,
          "type": "String",
          "possibleValues": null
        },
        {
          "name": "listener",
          "description": "",
          "required": true,
          "collection": false,
          "type": "Function",
          "parameters": [
            {
              "name": "event",
              "description": "",
              "required": true,
              "collection": false,
              "type": "IpcMainInvokeEvent"
            },
            {
              "name": "...args",
              "description": "",
              "required": true,
              "collection": true,
              "type": "any"
            }
          ],
          "returns": {
            "collection": false,
            "type": [
              {
                "collection": false,
                "type": "Promise",
                "innerTypes": [
                  {
                    "collection": false,
                    "type": "void"
                  }
                ]
              },
              {
                "collection": false,
                "type": "any"
              }
            ]
          }
        }
      ],
      "returns": null,
      "additionalTags": [],
      "apiType": "methods",
      "fullSignature": "ipcMain.handleOnce(channel, listener)",
      "tldr": "Handles a single `invoke`able IPC message, then removes the listener.",
      "slug": "ipcmainhandleoncechannel-listener",
      "url": "https://electronjs.org/docs/api/ipc-main#ipcmainhandleoncechannel-listener",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:handleOnce",
        "api:ipcmainhandleoncechannel-listener",
        "api:ipcMain.handleOnce(channel, listener)",
        "doc:handleOnce",
        "doc:ipcmainhandleoncechannel-listener",
        "doc:ipcMain.handleOnce(channel, listener)"
      ]
    },
    {
      "objectID": "api-ipc-main#ipcmainremovehandlerchannel",
      "name": "removeHandler",
      "signature": "(channel)",
      "description": "Removes any handler for `channel`, if present.",
      "parameters": [
        {
          "name": "channel",
          "description": "",
          "required": true,
          "collection": false,
          "type": "String",
          "possibleValues": null
        }
      ],
      "returns": null,
      "additionalTags": [],
      "apiType": "methods",
      "fullSignature": "ipcMain.removeHandler(channel)",
      "tldr": "Removes any handler for `channel`, if present.",
      "slug": "ipcmainremovehandlerchannel",
      "url": "https://electronjs.org/docs/api/ipc-main#ipcmainremovehandlerchannel",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:removeHandler",
        "api:ipcmainremovehandlerchannel",
        "api:ipcMain.removeHandler(channel)",
        "doc:removeHandler",
        "doc:ipcmainremovehandlerchannel",
        "doc:ipcMain.removeHandler(channel)"
      ]
    },
    {
      "objectID": "api-ipc-renderer#ipcrendereronchannel-listener",
      "name": "on",
      "signature": "(channel, listener)",
      "description": "Listens to `channel`, when a new message arrives `listener` would be called with `listener(event, args...)`.",
      "parameters": [
        {
          "name": "channel",
          "description": "",
          "required": true,
          "collection": false,
          "type": "String",
          "possibleValues": null
        },
        {
          "name": "listener",
          "description": "",
          "required": true,
          "collection": false,
          "type": "Function",
          "parameters": [
            {
              "name": "event",
              "description": "",
              "required": true,
              "collection": false,
              "type": "IpcRendererEvent"
            },
            {
              "name": "...args",
              "description": "",
              "required": true,
              "collection": true,
              "type": "any"
            }
          ],
          "returns": null
        }
      ],
      "returns": null,
      "additionalTags": [],
      "apiType": "methods",
      "fullSignature": "ipcRenderer.on(channel, listener)",
      "tldr": "Listens to `channel`, when a new message arrives `listener` would be called with `listener(event, args...)`.",
      "slug": "ipcrendereronchannel-listener",
      "url": "https://electronjs.org/docs/api/ipc-renderer#ipcrendereronchannel-listener",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:on",
        "api:ipcrendereronchannel-listener",
        "api:ipcRenderer.on(channel, listener)",
        "doc:on",
        "doc:ipcrendereronchannel-listener",
        "doc:ipcRenderer.on(channel, listener)"
      ]
    },
    {
      "objectID": "api-ipc-renderer#ipcrendereroncechannel-listener",
      "name": "once",
      "signature": "(channel, listener)",
      "description": "Adds a one time `listener` function for the event. This `listener` is invoked only the next time a message is sent to `channel`, after which it is removed.",
      "parameters": [
        {
          "name": "channel",
          "description": "",
          "required": true,
          "collection": false,
          "type": "String",
          "possibleValues": null
        },
        {
          "name": "listener",
          "description": "",
          "required": true,
          "collection": false,
          "type": "Function",
          "parameters": [
            {
              "name": "event",
              "description": "",
              "required": true,
              "collection": false,
              "type": "IpcRendererEvent"
            },
            {
              "name": "...args",
              "description": "",
              "required": true,
              "collection": true,
              "type": "any"
            }
          ],
          "returns": null
        }
      ],
      "returns": null,
      "additionalTags": [],
      "apiType": "methods",
      "fullSignature": "ipcRenderer.once(channel, listener)",
      "tldr": "Adds a one time `listener` function for the event.",
      "slug": "ipcrendereroncechannel-listener",
      "url": "https://electronjs.org/docs/api/ipc-renderer#ipcrendereroncechannel-listener",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:once",
        "api:ipcrendereroncechannel-listener",
        "api:ipcRenderer.once(channel, listener)",
        "doc:once",
        "doc:ipcrendereroncechannel-listener",
        "doc:ipcRenderer.once(channel, listener)"
      ]
    },
    {
      "objectID": "api-ipc-renderer#ipcrendererremovelistenerchannel-listener",
      "name": "removeListener",
      "signature": "(channel, listener)",
      "description": "Removes the specified `listener` from the listener array for the specified `channel`.",
      "parameters": [
        {
          "name": "channel",
          "description": "",
          "required": true,
          "collection": false,
          "type": "String",
          "possibleValues": null
        },
        {
          "name": "listener",
          "description": "",
          "required": true,
          "collection": false,
          "type": "Function",
          "parameters": [
            {
              "name": "...args",
              "description": "",
              "required": true,
              "collection": true,
              "type": "any"
            }
          ],
          "returns": null
        }
      ],
      "returns": null,
      "additionalTags": [],
      "apiType": "methods",
      "fullSignature": "ipcRenderer.removeListener(channel, listener)",
      "tldr": "Removes the specified `listener` from the listener array for the specified `channel`.",
      "slug": "ipcrendererremovelistenerchannel-listener",
      "url": "https://electronjs.org/docs/api/ipc-renderer#ipcrendererremovelistenerchannel-listener",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:removeListener",
        "api:ipcrendererremovelistenerchannel-listener",
        "api:ipcRenderer.removeListener(channel, listener)",
        "doc:removeListener",
        "doc:ipcrendererremovelistenerchannel-listener",
        "doc:ipcRenderer.removeListener(channel, listener)"
      ]
    },
    {
      "objectID": "api-ipc-renderer#ipcrendererremovealllistenerschannel",
      "name": "removeAllListeners",
      "signature": "(channel)",
      "description": "Removes all listeners, or those of the specified `channel`.",
      "parameters": [
        {
          "name": "channel",
          "description": "",
          "required": true,
          "collection": false,
          "type": "String",
          "possibleValues": null
        }
      ],
      "returns": null,
      "additionalTags": [],
      "apiType": "methods",
      "fullSignature": "ipcRenderer.removeAllListeners(channel)",
      "tldr": "Removes all listeners, or those of the specified `channel`.",
      "slug": "ipcrendererremovealllistenerschannel",
      "url": "https://electronjs.org/docs/api/ipc-renderer#ipcrendererremovealllistenerschannel",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:removeAllListeners",
        "api:ipcrendererremovealllistenerschannel",
        "api:ipcRenderer.removeAllListeners(channel)",
        "doc:removeAllListeners",
        "doc:ipcrendererremovealllistenerschannel",
        "doc:ipcRenderer.removeAllListeners(channel)"
      ]
    },
    {
      "objectID": "api-ipc-renderer#ipcrenderersendchannel-args",
      "name": "send",
      "signature": "(channel, ...args)",
      "description": "Send a message to the main process asynchronously via `channel`, you can also send arbitrary arguments. Arguments will be serialized as JSON internally and hence no functions or prototype chain will be included.\n\nThe main process handles it by listening for `channel` with the `ipcMain` module.",
      "parameters": [
        {
          "name": "channel",
          "description": "",
          "required": true,
          "collection": false,
          "type": "String",
          "possibleValues": null
        },
        {
          "name": "...args",
          "description": "",
          "required": true,
          "collection": true,
          "type": "any"
        }
      ],
      "returns": null,
      "additionalTags": [],
      "apiType": "methods",
      "fullSignature": "ipcRenderer.send(channel, ...args)",
      "tldr": "Send a message to the main process asynchronously via `channel`, you can also send arbitrary arguments.",
      "slug": "ipcrenderersendchannel-args",
      "url": "https://electronjs.org/docs/api/ipc-renderer#ipcrenderersendchannel-args",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:send",
        "api:ipcrenderersendchannel-args",
        "api:ipcRenderer.send(channel, ...args)",
        "doc:send",
        "doc:ipcrenderersendchannel-args",
        "doc:ipcRenderer.send(channel, ...args)"
      ]
    },
    {
      "objectID": "api-ipc-renderer#ipcrendererinvokechannel-args",
      "name": "invoke",
      "signature": "(channel, ...args)",
      "description": "Resolves with the response from the main process.\n\nSend a message to the main process asynchronously via `channel` and expect an asynchronous result. Arguments will be serialized as JSON internally and hence no functions or prototype chain will be included.\n\nThe main process should listen for `channel` with `ipcMain.handle()`.\n\nFor example:",
      "parameters": [
        {
          "name": "channel",
          "description": "",
          "required": true,
          "collection": false,
          "type": "String",
          "possibleValues": null
        },
        {
          "name": "...args",
          "description": "",
          "required": true,
          "collection": true,
          "type": "any"
        }
      ],
      "returns": {
        "collection": false,
        "type": "Promise",
        "innerTypes": [
          {
            "collection": false,
            "type": "any"
          }
        ]
      },
      "additionalTags": [],
      "apiType": "methods",
      "fullSignature": "ipcRenderer.invoke(channel, ...args)",
      "tldr": "Resolves with the response from the main process.\n\nSend a message to the main process asynchronously via `channel` and expect an asynchronous result.",
      "slug": "ipcrendererinvokechannel-args",
      "url": "https://electronjs.org/docs/api/ipc-renderer#ipcrendererinvokechannel-args",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:invoke",
        "api:ipcrendererinvokechannel-args",
        "api:ipcRenderer.invoke(channel, ...args)",
        "doc:invoke",
        "doc:ipcrendererinvokechannel-args",
        "doc:ipcRenderer.invoke(channel, ...args)"
      ]
    },
    {
      "objectID": "api-ipc-renderer#ipcrenderersendsyncchannel-args",
      "name": "sendSync",
      "signature": "(channel, ...args)",
      "description": "The value sent back by the `ipcMain` handler.\n\nSend a message to the main process synchronously via `channel`, you can also send arbitrary arguments. Arguments will be serialized in JSON internally and hence no functions or prototype chain will be included.\n\nThe main process handles it by listening for `channel` with `ipcMain` module, and replies by setting `event.returnValue`.\n\n**Note:** Sending a synchronous message will block the whole renderer process, unless you know what you are doing you should never use it.",
      "parameters": [
        {
          "name": "channel",
          "description": "",
          "required": true,
          "collection": false,
          "type": "String",
          "possibleValues": null
        },
        {
          "name": "...args",
          "description": "",
          "required": true,
          "collection": true,
          "type": "any"
        }
      ],
      "returns": {
        "collection": false,
        "type": "any"
      },
      "additionalTags": [],
      "apiType": "methods",
      "fullSignature": "ipcRenderer.sendSync(channel, ...args)",
      "tldr": "The value sent back by the `ipcMain` handler.\n\nSend a message to the main process synchronously via `channel`, you can also send arbitrary arguments.",
      "slug": "ipcrenderersendsyncchannel-args",
      "url": "https://electronjs.org/docs/api/ipc-renderer#ipcrenderersendsyncchannel-args",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:sendSync",
        "api:ipcrenderersendsyncchannel-args",
        "api:ipcRenderer.sendSync(channel, ...args)",
        "doc:sendSync",
        "doc:ipcrenderersendsyncchannel-args",
        "doc:ipcRenderer.sendSync(channel, ...args)"
      ]
    },
    {
      "objectID": "api-ipc-renderer#ipcrenderersendtowebcontentsid-channel-args",
      "name": "sendTo",
      "signature": "(webContentsId, channel, ...args)",
      "description": "Sends a message to a window with `webContentsId` via `channel`.",
      "parameters": [
        {
          "name": "webContentsId",
          "description": "",
          "required": true,
          "collection": false,
          "type": "Number"
        },
        {
          "name": "channel",
          "description": "",
          "required": true,
          "collection": false,
          "type": "String",
          "possibleValues": null
        },
        {
          "name": "...args",
          "description": "",
          "required": true,
          "collection": true,
          "type": "any"
        }
      ],
      "returns": null,
      "additionalTags": [],
      "apiType": "methods",
      "fullSignature": "ipcRenderer.sendTo(webContentsId, channel, ...args)",
      "tldr": "Sends a message to a window with `webContentsId` via `channel`.",
      "slug": "ipcrenderersendtowebcontentsid-channel-args",
      "url": "https://electronjs.org/docs/api/ipc-renderer#ipcrenderersendtowebcontentsid-channel-args",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:sendTo",
        "api:ipcrenderersendtowebcontentsid-channel-args",
        "api:ipcRenderer.sendTo(webContentsId, channel, ...args)",
        "doc:sendTo",
        "doc:ipcrenderersendtowebcontentsid-channel-args",
        "doc:ipcRenderer.sendTo(webContentsId, channel, ...args)"
      ]
    },
    {
      "objectID": "api-ipc-renderer#ipcrenderersendtohostchannel-args",
      "name": "sendToHost",
      "signature": "(channel, ...args)",
      "description": "Like `ipcRenderer.send` but the event will be sent to the `<webview>` element in the host page instead of the main process.",
      "parameters": [
        {
          "name": "channel",
          "description": "",
          "required": true,
          "collection": false,
          "type": "String",
          "possibleValues": null
        },
        {
          "name": "...args",
          "description": "",
          "required": true,
          "collection": true,
          "type": "any"
        }
      ],
      "returns": null,
      "additionalTags": [],
      "apiType": "methods",
      "fullSignature": "ipcRenderer.sendToHost(channel, ...args)",
      "tldr": "Like `ipcRenderer.send` but the event will be sent to the `<webview>` element in the host page instead of the main process.",
      "slug": "ipcrenderersendtohostchannel-args",
      "url": "https://electronjs.org/docs/api/ipc-renderer#ipcrenderersendtohostchannel-args",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:sendToHost",
        "api:ipcrenderersendtohostchannel-args",
        "api:ipcRenderer.sendToHost(channel, ...args)",
        "doc:sendToHost",
        "doc:ipcrenderersendtohostchannel-args",
        "doc:ipcRenderer.sendToHost(channel, ...args)"
      ]
    },
    {
      "objectID": "api-menu-item#menuitemid",
      "name": "id",
      "description": "A `String` indicating the item's unique id, this property can be dynamically changed.",
      "required": true,
      "additionalTags": [],
      "collection": false,
      "type": "String",
      "possibleValues": null,
      "apiType": "instanceProperties",
      "fullSignature": "MenuItem.id",
      "tldr": "A `String` indicating the item's unique id, this property can be dynamically changed.",
      "slug": "menuitemid",
      "url": "https://electronjs.org/docs/api/menu-item#menuitemid",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:id",
        "api:menuitemid",
        "api:MenuItem.id",
        "doc:id",
        "doc:menuitemid",
        "doc:MenuItem.id"
      ]
    },
    {
      "objectID": "api-menu-item#menuitemlabel",
      "name": "label",
      "description": "A `String` indicating the item's visible label, this property can be dynamically changed.",
      "required": true,
      "additionalTags": [],
      "collection": false,
      "type": "String",
      "possibleValues": null,
      "apiType": "instanceProperties",
      "fullSignature": "MenuItem.label",
      "tldr": "A `String` indicating the item's visible label, this property can be dynamically changed.",
      "slug": "menuitemlabel",
      "url": "https://electronjs.org/docs/api/menu-item#menuitemlabel",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:label",
        "api:menuitemlabel",
        "api:MenuItem.label",
        "doc:label",
        "doc:menuitemlabel",
        "doc:MenuItem.label"
      ]
    },
    {
      "objectID": "api-menu-item#menuitemclick",
      "name": "click",
      "description": "A `Function` that is fired when the MenuItem receives a click event. It can be called with `menuItem.click(event, focusedWindow, focusedWebContents)`.\n\n* `event` KeyboardEvent\n* `focusedWindow` BrowserWindow\n* `focusedWebContents` WebContents",
      "required": true,
      "additionalTags": [],
      "collection": false,
      "type": "Function",
      "parameters": [
        {
          "name": "event",
          "description": "",
          "required": true,
          "collection": false,
          "type": "KeyboardEvent"
        },
        {
          "name": "focusedWindow",
          "description": "",
          "required": true,
          "collection": false,
          "type": "BrowserWindow"
        },
        {
          "name": "focusedWebContents",
          "description": "",
          "required": true,
          "collection": false,
          "type": "WebContents"
        }
      ],
      "returns": null,
      "apiType": "instanceProperties",
      "fullSignature": "MenuItem.click",
      "tldr": "A `Function` that is fired when the MenuItem receives a click event.",
      "slug": "menuitemclick",
      "url": "https://electronjs.org/docs/api/menu-item#menuitemclick",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:click",
        "api:menuitemclick",
        "api:MenuItem.click",
        "doc:click",
        "doc:menuitemclick",
        "doc:MenuItem.click"
      ]
    },
    {
      "objectID": "api-menu-item#menuitemsubmenu",
      "name": "submenu",
      "description": "A `Menu` (optional) containing the menu item's submenu, if present.",
      "required": false,
      "additionalTags": [],
      "collection": false,
      "type": "Menu",
      "apiType": "instanceProperties",
      "fullSignature": "MenuItem.submenu",
      "tldr": "A `Menu` (optional) containing the menu item's submenu, if present.",
      "slug": "menuitemsubmenu",
      "url": "https://electronjs.org/docs/api/menu-item#menuitemsubmenu",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:submenu",
        "api:menuitemsubmenu",
        "api:MenuItem.submenu",
        "doc:submenu",
        "doc:menuitemsubmenu",
        "doc:MenuItem.submenu"
      ]
    },
    {
      "objectID": "api-menu-item#menuitemtype",
      "name": "type",
      "description": "A `String` indicating the type of the item. Can be `normal`, `separator`, `submenu`, `checkbox` or `radio`.",
      "required": true,
      "additionalTags": [],
      "collection": false,
      "type": "String",
      "possibleValues": [
        {
          "value": "normal",
          "description": ""
        },
        {
          "value": "separator",
          "description": ""
        },
        {
          "value": "submenu",
          "description": ""
        },
        {
          "value": "checkbox",
          "description": ""
        },
        {
          "value": "radio",
          "description": ""
        }
      ],
      "apiType": "instanceProperties",
      "fullSignature": "MenuItem.type",
      "tldr": "A `String` indicating the type of the item.",
      "slug": "menuitemtype",
      "url": "https://electronjs.org/docs/api/menu-item#menuitemtype",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:type",
        "api:menuitemtype",
        "api:MenuItem.type",
        "doc:type",
        "doc:menuitemtype",
        "doc:MenuItem.type"
      ]
    },
    {
      "objectID": "api-menu-item#menuitemrole",
      "name": "role",
      "description": "A `String` (optional) indicating the item's role, if set. Can be `undo`, `redo`, `cut`, `copy`, `paste`, `pasteAndMatchStyle`, `delete`, `selectAll`, `reload`, `forceReload`, `toggleDevTools`, `resetZoom`, `zoomIn`, `zoomOut`, `togglefullscreen`, `window`, `minimize`, `close`, `help`, `about`, `services`, `hide`, `hideOthers`, `unhide`, `quit`, `startSpeaking`, `stopSpeaking`, `close`, `minimize`, `zoom`, `front`, `appMenu`, `fileMenu`, `editMenu`, `viewMenu`, `recentDocuments`, `toggleTabBar`, `selectNextTab`, `selectPreviousTab`, `mergeAllWindows`, `clearRecentDocuments`, `moveTabToNewWindow` or `windowMenu`",
      "required": false,
      "additionalTags": [],
      "collection": false,
      "type": "String",
      "possibleValues": [
        {
          "value": "undo",
          "description": ""
        },
        {
          "value": "redo",
          "description": ""
        },
        {
          "value": "cut",
          "description": ""
        },
        {
          "value": "copy",
          "description": ""
        },
        {
          "value": "paste",
          "description": ""
        },
        {
          "value": "pasteAndMatchStyle",
          "description": ""
        },
        {
          "value": "delete",
          "description": ""
        },
        {
          "value": "selectAll",
          "description": ""
        },
        {
          "value": "reload",
          "description": ""
        },
        {
          "value": "forceReload",
          "description": ""
        },
        {
          "value": "toggleDevTools",
          "description": ""
        },
        {
          "value": "resetZoom",
          "description": ""
        },
        {
          "value": "zoomIn",
          "description": ""
        },
        {
          "value": "zoomOut",
          "description": ""
        },
        {
          "value": "togglefullscreen",
          "description": ""
        },
        {
          "value": "window",
          "description": ""
        },
        {
          "value": "minimize",
          "description": ""
        },
        {
          "value": "close",
          "description": ""
        },
        {
          "value": "help",
          "description": ""
        },
        {
          "value": "about",
          "description": ""
        },
        {
          "value": "services",
          "description": ""
        },
        {
          "value": "hide",
          "description": ""
        },
        {
          "value": "hideOthers",
          "description": ""
        },
        {
          "value": "unhide",
          "description": ""
        },
        {
          "value": "quit",
          "description": ""
        },
        {
          "value": "startSpeaking",
          "description": ""
        },
        {
          "value": "stopSpeaking",
          "description": ""
        },
        {
          "value": "close",
          "description": ""
        },
        {
          "value": "minimize",
          "description": ""
        },
        {
          "value": "zoom",
          "description": ""
        },
        {
          "value": "front",
          "description": ""
        },
        {
          "value": "appMenu",
          "description": ""
        },
        {
          "value": "fileMenu",
          "description": ""
        },
        {
          "value": "editMenu",
          "description": ""
        },
        {
          "value": "viewMenu",
          "description": ""
        },
        {
          "value": "recentDocuments",
          "description": ""
        },
        {
          "value": "toggleTabBar",
          "description": ""
        },
        {
          "value": "selectNextTab",
          "description": ""
        },
        {
          "value": "selectPreviousTab",
          "description": ""
        },
        {
          "value": "mergeAllWindows",
          "description": ""
        },
        {
          "value": "clearRecentDocuments",
          "description": ""
        },
        {
          "value": "moveTabToNewWindow",
          "description": ""
        },
        {
          "value": "windowMenu",
          "description": ""
        }
      ],
      "apiType": "instanceProperties",
      "fullSignature": "MenuItem.role",
      "tldr": "A `String` (optional) indicating the item's role, if set.",
      "slug": "menuitemrole",
      "url": "https://electronjs.org/docs/api/menu-item#menuitemrole",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:role",
        "api:menuitemrole",
        "api:MenuItem.role",
        "doc:role",
        "doc:menuitemrole",
        "doc:MenuItem.role"
      ]
    },
    {
      "objectID": "api-menu-item#menuitemaccelerator",
      "name": "accelerator",
      "description": "A `Accelerator` (optional) indicating the item's accelerator, if set.",
      "required": false,
      "additionalTags": [],
      "collection": false,
      "type": "Accelerator",
      "apiType": "instanceProperties",
      "fullSignature": "MenuItem.accelerator",
      "tldr": "A `Accelerator` (optional) indicating the item's accelerator, if set.",
      "slug": "menuitemaccelerator",
      "url": "https://electronjs.org/docs/api/menu-item#menuitemaccelerator",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:accelerator",
        "api:menuitemaccelerator",
        "api:MenuItem.accelerator",
        "doc:accelerator",
        "doc:menuitemaccelerator",
        "doc:MenuItem.accelerator"
      ]
    },
    {
      "objectID": "api-menu-item#menuitemicon",
      "name": "icon",
      "description": "A `NativeImage | String` (optional) indicating the item's icon, if set.",
      "required": false,
      "additionalTags": [],
      "collection": false,
      "type": [
        {
          "collection": false,
          "type": "NativeImage"
        },
        {
          "collection": false,
          "type": "String",
          "possibleValues": null
        }
      ],
      "apiType": "instanceProperties",
      "fullSignature": "MenuItem.icon",
      "tldr": "A `NativeImage | String` (optional) indicating the item's icon, if set.",
      "slug": "menuitemicon",
      "url": "https://electronjs.org/docs/api/menu-item#menuitemicon",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:icon",
        "api:menuitemicon",
        "api:MenuItem.icon",
        "doc:icon",
        "doc:menuitemicon",
        "doc:MenuItem.icon"
      ]
    },
    {
      "objectID": "api-menu-item#menuitemsublabel",
      "name": "sublabel",
      "description": "A `String` indicating the item's sublabel, this property can be dynamically changed.",
      "required": true,
      "additionalTags": [],
      "collection": false,
      "type": "String",
      "possibleValues": null,
      "apiType": "instanceProperties",
      "fullSignature": "MenuItem.sublabel",
      "tldr": "A `String` indicating the item's sublabel, this property can be dynamically changed.",
      "slug": "menuitemsublabel",
      "url": "https://electronjs.org/docs/api/menu-item#menuitemsublabel",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:sublabel",
        "api:menuitemsublabel",
        "api:MenuItem.sublabel",
        "doc:sublabel",
        "doc:menuitemsublabel",
        "doc:MenuItem.sublabel"
      ]
    },
    {
      "objectID": "api-menu-item#menuitemtooltip",
      "name": "toolTip",
      "description": "A `String` indicating the item's hover text.",
      "required": true,
      "additionalTags": [
        "os_macos"
      ],
      "collection": false,
      "type": "String",
      "possibleValues": null,
      "apiType": "instanceProperties",
      "fullSignature": "MenuItem.toolTip",
      "tldr": "A `String` indicating the item's hover text.",
      "slug": "menuitemtooltip",
      "url": "https://electronjs.org/docs/api/menu-item#menuitemtooltip",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:toolTip",
        "api:menuitemtooltip",
        "api:MenuItem.toolTip",
        "doc:toolTip",
        "doc:menuitemtooltip",
        "doc:MenuItem.toolTip"
      ]
    },
    {
      "objectID": "api-menu-item#menuitemenabled",
      "name": "enabled",
      "description": "A `Boolean` indicating whether the item is enabled, this property can be dynamically changed.",
      "required": true,
      "additionalTags": [],
      "collection": false,
      "type": "Boolean",
      "apiType": "instanceProperties",
      "fullSignature": "MenuItem.enabled",
      "tldr": "A `Boolean` indicating whether the item is enabled, this property can be dynamically changed.",
      "slug": "menuitemenabled",
      "url": "https://electronjs.org/docs/api/menu-item#menuitemenabled",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:enabled",
        "api:menuitemenabled",
        "api:MenuItem.enabled",
        "doc:enabled",
        "doc:menuitemenabled",
        "doc:MenuItem.enabled"
      ]
    },
    {
      "objectID": "api-menu-item#menuitemvisible",
      "name": "visible",
      "description": "A `Boolean` indicating whether the item is visible, this property can be dynamically changed.",
      "required": true,
      "additionalTags": [],
      "collection": false,
      "type": "Boolean",
      "apiType": "instanceProperties",
      "fullSignature": "MenuItem.visible",
      "tldr": "A `Boolean` indicating whether the item is visible, this property can be dynamically changed.",
      "slug": "menuitemvisible",
      "url": "https://electronjs.org/docs/api/menu-item#menuitemvisible",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:visible",
        "api:menuitemvisible",
        "api:MenuItem.visible",
        "doc:visible",
        "doc:menuitemvisible",
        "doc:MenuItem.visible"
      ]
    },
    {
      "objectID": "api-menu-item#menuitemchecked",
      "name": "checked",
      "description": "A `Boolean` indicating whether the item is checked, this property can be dynamically changed.\n\nA `checkbox` menu item will toggle the `checked` property on and off when selected.\n\nA `radio` menu item will turn on its `checked` property when clicked, and will turn off that property for all adjacent items in the same menu.\n\nYou can add a `click` function for additional behavior.",
      "required": true,
      "additionalTags": [],
      "collection": false,
      "type": "Boolean",
      "apiType": "instanceProperties",
      "fullSignature": "MenuItem.checked",
      "tldr": "A `Boolean` indicating whether the item is checked, this property can be dynamically changed.\n\nA `checkbox` menu item will toggle the `checked` property on and off when selected.\n\nA `radio` menu item will turn on its `checked` property when clicked, and will turn off that property for all adjacent items in the same menu.\n\nYou can add a `click` function for additional behavior.",
      "slug": "menuitemchecked",
      "url": "https://electronjs.org/docs/api/menu-item#menuitemchecked",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:checked",
        "api:menuitemchecked",
        "api:MenuItem.checked",
        "doc:checked",
        "doc:menuitemchecked",
        "doc:MenuItem.checked"
      ]
    },
    {
      "objectID": "api-menu-item#menuitemregisteraccelerator",
      "name": "registerAccelerator",
      "description": "A `Boolean` indicating if the accelerator should be registered with the system or just displayed, this property can be dynamically changed.",
      "required": true,
      "additionalTags": [],
      "collection": false,
      "type": "Boolean",
      "apiType": "instanceProperties",
      "fullSignature": "MenuItem.registerAccelerator",
      "tldr": "A `Boolean` indicating if the accelerator should be registered with the system or just displayed, this property can be dynamically changed.",
      "slug": "menuitemregisteraccelerator",
      "url": "https://electronjs.org/docs/api/menu-item#menuitemregisteraccelerator",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:registerAccelerator",
        "api:menuitemregisteraccelerator",
        "api:MenuItem.registerAccelerator",
        "doc:registerAccelerator",
        "doc:menuitemregisteraccelerator",
        "doc:MenuItem.registerAccelerator"
      ]
    },
    {
      "objectID": "api-menu-item#menuitemcommandid",
      "name": "commandId",
      "description": "A `Number` indicating an item's sequential unique id.",
      "required": true,
      "additionalTags": [],
      "collection": false,
      "type": "Number",
      "apiType": "instanceProperties",
      "fullSignature": "MenuItem.commandId",
      "tldr": "A `Number` indicating an item's sequential unique id.",
      "slug": "menuitemcommandid",
      "url": "https://electronjs.org/docs/api/menu-item#menuitemcommandid",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:commandId",
        "api:menuitemcommandid",
        "api:MenuItem.commandId",
        "doc:commandId",
        "doc:menuitemcommandid",
        "doc:MenuItem.commandId"
      ]
    },
    {
      "objectID": "api-menu-item#menuitemmenu",
      "name": "menu",
      "description": "A `Menu` that the item is a part of.",
      "required": true,
      "additionalTags": [],
      "collection": false,
      "type": "Menu",
      "apiType": "instanceProperties",
      "fullSignature": "MenuItem.menu",
      "tldr": "A `Menu` that the item is a part of.",
      "slug": "menuitemmenu",
      "url": "https://electronjs.org/docs/api/menu-item#menuitemmenu",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:menu",
        "api:menuitemmenu",
        "api:MenuItem.menu",
        "doc:menu",
        "doc:menuitemmenu",
        "doc:MenuItem.menu"
      ]
    },
    {
      "objectID": "api-menu#menuitems",
      "name": "items",
      "description": "A `MenuItem[]` array containing the menu's items.\n\nEach `Menu` consists of multiple `MenuItem`s and each `MenuItem` can have a submenu.",
      "required": true,
      "additionalTags": [],
      "collection": true,
      "type": "MenuItem",
      "apiType": "instanceProperties",
      "fullSignature": "Menu.items",
      "tldr": "A `MenuItem[]` array containing the menu's items.\n\nEach `Menu` consists of multiple `MenuItem`s and each `MenuItem` can have a submenu.",
      "slug": "menuitems",
      "url": "https://electronjs.org/docs/api/menu#menuitems",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:items",
        "api:menuitems",
        "api:Menu.items",
        "doc:items",
        "doc:menuitems",
        "doc:Menu.items"
      ]
    },
    {
      "objectID": "api-menu#menusetapplicationmenumenu",
      "name": "setApplicationMenu",
      "signature": "(menu)",
      "description": "Sets `menu` as the application menu on macOS. On Windows and Linux, the `menu` will be set as each window's top menu.\n\nAlso on Windows and Linux, you can use a `&` in the top-level item name to indicate which letter should get a generated accelerator. For example, using `&File` for the file menu would result in a generated `Alt-F` accelerator that opens the associated menu. The indicated character in the button label gets an underline. The `&` character is not displayed on the button label.\n\nPassing `null` will suppress the default menu. On Windows and Linux, this has the additional effect of removing the menu bar from the window.\n\n**Note:** The default menu will be created automatically if the app does not set one. It contains standard items such as `File`, `Edit`, `View`, `Window` and `Help`.",
      "parameters": [
        {
          "name": "menu",
          "description": "",
          "required": true,
          "collection": false,
          "type": [
            {
              "collection": false,
              "type": "Menu"
            },
            {
              "type": "null",
              "collection": false
            }
          ]
        }
      ],
      "returns": null,
      "additionalTags": [],
      "apiType": "staticMethod",
      "fullSignature": "Menu.setApplicationMenu(menu)",
      "tldr": "Sets `menu` as the application menu on macOS.",
      "slug": "menusetapplicationmenumenu",
      "url": "https://electronjs.org/docs/api/menu#menusetapplicationmenumenu",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:setApplicationMenu",
        "api:menusetapplicationmenumenu",
        "api:Menu.setApplicationMenu(menu)",
        "doc:setApplicationMenu",
        "doc:menusetapplicationmenumenu",
        "doc:Menu.setApplicationMenu(menu)"
      ]
    },
    {
      "objectID": "api-menu#menugetapplicationmenu",
      "name": "getApplicationMenu",
      "signature": "()",
      "description": "The application menu, if set, or `null`, if not set.\n\n**Note:** The returned `Menu` instance doesn't support dynamic addition or removal of menu items. Instance properties can still be dynamically modified.",
      "parameters": [],
      "returns": {
        "collection": false,
        "type": [
          {
            "collection": false,
            "type": "Menu"
          },
          {
            "type": "null",
            "collection": false
          }
        ]
      },
      "additionalTags": [],
      "apiType": "staticMethod",
      "fullSignature": "Menu.getApplicationMenu()",
      "tldr": "The application menu, if set, or `null`, if not set.\n\n**Note:** The returned `Menu` instance doesn't support dynamic addition or removal of menu items.",
      "slug": "menugetapplicationmenu",
      "url": "https://electronjs.org/docs/api/menu#menugetapplicationmenu",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:getApplicationMenu",
        "api:menugetapplicationmenu",
        "api:Menu.getApplicationMenu()",
        "doc:getApplicationMenu",
        "doc:menugetapplicationmenu",
        "doc:Menu.getApplicationMenu()"
      ]
    },
    {
      "objectID": "api-menu#menusendactiontofirstresponderaction",
      "name": "sendActionToFirstResponder",
      "signature": "(action)",
      "description": "Sends the `action` to the first responder of application. This is used for emulating default macOS menu behaviors. Usually you would use the `role` property of a `MenuItem`.\n\nSee the macOS Cocoa Event Handling Guide for more information on macOS' native actions.",
      "parameters": [
        {
          "name": "action",
          "description": "",
          "required": true,
          "collection": false,
          "type": "String",
          "possibleValues": null
        }
      ],
      "returns": null,
      "additionalTags": [
        "os_macos"
      ],
      "apiType": "staticMethod",
      "fullSignature": "Menu.sendActionToFirstResponder(action)",
      "tldr": "Sends the `action` to the first responder of application.",
      "slug": "menusendactiontofirstresponderaction",
      "url": "https://electronjs.org/docs/api/menu#menusendactiontofirstresponderaction",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:sendActionToFirstResponder",
        "api:menusendactiontofirstresponderaction",
        "api:Menu.sendActionToFirstResponder(action)",
        "doc:sendActionToFirstResponder",
        "doc:menusendactiontofirstresponderaction",
        "doc:Menu.sendActionToFirstResponder(action)"
      ]
    },
    {
      "objectID": "api-menu#menubuildfromtemplatetemplate",
      "name": "buildFromTemplate",
      "signature": "(template)",
      "description": "Generally, the `template` is an array of `options` for constructing a MenuItem. The usage can be referenced above.\n\nYou can also attach other fields to the element of the `template` and they will become properties of the constructed menu items.",
      "parameters": [
        {
          "name": "template",
          "description": "",
          "required": true,
          "collection": true,
          "type": [
            {
              "collection": false,
              "type": "MenuItemConstructorOptions"
            },
            {
              "collection": false,
              "type": "MenuItem"
            }
          ]
        }
      ],
      "returns": {
        "collection": false,
        "type": "Menu"
      },
      "additionalTags": [],
      "apiType": "staticMethod",
      "fullSignature": "Menu.buildFromTemplate(template)",
      "tldr": "Generally, the `template` is an array of `options` for constructing a MenuItem.",
      "slug": "menubuildfromtemplatetemplate",
      "url": "https://electronjs.org/docs/api/menu#menubuildfromtemplatetemplate",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:buildFromTemplate",
        "api:menubuildfromtemplatetemplate",
        "api:Menu.buildFromTemplate(template)",
        "doc:buildFromTemplate",
        "doc:menubuildfromtemplatetemplate",
        "doc:Menu.buildFromTemplate(template)"
      ]
    },
    {
      "objectID": "api-menu#menupopupoptions",
      "name": "popup",
      "signature": "([options])",
      "description": "Pops up this menu as a context menu in the `BrowserWindow`.",
      "parameters": [
        {
          "name": "options",
          "description": "",
          "required": false,
          "collection": false,
          "type": "Object",
          "properties": [
            {
              "name": "window",
              "description": "Default is the focused window.",
              "required": false,
              "additionalTags": [],
              "collection": false,
              "type": "BrowserWindow"
            },
            {
              "name": "x",
              "description": "Default is the current mouse cursor position. Must be declared if `y` is declared.",
              "required": false,
              "additionalTags": [],
              "collection": false,
              "type": "Number"
            },
            {
              "name": "y",
              "description": "Default is the current mouse cursor position. Must be declared if `x` is declared.",
              "required": false,
              "additionalTags": [],
              "collection": false,
              "type": "Number"
            },
            {
              "name": "positioningItem",
              "description": "The index of the menu item to be positioned under the mouse cursor at the specified coordinates. Default is -1.",
              "required": false,
              "additionalTags": [
                "os_macos"
              ],
              "collection": false,
              "type": "Number"
            },
            {
              "name": "callback",
              "description": "Called when menu is closed.",
              "required": false,
              "additionalTags": [],
              "collection": false,
              "type": "Function",
              "parameters": [],
              "returns": null
            }
          ]
        }
      ],
      "returns": null,
      "additionalTags": [],
      "apiType": "instanceMethod",
      "fullSignature": "Menu.popup([options])",
      "tldr": "Pops up this menu as a context menu in the `BrowserWindow`.",
      "slug": "menupopupoptions",
      "url": "https://electronjs.org/docs/api/menu#menupopupoptions",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:popup",
        "api:menupopupoptions",
        "api:Menu.popup([options])",
        "doc:popup",
        "doc:menupopupoptions",
        "doc:Menu.popup([options])"
      ]
    },
    {
      "objectID": "api-menu#menuclosepopupbrowserwindow",
      "name": "closePopup",
      "signature": "([browserWindow])",
      "description": "Closes the context menu in the `browserWindow`.",
      "parameters": [
        {
          "name": "browserWindow",
          "description": "Default is the focused window.",
          "required": false,
          "collection": false,
          "type": "BrowserWindow"
        }
      ],
      "returns": null,
      "additionalTags": [],
      "apiType": "instanceMethod",
      "fullSignature": "Menu.closePopup([browserWindow])",
      "tldr": "Closes the context menu in the `browserWindow`.",
      "slug": "menuclosepopupbrowserwindow",
      "url": "https://electronjs.org/docs/api/menu#menuclosepopupbrowserwindow",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:closePopup",
        "api:menuclosepopupbrowserwindow",
        "api:Menu.closePopup([browserWindow])",
        "doc:closePopup",
        "doc:menuclosepopupbrowserwindow",
        "doc:Menu.closePopup([browserWindow])"
      ]
    },
    {
      "objectID": "api-menu#menuappendmenuitem",
      "name": "append",
      "signature": "(menuItem)",
      "description": "Appends the `menuItem` to the menu.",
      "parameters": [
        {
          "name": "menuItem",
          "description": "",
          "required": true,
          "collection": false,
          "type": "MenuItem"
        }
      ],
      "returns": null,
      "additionalTags": [],
      "apiType": "instanceMethod",
      "fullSignature": "Menu.append(menuItem)",
      "tldr": "Appends the `menuItem` to the menu.",
      "slug": "menuappendmenuitem",
      "url": "https://electronjs.org/docs/api/menu#menuappendmenuitem",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:append",
        "api:menuappendmenuitem",
        "api:Menu.append(menuItem)",
        "doc:append",
        "doc:menuappendmenuitem",
        "doc:Menu.append(menuItem)"
      ]
    },
    {
      "objectID": "api-menu#menugetmenuitembyidid",
      "name": "getMenuItemById",
      "signature": "(id)",
      "description": "the item with the specified `id`",
      "parameters": [
        {
          "name": "id",
          "description": "",
          "required": true,
          "collection": false,
          "type": "String",
          "possibleValues": null
        }
      ],
      "returns": {
        "collection": false,
        "type": "MenuItem"
      },
      "additionalTags": [],
      "apiType": "instanceMethod",
      "fullSignature": "Menu.getMenuItemById(id)",
      "tldr": "the item with the specified `id`.",
      "slug": "menugetmenuitembyidid",
      "url": "https://electronjs.org/docs/api/menu#menugetmenuitembyidid",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:getMenuItemById",
        "api:menugetmenuitembyidid",
        "api:Menu.getMenuItemById(id)",
        "doc:getMenuItemById",
        "doc:menugetmenuitembyidid",
        "doc:Menu.getMenuItemById(id)"
      ]
    },
    {
      "objectID": "api-menu#menuinsertpos-menuitem",
      "name": "insert",
      "signature": "(pos, menuItem)",
      "description": "Inserts the `menuItem` to the `pos` position of the menu.",
      "parameters": [
        {
          "name": "pos",
          "description": "",
          "required": true,
          "collection": false,
          "type": "Integer"
        },
        {
          "name": "menuItem",
          "description": "",
          "required": true,
          "collection": false,
          "type": "MenuItem"
        }
      ],
      "returns": null,
      "additionalTags": [],
      "apiType": "instanceMethod",
      "fullSignature": "Menu.insert(pos, menuItem)",
      "tldr": "Inserts the `menuItem` to the `pos` position of the menu.",
      "slug": "menuinsertpos-menuitem",
      "url": "https://electronjs.org/docs/api/menu#menuinsertpos-menuitem",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:insert",
        "api:menuinsertpos-menuitem",
        "api:Menu.insert(pos, menuItem)",
        "doc:insert",
        "doc:menuinsertpos-menuitem",
        "doc:Menu.insert(pos, menuItem)"
      ]
    },
    {
      "objectID": "api-menu#event-menu-will-show",
      "name": "menu-will-show",
      "description": "Emitted when `menu.popup()` is called.",
      "parameters": [
        {
          "name": "event",
          "description": "",
          "collection": false,
          "type": "Event",
          "required": true
        }
      ],
      "additionalTags": [],
      "apiType": "event",
      "fullSignature": "Menu.on('menu-will-show')",
      "url": "https://electronjs.org/docs/api/menu#event-menu-will-show",
      "slug": "menuonmenu-will-show",
      "tldr": "Emitted when `menu.popup()` is called.",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:menu-will-show",
        "api:menuonmenu-will-show",
        "api:Menu.on('menu-will-show')",
        "doc:menu-will-show",
        "doc:menuonmenu-will-show",
        "doc:Menu.on('menu-will-show')"
      ]
    },
    {
      "objectID": "api-menu#event-menu-will-close",
      "name": "menu-will-close",
      "description": "Emitted when a popup is closed either manually or with `menu.closePopup()`.",
      "parameters": [
        {
          "name": "event",
          "description": "",
          "collection": false,
          "type": "Event",
          "required": true
        }
      ],
      "additionalTags": [],
      "apiType": "event",
      "fullSignature": "Menu.on('menu-will-close')",
      "url": "https://electronjs.org/docs/api/menu#event-menu-will-close",
      "slug": "menuonmenu-will-close",
      "tldr": "Emitted when a popup is closed either manually or with `menu.closePopup()`.",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:menu-will-close",
        "api:menuonmenu-will-close",
        "api:Menu.on('menu-will-close')",
        "doc:menu-will-close",
        "doc:menuonmenu-will-close",
        "doc:Menu.on('menu-will-close')"
      ]
    },
    {
      "objectID": "api-native-image#nativeimageismactemplateimage",
      "name": "isMacTemplateImage",
      "description": "A `Boolean` property that determines whether the image is considered a template image.\n\nPlease note that this property only has an effect on macOS.",
      "required": true,
      "additionalTags": [
        "os_macos"
      ],
      "collection": false,
      "type": "Boolean",
      "apiType": "properties",
      "fullSignature": "nativeImage.isMacTemplateImage",
      "tldr": "A `Boolean` property that determines whether the image is considered a template image.\n\nPlease note that this property only has an effect on macOS.",
      "slug": "nativeimageismactemplateimage",
      "url": "https://electronjs.org/docs/api/native-image#nativeimageismactemplateimage",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:isMacTemplateImage",
        "api:nativeimageismactemplateimage",
        "api:nativeImage.isMacTemplateImage",
        "doc:isMacTemplateImage",
        "doc:nativeimageismactemplateimage",
        "doc:nativeImage.isMacTemplateImage"
      ]
    },
    {
      "objectID": "api-native-image#nativeimagecreateempty",
      "name": "createEmpty",
      "signature": "()",
      "description": "Creates an empty `NativeImage` instance.",
      "parameters": [],
      "returns": {
        "collection": false,
        "type": "NativeImage"
      },
      "additionalTags": [],
      "apiType": "methods",
      "fullSignature": "nativeImage.createEmpty()",
      "tldr": "Creates an empty `NativeImage` instance.",
      "slug": "nativeimagecreateempty",
      "url": "https://electronjs.org/docs/api/native-image#nativeimagecreateempty",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:createEmpty",
        "api:nativeimagecreateempty",
        "api:nativeImage.createEmpty()",
        "doc:createEmpty",
        "doc:nativeimagecreateempty",
        "doc:nativeImage.createEmpty()"
      ]
    },
    {
      "objectID": "api-native-image#nativeimagecreatefrompathpath",
      "name": "createFromPath",
      "signature": "(path)",
      "description": "Creates a new `NativeImage` instance from a file located at `path`. This method returns an empty image if the `path` does not exist, cannot be read, or is not a valid image.",
      "parameters": [
        {
          "name": "path",
          "description": "",
          "required": true,
          "collection": false,
          "type": "String",
          "possibleValues": null
        }
      ],
      "returns": {
        "collection": false,
        "type": "NativeImage"
      },
      "additionalTags": [],
      "apiType": "methods",
      "fullSignature": "nativeImage.createFromPath(path)",
      "tldr": "Creates a new `NativeImage` instance from a file located at `path`.",
      "slug": "nativeimagecreatefrompathpath",
      "url": "https://electronjs.org/docs/api/native-image#nativeimagecreatefrompathpath",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:createFromPath",
        "api:nativeimagecreatefrompathpath",
        "api:nativeImage.createFromPath(path)",
        "doc:createFromPath",
        "doc:nativeimagecreatefrompathpath",
        "doc:nativeImage.createFromPath(path)"
      ]
    },
    {
      "objectID": "api-native-image#nativeimagecreatefrombitmapbuffer-options",
      "name": "createFromBitmap",
      "signature": "(buffer, options)",
      "description": "Creates a new `NativeImage` instance from `buffer` that contains the raw bitmap pixel data returned by `toBitmap()`. The specific format is platform-dependent.",
      "parameters": [
        {
          "name": "buffer",
          "description": "",
          "required": true,
          "collection": false,
          "type": "Buffer"
        },
        {
          "name": "options",
          "description": "",
          "required": true,
          "collection": false,
          "type": "Object",
          "properties": [
            {
              "name": "width",
              "description": "",
              "required": true,
              "additionalTags": [],
              "collection": false,
              "type": "Integer"
            },
            {
              "name": "height",
              "description": "",
              "required": true,
              "additionalTags": [],
              "collection": false,
              "type": "Integer"
            },
            {
              "name": "scaleFactor",
              "description": "Defaults to 1.0.",
              "required": false,
              "additionalTags": [],
              "collection": false,
              "type": "Double"
            }
          ]
        }
      ],
      "returns": {
        "collection": false,
        "type": "NativeImage"
      },
      "additionalTags": [],
      "apiType": "methods",
      "fullSignature": "nativeImage.createFromBitmap(buffer, options)",
      "tldr": "Creates a new `NativeImage` instance from `buffer` that contains the raw bitmap pixel data returned by `toBitmap()`.",
      "slug": "nativeimagecreatefrombitmapbuffer-options",
      "url": "https://electronjs.org/docs/api/native-image#nativeimagecreatefrombitmapbuffer-options",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:createFromBitmap",
        "api:nativeimagecreatefrombitmapbuffer-options",
        "api:nativeImage.createFromBitmap(buffer, options)",
        "doc:createFromBitmap",
        "doc:nativeimagecreatefrombitmapbuffer-options",
        "doc:nativeImage.createFromBitmap(buffer, options)"
      ]
    },
    {
      "objectID": "api-native-image#nativeimagecreatefrombufferbuffer-options",
      "name": "createFromBuffer",
      "signature": "(buffer[, options])",
      "description": "Creates a new `NativeImage` instance from `buffer`. Tries to decode as PNG or JPEG first.",
      "parameters": [
        {
          "name": "buffer",
          "description": "",
          "required": true,
          "collection": false,
          "type": "Buffer"
        },
        {
          "name": "options",
          "description": "",
          "required": false,
          "collection": false,
          "type": "Object",
          "properties": [
            {
              "name": "width",
              "description": "Required for bitmap buffers.",
              "required": false,
              "additionalTags": [],
              "collection": false,
              "type": "Integer"
            },
            {
              "name": "height",
              "description": "Required for bitmap buffers.",
              "required": false,
              "additionalTags": [],
              "collection": false,
              "type": "Integer"
            },
            {
              "name": "scaleFactor",
              "description": "Defaults to 1.0.",
              "required": false,
              "additionalTags": [],
              "collection": false,
              "type": "Double"
            }
          ]
        }
      ],
      "returns": {
        "collection": false,
        "type": "NativeImage"
      },
      "additionalTags": [],
      "apiType": "methods",
      "fullSignature": "nativeImage.createFromBuffer(buffer[, options])",
      "tldr": "Creates a new `NativeImage` instance from `buffer`.",
      "slug": "nativeimagecreatefrombufferbuffer-options",
      "url": "https://electronjs.org/docs/api/native-image#nativeimagecreatefrombufferbuffer-options",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:createFromBuffer",
        "api:nativeimagecreatefrombufferbuffer-options",
        "api:nativeImage.createFromBuffer(buffer[, options])",
        "doc:createFromBuffer",
        "doc:nativeimagecreatefrombufferbuffer-options",
        "doc:nativeImage.createFromBuffer(buffer[, options])"
      ]
    },
    {
      "objectID": "api-native-image#nativeimagecreatefromdataurldataurl",
      "name": "createFromDataURL",
      "signature": "(dataURL)",
      "description": "Creates a new `NativeImage` instance from `dataURL`.",
      "parameters": [
        {
          "name": "dataURL",
          "description": "",
          "required": true,
          "collection": false,
          "type": "String",
          "possibleValues": null
        }
      ],
      "returns": {
        "collection": false,
        "type": "NativeImage"
      },
      "additionalTags": [],
      "apiType": "methods",
      "fullSignature": "nativeImage.createFromDataURL(dataURL)",
      "tldr": "Creates a new `NativeImage` instance from `dataURL`.",
      "slug": "nativeimagecreatefromdataurldataurl",
      "url": "https://electronjs.org/docs/api/native-image#nativeimagecreatefromdataurldataurl",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:createFromDataURL",
        "api:nativeimagecreatefromdataurldataurl",
        "api:nativeImage.createFromDataURL(dataURL)",
        "doc:createFromDataURL",
        "doc:nativeimagecreatefromdataurldataurl",
        "doc:nativeImage.createFromDataURL(dataURL)"
      ]
    },
    {
      "objectID": "api-native-image#nativeimagecreatefromnamedimageimagename-hslshift",
      "name": "createFromNamedImage",
      "signature": "(imageName[, hslShift])",
      "description": "Creates a new `NativeImage` instance from the NSImage that maps to the given image name. See `System Icons` for a list of possible values.\n\nThe `hslShift` is applied to the image with the following rules\n\n* `hsl_shift[0]` (hue): The absolute hue value for the image - 0 and 1 map to 0 and 360 on the hue color wheel (red).\n* `hsl_shift[1]` (saturation): A saturation shift for the image, with the following key values: 0 = remove all color. 0.5 = leave unchanged. 1 = fully saturate the image.\n* `hsl_shift[2]` (lightness): A lightness shift for the image, with the following key values: 0 = remove all lightness (make all pixels black). 0.5 = leave unchanged. 1 = full lightness (make all pixels white).\n\nThis means that `[-1, 0, 1]` will make the image completely white and `[-1, 1, 0]` will make the image completely black.\n\nIn some cases, the `NSImageName` doesn't match its string representation; one example of this is `NSFolderImageName`, whose string representation would actually be `NSFolder`. Therefore, you'll need to determine the correct string representation for your image before passing it in. This can be done with the following:\n\n`echo -e '#import <Cocoa/Cocoa.h>\\nint main() { NSLog(@\"%@\", SYSTEM_IMAGE_NAME); }' | clang -otest -x objective-c -framework Cocoa - && ./test`\n\nwhere `SYSTEM_IMAGE_NAME` should be replaced with any value from this list.",
      "parameters": [
        {
          "name": "imageName",
          "description": "",
          "required": true,
          "collection": false,
          "type": "String",
          "possibleValues": null
        },
        {
          "name": "hslShift",
          "description": "",
          "required": false,
          "collection": true,
          "type": "Number"
        }
      ],
      "returns": {
        "collection": false,
        "type": "NativeImage"
      },
      "additionalTags": [
        "os_macos"
      ],
      "apiType": "methods",
      "fullSignature": "nativeImage.createFromNamedImage(imageName[, hslShift])",
      "tldr": "Creates a new `NativeImage` instance from the NSImage that maps to the given image name.",
      "slug": "nativeimagecreatefromnamedimageimagename-hslshift",
      "url": "https://electronjs.org/docs/api/native-image#nativeimagecreatefromnamedimageimagename-hslshift",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:createFromNamedImage",
        "api:nativeimagecreatefromnamedimageimagename-hslshift",
        "api:nativeImage.createFromNamedImage(imageName[, hslShift])",
        "doc:createFromNamedImage",
        "doc:nativeimagecreatefromnamedimageimagename-hslshift",
        "doc:nativeImage.createFromNamedImage(imageName[, hslShift])"
      ]
    },
    {
      "objectID": "api-native-image#imagetopngoptions",
      "name": "toPNG",
      "signature": "([options])",
      "description": "A Buffer that contains the image's `PNG` encoded data.",
      "parameters": [
        {
          "name": "options",
          "description": "",
          "required": false,
          "collection": false,
          "type": "Object",
          "properties": [
            {
              "name": "scaleFactor",
              "description": "Defaults to 1.0.",
              "required": false,
              "additionalTags": [],
              "collection": false,
              "type": "Double"
            }
          ]
        }
      ],
      "returns": {
        "collection": false,
        "type": "Buffer"
      },
      "additionalTags": [],
      "apiType": "instanceMethod",
      "fullSignature": "image.toPNG([options])",
      "tldr": "A Buffer that contains the image's `PNG` encoded data.",
      "slug": "imagetopngoptions",
      "url": "https://electronjs.org/docs/api/native-image#imagetopngoptions",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:toPNG",
        "api:imagetopngoptions",
        "api:image.toPNG([options])",
        "doc:toPNG",
        "doc:imagetopngoptions",
        "doc:image.toPNG([options])"
      ]
    },
    {
      "objectID": "api-native-image#imagetojpegquality",
      "name": "toJPEG",
      "signature": "(quality)",
      "description": "A Buffer that contains the image's `JPEG` encoded data.",
      "parameters": [
        {
          "name": "quality",
          "description": "Between 0 - 100.",
          "required": true,
          "collection": false,
          "type": "Integer"
        }
      ],
      "returns": {
        "collection": false,
        "type": "Buffer"
      },
      "additionalTags": [],
      "apiType": "instanceMethod",
      "fullSignature": "image.toJPEG(quality)",
      "tldr": "A Buffer that contains the image's `JPEG` encoded data.",
      "slug": "imagetojpegquality",
      "url": "https://electronjs.org/docs/api/native-image#imagetojpegquality",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:toJPEG",
        "api:imagetojpegquality",
        "api:image.toJPEG(quality)",
        "doc:toJPEG",
        "doc:imagetojpegquality",
        "doc:image.toJPEG(quality)"
      ]
    },
    {
      "objectID": "api-native-image#imagetobitmapoptions",
      "name": "toBitmap",
      "signature": "([options])",
      "description": "A Buffer that contains a copy of the image's raw bitmap pixel data.",
      "parameters": [
        {
          "name": "options",
          "description": "",
          "required": false,
          "collection": false,
          "type": "Object",
          "properties": [
            {
              "name": "scaleFactor",
              "description": "Defaults to 1.0.",
              "required": false,
              "additionalTags": [],
              "collection": false,
              "type": "Double"
            }
          ]
        }
      ],
      "returns": {
        "collection": false,
        "type": "Buffer"
      },
      "additionalTags": [],
      "apiType": "instanceMethod",
      "fullSignature": "image.toBitmap([options])",
      "tldr": "A Buffer that contains a copy of the image's raw bitmap pixel data.",
      "slug": "imagetobitmapoptions",
      "url": "https://electronjs.org/docs/api/native-image#imagetobitmapoptions",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:toBitmap",
        "api:imagetobitmapoptions",
        "api:image.toBitmap([options])",
        "doc:toBitmap",
        "doc:imagetobitmapoptions",
        "doc:image.toBitmap([options])"
      ]
    },
    {
      "objectID": "api-native-image#imagetodataurloptions",
      "name": "toDataURL",
      "signature": "([options])",
      "description": "The data URL of the image.",
      "parameters": [
        {
          "name": "options",
          "description": "",
          "required": false,
          "collection": false,
          "type": "Object",
          "properties": [
            {
              "name": "scaleFactor",
              "description": "Defaults to 1.0.",
              "required": false,
              "additionalTags": [],
              "collection": false,
              "type": "Double"
            }
          ]
        }
      ],
      "returns": {
        "collection": false,
        "type": "String",
        "possibleValues": null
      },
      "additionalTags": [],
      "apiType": "instanceMethod",
      "fullSignature": "image.toDataURL([options])",
      "tldr": "The data URL of the image.",
      "slug": "imagetodataurloptions",
      "url": "https://electronjs.org/docs/api/native-image#imagetodataurloptions",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:toDataURL",
        "api:imagetodataurloptions",
        "api:image.toDataURL([options])",
        "doc:toDataURL",
        "doc:imagetodataurloptions",
        "doc:image.toDataURL([options])"
      ]
    },
    {
      "objectID": "api-native-image#imagegetbitmapoptions",
      "name": "getBitmap",
      "signature": "([options])",
      "description": "A Buffer that contains the image's raw bitmap pixel data.\n\nThe difference between `getBitmap()` and `toBitmap()` is, `getBitmap()` does not copy the bitmap data, so you have to use the returned Buffer immediately in current event loop tick, otherwise the data might be changed or destroyed.",
      "parameters": [
        {
          "name": "options",
          "description": "",
          "required": false,
          "collection": false,
          "type": "Object",
          "properties": [
            {
              "name": "scaleFactor",
              "description": "Defaults to 1.0.",
              "required": false,
              "additionalTags": [],
              "collection": false,
              "type": "Double"
            }
          ]
        }
      ],
      "returns": {
        "collection": false,
        "type": "Buffer"
      },
      "additionalTags": [],
      "apiType": "instanceMethod",
      "fullSignature": "image.getBitmap([options])",
      "tldr": "A Buffer that contains the image's raw bitmap pixel data.\n\nThe difference between `getBitmap()` and `toBitmap()` is, `getBitmap()` does not copy the bitmap data, so you have to use the returned Buffer immediately in current event loop tick, otherwise the data might be changed or destroyed.",
      "slug": "imagegetbitmapoptions",
      "url": "https://electronjs.org/docs/api/native-image#imagegetbitmapoptions",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:getBitmap",
        "api:imagegetbitmapoptions",
        "api:image.getBitmap([options])",
        "doc:getBitmap",
        "doc:imagegetbitmapoptions",
        "doc:image.getBitmap([options])"
      ]
    },
    {
      "objectID": "api-native-image#imagegetnativehandle",
      "name": "getNativeHandle",
      "signature": "()",
      "description": "A Buffer that stores C pointer to underlying native handle of the image. On macOS, a pointer to `NSImage` instance would be returned.\n\nNotice that the returned pointer is a weak pointer to the underlying native image instead of a copy, so you _must_ ensure that the associated `nativeImage` instance is kept around.",
      "parameters": [],
      "returns": {
        "collection": false,
        "type": "Buffer"
      },
      "additionalTags": [
        "os_macos"
      ],
      "apiType": "instanceMethod",
      "fullSignature": "image.getNativeHandle()",
      "tldr": "A Buffer that stores C pointer to underlying native handle of the image.",
      "slug": "imagegetnativehandle",
      "url": "https://electronjs.org/docs/api/native-image#imagegetnativehandle",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:getNativeHandle",
        "api:imagegetnativehandle",
        "api:image.getNativeHandle()",
        "doc:getNativeHandle",
        "doc:imagegetnativehandle",
        "doc:image.getNativeHandle()"
      ]
    },
    {
      "objectID": "api-native-image#imageisempty",
      "name": "isEmpty",
      "signature": "()",
      "description": "Whether the image is empty.",
      "parameters": [],
      "returns": {
        "collection": false,
        "type": "Boolean"
      },
      "additionalTags": [],
      "apiType": "instanceMethod",
      "fullSignature": "image.isEmpty()",
      "tldr": "Whether the image is empty.",
      "slug": "imageisempty",
      "url": "https://electronjs.org/docs/api/native-image#imageisempty",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:isEmpty",
        "api:imageisempty",
        "api:image.isEmpty()",
        "doc:isEmpty",
        "doc:imageisempty",
        "doc:image.isEmpty()"
      ]
    },
    {
      "objectID": "api-native-image#imagegetsize",
      "name": "getSize",
      "signature": "()",
      "description": "",
      "parameters": [],
      "returns": {
        "collection": false,
        "type": "Size"
      },
      "additionalTags": [],
      "apiType": "instanceMethod",
      "fullSignature": "image.getSize()",
      "tldr": null,
      "slug": "imagegetsize",
      "url": "https://electronjs.org/docs/api/native-image#imagegetsize",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:getSize",
        "api:imagegetsize",
        "api:image.getSize()",
        "doc:getSize",
        "doc:imagegetsize",
        "doc:image.getSize()"
      ]
    },
    {
      "objectID": "api-native-image#imagesettemplateimageoption",
      "name": "setTemplateImage",
      "signature": "(option)",
      "description": "Marks the image as a template image.\n\n**Deprecated**",
      "parameters": [
        {
          "name": "option",
          "description": "",
          "required": true,
          "collection": false,
          "type": "Boolean"
        }
      ],
      "returns": null,
      "additionalTags": [],
      "apiType": "instanceMethod",
      "fullSignature": "image.setTemplateImage(option)",
      "tldr": "Marks the image as a template image.\n\n**Deprecated**.",
      "slug": "imagesettemplateimageoption",
      "url": "https://electronjs.org/docs/api/native-image#imagesettemplateimageoption",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:setTemplateImage",
        "api:imagesettemplateimageoption",
        "api:image.setTemplateImage(option)",
        "doc:setTemplateImage",
        "doc:imagesettemplateimageoption",
        "doc:image.setTemplateImage(option)"
      ]
    },
    {
      "objectID": "api-native-image#imageistemplateimage",
      "name": "isTemplateImage",
      "signature": "()",
      "description": "Whether the image is a template image.\n\n**Deprecated**",
      "parameters": [],
      "returns": {
        "collection": false,
        "type": "Boolean"
      },
      "additionalTags": [],
      "apiType": "instanceMethod",
      "fullSignature": "image.isTemplateImage()",
      "tldr": "Whether the image is a template image.\n\n**Deprecated**.",
      "slug": "imageistemplateimage",
      "url": "https://electronjs.org/docs/api/native-image#imageistemplateimage",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:isTemplateImage",
        "api:imageistemplateimage",
        "api:image.isTemplateImage()",
        "doc:isTemplateImage",
        "doc:imageistemplateimage",
        "doc:image.isTemplateImage()"
      ]
    },
    {
      "objectID": "api-native-image#imagecroprect",
      "name": "crop",
      "signature": "(rect)",
      "description": "The cropped image.",
      "parameters": [
        {
          "name": "rect",
          "description": "The area of the image to crop.",
          "required": true,
          "collection": false,
          "type": "Rectangle"
        }
      ],
      "returns": {
        "collection": false,
        "type": "NativeImage"
      },
      "additionalTags": [],
      "apiType": "instanceMethod",
      "fullSignature": "image.crop(rect)",
      "tldr": "The cropped image.",
      "slug": "imagecroprect",
      "url": "https://electronjs.org/docs/api/native-image#imagecroprect",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:crop",
        "api:imagecroprect",
        "api:image.crop(rect)",
        "doc:crop",
        "doc:imagecroprect",
        "doc:image.crop(rect)"
      ]
    },
    {
      "objectID": "api-native-image#imageresizeoptions",
      "name": "resize",
      "signature": "(options)",
      "description": "The resized image.\n\nIf only the `height` or the `width` are specified then the current aspect ratio will be preserved in the resized image.",
      "parameters": [
        {
          "name": "options",
          "description": "",
          "required": true,
          "collection": false,
          "type": "Object",
          "properties": [
            {
              "name": "width",
              "description": "Defaults to the image's width.",
              "required": false,
              "additionalTags": [],
              "collection": false,
              "type": "Integer"
            },
            {
              "name": "height",
              "description": "Defaults to the image's height.",
              "required": false,
              "additionalTags": [],
              "collection": false,
              "type": "Integer"
            },
            {
              "name": "quality",
              "description": "The desired quality of the resize image. Possible values are `good`, `better` or `best`. The default is `best`. These values express a desired quality/speed tradeoff. They are translated into an algorithm-specific method that depends on the capabilities (CPU, GPU) of the underlying platform. It is possible for all three methods to be mapped to the same algorithm on a given platform.",
              "required": false,
              "additionalTags": [],
              "collection": false,
              "type": "String",
              "possibleValues": null
            }
          ]
        }
      ],
      "returns": {
        "collection": false,
        "type": "NativeImage"
      },
      "additionalTags": [],
      "apiType": "instanceMethod",
      "fullSignature": "image.resize(options)",
      "tldr": "The resized image.\n\nIf only the `height` or the `width` are specified then the current aspect ratio will be preserved in the resized image.",
      "slug": "imageresizeoptions",
      "url": "https://electronjs.org/docs/api/native-image#imageresizeoptions",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:resize",
        "api:imageresizeoptions",
        "api:image.resize(options)",
        "doc:resize",
        "doc:imageresizeoptions",
        "doc:image.resize(options)"
      ]
    },
    {
      "objectID": "api-native-image#imagegetaspectratio",
      "name": "getAspectRatio",
      "signature": "()",
      "description": "The image's aspect ratio.",
      "parameters": [],
      "returns": {
        "collection": false,
        "type": "Float"
      },
      "additionalTags": [],
      "apiType": "instanceMethod",
      "fullSignature": "image.getAspectRatio()",
      "tldr": "The image's aspect ratio.",
      "slug": "imagegetaspectratio",
      "url": "https://electronjs.org/docs/api/native-image#imagegetaspectratio",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:getAspectRatio",
        "api:imagegetaspectratio",
        "api:image.getAspectRatio()",
        "doc:getAspectRatio",
        "doc:imagegetaspectratio",
        "doc:image.getAspectRatio()"
      ]
    },
    {
      "objectID": "api-native-image#imageaddrepresentationoptions",
      "name": "addRepresentation",
      "signature": "(options)",
      "description": "Add an image representation for a specific scale factor. This can be used to explicitly add different scale factor representations to an image. This can be called on empty images.",
      "parameters": [
        {
          "name": "options",
          "description": "",
          "required": true,
          "collection": false,
          "type": "Object",
          "properties": [
            {
              "name": "scaleFactor",
              "description": "The scale factor to add the image representation for.",
              "required": true,
              "additionalTags": [],
              "collection": false,
              "type": "Double"
            },
            {
              "name": "width",
              "description": "Defaults to 0. Required if a bitmap buffer is specified as `buffer`.",
              "required": false,
              "additionalTags": [],
              "collection": false,
              "type": "Integer"
            },
            {
              "name": "height",
              "description": "Defaults to 0. Required if a bitmap buffer is specified as `buffer`.",
              "required": false,
              "additionalTags": [],
              "collection": false,
              "type": "Integer"
            },
            {
              "name": "buffer",
              "description": "The buffer containing the raw image data.",
              "required": false,
              "additionalTags": [],
              "collection": false,
              "type": "Buffer"
            },
            {
              "name": "dataURL",
              "description": "The data URL containing either a base 64 encoded PNG or JPEG image.",
              "required": false,
              "additionalTags": [],
              "collection": false,
              "type": "String",
              "possibleValues": null
            }
          ]
        }
      ],
      "returns": null,
      "additionalTags": [],
      "apiType": "instanceMethod",
      "fullSignature": "image.addRepresentation(options)",
      "tldr": "Add an image representation for a specific scale factor.",
      "slug": "imageaddrepresentationoptions",
      "url": "https://electronjs.org/docs/api/native-image#imageaddrepresentationoptions",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:addRepresentation",
        "api:imageaddrepresentationoptions",
        "api:image.addRepresentation(options)",
        "doc:addRepresentation",
        "doc:imageaddrepresentationoptions",
        "doc:image.addRepresentation(options)"
      ]
    },
    {
      "objectID": "api-native-theme#nativethemeshouldusedarkcolors",
      "name": "shouldUseDarkColors",
      "description": "A `Boolean` for if the OS / Chromium currently has a dark mode enabled or is being instructed to show a dark-style UI.  If you want to modify this value you should use `themeSource` below.",
      "required": true,
      "additionalTags": [
        "availability_readonly"
      ],
      "collection": false,
      "type": "Boolean",
      "apiType": "properties",
      "fullSignature": "nativeTheme.shouldUseDarkColors",
      "tldr": "A `Boolean` for if the OS / Chromium currently has a dark mode enabled or is being instructed to show a dark-style UI.",
      "slug": "nativethemeshouldusedarkcolors",
      "url": "https://electronjs.org/docs/api/native-theme#nativethemeshouldusedarkcolors",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:shouldUseDarkColors",
        "api:nativethemeshouldusedarkcolors",
        "api:nativeTheme.shouldUseDarkColors",
        "doc:shouldUseDarkColors",
        "doc:nativethemeshouldusedarkcolors",
        "doc:nativeTheme.shouldUseDarkColors"
      ]
    },
    {
      "objectID": "api-native-theme#nativethemethemesource",
      "name": "themeSource",
      "description": "A `String` property that can be `system`, `light` or `dark`.  It is used to override and supercede the value that Chromium has chosen to use internally.\n\nSetting this property to `system` will remove the override and everything will be reset to the OS default.  By default `themeSource` is `system`.\n\nSettings this property to `dark` will have the following effects:\n\n* `nativeTheme.shouldUseDarkColors` will be `true` when accessed\n* Any UI Electron renders on Linux and Windows including context menus, devtools, etc. will use the dark UI.\n* Any UI the OS renders on macOS including menus, window frames, etc. will use the dark UI.\n* The `prefers-color-scheme` CSS query will match `dark` mode.\n* The `updated` event will be emitted\n\nSettings this property to `light` will have the following effects:\n\n* `nativeTheme.shouldUseDarkColors` will be `false` when accessed\n* Any UI Electron renders on Linux and Windows including context menus, devtools, etc. will use the light UI.\n* Any UI the OS renders on macOS including menus, window frames, etc. will use the light UI.\n* The `prefers-color-scheme` CSS query will match `light` mode.\n* The `updated` event will be emitted\n\nThe usage of this property should align with a classic \"dark mode\" state machine in your application where the user has three options.\n\n* `Follow OS` --> `themeSource = 'system'`\n* `Dark Mode` --> `themeSource = 'dark'`\n* `Light Mode` --> `themeSource = 'light'`\n\nYour application should then always use `shouldUseDarkColors` to determine what CSS to apply.",
      "required": true,
      "additionalTags": [],
      "collection": false,
      "type": "String",
      "possibleValues": [
        {
          "value": "system",
          "description": ""
        },
        {
          "value": "light",
          "description": ""
        },
        {
          "value": "dark",
          "description": ""
        }
      ],
      "apiType": "properties",
      "fullSignature": "nativeTheme.themeSource",
      "tldr": "A `String` property that can be `system`, `light` or `dark`.",
      "slug": "nativethemethemesource",
      "url": "https://electronjs.org/docs/api/native-theme#nativethemethemesource",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:themeSource",
        "api:nativethemethemesource",
        "api:nativeTheme.themeSource",
        "doc:themeSource",
        "doc:nativethemethemesource",
        "doc:nativeTheme.themeSource"
      ]
    },
    {
      "objectID": "api-native-theme#nativethemeshouldusehighcontrastcolors",
      "name": "shouldUseHighContrastColors",
      "description": "A `Boolean` for if the OS / Chromium currently has high-contrast mode enabled or is being instructed to show a high-constrast UI.",
      "required": true,
      "additionalTags": [
        "os_macos",
        "os_windows",
        "availability_readonly"
      ],
      "collection": false,
      "type": "Boolean",
      "apiType": "properties",
      "fullSignature": "nativeTheme.shouldUseHighContrastColors",
      "tldr": "A `Boolean` for if the OS / Chromium currently has high-contrast mode enabled or is being instructed to show a high-constrast UI.",
      "slug": "nativethemeshouldusehighcontrastcolors",
      "url": "https://electronjs.org/docs/api/native-theme#nativethemeshouldusehighcontrastcolors",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:shouldUseHighContrastColors",
        "api:nativethemeshouldusehighcontrastcolors",
        "api:nativeTheme.shouldUseHighContrastColors",
        "doc:shouldUseHighContrastColors",
        "doc:nativethemeshouldusehighcontrastcolors",
        "doc:nativeTheme.shouldUseHighContrastColors"
      ]
    },
    {
      "objectID": "api-native-theme#nativethemeshoulduseinvertedcolorscheme",
      "name": "shouldUseInvertedColorScheme",
      "description": "A `Boolean` for if the OS / Chromium currently has an inverted color scheme or is being instructed to use an inverted color scheme.",
      "required": true,
      "additionalTags": [
        "os_macos",
        "os_windows",
        "availability_readonly"
      ],
      "collection": false,
      "type": "Boolean",
      "apiType": "properties",
      "fullSignature": "nativeTheme.shouldUseInvertedColorScheme",
      "tldr": "A `Boolean` for if the OS / Chromium currently has an inverted color scheme or is being instructed to use an inverted color scheme.",
      "slug": "nativethemeshoulduseinvertedcolorscheme",
      "url": "https://electronjs.org/docs/api/native-theme#nativethemeshoulduseinvertedcolorscheme",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:shouldUseInvertedColorScheme",
        "api:nativethemeshoulduseinvertedcolorscheme",
        "api:nativeTheme.shouldUseInvertedColorScheme",
        "doc:shouldUseInvertedColorScheme",
        "doc:nativethemeshoulduseinvertedcolorscheme",
        "doc:nativeTheme.shouldUseInvertedColorScheme"
      ]
    },
    {
      "objectID": "api-native-theme#event-updated",
      "name": "updated",
      "description": "Emitted when something in the underlying NativeTheme has changed. This normally means that either the value of `shouldUseDarkColors`, `shouldUseHighContrastColors` or `shouldUseInvertedColorScheme` has changed. You will have to check them to determine which one has changed.",
      "parameters": [],
      "additionalTags": [],
      "apiType": "event",
      "fullSignature": "nativeTheme.on('updated')",
      "url": "https://electronjs.org/docs/api/native-theme#event-updated",
      "slug": "nativethemeonupdated",
      "tldr": "Emitted when something in the underlying NativeTheme has changed.",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:updated",
        "api:nativethemeonupdated",
        "api:nativeTheme.on('updated')",
        "doc:updated",
        "doc:nativethemeonupdated",
        "doc:nativeTheme.on('updated')"
      ]
    },
    {
      "objectID": "api-net-log#netlogcurrentlylogging",
      "name": "currentlyLogging",
      "description": "A `Boolean` property that indicates whether network logs are recorded.",
      "required": true,
      "additionalTags": [
        "availability_readonly"
      ],
      "collection": false,
      "type": "Boolean",
      "apiType": "properties",
      "fullSignature": "netLog.currentlyLogging",
      "tldr": "A `Boolean` property that indicates whether network logs are recorded.",
      "slug": "netlogcurrentlylogging",
      "url": "https://electronjs.org/docs/api/net-log#netlogcurrentlylogging",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:currentlyLogging",
        "api:netlogcurrentlylogging",
        "api:netLog.currentlyLogging",
        "doc:currentlyLogging",
        "doc:netlogcurrentlylogging",
        "doc:netLog.currentlyLogging"
      ]
    },
    {
      "objectID": "api-net-log#netlogcurrentlyloggingpath",
      "name": "currentlyLoggingPath",
      "description": "A `String` property that returns the path to the current log file.",
      "required": true,
      "additionalTags": [
        "availability_readonly",
        "stability_deprecated"
      ],
      "collection": false,
      "type": "String",
      "possibleValues": null,
      "apiType": "properties",
      "fullSignature": "netLog.currentlyLoggingPath",
      "tldr": "A `String` property that returns the path to the current log file.",
      "slug": "netlogcurrentlyloggingpath",
      "url": "https://electronjs.org/docs/api/net-log#netlogcurrentlyloggingpath",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:currentlyLoggingPath",
        "api:netlogcurrentlyloggingpath",
        "api:netLog.currentlyLoggingPath",
        "doc:currentlyLoggingPath",
        "doc:netlogcurrentlyloggingpath",
        "doc:netLog.currentlyLoggingPath"
      ]
    },
    {
      "objectID": "api-net-log#netlogstartloggingpath-options",
      "name": "startLogging",
      "signature": "(path[, options])",
      "description": "resolves when the net log has begun recording.\n\nStarts recording network events to `path`.",
      "parameters": [
        {
          "name": "path",
          "description": "File path to record network logs.",
          "required": true,
          "collection": false,
          "type": "String",
          "possibleValues": null
        },
        {
          "name": "options",
          "description": "",
          "required": false,
          "collection": false,
          "type": "Object",
          "properties": [
            {
              "name": "captureMode",
              "description": "What kinds of data should be captured. By default, only metadata about requests will be captured. Setting this to `includeSensitive` will include cookies and authentication data. Setting it to `everything` will include all bytes transferred on sockets. Can be `default`, `includeSensitive` or `everything`.",
              "required": false,
              "additionalTags": [],
              "collection": false,
              "type": "String",
              "possibleValues": [
                {
                  "value": "default",
                  "description": ""
                },
                {
                  "value": "includeSensitive",
                  "description": ""
                },
                {
                  "value": "everything",
                  "description": ""
                }
              ]
            },
            {
              "name": "maxFileSize",
              "description": "When the log grows beyond this size, logging will automatically stop. Defaults to unlimited.",
              "required": false,
              "additionalTags": [],
              "collection": false,
              "type": "Number"
            }
          ]
        }
      ],
      "returns": {
        "collection": false,
        "type": "Promise",
        "innerTypes": [
          {
            "collection": false,
            "type": "void"
          }
        ]
      },
      "additionalTags": [],
      "apiType": "methods",
      "fullSignature": "netLog.startLogging(path[, options])",
      "tldr": "resolves when the net log has begun recording.\n\nStarts recording network events to `path`.",
      "slug": "netlogstartloggingpath-options",
      "url": "https://electronjs.org/docs/api/net-log#netlogstartloggingpath-options",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:startLogging",
        "api:netlogstartloggingpath-options",
        "api:netLog.startLogging(path[, options])",
        "doc:startLogging",
        "doc:netlogstartloggingpath-options",
        "doc:netLog.startLogging(path[, options])"
      ]
    },
    {
      "objectID": "api-net-log#netlogstoplogging",
      "name": "stopLogging",
      "signature": "()",
      "description": "resolves with a file path to which network logs were recorded.\n\nStops recording network events. If not called, net logging will automatically end when app quits.",
      "parameters": [],
      "returns": {
        "collection": false,
        "type": "Promise",
        "innerTypes": [
          {
            "collection": false,
            "type": "String",
            "possibleValues": null
          }
        ]
      },
      "additionalTags": [],
      "apiType": "methods",
      "fullSignature": "netLog.stopLogging()",
      "tldr": "resolves with a file path to which network logs were recorded.\n\nStops recording network events.",
      "slug": "netlogstoplogging",
      "url": "https://electronjs.org/docs/api/net-log#netlogstoplogging",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:stopLogging",
        "api:netlogstoplogging",
        "api:netLog.stopLogging()",
        "doc:stopLogging",
        "doc:netlogstoplogging",
        "doc:netLog.stopLogging()"
      ]
    },
    {
      "objectID": "api-net#netrequestoptions",
      "name": "request",
      "signature": "(options)",
      "description": "Creates a `ClientRequest` instance using the provided `options` which are directly forwarded to the `ClientRequest` constructor. The `net.request` method would be used to issue both secure and insecure HTTP requests according to the specified protocol scheme in the `options` object.",
      "parameters": [
        {
          "name": "options",
          "description": "The `ClientRequest` constructor options.",
          "required": true,
          "collection": false,
          "type": [
            {
              "collection": false,
              "type": "ClientRequestConstructorOptions"
            },
            {
              "collection": false,
              "type": "String",
              "possibleValues": null
            }
          ]
        }
      ],
      "returns": {
        "collection": false,
        "type": "ClientRequest"
      },
      "additionalTags": [],
      "apiType": "methods",
      "fullSignature": "net.request(options)",
      "tldr": "Creates a `ClientRequest` instance using the provided `options` which are directly forwarded to the `ClientRequest` constructor.",
      "slug": "netrequestoptions",
      "url": "https://electronjs.org/docs/api/net#netrequestoptions",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:request",
        "api:netrequestoptions",
        "api:net.request(options)",
        "doc:request",
        "doc:netrequestoptions",
        "doc:net.request(options)"
      ]
    },
    {
      "objectID": "api-notification#notificationtitle",
      "name": "title",
      "description": "A `String` property representing the title of the notification.",
      "required": true,
      "additionalTags": [],
      "collection": false,
      "type": "String",
      "possibleValues": null,
      "apiType": "instanceProperties",
      "fullSignature": "Notification.title",
      "tldr": "A `String` property representing the title of the notification.",
      "slug": "notificationtitle",
      "url": "https://electronjs.org/docs/api/notification#notificationtitle",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:title",
        "api:notificationtitle",
        "api:Notification.title",
        "doc:title",
        "doc:notificationtitle",
        "doc:Notification.title"
      ]
    },
    {
      "objectID": "api-notification#notificationsubtitle",
      "name": "subtitle",
      "description": "A `String` property representing the subtitle of the notification.",
      "required": true,
      "additionalTags": [],
      "collection": false,
      "type": "String",
      "possibleValues": null,
      "apiType": "instanceProperties",
      "fullSignature": "Notification.subtitle",
      "tldr": "A `String` property representing the subtitle of the notification.",
      "slug": "notificationsubtitle",
      "url": "https://electronjs.org/docs/api/notification#notificationsubtitle",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:subtitle",
        "api:notificationsubtitle",
        "api:Notification.subtitle",
        "doc:subtitle",
        "doc:notificationsubtitle",
        "doc:Notification.subtitle"
      ]
    },
    {
      "objectID": "api-notification#notificationbody",
      "name": "body",
      "description": "A `String` property representing the body of the notification.",
      "required": true,
      "additionalTags": [],
      "collection": false,
      "type": "String",
      "possibleValues": null,
      "apiType": "instanceProperties",
      "fullSignature": "Notification.body",
      "tldr": "A `String` property representing the body of the notification.",
      "slug": "notificationbody",
      "url": "https://electronjs.org/docs/api/notification#notificationbody",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:body",
        "api:notificationbody",
        "api:Notification.body",
        "doc:body",
        "doc:notificationbody",
        "doc:Notification.body"
      ]
    },
    {
      "objectID": "api-notification#notificationreplyplaceholder",
      "name": "replyPlaceholder",
      "description": "A `String` property representing the reply placeholder of the notification.",
      "required": true,
      "additionalTags": [],
      "collection": false,
      "type": "String",
      "possibleValues": null,
      "apiType": "instanceProperties",
      "fullSignature": "Notification.replyPlaceholder",
      "tldr": "A `String` property representing the reply placeholder of the notification.",
      "slug": "notificationreplyplaceholder",
      "url": "https://electronjs.org/docs/api/notification#notificationreplyplaceholder",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:replyPlaceholder",
        "api:notificationreplyplaceholder",
        "api:Notification.replyPlaceholder",
        "doc:replyPlaceholder",
        "doc:notificationreplyplaceholder",
        "doc:Notification.replyPlaceholder"
      ]
    },
    {
      "objectID": "api-notification#notificationsound",
      "name": "sound",
      "description": "A `String` property representing the sound of the notification.",
      "required": true,
      "additionalTags": [],
      "collection": false,
      "type": "String",
      "possibleValues": null,
      "apiType": "instanceProperties",
      "fullSignature": "Notification.sound",
      "tldr": "A `String` property representing the sound of the notification.",
      "slug": "notificationsound",
      "url": "https://electronjs.org/docs/api/notification#notificationsound",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:sound",
        "api:notificationsound",
        "api:Notification.sound",
        "doc:sound",
        "doc:notificationsound",
        "doc:Notification.sound"
      ]
    },
    {
      "objectID": "api-notification#notificationclosebuttontext",
      "name": "closeButtonText",
      "description": "A `String` property representing the close button text of the notification.",
      "required": true,
      "additionalTags": [],
      "collection": false,
      "type": "String",
      "possibleValues": null,
      "apiType": "instanceProperties",
      "fullSignature": "Notification.closeButtonText",
      "tldr": "A `String` property representing the close button text of the notification.",
      "slug": "notificationclosebuttontext",
      "url": "https://electronjs.org/docs/api/notification#notificationclosebuttontext",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:closeButtonText",
        "api:notificationclosebuttontext",
        "api:Notification.closeButtonText",
        "doc:closeButtonText",
        "doc:notificationclosebuttontext",
        "doc:Notification.closeButtonText"
      ]
    },
    {
      "objectID": "api-notification#notificationsilent",
      "name": "silent",
      "description": "A `Boolean` property representing whether the notification is silent.",
      "required": true,
      "additionalTags": [],
      "collection": false,
      "type": "Boolean",
      "apiType": "instanceProperties",
      "fullSignature": "Notification.silent",
      "tldr": "A `Boolean` property representing whether the notification is silent.",
      "slug": "notificationsilent",
      "url": "https://electronjs.org/docs/api/notification#notificationsilent",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:silent",
        "api:notificationsilent",
        "api:Notification.silent",
        "doc:silent",
        "doc:notificationsilent",
        "doc:Notification.silent"
      ]
    },
    {
      "objectID": "api-notification#notificationhasreply",
      "name": "hasReply",
      "description": "A `Boolean` property representing whether the notification has a reply action.",
      "required": true,
      "additionalTags": [],
      "collection": false,
      "type": "Boolean",
      "apiType": "instanceProperties",
      "fullSignature": "Notification.hasReply",
      "tldr": "A `Boolean` property representing whether the notification has a reply action.",
      "slug": "notificationhasreply",
      "url": "https://electronjs.org/docs/api/notification#notificationhasreply",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:hasReply",
        "api:notificationhasreply",
        "api:Notification.hasReply",
        "doc:hasReply",
        "doc:notificationhasreply",
        "doc:Notification.hasReply"
      ]
    },
    {
      "objectID": "api-notification#notificationactions",
      "name": "actions",
      "description": "A `NotificationAction[]` property representing the actions of the notification.",
      "required": true,
      "additionalTags": [],
      "collection": true,
      "type": "NotificationAction",
      "apiType": "instanceProperties",
      "fullSignature": "Notification.actions",
      "tldr": "A `NotificationAction[]` property representing the actions of the notification.",
      "slug": "notificationactions",
      "url": "https://electronjs.org/docs/api/notification#notificationactions",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:actions",
        "api:notificationactions",
        "api:Notification.actions",
        "doc:actions",
        "doc:notificationactions",
        "doc:Notification.actions"
      ]
    },
    {
      "objectID": "api-notification#notificationissupported",
      "name": "isSupported",
      "signature": "()",
      "description": "Whether or not desktop notifications are supported on the current system",
      "parameters": [],
      "returns": {
        "collection": false,
        "type": "Boolean"
      },
      "additionalTags": [],
      "apiType": "staticMethod",
      "fullSignature": "Notification.isSupported()",
      "tldr": "Whether or not desktop notifications are supported on the current system.",
      "slug": "notificationissupported",
      "url": "https://electronjs.org/docs/api/notification#notificationissupported",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:isSupported",
        "api:notificationissupported",
        "api:Notification.isSupported()",
        "doc:isSupported",
        "doc:notificationissupported",
        "doc:Notification.isSupported()"
      ]
    },
    {
      "objectID": "api-notification#notificationshow",
      "name": "show",
      "signature": "()",
      "description": "Immediately shows the notification to the user, please note this means unlike the HTML5 Notification implementation, instantiating a `new Notification` does not immediately show it to the user, you need to call this method before the OS will display it.\n\nIf the notification has been shown before, this method will dismiss the previously shown notification and create a new one with identical properties.",
      "parameters": [],
      "returns": null,
      "additionalTags": [],
      "apiType": "instanceMethod",
      "fullSignature": "Notification.show()",
      "tldr": "Immediately shows the notification to the user, please note this means unlike the HTML5 Notification implementation, instantiating a `new Notification` does not immediately show it to the user, you need to call this method before the OS will display it.\n\nIf the notification has been shown before, this method will dismiss the previously shown notification and create a new one with identical properties.",
      "slug": "notificationshow",
      "url": "https://electronjs.org/docs/api/notification#notificationshow",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:show",
        "api:notificationshow",
        "api:Notification.show()",
        "doc:show",
        "doc:notificationshow",
        "doc:Notification.show()"
      ]
    },
    {
      "objectID": "api-notification#notificationclose",
      "name": "close",
      "signature": "()",
      "description": "Dismisses the notification.",
      "parameters": [],
      "returns": null,
      "additionalTags": [],
      "apiType": "instanceMethod",
      "fullSignature": "Notification.close()",
      "tldr": "Dismisses the notification.",
      "slug": "notificationclose",
      "url": "https://electronjs.org/docs/api/notification#notificationclose",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:close",
        "api:notificationclose",
        "api:Notification.close()",
        "doc:close",
        "doc:notificationclose",
        "doc:Notification.close()"
      ]
    },
    {
      "objectID": "api-notification#event-show",
      "name": "show",
      "description": "Emitted when the notification is shown to the user, note this could be fired multiple times as a notification can be shown multiple times through the `show()` method.",
      "parameters": [
        {
          "name": "event",
          "description": "",
          "collection": false,
          "type": "Event",
          "required": true
        }
      ],
      "additionalTags": [],
      "apiType": "event",
      "fullSignature": "Notification.on('show')",
      "url": "https://electronjs.org/docs/api/notification#event-show",
      "slug": "notificationonshow",
      "tldr": "Emitted when the notification is shown to the user, note this could be fired multiple times as a notification can be shown multiple times through the `show()` method.",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:show",
        "api:notificationonshow",
        "api:Notification.on('show')",
        "doc:show",
        "doc:notificationonshow",
        "doc:Notification.on('show')"
      ]
    },
    {
      "objectID": "api-notification#event-click",
      "name": "click",
      "description": "Emitted when the notification is clicked by the user.",
      "parameters": [
        {
          "name": "event",
          "description": "",
          "collection": false,
          "type": "Event",
          "required": true
        }
      ],
      "additionalTags": [],
      "apiType": "event",
      "fullSignature": "Notification.on('click')",
      "url": "https://electronjs.org/docs/api/notification#event-click",
      "slug": "notificationonclick",
      "tldr": "Emitted when the notification is clicked by the user.",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:click",
        "api:notificationonclick",
        "api:Notification.on('click')",
        "doc:click",
        "doc:notificationonclick",
        "doc:Notification.on('click')"
      ]
    },
    {
      "objectID": "api-notification#event-close",
      "name": "close",
      "description": "Emitted when the notification is closed by manual intervention from the user.\n\nThis event is not guaranteed to be emitted in all cases where the notification is closed.",
      "parameters": [
        {
          "name": "event",
          "description": "",
          "collection": false,
          "type": "Event",
          "required": true
        }
      ],
      "additionalTags": [],
      "apiType": "event",
      "fullSignature": "Notification.on('close')",
      "url": "https://electronjs.org/docs/api/notification#event-close",
      "slug": "notificationonclose",
      "tldr": "Emitted when the notification is closed by manual intervention from the user.\n\nThis event is not guaranteed to be emitted in all cases where the notification is closed.",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:close",
        "api:notificationonclose",
        "api:Notification.on('close')",
        "doc:close",
        "doc:notificationonclose",
        "doc:Notification.on('close')"
      ]
    },
    {
      "objectID": "api-notification#event-reply",
      "name": "reply",
      "description": "Emitted when the user clicks the \"Reply\" button on a notification with `hasReply: true`.",
      "parameters": [
        {
          "name": "event",
          "description": "",
          "collection": false,
          "type": "Event",
          "required": true
        },
        {
          "name": "reply",
          "description": "The string the user entered into the inline reply field.",
          "collection": false,
          "type": "String",
          "possibleValues": null,
          "required": true
        }
      ],
      "additionalTags": [
        "os_macos"
      ],
      "apiType": "event",
      "fullSignature": "Notification.on('reply')",
      "url": "https://electronjs.org/docs/api/notification#event-reply",
      "slug": "notificationonreply",
      "tldr": "Emitted when the user clicks the \"Reply\" button on a notification with `hasReply: true`.",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:reply",
        "api:notificationonreply",
        "api:Notification.on('reply')",
        "doc:reply",
        "doc:notificationonreply",
        "doc:Notification.on('reply')"
      ]
    },
    {
      "objectID": "api-notification#event-action",
      "name": "action",
      "description": "",
      "parameters": [
        {
          "name": "event",
          "description": "",
          "collection": false,
          "type": "Event",
          "required": true
        },
        {
          "name": "index",
          "description": "The index of the action that was activated.",
          "collection": false,
          "type": "Number",
          "required": true
        }
      ],
      "additionalTags": [
        "os_macos"
      ],
      "apiType": "event",
      "fullSignature": "Notification.on('action')",
      "url": "https://electronjs.org/docs/api/notification#event-action",
      "slug": "notificationonaction",
      "tldr": null,
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:action",
        "api:notificationonaction",
        "api:Notification.on('action')",
        "doc:action",
        "doc:notificationonaction",
        "doc:Notification.on('action')"
      ]
    },
    {
      "objectID": "api-power-monitor#powermonitorgetsystemidlestateidlethreshold",
      "name": "getSystemIdleState",
      "signature": "(idleThreshold)",
      "description": "The system's current state. Can be `active`, `idle`, `locked` or `unknown`.\n\nCalculate the system idle state. `idleThreshold` is the amount of time (in seconds) before considered idle.  `locked` is available on supported systems only.",
      "parameters": [
        {
          "name": "idleThreshold",
          "description": "",
          "required": true,
          "collection": false,
          "type": "Integer"
        }
      ],
      "returns": {
        "collection": false,
        "type": "String",
        "possibleValues": [
          {
            "value": "active",
            "description": ""
          },
          {
            "value": "idle",
            "description": ""
          },
          {
            "value": "locked",
            "description": ""
          },
          {
            "value": "unknown",
            "description": ""
          }
        ]
      },
      "additionalTags": [],
      "apiType": "methods",
      "fullSignature": "powerMonitor.getSystemIdleState(idleThreshold)",
      "tldr": "The system's current state.",
      "slug": "powermonitorgetsystemidlestateidlethreshold",
      "url": "https://electronjs.org/docs/api/power-monitor#powermonitorgetsystemidlestateidlethreshold",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:getSystemIdleState",
        "api:powermonitorgetsystemidlestateidlethreshold",
        "api:powerMonitor.getSystemIdleState(idleThreshold)",
        "doc:getSystemIdleState",
        "doc:powermonitorgetsystemidlestateidlethreshold",
        "doc:powerMonitor.getSystemIdleState(idleThreshold)"
      ]
    },
    {
      "objectID": "api-power-monitor#powermonitorgetsystemidletime",
      "name": "getSystemIdleTime",
      "signature": "()",
      "description": "Idle time in seconds\n\nCalculate system idle time in seconds.",
      "parameters": [],
      "returns": {
        "collection": false,
        "type": "Integer"
      },
      "additionalTags": [],
      "apiType": "methods",
      "fullSignature": "powerMonitor.getSystemIdleTime()",
      "tldr": "Idle time in seconds\n\nCalculate system idle time in seconds.",
      "slug": "powermonitorgetsystemidletime",
      "url": "https://electronjs.org/docs/api/power-monitor#powermonitorgetsystemidletime",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:getSystemIdleTime",
        "api:powermonitorgetsystemidletime",
        "api:powerMonitor.getSystemIdleTime()",
        "doc:getSystemIdleTime",
        "doc:powermonitorgetsystemidletime",
        "doc:powerMonitor.getSystemIdleTime()"
      ]
    },
    {
      "objectID": "api-power-monitor#event-suspend",
      "name": "suspend",
      "description": "Emitted when the system is suspending.",
      "parameters": [],
      "additionalTags": [],
      "apiType": "event",
      "fullSignature": "powerMonitor.on('suspend')",
      "url": "https://electronjs.org/docs/api/power-monitor#event-suspend",
      "slug": "powermonitoronsuspend",
      "tldr": "Emitted when the system is suspending.",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:suspend",
        "api:powermonitoronsuspend",
        "api:powerMonitor.on('suspend')",
        "doc:suspend",
        "doc:powermonitoronsuspend",
        "doc:powerMonitor.on('suspend')"
      ]
    },
    {
      "objectID": "api-power-monitor#event-resume",
      "name": "resume",
      "description": "Emitted when system is resuming.",
      "parameters": [],
      "additionalTags": [],
      "apiType": "event",
      "fullSignature": "powerMonitor.on('resume')",
      "url": "https://electronjs.org/docs/api/power-monitor#event-resume",
      "slug": "powermonitoronresume",
      "tldr": "Emitted when system is resuming.",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:resume",
        "api:powermonitoronresume",
        "api:powerMonitor.on('resume')",
        "doc:resume",
        "doc:powermonitoronresume",
        "doc:powerMonitor.on('resume')"
      ]
    },
    {
      "objectID": "api-power-monitor#event-on-ac",
      "name": "on-ac",
      "description": "Emitted when the system changes to AC power.",
      "parameters": [],
      "additionalTags": [
        "os_windows"
      ],
      "apiType": "event",
      "fullSignature": "powerMonitor.on('on-ac')",
      "url": "https://electronjs.org/docs/api/power-monitor#event-on-ac",
      "slug": "powermonitoronon-ac",
      "tldr": "Emitted when the system changes to AC power.",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:on-ac",
        "api:powermonitoronon-ac",
        "api:powerMonitor.on('on-ac')",
        "doc:on-ac",
        "doc:powermonitoronon-ac",
        "doc:powerMonitor.on('on-ac')"
      ]
    },
    {
      "objectID": "api-power-monitor#event-on-battery",
      "name": "on-battery",
      "description": "Emitted when system changes to battery power.",
      "parameters": [],
      "additionalTags": [
        "os_windows"
      ],
      "apiType": "event",
      "fullSignature": "powerMonitor.on('on-battery')",
      "url": "https://electronjs.org/docs/api/power-monitor#event-on-battery",
      "slug": "powermonitoronon-battery",
      "tldr": "Emitted when system changes to battery power.",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:on-battery",
        "api:powermonitoronon-battery",
        "api:powerMonitor.on('on-battery')",
        "doc:on-battery",
        "doc:powermonitoronon-battery",
        "doc:powerMonitor.on('on-battery')"
      ]
    },
    {
      "objectID": "api-power-monitor#event-shutdown",
      "name": "shutdown",
      "description": "Emitted when the system is about to reboot or shut down. If the event handler invokes `e.preventDefault()`, Electron will attempt to delay system shutdown in order for the app to exit cleanly. If `e.preventDefault()` is called, the app should exit as soon as possible by calling something like `app.quit()`.",
      "parameters": [],
      "additionalTags": [
        "os_linux",
        "os_macos"
      ],
      "apiType": "event",
      "fullSignature": "powerMonitor.on('shutdown')",
      "url": "https://electronjs.org/docs/api/power-monitor#event-shutdown",
      "slug": "powermonitoronshutdown",
      "tldr": "Emitted when the system is about to reboot or shut down.",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:shutdown",
        "api:powermonitoronshutdown",
        "api:powerMonitor.on('shutdown')",
        "doc:shutdown",
        "doc:powermonitoronshutdown",
        "doc:powerMonitor.on('shutdown')"
      ]
    },
    {
      "objectID": "api-power-monitor#event-lock-screen",
      "name": "lock-screen",
      "description": "Emitted when the system is about to lock the screen.",
      "parameters": [],
      "additionalTags": [
        "os_macos",
        "os_windows"
      ],
      "apiType": "event",
      "fullSignature": "powerMonitor.on('lock-screen')",
      "url": "https://electronjs.org/docs/api/power-monitor#event-lock-screen",
      "slug": "powermonitoronlock-screen",
      "tldr": "Emitted when the system is about to lock the screen.",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:lock-screen",
        "api:powermonitoronlock-screen",
        "api:powerMonitor.on('lock-screen')",
        "doc:lock-screen",
        "doc:powermonitoronlock-screen",
        "doc:powerMonitor.on('lock-screen')"
      ]
    },
    {
      "objectID": "api-power-monitor#event-unlock-screen",
      "name": "unlock-screen",
      "description": "Emitted as soon as the systems screen is unlocked.",
      "parameters": [],
      "additionalTags": [
        "os_macos",
        "os_windows"
      ],
      "apiType": "event",
      "fullSignature": "powerMonitor.on('unlock-screen')",
      "url": "https://electronjs.org/docs/api/power-monitor#event-unlock-screen",
      "slug": "powermonitoronunlock-screen",
      "tldr": "Emitted as soon as the systems screen is unlocked.",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:unlock-screen",
        "api:powermonitoronunlock-screen",
        "api:powerMonitor.on('unlock-screen')",
        "doc:unlock-screen",
        "doc:powermonitoronunlock-screen",
        "doc:powerMonitor.on('unlock-screen')"
      ]
    },
    {
      "objectID": "api-power-save-blocker#powersaveblockerstarttype",
      "name": "start",
      "signature": "(type)",
      "description": "The blocker ID that is assigned to this power blocker.\n\nStarts preventing the system from entering lower-power mode. Returns an integer identifying the power save blocker.\n\n**Note:** `prevent-display-sleep` has higher precedence over `prevent-app-suspension`. Only the highest precedence type takes effect. In other words, `prevent-display-sleep` always takes precedence over `prevent-app-suspension`.\n\nFor example, an API calling A requests for `prevent-app-suspension`, and another calling B requests for `prevent-display-sleep`. `prevent-display-sleep` will be used until B stops its request. After that, `prevent-app-suspension` is used.",
      "parameters": [
        {
          "name": "type",
          "description": "Power save blocker type.",
          "required": true,
          "collection": false,
          "type": "String",
          "possibleValues": [
            {
              "value": "prevent-app-suspension",
              "description": "Prevent the application from being suspended. Keeps system active but allows screen to be turned off. Example use cases: downloading a file or playing audio."
            },
            {
              "value": "prevent-display-sleep",
              "description": "Prevent the display from going to sleep. Keeps system and screen active. Example use case: playing video."
            }
          ]
        }
      ],
      "returns": {
        "collection": false,
        "type": "Integer"
      },
      "additionalTags": [],
      "apiType": "methods",
      "fullSignature": "powerSaveBlocker.start(type)",
      "tldr": "The blocker ID that is assigned to this power blocker.\n\nStarts preventing the system from entering lower-power mode.",
      "slug": "powersaveblockerstarttype",
      "url": "https://electronjs.org/docs/api/power-save-blocker#powersaveblockerstarttype",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:start",
        "api:powersaveblockerstarttype",
        "api:powerSaveBlocker.start(type)",
        "doc:start",
        "doc:powersaveblockerstarttype",
        "doc:powerSaveBlocker.start(type)"
      ]
    },
    {
      "objectID": "api-power-save-blocker#powersaveblockerstopid",
      "name": "stop",
      "signature": "(id)",
      "description": "Stops the specified power save blocker.",
      "parameters": [
        {
          "name": "id",
          "description": "The power save blocker id returned by `powerSaveBlocker.start`.",
          "required": true,
          "collection": false,
          "type": "Integer"
        }
      ],
      "returns": null,
      "additionalTags": [],
      "apiType": "methods",
      "fullSignature": "powerSaveBlocker.stop(id)",
      "tldr": "Stops the specified power save blocker.",
      "slug": "powersaveblockerstopid",
      "url": "https://electronjs.org/docs/api/power-save-blocker#powersaveblockerstopid",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:stop",
        "api:powersaveblockerstopid",
        "api:powerSaveBlocker.stop(id)",
        "doc:stop",
        "doc:powersaveblockerstopid",
        "doc:powerSaveBlocker.stop(id)"
      ]
    },
    {
      "objectID": "api-power-save-blocker#powersaveblockerisstartedid",
      "name": "isStarted",
      "signature": "(id)",
      "description": "Whether the corresponding `powerSaveBlocker` has started.",
      "parameters": [
        {
          "name": "id",
          "description": "The power save blocker id returned by `powerSaveBlocker.start`.",
          "required": true,
          "collection": false,
          "type": "Integer"
        }
      ],
      "returns": {
        "collection": false,
        "type": "Boolean"
      },
      "additionalTags": [],
      "apiType": "methods",
      "fullSignature": "powerSaveBlocker.isStarted(id)",
      "tldr": "Whether the corresponding `powerSaveBlocker` has started.",
      "slug": "powersaveblockerisstartedid",
      "url": "https://electronjs.org/docs/api/power-save-blocker#powersaveblockerisstartedid",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:isStarted",
        "api:powersaveblockerisstartedid",
        "api:powerSaveBlocker.isStarted(id)",
        "doc:isStarted",
        "doc:powersaveblockerisstartedid",
        "doc:powerSaveBlocker.isStarted(id)"
      ]
    },
    {
      "objectID": "api-process#processdefaultapp",
      "name": "defaultApp",
      "description": "A `Boolean`. When app is started by being passed as parameter to the default app, this property is `true` in the main process, otherwise it is `undefined`.",
      "required": true,
      "additionalTags": [
        "availability_readonly"
      ],
      "collection": false,
      "type": "Boolean",
      "apiType": "properties",
      "fullSignature": "process.defaultApp",
      "tldr": "A `Boolean`.",
      "slug": "processdefaultapp",
      "url": "https://electronjs.org/docs/api/process#processdefaultapp",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:defaultApp",
        "api:processdefaultapp",
        "api:process.defaultApp",
        "doc:defaultApp",
        "doc:processdefaultapp",
        "doc:process.defaultApp"
      ]
    },
    {
      "objectID": "api-process#processismainframe",
      "name": "isMainFrame",
      "description": "A `Boolean`, `true` when the current renderer context is the \"main\" renderer frame. If you want the ID of the current frame you should use `webFrame.routingId`.",
      "required": true,
      "additionalTags": [
        "availability_readonly"
      ],
      "collection": false,
      "type": "Boolean",
      "apiType": "properties",
      "fullSignature": "process.isMainFrame",
      "tldr": "A `Boolean`, `true` when the current renderer context is the \"main\" renderer frame.",
      "slug": "processismainframe",
      "url": "https://electronjs.org/docs/api/process#processismainframe",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:isMainFrame",
        "api:processismainframe",
        "api:process.isMainFrame",
        "doc:isMainFrame",
        "doc:processismainframe",
        "doc:process.isMainFrame"
      ]
    },
    {
      "objectID": "api-process#processmas",
      "name": "mas",
      "description": "A `Boolean`. For Mac App Store build, this property is `true`, for other builds it is `undefined`.",
      "required": true,
      "additionalTags": [
        "availability_readonly"
      ],
      "collection": false,
      "type": "Boolean",
      "apiType": "properties",
      "fullSignature": "process.mas",
      "tldr": "A `Boolean`.",
      "slug": "processmas",
      "url": "https://electronjs.org/docs/api/process#processmas",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:mas",
        "api:processmas",
        "api:process.mas",
        "doc:mas",
        "doc:processmas",
        "doc:process.mas"
      ]
    },
    {
      "objectID": "api-process#processnoasar",
      "name": "noAsar",
      "description": "A `Boolean` that controls ASAR support inside your application. Setting this to `true` will disable the support for `asar` archives in Node's built-in modules.",
      "required": true,
      "additionalTags": [],
      "collection": false,
      "type": "Boolean",
      "apiType": "properties",
      "fullSignature": "process.noAsar",
      "tldr": "A `Boolean` that controls ASAR support inside your application.",
      "slug": "processnoasar",
      "url": "https://electronjs.org/docs/api/process#processnoasar",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:noAsar",
        "api:processnoasar",
        "api:process.noAsar",
        "doc:noAsar",
        "doc:processnoasar",
        "doc:process.noAsar"
      ]
    },
    {
      "objectID": "api-process#processnodeprecation",
      "name": "noDeprecation",
      "description": "A `Boolean` that controls whether or not deprecation warnings are printed to `stderr`. Setting this to `true` will silence deprecation warnings. This property is used instead of the `--no-deprecation` command line flag.",
      "required": true,
      "additionalTags": [],
      "collection": false,
      "type": "Boolean",
      "apiType": "properties",
      "fullSignature": "process.noDeprecation",
      "tldr": "A `Boolean` that controls whether or not deprecation warnings are printed to `stderr`.",
      "slug": "processnodeprecation",
      "url": "https://electronjs.org/docs/api/process#processnodeprecation",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:noDeprecation",
        "api:processnodeprecation",
        "api:process.noDeprecation",
        "doc:noDeprecation",
        "doc:processnodeprecation",
        "doc:process.noDeprecation"
      ]
    },
    {
      "objectID": "api-process#processenablepromiseapis",
      "name": "enablePromiseAPIs",
      "description": "A `Boolean` that controls whether or not deprecation warnings are printed to `stderr` when formerly callback-based APIs converted to Promises are invoked using callbacks. Setting this to `true` will enable deprecation warnings.",
      "required": true,
      "additionalTags": [],
      "collection": false,
      "type": "Boolean",
      "apiType": "properties",
      "fullSignature": "process.enablePromiseAPIs",
      "tldr": "A `Boolean` that controls whether or not deprecation warnings are printed to `stderr` when formerly callback-based APIs converted to Promises are invoked using callbacks.",
      "slug": "processenablepromiseapis",
      "url": "https://electronjs.org/docs/api/process#processenablepromiseapis",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:enablePromiseAPIs",
        "api:processenablepromiseapis",
        "api:process.enablePromiseAPIs",
        "doc:enablePromiseAPIs",
        "doc:processenablepromiseapis",
        "doc:process.enablePromiseAPIs"
      ]
    },
    {
      "objectID": "api-process#processresourcespath",
      "name": "resourcesPath",
      "description": "A `String` representing the path to the resources directory.",
      "required": true,
      "additionalTags": [
        "availability_readonly"
      ],
      "collection": false,
      "type": "String",
      "possibleValues": null,
      "apiType": "properties",
      "fullSignature": "process.resourcesPath",
      "tldr": "A `String` representing the path to the resources directory.",
      "slug": "processresourcespath",
      "url": "https://electronjs.org/docs/api/process#processresourcespath",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:resourcesPath",
        "api:processresourcespath",
        "api:process.resourcesPath",
        "doc:resourcesPath",
        "doc:processresourcespath",
        "doc:process.resourcesPath"
      ]
    },
    {
      "objectID": "api-process#processsandboxed",
      "name": "sandboxed",
      "description": "A `Boolean`. When the renderer process is sandboxed, this property is `true`, otherwise it is `undefined`.",
      "required": true,
      "additionalTags": [
        "availability_readonly"
      ],
      "collection": false,
      "type": "Boolean",
      "apiType": "properties",
      "fullSignature": "process.sandboxed",
      "tldr": "A `Boolean`.",
      "slug": "processsandboxed",
      "url": "https://electronjs.org/docs/api/process#processsandboxed",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:sandboxed",
        "api:processsandboxed",
        "api:process.sandboxed",
        "doc:sandboxed",
        "doc:processsandboxed",
        "doc:process.sandboxed"
      ]
    },
    {
      "objectID": "api-process#processthrowdeprecation",
      "name": "throwDeprecation",
      "description": "A `Boolean` that controls whether or not deprecation warnings will be thrown as exceptions. Setting this to `true` will throw errors for deprecations. This property is used instead of the `--throw-deprecation` command line flag.",
      "required": true,
      "additionalTags": [],
      "collection": false,
      "type": "Boolean",
      "apiType": "properties",
      "fullSignature": "process.throwDeprecation",
      "tldr": "A `Boolean` that controls whether or not deprecation warnings will be thrown as exceptions.",
      "slug": "processthrowdeprecation",
      "url": "https://electronjs.org/docs/api/process#processthrowdeprecation",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:throwDeprecation",
        "api:processthrowdeprecation",
        "api:process.throwDeprecation",
        "doc:throwDeprecation",
        "doc:processthrowdeprecation",
        "doc:process.throwDeprecation"
      ]
    },
    {
      "objectID": "api-process#processtracedeprecation",
      "name": "traceDeprecation",
      "description": "A `Boolean` that controls whether or not deprecations printed to `stderr` include their stack trace. Setting this to `true` will print stack traces for deprecations. This property is instead of the `--trace-deprecation` command line flag.",
      "required": true,
      "additionalTags": [],
      "collection": false,
      "type": "Boolean",
      "apiType": "properties",
      "fullSignature": "process.traceDeprecation",
      "tldr": "A `Boolean` that controls whether or not deprecations printed to `stderr` include their stack trace.",
      "slug": "processtracedeprecation",
      "url": "https://electronjs.org/docs/api/process#processtracedeprecation",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:traceDeprecation",
        "api:processtracedeprecation",
        "api:process.traceDeprecation",
        "doc:traceDeprecation",
        "doc:processtracedeprecation",
        "doc:process.traceDeprecation"
      ]
    },
    {
      "objectID": "api-process#processtraceprocesswarnings",
      "name": "traceProcessWarnings",
      "description": "A `Boolean` that controls whether or not process warnings printed to `stderr` include their stack trace. Setting this to `true` will print stack traces for process warnings (including deprecations). This property is instead of the `--trace-warnings` command line flag.",
      "required": true,
      "additionalTags": [],
      "collection": false,
      "type": "Boolean",
      "apiType": "properties",
      "fullSignature": "process.traceProcessWarnings",
      "tldr": "A `Boolean` that controls whether or not process warnings printed to `stderr` include their stack trace.",
      "slug": "processtraceprocesswarnings",
      "url": "https://electronjs.org/docs/api/process#processtraceprocesswarnings",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:traceProcessWarnings",
        "api:processtraceprocesswarnings",
        "api:process.traceProcessWarnings",
        "doc:traceProcessWarnings",
        "doc:processtraceprocesswarnings",
        "doc:process.traceProcessWarnings"
      ]
    },
    {
      "objectID": "api-process#processtype",
      "name": "type",
      "description": "A `String` representing the current process's type, can be `\"browser\"` (i.e. main process), `\"renderer\"`, or `\"worker\"` (i.e. web worker).",
      "required": true,
      "additionalTags": [
        "availability_readonly"
      ],
      "collection": false,
      "type": "String",
      "possibleValues": null,
      "apiType": "properties",
      "fullSignature": "process.type",
      "tldr": "A `String` representing the current process's type, can be `\"browser\"` (i.e.",
      "slug": "processtype",
      "url": "https://electronjs.org/docs/api/process#processtype",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:type",
        "api:processtype",
        "api:process.type",
        "doc:type",
        "doc:processtype",
        "doc:process.type"
      ]
    },
    {
      "objectID": "api-process#processchrome",
      "name": "chrome",
      "description": "A `String` representing Chrome's version string.",
      "required": true,
      "additionalTags": [
        "availability_readonly"
      ],
      "collection": false,
      "type": "String",
      "possibleValues": null,
      "apiType": "properties",
      "fullSignature": "process.chrome",
      "tldr": "A `String` representing Chrome's version string.",
      "slug": "processchrome",
      "url": "https://electronjs.org/docs/api/process#processchrome",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:chrome",
        "api:processchrome",
        "api:process.chrome",
        "doc:chrome",
        "doc:processchrome",
        "doc:process.chrome"
      ]
    },
    {
      "objectID": "api-process#processelectron",
      "name": "electron",
      "description": "A `String` representing Electron's version string.",
      "required": true,
      "additionalTags": [
        "availability_readonly"
      ],
      "collection": false,
      "type": "String",
      "possibleValues": null,
      "apiType": "properties",
      "fullSignature": "process.electron",
      "tldr": "A `String` representing Electron's version string.",
      "slug": "processelectron",
      "url": "https://electronjs.org/docs/api/process#processelectron",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:electron",
        "api:processelectron",
        "api:process.electron",
        "doc:electron",
        "doc:processelectron",
        "doc:process.electron"
      ]
    },
    {
      "objectID": "api-process#processwindowsstore",
      "name": "windowsStore",
      "description": "A `Boolean`. If the app is running as a Windows Store app (appx), this property is `true`, for otherwise it is `undefined`.",
      "required": true,
      "additionalTags": [
        "availability_readonly"
      ],
      "collection": false,
      "type": "Boolean",
      "apiType": "properties",
      "fullSignature": "process.windowsStore",
      "tldr": "A `Boolean`.",
      "slug": "processwindowsstore",
      "url": "https://electronjs.org/docs/api/process#processwindowsstore",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:windowsStore",
        "api:processwindowsstore",
        "api:process.windowsStore",
        "doc:windowsStore",
        "doc:processwindowsstore",
        "doc:process.windowsStore"
      ]
    },
    {
      "objectID": "api-process#processcrash",
      "name": "crash",
      "signature": "()",
      "description": "Causes the main thread of the current process crash.",
      "parameters": [],
      "returns": null,
      "additionalTags": [],
      "apiType": "methods",
      "fullSignature": "process.crash()",
      "tldr": "Causes the main thread of the current process crash.",
      "slug": "processcrash",
      "url": "https://electronjs.org/docs/api/process#processcrash",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:crash",
        "api:processcrash",
        "api:process.crash()",
        "doc:crash",
        "doc:processcrash",
        "doc:process.crash()"
      ]
    },
    {
      "objectID": "api-process#processgetcreationtime",
      "name": "getCreationTime",
      "signature": "()",
      "description": "The number of milliseconds since epoch, or `null` if the information is unavailable\n\nIndicates the creation time of the application. The time is represented as number of milliseconds since epoch. It returns null if it is unable to get the process creation time.",
      "parameters": [],
      "returns": {
        "collection": false,
        "type": [
          {
            "collection": false,
            "type": "Number"
          },
          {
            "type": "null",
            "collection": false
          }
        ]
      },
      "additionalTags": [],
      "apiType": "methods",
      "fullSignature": "process.getCreationTime()",
      "tldr": "The number of milliseconds since epoch, or `null` if the information is unavailable\n\nIndicates the creation time of the application.",
      "slug": "processgetcreationtime",
      "url": "https://electronjs.org/docs/api/process#processgetcreationtime",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:getCreationTime",
        "api:processgetcreationtime",
        "api:process.getCreationTime()",
        "doc:getCreationTime",
        "doc:processgetcreationtime",
        "doc:process.getCreationTime()"
      ]
    },
    {
      "objectID": "api-process#processgetcpuusage",
      "name": "getCPUUsage",
      "signature": "()",
      "description": "",
      "parameters": [],
      "returns": {
        "collection": false,
        "type": "CPUUsage"
      },
      "additionalTags": [],
      "apiType": "methods",
      "fullSignature": "process.getCPUUsage()",
      "tldr": null,
      "slug": "processgetcpuusage",
      "url": "https://electronjs.org/docs/api/process#processgetcpuusage",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:getCPUUsage",
        "api:processgetcpuusage",
        "api:process.getCPUUsage()",
        "doc:getCPUUsage",
        "doc:processgetcpuusage",
        "doc:process.getCPUUsage()"
      ]
    },
    {
      "objectID": "api-process#processgetiocounters",
      "name": "getIOCounters",
      "signature": "()",
      "description": "",
      "parameters": [],
      "returns": {
        "collection": false,
        "type": "IOCounters"
      },
      "additionalTags": [
        "os_windows",
        "os_linux"
      ],
      "apiType": "methods",
      "fullSignature": "process.getIOCounters()",
      "tldr": null,
      "slug": "processgetiocounters",
      "url": "https://electronjs.org/docs/api/process#processgetiocounters",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:getIOCounters",
        "api:processgetiocounters",
        "api:process.getIOCounters()",
        "doc:getIOCounters",
        "doc:processgetiocounters",
        "doc:process.getIOCounters()"
      ]
    },
    {
      "objectID": "api-process#processgetheapstatistics",
      "name": "getHeapStatistics",
      "signature": "()",
      "description": "* `totalHeapSize` Integer\n* `totalHeapSizeExecutable` Integer\n* `totalPhysicalSize` Integer\n* `totalAvailableSize` Integer\n* `usedHeapSize` Integer\n* `heapSizeLimit` Integer\n* `mallocedMemory` Integer\n* `peakMallocedMemory` Integer\n* `doesZapGarbage` Boolean\n\nReturns an object with V8 heap statistics. Note that all statistics are reported in Kilobytes.",
      "parameters": [],
      "returns": {
        "collection": false,
        "type": "Object",
        "properties": [
          {
            "name": "totalHeapSize",
            "description": "",
            "required": true,
            "additionalTags": [],
            "collection": false,
            "type": "Integer"
          },
          {
            "name": "totalHeapSizeExecutable",
            "description": "",
            "required": true,
            "additionalTags": [],
            "collection": false,
            "type": "Integer"
          },
          {
            "name": "totalPhysicalSize",
            "description": "",
            "required": true,
            "additionalTags": [],
            "collection": false,
            "type": "Integer"
          },
          {
            "name": "totalAvailableSize",
            "description": "",
            "required": true,
            "additionalTags": [],
            "collection": false,
            "type": "Integer"
          },
          {
            "name": "usedHeapSize",
            "description": "",
            "required": true,
            "additionalTags": [],
            "collection": false,
            "type": "Integer"
          },
          {
            "name": "heapSizeLimit",
            "description": "",
            "required": true,
            "additionalTags": [],
            "collection": false,
            "type": "Integer"
          },
          {
            "name": "mallocedMemory",
            "description": "",
            "required": true,
            "additionalTags": [],
            "collection": false,
            "type": "Integer"
          },
          {
            "name": "peakMallocedMemory",
            "description": "",
            "required": true,
            "additionalTags": [],
            "collection": false,
            "type": "Integer"
          },
          {
            "name": "doesZapGarbage",
            "description": "",
            "required": true,
            "additionalTags": [],
            "collection": false,
            "type": "Boolean"
          }
        ]
      },
      "additionalTags": [],
      "apiType": "methods",
      "fullSignature": "process.getHeapStatistics()",
      "tldr": "* `totalHeapSize` Integer\n* `totalHeapSizeExecutable` Integer\n* `totalPhysicalSize` Integer\n* `totalAvailableSize` Integer\n* `usedHeapSize` Integer\n* `heapSizeLimit` Integer\n* `mallocedMemory` Integer\n* `peakMallocedMemory` Integer\n* `doesZapGarbage` Boolean\n\nReturns an object with V8 heap statistics.",
      "slug": "processgetheapstatistics",
      "url": "https://electronjs.org/docs/api/process#processgetheapstatistics",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:getHeapStatistics",
        "api:processgetheapstatistics",
        "api:process.getHeapStatistics()",
        "doc:getHeapStatistics",
        "doc:processgetheapstatistics",
        "doc:process.getHeapStatistics()"
      ]
    },
    {
      "objectID": "api-process#processgetblinkmemoryinfo",
      "name": "getBlinkMemoryInfo",
      "signature": "()",
      "description": "* `allocated` Integer - Size of all allocated objects in Kilobytes.\n* `marked` Integer - Size of all marked objects in Kilobytes.\n* `total` Integer - Total allocated space in Kilobytes.\n\nReturns an object with Blink memory information. It can be useful for debugging rendering / DOM related memory issues. Note that all values are reported in Kilobytes.",
      "parameters": [],
      "returns": {
        "collection": false,
        "type": "Object",
        "properties": [
          {
            "name": "allocated",
            "description": "Size of all allocated objects in Kilobytes.",
            "required": true,
            "additionalTags": [],
            "collection": false,
            "type": "Integer"
          },
          {
            "name": "marked",
            "description": "Size of all marked objects in Kilobytes.",
            "required": true,
            "additionalTags": [],
            "collection": false,
            "type": "Integer"
          },
          {
            "name": "total",
            "description": "Total allocated space in Kilobytes.",
            "required": true,
            "additionalTags": [],
            "collection": false,
            "type": "Integer"
          }
        ]
      },
      "additionalTags": [],
      "apiType": "methods",
      "fullSignature": "process.getBlinkMemoryInfo()",
      "tldr": "* `allocated` Integer - Size of all allocated objects in Kilobytes.\n* `marked` Integer - Size of all marked objects in Kilobytes.\n* `total` Integer - Total allocated space in Kilobytes.\n\nReturns an object with Blink memory information.",
      "slug": "processgetblinkmemoryinfo",
      "url": "https://electronjs.org/docs/api/process#processgetblinkmemoryinfo",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:getBlinkMemoryInfo",
        "api:processgetblinkmemoryinfo",
        "api:process.getBlinkMemoryInfo()",
        "doc:getBlinkMemoryInfo",
        "doc:processgetblinkmemoryinfo",
        "doc:process.getBlinkMemoryInfo()"
      ]
    },
    {
      "objectID": "api-process#processgetprocessmemoryinfo",
      "name": "getProcessMemoryInfo",
      "signature": "()",
      "description": "Resolves with a ProcessMemoryInfo\n\nReturns an object giving memory usage statistics about the current process. Note that all statistics are reported in Kilobytes. This api should be called after app ready.\n\nChromium does not provide `residentSet` value for macOS. This is because macOS performs in-memory compression of pages that haven't been recently used. As a result the resident set size value is not what one would expect. `private` memory is more representative of the actual pre-compression memory usage of the process on macOS.",
      "parameters": [],
      "returns": {
        "collection": false,
        "type": "Promise",
        "innerTypes": [
          {
            "collection": false,
            "type": "ProcessMemoryInfo"
          }
        ]
      },
      "additionalTags": [],
      "apiType": "methods",
      "fullSignature": "process.getProcessMemoryInfo()",
      "tldr": "Resolves with a ProcessMemoryInfo\n\nReturns an object giving memory usage statistics about the current process.",
      "slug": "processgetprocessmemoryinfo",
      "url": "https://electronjs.org/docs/api/process#processgetprocessmemoryinfo",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:getProcessMemoryInfo",
        "api:processgetprocessmemoryinfo",
        "api:process.getProcessMemoryInfo()",
        "doc:getProcessMemoryInfo",
        "doc:processgetprocessmemoryinfo",
        "doc:process.getProcessMemoryInfo()"
      ]
    },
    {
      "objectID": "api-process#processgetsystemmemoryinfo",
      "name": "getSystemMemoryInfo",
      "signature": "()",
      "description": "* `total` Integer - The total amount of physical memory in Kilobytes available to the system.\n* `free` Integer - The total amount of memory not being used by applications or disk cache.\n* `swapTotal` Integer _Windows_ _Linux_ - The total amount of swap memory in Kilobytes available to the system.\n* `swapFree` Integer _Windows_ _Linux_ - The free amount of swap memory in Kilobytes available to the system.\n\nReturns an object giving memory usage statistics about the entire system. Note that all statistics are reported in Kilobytes.",
      "parameters": [],
      "returns": {
        "collection": false,
        "type": "Object",
        "properties": [
          {
            "name": "total",
            "description": "The total amount of physical memory in Kilobytes available to the system.",
            "required": true,
            "additionalTags": [],
            "collection": false,
            "type": "Integer"
          },
          {
            "name": "free",
            "description": "The total amount of memory not being used by applications or disk cache.",
            "required": true,
            "additionalTags": [],
            "collection": false,
            "type": "Integer"
          },
          {
            "name": "swapTotal",
            "description": "The total amount of swap memory in Kilobytes available to the system.",
            "required": true,
            "additionalTags": [
              "os_windows",
              "os_linux"
            ],
            "collection": false,
            "type": "Integer"
          },
          {
            "name": "swapFree",
            "description": "The free amount of swap memory in Kilobytes available to the system.",
            "required": true,
            "additionalTags": [
              "os_windows",
              "os_linux"
            ],
            "collection": false,
            "type": "Integer"
          }
        ]
      },
      "additionalTags": [],
      "apiType": "methods",
      "fullSignature": "process.getSystemMemoryInfo()",
      "tldr": "* `total` Integer - The total amount of physical memory in Kilobytes available to the system.\n* `free` Integer - The total amount of memory not being used by applications or disk cache.\n* `swapTotal` Integer _Windows_ _Linux_ - The total amount of swap memory in Kilobytes available to the system.\n* `swapFree` Integer _Windows_ _Linux_ - The free amount of swap memory in Kilobytes available to the system.\n\nReturns an object giving memory usage statistics about the entire system.",
      "slug": "processgetsystemmemoryinfo",
      "url": "https://electronjs.org/docs/api/process#processgetsystemmemoryinfo",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:getSystemMemoryInfo",
        "api:processgetsystemmemoryinfo",
        "api:process.getSystemMemoryInfo()",
        "doc:getSystemMemoryInfo",
        "doc:processgetsystemmemoryinfo",
        "doc:process.getSystemMemoryInfo()"
      ]
    },
    {
      "objectID": "api-process#processgetsystemversion",
      "name": "getSystemVersion",
      "signature": "()",
      "description": "The version of the host operating system.\n\nExample:\n\n**Note:** It returns the actual operating system version instead of kernel version on macOS unlike `os.release()`.",
      "parameters": [],
      "returns": {
        "collection": false,
        "type": "String",
        "possibleValues": null
      },
      "additionalTags": [],
      "apiType": "methods",
      "fullSignature": "process.getSystemVersion()",
      "tldr": "The version of the host operating system.\n\nExample:\n\n**Note:** It returns the actual operating system version instead of kernel version on macOS unlike `os.release()`.",
      "slug": "processgetsystemversion",
      "url": "https://electronjs.org/docs/api/process#processgetsystemversion",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:getSystemVersion",
        "api:processgetsystemversion",
        "api:process.getSystemVersion()",
        "doc:getSystemVersion",
        "doc:processgetsystemversion",
        "doc:process.getSystemVersion()"
      ]
    },
    {
      "objectID": "api-process#processtakeheapsnapshotfilepath",
      "name": "takeHeapSnapshot",
      "signature": "(filePath)",
      "description": "Indicates whether the snapshot has been created successfully.\n\nTakes a V8 heap snapshot and saves it to `filePath`.",
      "parameters": [
        {
          "name": "filePath",
          "description": "Path to the output file.",
          "required": true,
          "collection": false,
          "type": "String",
          "possibleValues": null
        }
      ],
      "returns": {
        "collection": false,
        "type": "Boolean"
      },
      "additionalTags": [],
      "apiType": "methods",
      "fullSignature": "process.takeHeapSnapshot(filePath)",
      "tldr": "Indicates whether the snapshot has been created successfully.\n\nTakes a V8 heap snapshot and saves it to `filePath`.",
      "slug": "processtakeheapsnapshotfilepath",
      "url": "https://electronjs.org/docs/api/process#processtakeheapsnapshotfilepath",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:takeHeapSnapshot",
        "api:processtakeheapsnapshotfilepath",
        "api:process.takeHeapSnapshot(filePath)",
        "doc:takeHeapSnapshot",
        "doc:processtakeheapsnapshotfilepath",
        "doc:process.takeHeapSnapshot(filePath)"
      ]
    },
    {
      "objectID": "api-process#processhang",
      "name": "hang",
      "signature": "()",
      "description": "Causes the main thread of the current process hang.",
      "parameters": [],
      "returns": null,
      "additionalTags": [],
      "apiType": "methods",
      "fullSignature": "process.hang()",
      "tldr": "Causes the main thread of the current process hang.",
      "slug": "processhang",
      "url": "https://electronjs.org/docs/api/process#processhang",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:hang",
        "api:processhang",
        "api:process.hang()",
        "doc:hang",
        "doc:processhang",
        "doc:process.hang()"
      ]
    },
    {
      "objectID": "api-process#processsetfdlimitmaxdescriptors",
      "name": "setFdLimit",
      "signature": "(maxDescriptors)",
      "description": "Sets the file descriptor soft limit to `maxDescriptors` or the OS hard limit, whichever is lower for the current process.",
      "parameters": [
        {
          "name": "maxDescriptors",
          "description": "",
          "required": true,
          "collection": false,
          "type": "Integer"
        }
      ],
      "returns": null,
      "additionalTags": [
        "os_macos",
        "os_linux"
      ],
      "apiType": "methods",
      "fullSignature": "process.setFdLimit(maxDescriptors)",
      "tldr": "Sets the file descriptor soft limit to `maxDescriptors` or the OS hard limit, whichever is lower for the current process.",
      "slug": "processsetfdlimitmaxdescriptors",
      "url": "https://electronjs.org/docs/api/process#processsetfdlimitmaxdescriptors",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:setFdLimit",
        "api:processsetfdlimitmaxdescriptors",
        "api:process.setFdLimit(maxDescriptors)",
        "doc:setFdLimit",
        "doc:processsetfdlimitmaxdescriptors",
        "doc:process.setFdLimit(maxDescriptors)"
      ]
    },
    {
      "objectID": "api-process#event-loaded",
      "name": "loaded",
      "description": "Emitted when Electron has loaded its internal initialization script and is beginning to load the web page or the main script.\n\nIt can be used by the preload script to add removed Node global symbols back to the global scope when node integration is turned off:",
      "parameters": [],
      "additionalTags": [],
      "apiType": "event",
      "fullSignature": "process.on('loaded')",
      "url": "https://electronjs.org/docs/api/process#event-loaded",
      "slug": "processonloaded",
      "tldr": "Emitted when Electron has loaded its internal initialization script and is beginning to load the web page or the main script.\n\nIt can be used by the preload script to add removed Node global symbols back to the global scope when node integration is turned off:.",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:loaded",
        "api:processonloaded",
        "api:process.on('loaded')",
        "doc:loaded",
        "doc:processonloaded",
        "doc:process.on('loaded')"
      ]
    },
    {
      "objectID": "api-protocol#protocolregisterschemesasprivilegedcustomschemes",
      "name": "registerSchemesAsPrivileged",
      "signature": "(customSchemes)",
      "description": "**Note:** This method can only be used before the `ready` event of the `app` module gets emitted and can be called only once.\n\nRegisters the `scheme` as standard, secure, bypasses content security policy for resources, allows registering ServiceWorker and supports fetch API.\n\nSpecify a privilege with the value of `true` to enable the capability. An example of registering a privileged scheme, with bypassing Content Security Policy:\n\nA standard scheme adheres to what RFC 3986 calls generic URI syntax. For example `http` and `https` are standard schemes, while `file` is not.\n\nRegistering a scheme as standard, will allow relative and absolute resources to be resolved correctly when served. Otherwise the scheme will behave like the `file` protocol, but without the ability to resolve relative URLs.\n\nFor example when you load following page with custom protocol without registering it as standard scheme, the image will not be loaded because non-standard schemes can not recognize relative URLs:\n\nRegistering a scheme as standard will allow access to files through the FileSystem API. Otherwise the renderer will throw a security error for the scheme.\n\nBy default web storage apis (localStorage, sessionStorage, webSQL, indexedDB, cookies) are disabled for non standard schemes. So in general if you want to register a custom protocol to replace the `http` protocol, you have to register it as a standard scheme.\n\n`protocol.registerSchemesAsPrivileged` can be used to replicate the functionality of the previous `protocol.registerStandardSchemes`, `webFrame.registerURLSchemeAs*` and `protocol.registerServiceWorkerSchemes` functions that existed prior to Electron 5.0.0, for example:\n\n**before (<= v4.x)**\n\n**after (>= v5.x)**",
      "parameters": [
        {
          "name": "customSchemes",
          "description": "",
          "required": true,
          "collection": true,
          "type": "CustomScheme"
        }
      ],
      "returns": null,
      "additionalTags": [],
      "apiType": "methods",
      "fullSignature": "protocol.registerSchemesAsPrivileged(customSchemes)",
      "tldr": "**Note:** This method can only be used before the `ready` event of the `app` module gets emitted and can be called only once.\n\nRegisters the `scheme` as standard, secure, bypasses content security policy for resources, allows registering ServiceWorker and supports fetch API.\n\nSpecify a privilege with the value of `true` to enable the capability.",
      "slug": "protocolregisterschemesasprivilegedcustomschemes",
      "url": "https://electronjs.org/docs/api/protocol#protocolregisterschemesasprivilegedcustomschemes",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:registerSchemesAsPrivileged",
        "api:protocolregisterschemesasprivilegedcustomschemes",
        "api:protocol.registerSchemesAsPrivileged(customSchemes)",
        "doc:registerSchemesAsPrivileged",
        "doc:protocolregisterschemesasprivilegedcustomschemes",
        "doc:protocol.registerSchemesAsPrivileged(customSchemes)"
      ]
    },
    {
      "objectID": "api-protocol#protocolregisterfileprotocolscheme-handler-completion",
      "name": "registerFileProtocol",
      "signature": "(scheme, handler[, completion])",
      "description": "Registers a protocol of `scheme` that will send the file as a response. The `handler` will be called with `handler(request, callback)` when a `request` is going to be created with `scheme`. `completion` will be called with `completion(null)` when `scheme` is successfully registered or `completion(error)` when failed.\n\nTo handle the `request`, the `callback` should be called with either the file's path or an object that has a `path` property, e.g. `callback(filePath)` or `callback({ path: filePath })`. The object may also have a `headers` property which gives a map of headers to values for the response headers, e.g. `callback({ path: filePath, headers: {\"Content-Security-Policy\": \"default-src 'none'\"]})`.\n\nWhen `callback` is called with nothing, a number, or an object that has an `error` property, the `request` will fail with the `error` number you specified. For the available error numbers you can use, please see the net error list.\n\nBy default the `scheme` is treated like `http:`, which is parsed differently than protocols that follow the \"generic URI syntax\" like `file:`.",
      "parameters": [
        {
          "name": "scheme",
          "description": "",
          "required": true,
          "collection": false,
          "type": "String",
          "possibleValues": null
        },
        {
          "name": "handler",
          "description": "",
          "required": true,
          "collection": false,
          "type": "Function",
          "parameters": [
            {
              "name": "request",
              "description": "",
              "required": true,
              "collection": false,
              "type": "Object",
              "properties": [
                {
                  "name": "url",
                  "description": "",
                  "required": true,
                  "additionalTags": [],
                  "collection": false,
                  "type": "String",
                  "possibleValues": null
                },
                {
                  "name": "headers",
                  "description": "",
                  "required": true,
                  "additionalTags": [],
                  "collection": false,
                  "type": "Record",
                  "innerTypes": [
                    {
                      "collection": false,
                      "type": "String",
                      "possibleValues": null
                    },
                    {
                      "collection": false,
                      "type": "String",
                      "possibleValues": null
                    }
                  ]
                },
                {
                  "name": "referrer",
                  "description": "",
                  "required": true,
                  "additionalTags": [],
                  "collection": false,
                  "type": "String",
                  "possibleValues": null
                },
                {
                  "name": "method",
                  "description": "",
                  "required": true,
                  "additionalTags": [],
                  "collection": false,
                  "type": "String",
                  "possibleValues": null
                },
                {
                  "name": "uploadData",
                  "description": "",
                  "required": true,
                  "additionalTags": [],
                  "collection": true,
                  "type": "UploadData"
                }
              ]
            },
            {
              "name": "callback",
              "description": "",
              "required": true,
              "collection": false,
              "type": "Function",
              "parameters": [
                {
                  "name": "filePath",
                  "description": "",
                  "required": false,
                  "collection": false,
                  "type": [
                    {
                      "collection": false,
                      "type": "String",
                      "possibleValues": null
                    },
                    {
                      "collection": false,
                      "type": "FilePathWithHeaders"
                    }
                  ]
                }
              ],
              "returns": null
            }
          ],
          "returns": null
        },
        {
          "name": "completion",
          "description": "",
          "required": false,
          "collection": false,
          "type": "Function",
          "parameters": [
            {
              "name": "error",
              "description": "",
              "required": true,
              "collection": false,
              "type": "Error"
            }
          ],
          "returns": null
        }
      ],
      "returns": null,
      "additionalTags": [],
      "apiType": "methods",
      "fullSignature": "protocol.registerFileProtocol(scheme, handler[, completion])",
      "tldr": "Registers a protocol of `scheme` that will send the file as a response.",
      "slug": "protocolregisterfileprotocolscheme-handler-completion",
      "url": "https://electronjs.org/docs/api/protocol#protocolregisterfileprotocolscheme-handler-completion",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:registerFileProtocol",
        "api:protocolregisterfileprotocolscheme-handler-completion",
        "api:protocol.registerFileProtocol(scheme, handler[, completion])",
        "doc:registerFileProtocol",
        "doc:protocolregisterfileprotocolscheme-handler-completion",
        "doc:protocol.registerFileProtocol(scheme, handler[, completion])"
      ]
    },
    {
      "objectID": "api-protocol#protocolregisterbufferprotocolscheme-handler-completion",
      "name": "registerBufferProtocol",
      "signature": "(scheme, handler[, completion])",
      "description": "Registers a protocol of `scheme` that will send a `Buffer` as a response.\n\nThe usage is the same with `registerFileProtocol`, except that the `callback` should be called with either a `Buffer` object or an object that has the `data`, `mimeType`, and `charset` properties.\n\nExample:",
      "parameters": [
        {
          "name": "scheme",
          "description": "",
          "required": true,
          "collection": false,
          "type": "String",
          "possibleValues": null
        },
        {
          "name": "handler",
          "description": "",
          "required": true,
          "collection": false,
          "type": "Function",
          "parameters": [
            {
              "name": "request",
              "description": "",
              "required": true,
              "collection": false,
              "type": "Object",
              "properties": [
                {
                  "name": "url",
                  "description": "",
                  "required": true,
                  "additionalTags": [],
                  "collection": false,
                  "type": "String",
                  "possibleValues": null
                },
                {
                  "name": "headers",
                  "description": "",
                  "required": true,
                  "additionalTags": [],
                  "collection": false,
                  "type": "Record",
                  "innerTypes": [
                    {
                      "collection": false,
                      "type": "String",
                      "possibleValues": null
                    },
                    {
                      "collection": false,
                      "type": "String",
                      "possibleValues": null
                    }
                  ]
                },
                {
                  "name": "referrer",
                  "description": "",
                  "required": true,
                  "additionalTags": [],
                  "collection": false,
                  "type": "String",
                  "possibleValues": null
                },
                {
                  "name": "method",
                  "description": "",
                  "required": true,
                  "additionalTags": [],
                  "collection": false,
                  "type": "String",
                  "possibleValues": null
                },
                {
                  "name": "uploadData",
                  "description": "",
                  "required": true,
                  "additionalTags": [],
                  "collection": true,
                  "type": "UploadData"
                }
              ]
            },
            {
              "name": "callback",
              "description": "",
              "required": true,
              "collection": false,
              "type": "Function",
              "parameters": [
                {
                  "name": "buffer",
                  "description": "",
                  "required": false,
                  "collection": false,
                  "type": [
                    {
                      "collection": false,
                      "type": "Buffer"
                    },
                    {
                      "collection": false,
                      "type": "MimeTypedBuffer"
                    }
                  ]
                }
              ],
              "returns": null
            }
          ],
          "returns": null
        },
        {
          "name": "completion",
          "description": "",
          "required": false,
          "collection": false,
          "type": "Function",
          "parameters": [
            {
              "name": "error",
              "description": "",
              "required": true,
              "collection": false,
              "type": "Error"
            }
          ],
          "returns": null
        }
      ],
      "returns": null,
      "additionalTags": [],
      "apiType": "methods",
      "fullSignature": "protocol.registerBufferProtocol(scheme, handler[, completion])",
      "tldr": "Registers a protocol of `scheme` that will send a `Buffer` as a response.\n\nThe usage is the same with `registerFileProtocol`, except that the `callback` should be called with either a `Buffer` object or an object that has the `data`, `mimeType`, and `charset` properties.\n\nExample:.",
      "slug": "protocolregisterbufferprotocolscheme-handler-completion",
      "url": "https://electronjs.org/docs/api/protocol#protocolregisterbufferprotocolscheme-handler-completion",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:registerBufferProtocol",
        "api:protocolregisterbufferprotocolscheme-handler-completion",
        "api:protocol.registerBufferProtocol(scheme, handler[, completion])",
        "doc:registerBufferProtocol",
        "doc:protocolregisterbufferprotocolscheme-handler-completion",
        "doc:protocol.registerBufferProtocol(scheme, handler[, completion])"
      ]
    },
    {
      "objectID": "api-protocol#protocolregisterstringprotocolscheme-handler-completion",
      "name": "registerStringProtocol",
      "signature": "(scheme, handler[, completion])",
      "description": "Registers a protocol of `scheme` that will send a `String` as a response.\n\nThe usage is the same with `registerFileProtocol`, except that the `callback` should be called with either a `String` or an object that has the `data`, `mimeType`, and `charset` properties.",
      "parameters": [
        {
          "name": "scheme",
          "description": "",
          "required": true,
          "collection": false,
          "type": "String",
          "possibleValues": null
        },
        {
          "name": "handler",
          "description": "",
          "required": true,
          "collection": false,
          "type": "Function",
          "parameters": [
            {
              "name": "request",
              "description": "",
              "required": true,
              "collection": false,
              "type": "Object",
              "properties": [
                {
                  "name": "url",
                  "description": "",
                  "required": true,
                  "additionalTags": [],
                  "collection": false,
                  "type": "String",
                  "possibleValues": null
                },
                {
                  "name": "headers",
                  "description": "",
                  "required": true,
                  "additionalTags": [],
                  "collection": false,
                  "type": "Record",
                  "innerTypes": [
                    {
                      "collection": false,
                      "type": "String",
                      "possibleValues": null
                    },
                    {
                      "collection": false,
                      "type": "String",
                      "possibleValues": null
                    }
                  ]
                },
                {
                  "name": "referrer",
                  "description": "",
                  "required": true,
                  "additionalTags": [],
                  "collection": false,
                  "type": "String",
                  "possibleValues": null
                },
                {
                  "name": "method",
                  "description": "",
                  "required": true,
                  "additionalTags": [],
                  "collection": false,
                  "type": "String",
                  "possibleValues": null
                },
                {
                  "name": "uploadData",
                  "description": "",
                  "required": true,
                  "additionalTags": [],
                  "collection": true,
                  "type": "UploadData"
                }
              ]
            },
            {
              "name": "callback",
              "description": "",
              "required": true,
              "collection": false,
              "type": "Function",
              "parameters": [
                {
                  "name": "data",
                  "description": "",
                  "required": false,
                  "collection": false,
                  "type": [
                    {
                      "collection": false,
                      "type": "String",
                      "possibleValues": null
                    },
                    {
                      "collection": false,
                      "type": "StringProtocolResponse"
                    }
                  ]
                }
              ],
              "returns": null
            }
          ],
          "returns": null
        },
        {
          "name": "completion",
          "description": "",
          "required": false,
          "collection": false,
          "type": "Function",
          "parameters": [
            {
              "name": "error",
              "description": "",
              "required": true,
              "collection": false,
              "type": "Error"
            }
          ],
          "returns": null
        }
      ],
      "returns": null,
      "additionalTags": [],
      "apiType": "methods",
      "fullSignature": "protocol.registerStringProtocol(scheme, handler[, completion])",
      "tldr": "Registers a protocol of `scheme` that will send a `String` as a response.\n\nThe usage is the same with `registerFileProtocol`, except that the `callback` should be called with either a `String` or an object that has the `data`, `mimeType`, and `charset` properties.",
      "slug": "protocolregisterstringprotocolscheme-handler-completion",
      "url": "https://electronjs.org/docs/api/protocol#protocolregisterstringprotocolscheme-handler-completion",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:registerStringProtocol",
        "api:protocolregisterstringprotocolscheme-handler-completion",
        "api:protocol.registerStringProtocol(scheme, handler[, completion])",
        "doc:registerStringProtocol",
        "doc:protocolregisterstringprotocolscheme-handler-completion",
        "doc:protocol.registerStringProtocol(scheme, handler[, completion])"
      ]
    },
    {
      "objectID": "api-protocol#protocolregisterhttpprotocolscheme-handler-completion",
      "name": "registerHttpProtocol",
      "signature": "(scheme, handler[, completion])",
      "description": "Registers a protocol of `scheme` that will send an HTTP request as a response.\n\nThe usage is the same with `registerFileProtocol`, except that the `callback` should be called with a `redirectRequest` object that has the `url`, `method`, `referrer`, `uploadData` and `session` properties.\n\nBy default the HTTP request will reuse the current session. If you want the request to have a different session you should set `session` to `null`.\n\nFor POST requests the `uploadData` object must be provided.",
      "parameters": [
        {
          "name": "scheme",
          "description": "",
          "required": true,
          "collection": false,
          "type": "String",
          "possibleValues": null
        },
        {
          "name": "handler",
          "description": "",
          "required": true,
          "collection": false,
          "type": "Function",
          "parameters": [
            {
              "name": "request",
              "description": "",
              "required": true,
              "collection": false,
              "type": "Object",
              "properties": [
                {
                  "name": "url",
                  "description": "",
                  "required": true,
                  "additionalTags": [],
                  "collection": false,
                  "type": "String",
                  "possibleValues": null
                },
                {
                  "name": "headers",
                  "description": "",
                  "required": true,
                  "additionalTags": [],
                  "collection": false,
                  "type": "Record",
                  "innerTypes": [
                    {
                      "collection": false,
                      "type": "String",
                      "possibleValues": null
                    },
                    {
                      "collection": false,
                      "type": "String",
                      "possibleValues": null
                    }
                  ]
                },
                {
                  "name": "referrer",
                  "description": "",
                  "required": true,
                  "additionalTags": [],
                  "collection": false,
                  "type": "String",
                  "possibleValues": null
                },
                {
                  "name": "method",
                  "description": "",
                  "required": true,
                  "additionalTags": [],
                  "collection": false,
                  "type": "String",
                  "possibleValues": null
                },
                {
                  "name": "uploadData",
                  "description": "",
                  "required": true,
                  "additionalTags": [],
                  "collection": true,
                  "type": "UploadData"
                }
              ]
            },
            {
              "name": "callback",
              "description": "",
              "required": true,
              "collection": false,
              "type": "Function",
              "parameters": [
                {
                  "name": "redirectRequest",
                  "description": "",
                  "required": true,
                  "collection": false,
                  "type": "Object",
                  "properties": [
                    {
                      "name": "url",
                      "description": "",
                      "required": true,
                      "additionalTags": [],
                      "collection": false,
                      "type": "String",
                      "possibleValues": null
                    },
                    {
                      "name": "method",
                      "description": "",
                      "required": false,
                      "additionalTags": [],
                      "collection": false,
                      "type": "String",
                      "possibleValues": null
                    },
                    {
                      "name": "session",
                      "description": "",
                      "required": false,
                      "additionalTags": [],
                      "collection": false,
                      "type": [
                        {
                          "collection": false,
                          "type": "Session"
                        },
                        {
                          "type": "null",
                          "collection": false
                        }
                      ]
                    },
                    {
                      "name": "uploadData",
                      "description": "",
                      "required": false,
                      "additionalTags": [],
                      "collection": false,
                      "type": "ProtocolResponseUploadData"
                    }
                  ]
                }
              ],
              "returns": null
            }
          ],
          "returns": null
        },
        {
          "name": "completion",
          "description": "",
          "required": false,
          "collection": false,
          "type": "Function",
          "parameters": [
            {
              "name": "error",
              "description": "",
              "required": true,
              "collection": false,
              "type": "Error"
            }
          ],
          "returns": null
        }
      ],
      "returns": null,
      "additionalTags": [],
      "apiType": "methods",
      "fullSignature": "protocol.registerHttpProtocol(scheme, handler[, completion])",
      "tldr": "Registers a protocol of `scheme` that will send an HTTP request as a response.\n\nThe usage is the same with `registerFileProtocol`, except that the `callback` should be called with a `redirectRequest` object that has the `url`, `method`, `referrer`, `uploadData` and `session` properties.\n\nBy default the HTTP request will reuse the current session.",
      "slug": "protocolregisterhttpprotocolscheme-handler-completion",
      "url": "https://electronjs.org/docs/api/protocol#protocolregisterhttpprotocolscheme-handler-completion",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:registerHttpProtocol",
        "api:protocolregisterhttpprotocolscheme-handler-completion",
        "api:protocol.registerHttpProtocol(scheme, handler[, completion])",
        "doc:registerHttpProtocol",
        "doc:protocolregisterhttpprotocolscheme-handler-completion",
        "doc:protocol.registerHttpProtocol(scheme, handler[, completion])"
      ]
    },
    {
      "objectID": "api-protocol#protocolregisterstreamprotocolscheme-handler-completion",
      "name": "registerStreamProtocol",
      "signature": "(scheme, handler[, completion])",
      "description": "Registers a protocol of `scheme` that will send a `Readable` as a response.\n\nThe usage is similar to the other `register{Any}Protocol`, except that the `callback` should be called with either a `Readable` object or an object that has the `data`, `statusCode`, and `headers` properties.\n\nExample:\n\nIt is possible to pass any object that implements the readable stream API (emits `data`/`end`/`error` events). For example, here's how a file could be returned:",
      "parameters": [
        {
          "name": "scheme",
          "description": "",
          "required": true,
          "collection": false,
          "type": "String",
          "possibleValues": null
        },
        {
          "name": "handler",
          "description": "",
          "required": true,
          "collection": false,
          "type": "Function",
          "parameters": [
            {
              "name": "request",
              "description": "",
              "required": true,
              "collection": false,
              "type": "Object",
              "properties": [
                {
                  "name": "url",
                  "description": "",
                  "required": true,
                  "additionalTags": [],
                  "collection": false,
                  "type": "String",
                  "possibleValues": null
                },
                {
                  "name": "headers",
                  "description": "",
                  "required": true,
                  "additionalTags": [],
                  "collection": false,
                  "type": "Record",
                  "innerTypes": [
                    {
                      "collection": false,
                      "type": "String",
                      "possibleValues": null
                    },
                    {
                      "collection": false,
                      "type": "String",
                      "possibleValues": null
                    }
                  ]
                },
                {
                  "name": "referrer",
                  "description": "",
                  "required": true,
                  "additionalTags": [],
                  "collection": false,
                  "type": "String",
                  "possibleValues": null
                },
                {
                  "name": "method",
                  "description": "",
                  "required": true,
                  "additionalTags": [],
                  "collection": false,
                  "type": "String",
                  "possibleValues": null
                },
                {
                  "name": "uploadData",
                  "description": "",
                  "required": true,
                  "additionalTags": [],
                  "collection": true,
                  "type": "UploadData"
                }
              ]
            },
            {
              "name": "callback",
              "description": "",
              "required": true,
              "collection": false,
              "type": "Function",
              "parameters": [
                {
                  "name": "stream",
                  "description": "",
                  "required": false,
                  "collection": false,
                  "type": [
                    {
                      "collection": false,
                      "type": "ReadableStream"
                    },
                    {
                      "collection": false,
                      "type": "StreamProtocolResponse"
                    }
                  ]
                }
              ],
              "returns": null
            }
          ],
          "returns": null
        },
        {
          "name": "completion",
          "description": "",
          "required": false,
          "collection": false,
          "type": "Function",
          "parameters": [
            {
              "name": "error",
              "description": "",
              "required": true,
              "collection": false,
              "type": "Error"
            }
          ],
          "returns": null
        }
      ],
      "returns": null,
      "additionalTags": [],
      "apiType": "methods",
      "fullSignature": "protocol.registerStreamProtocol(scheme, handler[, completion])",
      "tldr": "Registers a protocol of `scheme` that will send a `Readable` as a response.\n\nThe usage is similar to the other `register{Any}Protocol`, except that the `callback` should be called with either a `Readable` object or an object that has the `data`, `statusCode`, and `headers` properties.\n\nExample:\n\nIt is possible to pass any object that implements the readable stream API (emits `data`/`end`/`error` events).",
      "slug": "protocolregisterstreamprotocolscheme-handler-completion",
      "url": "https://electronjs.org/docs/api/protocol#protocolregisterstreamprotocolscheme-handler-completion",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:registerStreamProtocol",
        "api:protocolregisterstreamprotocolscheme-handler-completion",
        "api:protocol.registerStreamProtocol(scheme, handler[, completion])",
        "doc:registerStreamProtocol",
        "doc:protocolregisterstreamprotocolscheme-handler-completion",
        "doc:protocol.registerStreamProtocol(scheme, handler[, completion])"
      ]
    },
    {
      "objectID": "api-protocol#protocolunregisterprotocolscheme-completion",
      "name": "unregisterProtocol",
      "signature": "(scheme[, completion])",
      "description": "Unregisters the custom protocol of `scheme`.",
      "parameters": [
        {
          "name": "scheme",
          "description": "",
          "required": true,
          "collection": false,
          "type": "String",
          "possibleValues": null
        },
        {
          "name": "completion",
          "description": "",
          "required": false,
          "collection": false,
          "type": "Function",
          "parameters": [
            {
              "name": "error",
              "description": "",
              "required": true,
              "collection": false,
              "type": "Error"
            }
          ],
          "returns": null
        }
      ],
      "returns": null,
      "additionalTags": [],
      "apiType": "methods",
      "fullSignature": "protocol.unregisterProtocol(scheme[, completion])",
      "tldr": "Unregisters the custom protocol of `scheme`.",
      "slug": "protocolunregisterprotocolscheme-completion",
      "url": "https://electronjs.org/docs/api/protocol#protocolunregisterprotocolscheme-completion",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:unregisterProtocol",
        "api:protocolunregisterprotocolscheme-completion",
        "api:protocol.unregisterProtocol(scheme[, completion])",
        "doc:unregisterProtocol",
        "doc:protocolunregisterprotocolscheme-completion",
        "doc:protocol.unregisterProtocol(scheme[, completion])"
      ]
    },
    {
      "objectID": "api-protocol#protocolisprotocolhandledscheme",
      "name": "isProtocolHandled",
      "signature": "(scheme)",
      "description": "fulfilled with a boolean that indicates whether there is already a handler for `scheme`.",
      "parameters": [
        {
          "name": "scheme",
          "description": "",
          "required": true,
          "collection": false,
          "type": "String",
          "possibleValues": null
        }
      ],
      "returns": {
        "collection": false,
        "type": "Promise",
        "innerTypes": [
          {
            "collection": false,
            "type": "Boolean"
          }
        ]
      },
      "additionalTags": [],
      "apiType": "methods",
      "fullSignature": "protocol.isProtocolHandled(scheme)",
      "tldr": "fulfilled with a boolean that indicates whether there is already a handler for `scheme`.",
      "slug": "protocolisprotocolhandledscheme",
      "url": "https://electronjs.org/docs/api/protocol#protocolisprotocolhandledscheme",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:isProtocolHandled",
        "api:protocolisprotocolhandledscheme",
        "api:protocol.isProtocolHandled(scheme)",
        "doc:isProtocolHandled",
        "doc:protocolisprotocolhandledscheme",
        "doc:protocol.isProtocolHandled(scheme)"
      ]
    },
    {
      "objectID": "api-protocol#protocolinterceptfileprotocolscheme-handler-completion",
      "name": "interceptFileProtocol",
      "signature": "(scheme, handler[, completion])",
      "description": "Intercepts `scheme` protocol and uses `handler` as the protocol's new handler which sends a file as a response.",
      "parameters": [
        {
          "name": "scheme",
          "description": "",
          "required": true,
          "collection": false,
          "type": "String",
          "possibleValues": null
        },
        {
          "name": "handler",
          "description": "",
          "required": true,
          "collection": false,
          "type": "Function",
          "parameters": [
            {
              "name": "request",
              "description": "",
              "required": true,
              "collection": false,
              "type": "Object",
              "properties": [
                {
                  "name": "url",
                  "description": "",
                  "required": true,
                  "additionalTags": [],
                  "collection": false,
                  "type": "String",
                  "possibleValues": null
                },
                {
                  "name": "headers",
                  "description": "",
                  "required": true,
                  "additionalTags": [],
                  "collection": false,
                  "type": "Record",
                  "innerTypes": [
                    {
                      "collection": false,
                      "type": "String",
                      "possibleValues": null
                    },
                    {
                      "collection": false,
                      "type": "String",
                      "possibleValues": null
                    }
                  ]
                },
                {
                  "name": "referrer",
                  "description": "",
                  "required": true,
                  "additionalTags": [],
                  "collection": false,
                  "type": "String",
                  "possibleValues": null
                },
                {
                  "name": "method",
                  "description": "",
                  "required": true,
                  "additionalTags": [],
                  "collection": false,
                  "type": "String",
                  "possibleValues": null
                },
                {
                  "name": "uploadData",
                  "description": "",
                  "required": true,
                  "additionalTags": [],
                  "collection": true,
                  "type": "UploadData"
                }
              ]
            },
            {
              "name": "callback",
              "description": "",
              "required": true,
              "collection": false,
              "type": "Function",
              "parameters": [
                {
                  "name": "filePath",
                  "description": "",
                  "required": true,
                  "collection": false,
                  "type": "String",
                  "possibleValues": null
                }
              ],
              "returns": null
            }
          ],
          "returns": null
        },
        {
          "name": "completion",
          "description": "",
          "required": false,
          "collection": false,
          "type": "Function",
          "parameters": [
            {
              "name": "error",
              "description": "",
              "required": true,
              "collection": false,
              "type": "Error"
            }
          ],
          "returns": null
        }
      ],
      "returns": null,
      "additionalTags": [],
      "apiType": "methods",
      "fullSignature": "protocol.interceptFileProtocol(scheme, handler[, completion])",
      "tldr": "Intercepts `scheme` protocol and uses `handler` as the protocol's new handler which sends a file as a response.",
      "slug": "protocolinterceptfileprotocolscheme-handler-completion",
      "url": "https://electronjs.org/docs/api/protocol#protocolinterceptfileprotocolscheme-handler-completion",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:interceptFileProtocol",
        "api:protocolinterceptfileprotocolscheme-handler-completion",
        "api:protocol.interceptFileProtocol(scheme, handler[, completion])",
        "doc:interceptFileProtocol",
        "doc:protocolinterceptfileprotocolscheme-handler-completion",
        "doc:protocol.interceptFileProtocol(scheme, handler[, completion])"
      ]
    },
    {
      "objectID": "api-protocol#protocolinterceptstringprotocolscheme-handler-completion",
      "name": "interceptStringProtocol",
      "signature": "(scheme, handler[, completion])",
      "description": "Intercepts `scheme` protocol and uses `handler` as the protocol's new handler which sends a `String` as a response.",
      "parameters": [
        {
          "name": "scheme",
          "description": "",
          "required": true,
          "collection": false,
          "type": "String",
          "possibleValues": null
        },
        {
          "name": "handler",
          "description": "",
          "required": true,
          "collection": false,
          "type": "Function",
          "parameters": [
            {
              "name": "request",
              "description": "",
              "required": true,
              "collection": false,
              "type": "Object",
              "properties": [
                {
                  "name": "url",
                  "description": "",
                  "required": true,
                  "additionalTags": [],
                  "collection": false,
                  "type": "String",
                  "possibleValues": null
                },
                {
                  "name": "headers",
                  "description": "",
                  "required": true,
                  "additionalTags": [],
                  "collection": false,
                  "type": "Record",
                  "innerTypes": [
                    {
                      "collection": false,
                      "type": "String",
                      "possibleValues": null
                    },
                    {
                      "collection": false,
                      "type": "String",
                      "possibleValues": null
                    }
                  ]
                },
                {
                  "name": "referrer",
                  "description": "",
                  "required": true,
                  "additionalTags": [],
                  "collection": false,
                  "type": "String",
                  "possibleValues": null
                },
                {
                  "name": "method",
                  "description": "",
                  "required": true,
                  "additionalTags": [],
                  "collection": false,
                  "type": "String",
                  "possibleValues": null
                },
                {
                  "name": "uploadData",
                  "description": "",
                  "required": true,
                  "additionalTags": [],
                  "collection": true,
                  "type": "UploadData"
                }
              ]
            },
            {
              "name": "callback",
              "description": "",
              "required": true,
              "collection": false,
              "type": "Function",
              "parameters": [
                {
                  "name": "data",
                  "description": "",
                  "required": false,
                  "collection": false,
                  "type": [
                    {
                      "collection": false,
                      "type": "String",
                      "possibleValues": null
                    },
                    {
                      "collection": false,
                      "type": "StringProtocolResponse"
                    }
                  ]
                }
              ],
              "returns": null
            }
          ],
          "returns": null
        },
        {
          "name": "completion",
          "description": "",
          "required": false,
          "collection": false,
          "type": "Function",
          "parameters": [
            {
              "name": "error",
              "description": "",
              "required": true,
              "collection": false,
              "type": "Error"
            }
          ],
          "returns": null
        }
      ],
      "returns": null,
      "additionalTags": [],
      "apiType": "methods",
      "fullSignature": "protocol.interceptStringProtocol(scheme, handler[, completion])",
      "tldr": "Intercepts `scheme` protocol and uses `handler` as the protocol's new handler which sends a `String` as a response.",
      "slug": "protocolinterceptstringprotocolscheme-handler-completion",
      "url": "https://electronjs.org/docs/api/protocol#protocolinterceptstringprotocolscheme-handler-completion",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:interceptStringProtocol",
        "api:protocolinterceptstringprotocolscheme-handler-completion",
        "api:protocol.interceptStringProtocol(scheme, handler[, completion])",
        "doc:interceptStringProtocol",
        "doc:protocolinterceptstringprotocolscheme-handler-completion",
        "doc:protocol.interceptStringProtocol(scheme, handler[, completion])"
      ]
    },
    {
      "objectID": "api-protocol#protocolinterceptbufferprotocolscheme-handler-completion",
      "name": "interceptBufferProtocol",
      "signature": "(scheme, handler[, completion])",
      "description": "Intercepts `scheme` protocol and uses `handler` as the protocol's new handler which sends a `Buffer` as a response.",
      "parameters": [
        {
          "name": "scheme",
          "description": "",
          "required": true,
          "collection": false,
          "type": "String",
          "possibleValues": null
        },
        {
          "name": "handler",
          "description": "",
          "required": true,
          "collection": false,
          "type": "Function",
          "parameters": [
            {
              "name": "request",
              "description": "",
              "required": true,
              "collection": false,
              "type": "Object",
              "properties": [
                {
                  "name": "url",
                  "description": "",
                  "required": true,
                  "additionalTags": [],
                  "collection": false,
                  "type": "String",
                  "possibleValues": null
                },
                {
                  "name": "headers",
                  "description": "",
                  "required": true,
                  "additionalTags": [],
                  "collection": false,
                  "type": "Record",
                  "innerTypes": [
                    {
                      "collection": false,
                      "type": "String",
                      "possibleValues": null
                    },
                    {
                      "collection": false,
                      "type": "String",
                      "possibleValues": null
                    }
                  ]
                },
                {
                  "name": "referrer",
                  "description": "",
                  "required": true,
                  "additionalTags": [],
                  "collection": false,
                  "type": "String",
                  "possibleValues": null
                },
                {
                  "name": "method",
                  "description": "",
                  "required": true,
                  "additionalTags": [],
                  "collection": false,
                  "type": "String",
                  "possibleValues": null
                },
                {
                  "name": "uploadData",
                  "description": "",
                  "required": true,
                  "additionalTags": [],
                  "collection": true,
                  "type": "UploadData"
                }
              ]
            },
            {
              "name": "callback",
              "description": "",
              "required": true,
              "collection": false,
              "type": "Function",
              "parameters": [
                {
                  "name": "buffer",
                  "description": "",
                  "required": false,
                  "collection": false,
                  "type": "Buffer"
                }
              ],
              "returns": null
            }
          ],
          "returns": null
        },
        {
          "name": "completion",
          "description": "",
          "required": false,
          "collection": false,
          "type": "Function",
          "parameters": [
            {
              "name": "error",
              "description": "",
              "required": true,
              "collection": false,
              "type": "Error"
            }
          ],
          "returns": null
        }
      ],
      "returns": null,
      "additionalTags": [],
      "apiType": "methods",
      "fullSignature": "protocol.interceptBufferProtocol(scheme, handler[, completion])",
      "tldr": "Intercepts `scheme` protocol and uses `handler` as the protocol's new handler which sends a `Buffer` as a response.",
      "slug": "protocolinterceptbufferprotocolscheme-handler-completion",
      "url": "https://electronjs.org/docs/api/protocol#protocolinterceptbufferprotocolscheme-handler-completion",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:interceptBufferProtocol",
        "api:protocolinterceptbufferprotocolscheme-handler-completion",
        "api:protocol.interceptBufferProtocol(scheme, handler[, completion])",
        "doc:interceptBufferProtocol",
        "doc:protocolinterceptbufferprotocolscheme-handler-completion",
        "doc:protocol.interceptBufferProtocol(scheme, handler[, completion])"
      ]
    },
    {
      "objectID": "api-protocol#protocolintercepthttpprotocolscheme-handler-completion",
      "name": "interceptHttpProtocol",
      "signature": "(scheme, handler[, completion])",
      "description": "Intercepts `scheme` protocol and uses `handler` as the protocol's new handler which sends a new HTTP request as a response.",
      "parameters": [
        {
          "name": "scheme",
          "description": "",
          "required": true,
          "collection": false,
          "type": "String",
          "possibleValues": null
        },
        {
          "name": "handler",
          "description": "",
          "required": true,
          "collection": false,
          "type": "Function",
          "parameters": [
            {
              "name": "request",
              "description": "",
              "required": true,
              "collection": false,
              "type": "Object",
              "properties": [
                {
                  "name": "url",
                  "description": "",
                  "required": true,
                  "additionalTags": [],
                  "collection": false,
                  "type": "String",
                  "possibleValues": null
                },
                {
                  "name": "headers",
                  "description": "",
                  "required": true,
                  "additionalTags": [],
                  "collection": false,
                  "type": "Record",
                  "innerTypes": [
                    {
                      "collection": false,
                      "type": "String",
                      "possibleValues": null
                    },
                    {
                      "collection": false,
                      "type": "String",
                      "possibleValues": null
                    }
                  ]
                },
                {
                  "name": "referrer",
                  "description": "",
                  "required": true,
                  "additionalTags": [],
                  "collection": false,
                  "type": "String",
                  "possibleValues": null
                },
                {
                  "name": "method",
                  "description": "",
                  "required": true,
                  "additionalTags": [],
                  "collection": false,
                  "type": "String",
                  "possibleValues": null
                },
                {
                  "name": "uploadData",
                  "description": "",
                  "required": true,
                  "additionalTags": [],
                  "collection": true,
                  "type": "UploadData"
                }
              ]
            },
            {
              "name": "callback",
              "description": "",
              "required": true,
              "collection": false,
              "type": "Function",
              "parameters": [
                {
                  "name": "redirectRequest",
                  "description": "",
                  "required": true,
                  "collection": false,
                  "type": "Object",
                  "properties": [
                    {
                      "name": "url",
                      "description": "",
                      "required": true,
                      "additionalTags": [],
                      "collection": false,
                      "type": "String",
                      "possibleValues": null
                    },
                    {
                      "name": "method",
                      "description": "",
                      "required": false,
                      "additionalTags": [],
                      "collection": false,
                      "type": "String",
                      "possibleValues": null
                    },
                    {
                      "name": "session",
                      "description": "",
                      "required": false,
                      "additionalTags": [],
                      "collection": false,
                      "type": [
                        {
                          "collection": false,
                          "type": "Session"
                        },
                        {
                          "type": "null",
                          "collection": false
                        }
                      ]
                    },
                    {
                      "name": "uploadData",
                      "description": "",
                      "required": false,
                      "additionalTags": [],
                      "collection": false,
                      "type": "ProtocolResponseUploadData"
                    }
                  ]
                }
              ],
              "returns": null
            }
          ],
          "returns": null
        },
        {
          "name": "completion",
          "description": "",
          "required": false,
          "collection": false,
          "type": "Function",
          "parameters": [
            {
              "name": "error",
              "description": "",
              "required": true,
              "collection": false,
              "type": "Error"
            }
          ],
          "returns": null
        }
      ],
      "returns": null,
      "additionalTags": [],
      "apiType": "methods",
      "fullSignature": "protocol.interceptHttpProtocol(scheme, handler[, completion])",
      "tldr": "Intercepts `scheme` protocol and uses `handler` as the protocol's new handler which sends a new HTTP request as a response.",
      "slug": "protocolintercepthttpprotocolscheme-handler-completion",
      "url": "https://electronjs.org/docs/api/protocol#protocolintercepthttpprotocolscheme-handler-completion",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:interceptHttpProtocol",
        "api:protocolintercepthttpprotocolscheme-handler-completion",
        "api:protocol.interceptHttpProtocol(scheme, handler[, completion])",
        "doc:interceptHttpProtocol",
        "doc:protocolintercepthttpprotocolscheme-handler-completion",
        "doc:protocol.interceptHttpProtocol(scheme, handler[, completion])"
      ]
    },
    {
      "objectID": "api-protocol#protocolinterceptstreamprotocolscheme-handler-completion",
      "name": "interceptStreamProtocol",
      "signature": "(scheme, handler[, completion])",
      "description": "Same as `protocol.registerStreamProtocol`, except that it replaces an existing protocol handler.",
      "parameters": [
        {
          "name": "scheme",
          "description": "",
          "required": true,
          "collection": false,
          "type": "String",
          "possibleValues": null
        },
        {
          "name": "handler",
          "description": "",
          "required": true,
          "collection": false,
          "type": "Function",
          "parameters": [
            {
              "name": "request",
              "description": "",
              "required": true,
              "collection": false,
              "type": "Object",
              "properties": [
                {
                  "name": "url",
                  "description": "",
                  "required": true,
                  "additionalTags": [],
                  "collection": false,
                  "type": "String",
                  "possibleValues": null
                },
                {
                  "name": "headers",
                  "description": "",
                  "required": true,
                  "additionalTags": [],
                  "collection": false,
                  "type": "Record",
                  "innerTypes": [
                    {
                      "collection": false,
                      "type": "String",
                      "possibleValues": null
                    },
                    {
                      "collection": false,
                      "type": "String",
                      "possibleValues": null
                    }
                  ]
                },
                {
                  "name": "referrer",
                  "description": "",
                  "required": true,
                  "additionalTags": [],
                  "collection": false,
                  "type": "String",
                  "possibleValues": null
                },
                {
                  "name": "method",
                  "description": "",
                  "required": true,
                  "additionalTags": [],
                  "collection": false,
                  "type": "String",
                  "possibleValues": null
                },
                {
                  "name": "uploadData",
                  "description": "",
                  "required": true,
                  "additionalTags": [],
                  "collection": true,
                  "type": "UploadData"
                }
              ]
            },
            {
              "name": "callback",
              "description": "",
              "required": true,
              "collection": false,
              "type": "Function",
              "parameters": [
                {
                  "name": "stream",
                  "description": "",
                  "required": false,
                  "collection": false,
                  "type": [
                    {
                      "collection": false,
                      "type": "ReadableStream"
                    },
                    {
                      "collection": false,
                      "type": "StreamProtocolResponse"
                    }
                  ]
                }
              ],
              "returns": null
            }
          ],
          "returns": null
        },
        {
          "name": "completion",
          "description": "",
          "required": false,
          "collection": false,
          "type": "Function",
          "parameters": [
            {
              "name": "error",
              "description": "",
              "required": true,
              "collection": false,
              "type": "Error"
            }
          ],
          "returns": null
        }
      ],
      "returns": null,
      "additionalTags": [],
      "apiType": "methods",
      "fullSignature": "protocol.interceptStreamProtocol(scheme, handler[, completion])",
      "tldr": "Same as `protocol.registerStreamProtocol`, except that it replaces an existing protocol handler.",
      "slug": "protocolinterceptstreamprotocolscheme-handler-completion",
      "url": "https://electronjs.org/docs/api/protocol#protocolinterceptstreamprotocolscheme-handler-completion",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:interceptStreamProtocol",
        "api:protocolinterceptstreamprotocolscheme-handler-completion",
        "api:protocol.interceptStreamProtocol(scheme, handler[, completion])",
        "doc:interceptStreamProtocol",
        "doc:protocolinterceptstreamprotocolscheme-handler-completion",
        "doc:protocol.interceptStreamProtocol(scheme, handler[, completion])"
      ]
    },
    {
      "objectID": "api-protocol#protocoluninterceptprotocolscheme-completion",
      "name": "uninterceptProtocol",
      "signature": "(scheme[, completion])",
      "description": "Remove the interceptor installed for `scheme` and restore its original handler.",
      "parameters": [
        {
          "name": "scheme",
          "description": "",
          "required": true,
          "collection": false,
          "type": "String",
          "possibleValues": null
        },
        {
          "name": "completion",
          "description": "",
          "required": false,
          "collection": false,
          "type": "Function",
          "parameters": [
            {
              "name": "error",
              "description": "",
              "required": true,
              "collection": false,
              "type": "Error"
            }
          ],
          "returns": null
        }
      ],
      "returns": null,
      "additionalTags": [],
      "apiType": "methods",
      "fullSignature": "protocol.uninterceptProtocol(scheme[, completion])",
      "tldr": "Remove the interceptor installed for `scheme` and restore its original handler.",
      "slug": "protocoluninterceptprotocolscheme-completion",
      "url": "https://electronjs.org/docs/api/protocol#protocoluninterceptprotocolscheme-completion",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:uninterceptProtocol",
        "api:protocoluninterceptprotocolscheme-completion",
        "api:protocol.uninterceptProtocol(scheme[, completion])",
        "doc:uninterceptProtocol",
        "doc:protocoluninterceptprotocolscheme-completion",
        "doc:protocol.uninterceptProtocol(scheme[, completion])"
      ]
    },
    {
      "objectID": "api-remote#remoteprocess",
      "name": "process",
      "description": "A `NodeJS.Process` object.  The `process` object in the main process. This is the same as `remote.getGlobal('process')` but is cached.",
      "required": true,
      "additionalTags": [
        "availability_readonly"
      ],
      "collection": false,
      "type": "NodeJS.Process",
      "apiType": "properties",
      "fullSignature": "remote.process",
      "tldr": "A `NodeJS.Process` object.",
      "slug": "remoteprocess",
      "url": "https://electronjs.org/docs/api/remote#remoteprocess",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:process",
        "api:remoteprocess",
        "api:remote.process",
        "doc:process",
        "doc:remoteprocess",
        "doc:remote.process"
      ]
    },
    {
      "objectID": "api-remote#remoterequiremodule",
      "name": "require",
      "signature": "(module)",
      "description": "The object returned by `require(module)` in the main process. Modules specified by their relative path will resolve relative to the entrypoint of the main process.\n\ne.g.",
      "parameters": [
        {
          "name": "module",
          "description": "",
          "required": true,
          "collection": false,
          "type": "String",
          "possibleValues": null
        }
      ],
      "returns": {
        "collection": false,
        "type": "any"
      },
      "additionalTags": [],
      "apiType": "methods",
      "fullSignature": "remote.require(module)",
      "tldr": "The object returned by `require(module)` in the main process.",
      "slug": "remoterequiremodule",
      "url": "https://electronjs.org/docs/api/remote#remoterequiremodule",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:require",
        "api:remoterequiremodule",
        "api:remote.require(module)",
        "doc:require",
        "doc:remoterequiremodule",
        "doc:remote.require(module)"
      ]
    },
    {
      "objectID": "api-remote#remotegetcurrentwindow",
      "name": "getCurrentWindow",
      "signature": "()",
      "description": "The window to which this web page belongs.\n\n**Note:** Do not use `removeAllListeners` on `BrowserWindow`. Use of this can remove all `blur` listeners, disable click events on touch bar buttons, and other unintended consequences.",
      "parameters": [],
      "returns": {
        "collection": false,
        "type": "BrowserWindow"
      },
      "additionalTags": [],
      "apiType": "methods",
      "fullSignature": "remote.getCurrentWindow()",
      "tldr": "The window to which this web page belongs.\n\n**Note:** Do not use `removeAllListeners` on `BrowserWindow`.",
      "slug": "remotegetcurrentwindow",
      "url": "https://electronjs.org/docs/api/remote#remotegetcurrentwindow",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:getCurrentWindow",
        "api:remotegetcurrentwindow",
        "api:remote.getCurrentWindow()",
        "doc:getCurrentWindow",
        "doc:remotegetcurrentwindow",
        "doc:remote.getCurrentWindow()"
      ]
    },
    {
      "objectID": "api-remote#remotegetcurrentwebcontents",
      "name": "getCurrentWebContents",
      "signature": "()",
      "description": "The web contents of this web page.",
      "parameters": [],
      "returns": {
        "collection": false,
        "type": "WebContents"
      },
      "additionalTags": [],
      "apiType": "methods",
      "fullSignature": "remote.getCurrentWebContents()",
      "tldr": "The web contents of this web page.",
      "slug": "remotegetcurrentwebcontents",
      "url": "https://electronjs.org/docs/api/remote#remotegetcurrentwebcontents",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:getCurrentWebContents",
        "api:remotegetcurrentwebcontents",
        "api:remote.getCurrentWebContents()",
        "doc:getCurrentWebContents",
        "doc:remotegetcurrentwebcontents",
        "doc:remote.getCurrentWebContents()"
      ]
    },
    {
      "objectID": "api-remote#remotegetglobalname",
      "name": "getGlobal",
      "signature": "(name)",
      "description": "The global variable of `name` (e.g. `global[name]`) in the main process.",
      "parameters": [
        {
          "name": "name",
          "description": "",
          "required": true,
          "collection": false,
          "type": "String",
          "possibleValues": null
        }
      ],
      "returns": {
        "collection": false,
        "type": "any"
      },
      "additionalTags": [],
      "apiType": "methods",
      "fullSignature": "remote.getGlobal(name)",
      "tldr": "The global variable of `name` (e.g.",
      "slug": "remotegetglobalname",
      "url": "https://electronjs.org/docs/api/remote#remotegetglobalname",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:getGlobal",
        "api:remotegetglobalname",
        "api:remote.getGlobal(name)",
        "doc:getGlobal",
        "doc:remotegetglobalname",
        "doc:remote.getGlobal(name)"
      ]
    },
    {
      "objectID": "api-screen#screengetcursorscreenpoint",
      "name": "getCursorScreenPoint",
      "signature": "()",
      "description": "The current absolute position of the mouse pointer.",
      "parameters": [],
      "returns": {
        "collection": false,
        "type": "Point"
      },
      "additionalTags": [],
      "apiType": "methods",
      "fullSignature": "screen.getCursorScreenPoint()",
      "tldr": "The current absolute position of the mouse pointer.",
      "slug": "screengetcursorscreenpoint",
      "url": "https://electronjs.org/docs/api/screen#screengetcursorscreenpoint",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:getCursorScreenPoint",
        "api:screengetcursorscreenpoint",
        "api:screen.getCursorScreenPoint()",
        "doc:getCursorScreenPoint",
        "doc:screengetcursorscreenpoint",
        "doc:screen.getCursorScreenPoint()"
      ]
    },
    {
      "objectID": "api-screen#screengetprimarydisplay",
      "name": "getPrimaryDisplay",
      "signature": "()",
      "description": "The primary display.",
      "parameters": [],
      "returns": {
        "collection": false,
        "type": "Display"
      },
      "additionalTags": [],
      "apiType": "methods",
      "fullSignature": "screen.getPrimaryDisplay()",
      "tldr": "The primary display.",
      "slug": "screengetprimarydisplay",
      "url": "https://electronjs.org/docs/api/screen#screengetprimarydisplay",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:getPrimaryDisplay",
        "api:screengetprimarydisplay",
        "api:screen.getPrimaryDisplay()",
        "doc:getPrimaryDisplay",
        "doc:screengetprimarydisplay",
        "doc:screen.getPrimaryDisplay()"
      ]
    },
    {
      "objectID": "api-screen#screengetalldisplays",
      "name": "getAllDisplays",
      "signature": "()",
      "description": "An array of displays that are currently available.",
      "parameters": [],
      "returns": {
        "collection": true,
        "type": "Display"
      },
      "additionalTags": [],
      "apiType": "methods",
      "fullSignature": "screen.getAllDisplays()",
      "tldr": "An array of displays that are currently available.",
      "slug": "screengetalldisplays",
      "url": "https://electronjs.org/docs/api/screen#screengetalldisplays",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:getAllDisplays",
        "api:screengetalldisplays",
        "api:screen.getAllDisplays()",
        "doc:getAllDisplays",
        "doc:screengetalldisplays",
        "doc:screen.getAllDisplays()"
      ]
    },
    {
      "objectID": "api-screen#screengetdisplaynearestpointpoint",
      "name": "getDisplayNearestPoint",
      "signature": "(point)",
      "description": "The display nearest the specified point.",
      "parameters": [
        {
          "name": "point",
          "description": "",
          "required": true,
          "collection": false,
          "type": "Point"
        }
      ],
      "returns": {
        "collection": false,
        "type": "Display"
      },
      "additionalTags": [],
      "apiType": "methods",
      "fullSignature": "screen.getDisplayNearestPoint(point)",
      "tldr": "The display nearest the specified point.",
      "slug": "screengetdisplaynearestpointpoint",
      "url": "https://electronjs.org/docs/api/screen#screengetdisplaynearestpointpoint",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:getDisplayNearestPoint",
        "api:screengetdisplaynearestpointpoint",
        "api:screen.getDisplayNearestPoint(point)",
        "doc:getDisplayNearestPoint",
        "doc:screengetdisplaynearestpointpoint",
        "doc:screen.getDisplayNearestPoint(point)"
      ]
    },
    {
      "objectID": "api-screen#screengetdisplaymatchingrect",
      "name": "getDisplayMatching",
      "signature": "(rect)",
      "description": "The display that most closely intersects the provided bounds.",
      "parameters": [
        {
          "name": "rect",
          "description": "",
          "required": true,
          "collection": false,
          "type": "Rectangle"
        }
      ],
      "returns": {
        "collection": false,
        "type": "Display"
      },
      "additionalTags": [],
      "apiType": "methods",
      "fullSignature": "screen.getDisplayMatching(rect)",
      "tldr": "The display that most closely intersects the provided bounds.",
      "slug": "screengetdisplaymatchingrect",
      "url": "https://electronjs.org/docs/api/screen#screengetdisplaymatchingrect",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:getDisplayMatching",
        "api:screengetdisplaymatchingrect",
        "api:screen.getDisplayMatching(rect)",
        "doc:getDisplayMatching",
        "doc:screengetdisplaymatchingrect",
        "doc:screen.getDisplayMatching(rect)"
      ]
    },
    {
      "objectID": "api-screen#screenscreentodippointpoint",
      "name": "screenToDipPoint",
      "signature": "(point)",
      "description": "Converts a screen physical point to a screen DIP point. The DPI scale is performed relative to the display containing the physical point.",
      "parameters": [
        {
          "name": "point",
          "description": "",
          "required": true,
          "collection": false,
          "type": "Point"
        }
      ],
      "returns": {
        "collection": false,
        "type": "Point"
      },
      "additionalTags": [
        "os_windows"
      ],
      "apiType": "methods",
      "fullSignature": "screen.screenToDipPoint(point)",
      "tldr": "Converts a screen physical point to a screen DIP point.",
      "slug": "screenscreentodippointpoint",
      "url": "https://electronjs.org/docs/api/screen#screenscreentodippointpoint",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:screenToDipPoint",
        "api:screenscreentodippointpoint",
        "api:screen.screenToDipPoint(point)",
        "doc:screenToDipPoint",
        "doc:screenscreentodippointpoint",
        "doc:screen.screenToDipPoint(point)"
      ]
    },
    {
      "objectID": "api-screen#screendiptoscreenpointpoint",
      "name": "dipToScreenPoint",
      "signature": "(point)",
      "description": "Converts a screen DIP point to a screen physical point. The DPI scale is performed relative to the display containing the DIP point.",
      "parameters": [
        {
          "name": "point",
          "description": "",
          "required": true,
          "collection": false,
          "type": "Point"
        }
      ],
      "returns": {
        "collection": false,
        "type": "Point"
      },
      "additionalTags": [
        "os_windows"
      ],
      "apiType": "methods",
      "fullSignature": "screen.dipToScreenPoint(point)",
      "tldr": "Converts a screen DIP point to a screen physical point.",
      "slug": "screendiptoscreenpointpoint",
      "url": "https://electronjs.org/docs/api/screen#screendiptoscreenpointpoint",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:dipToScreenPoint",
        "api:screendiptoscreenpointpoint",
        "api:screen.dipToScreenPoint(point)",
        "doc:dipToScreenPoint",
        "doc:screendiptoscreenpointpoint",
        "doc:screen.dipToScreenPoint(point)"
      ]
    },
    {
      "objectID": "api-screen#screenscreentodiprectwindow-rect",
      "name": "screenToDipRect",
      "signature": "(window, rect)",
      "description": "Converts a screen physical rect to a screen DIP rect. The DPI scale is performed relative to the display nearest to `window`. If `window` is null, scaling will be performed to the display nearest to `rect`.",
      "parameters": [
        {
          "name": "window",
          "description": "",
          "required": true,
          "collection": false,
          "type": [
            {
              "collection": false,
              "type": "BrowserWindow"
            },
            {
              "type": "null",
              "collection": false
            }
          ]
        },
        {
          "name": "rect",
          "description": "",
          "required": true,
          "collection": false,
          "type": "Rectangle"
        }
      ],
      "returns": {
        "collection": false,
        "type": "Rectangle"
      },
      "additionalTags": [
        "os_windows"
      ],
      "apiType": "methods",
      "fullSignature": "screen.screenToDipRect(window, rect)",
      "tldr": "Converts a screen physical rect to a screen DIP rect.",
      "slug": "screenscreentodiprectwindow-rect",
      "url": "https://electronjs.org/docs/api/screen#screenscreentodiprectwindow-rect",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:screenToDipRect",
        "api:screenscreentodiprectwindow-rect",
        "api:screen.screenToDipRect(window, rect)",
        "doc:screenToDipRect",
        "doc:screenscreentodiprectwindow-rect",
        "doc:screen.screenToDipRect(window, rect)"
      ]
    },
    {
      "objectID": "api-screen#screendiptoscreenrectwindow-rect",
      "name": "dipToScreenRect",
      "signature": "(window, rect)",
      "description": "Converts a screen DIP rect to a screen physical rect. The DPI scale is performed relative to the display nearest to `window`. If `window` is null, scaling will be performed to the display nearest to `rect`.",
      "parameters": [
        {
          "name": "window",
          "description": "",
          "required": true,
          "collection": false,
          "type": [
            {
              "collection": false,
              "type": "BrowserWindow"
            },
            {
              "type": "null",
              "collection": false
            }
          ]
        },
        {
          "name": "rect",
          "description": "",
          "required": true,
          "collection": false,
          "type": "Rectangle"
        }
      ],
      "returns": {
        "collection": false,
        "type": "Rectangle"
      },
      "additionalTags": [
        "os_windows"
      ],
      "apiType": "methods",
      "fullSignature": "screen.dipToScreenRect(window, rect)",
      "tldr": "Converts a screen DIP rect to a screen physical rect.",
      "slug": "screendiptoscreenrectwindow-rect",
      "url": "https://electronjs.org/docs/api/screen#screendiptoscreenrectwindow-rect",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:dipToScreenRect",
        "api:screendiptoscreenrectwindow-rect",
        "api:screen.dipToScreenRect(window, rect)",
        "doc:dipToScreenRect",
        "doc:screendiptoscreenrectwindow-rect",
        "doc:screen.dipToScreenRect(window, rect)"
      ]
    },
    {
      "objectID": "api-screen#event-display-added",
      "name": "display-added",
      "description": "Emitted when `newDisplay` has been added.",
      "parameters": [
        {
          "name": "event",
          "description": "",
          "collection": false,
          "type": "Event",
          "required": true
        },
        {
          "name": "newDisplay",
          "description": "",
          "collection": false,
          "type": "Display",
          "required": true
        }
      ],
      "additionalTags": [],
      "apiType": "event",
      "fullSignature": "screen.on('display-added')",
      "url": "https://electronjs.org/docs/api/screen#event-display-added",
      "slug": "screenondisplay-added",
      "tldr": "Emitted when `newDisplay` has been added.",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:display-added",
        "api:screenondisplay-added",
        "api:screen.on('display-added')",
        "doc:display-added",
        "doc:screenondisplay-added",
        "doc:screen.on('display-added')"
      ]
    },
    {
      "objectID": "api-screen#event-display-removed",
      "name": "display-removed",
      "description": "Emitted when `oldDisplay` has been removed.",
      "parameters": [
        {
          "name": "event",
          "description": "",
          "collection": false,
          "type": "Event",
          "required": true
        },
        {
          "name": "oldDisplay",
          "description": "",
          "collection": false,
          "type": "Display",
          "required": true
        }
      ],
      "additionalTags": [],
      "apiType": "event",
      "fullSignature": "screen.on('display-removed')",
      "url": "https://electronjs.org/docs/api/screen#event-display-removed",
      "slug": "screenondisplay-removed",
      "tldr": "Emitted when `oldDisplay` has been removed.",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:display-removed",
        "api:screenondisplay-removed",
        "api:screen.on('display-removed')",
        "doc:display-removed",
        "doc:screenondisplay-removed",
        "doc:screen.on('display-removed')"
      ]
    },
    {
      "objectID": "api-screen#event-display-metrics-changed",
      "name": "display-metrics-changed",
      "description": "Emitted when one or more metrics change in a `display`. The `changedMetrics` is an array of strings that describe the changes. Possible changes are `bounds`, `workArea`, `scaleFactor` and `rotation`.",
      "parameters": [
        {
          "name": "event",
          "description": "",
          "collection": false,
          "type": "Event",
          "required": true
        },
        {
          "name": "display",
          "description": "",
          "collection": false,
          "type": "Display",
          "required": true
        },
        {
          "name": "changedMetrics",
          "description": "",
          "collection": true,
          "type": "String",
          "possibleValues": null,
          "required": true
        }
      ],
      "additionalTags": [],
      "apiType": "event",
      "fullSignature": "screen.on('display-metrics-changed')",
      "url": "https://electronjs.org/docs/api/screen#event-display-metrics-changed",
      "slug": "screenondisplay-metrics-changed",
      "tldr": "Emitted when one or more metrics change in a `display`.",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:display-metrics-changed",
        "api:screenondisplay-metrics-changed",
        "api:screen.on('display-metrics-changed')",
        "doc:display-metrics-changed",
        "doc:screenondisplay-metrics-changed",
        "doc:screen.on('display-metrics-changed')"
      ]
    },
    {
      "objectID": "api-session#sessiondefaultsession",
      "name": "defaultSession",
      "description": "A `Session` object, the default session object of the app.",
      "required": true,
      "additionalTags": [],
      "collection": false,
      "type": "Session",
      "apiType": "properties",
      "fullSignature": "session.defaultSession",
      "tldr": "A `Session` object, the default session object of the app.",
      "slug": "sessiondefaultsession",
      "url": "https://electronjs.org/docs/api/session#sessiondefaultsession",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:defaultSession",
        "api:sessiondefaultsession",
        "api:session.defaultSession",
        "doc:defaultSession",
        "doc:sessiondefaultsession",
        "doc:session.defaultSession"
      ]
    },
    {
      "objectID": "api-session#sessionfrompartitionpartition-options",
      "name": "fromPartition",
      "signature": "(partition[, options])",
      "description": "A session instance from `partition` string. When there is an existing `Session` with the same `partition`, it will be returned; otherwise a new `Session` instance will be created with `options`.\n\nIf `partition` starts with `persist:`, the page will use a persistent session available to all pages in the app with the same `partition`. if there is no `persist:` prefix, the page will use an in-memory session. If the `partition` is empty then default session of the app will be returned.\n\nTo create a `Session` with `options`, you have to ensure the `Session` with the `partition` has never been used before. There is no way to change the `options` of an existing `Session` object.",
      "parameters": [
        {
          "name": "partition",
          "description": "",
          "required": true,
          "collection": false,
          "type": "String",
          "possibleValues": null
        },
        {
          "name": "options",
          "description": "",
          "required": false,
          "collection": false,
          "type": "Object",
          "properties": [
            {
              "name": "cache",
              "description": "Whether to enable cache.",
              "required": true,
              "additionalTags": [],
              "collection": false,
              "type": "Boolean"
            }
          ]
        }
      ],
      "returns": {
        "collection": false,
        "type": "Session"
      },
      "additionalTags": [],
      "apiType": "methods",
      "fullSignature": "session.fromPartition(partition[, options])",
      "tldr": "A session instance from `partition` string.",
      "slug": "sessionfrompartitionpartition-options",
      "url": "https://electronjs.org/docs/api/session#sessionfrompartitionpartition-options",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:fromPartition",
        "api:sessionfrompartitionpartition-options",
        "api:session.fromPartition(partition[, options])",
        "doc:fromPartition",
        "doc:sessionfrompartitionpartition-options",
        "doc:session.fromPartition(partition[, options])"
      ]
    },
    {
      "objectID": "api-session#sessioncookies",
      "name": "cookies",
      "description": "A `Cookies` object for this session.",
      "required": true,
      "additionalTags": [
        "availability_readonly"
      ],
      "collection": false,
      "type": "Cookies",
      "apiType": "instanceProperties",
      "fullSignature": "Session.cookies",
      "tldr": "A `Cookies` object for this session.",
      "slug": "sessioncookies",
      "url": "https://electronjs.org/docs/api/session#sessioncookies",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:cookies",
        "api:sessioncookies",
        "api:Session.cookies",
        "doc:cookies",
        "doc:sessioncookies",
        "doc:Session.cookies"
      ]
    },
    {
      "objectID": "api-session#sessionwebrequest",
      "name": "webRequest",
      "description": "A `WebRequest` object for this session.",
      "required": true,
      "additionalTags": [
        "availability_readonly"
      ],
      "collection": false,
      "type": "WebRequest",
      "apiType": "instanceProperties",
      "fullSignature": "Session.webRequest",
      "tldr": "A `WebRequest` object for this session.",
      "slug": "sessionwebrequest",
      "url": "https://electronjs.org/docs/api/session#sessionwebrequest",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:webRequest",
        "api:sessionwebrequest",
        "api:Session.webRequest",
        "doc:webRequest",
        "doc:sessionwebrequest",
        "doc:Session.webRequest"
      ]
    },
    {
      "objectID": "api-session#sessionprotocol",
      "name": "protocol",
      "description": "A `Protocol` object for this session.",
      "required": true,
      "additionalTags": [
        "availability_readonly"
      ],
      "collection": false,
      "type": "Protocol",
      "apiType": "instanceProperties",
      "fullSignature": "Session.protocol",
      "tldr": "A `Protocol` object for this session.",
      "slug": "sessionprotocol",
      "url": "https://electronjs.org/docs/api/session#sessionprotocol",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:protocol",
        "api:sessionprotocol",
        "api:Session.protocol",
        "doc:protocol",
        "doc:sessionprotocol",
        "doc:Session.protocol"
      ]
    },
    {
      "objectID": "api-session#sessionnetlog",
      "name": "netLog",
      "description": "A `NetLog` object for this session.",
      "required": true,
      "additionalTags": [
        "availability_readonly"
      ],
      "collection": false,
      "type": "NetLog",
      "apiType": "instanceProperties",
      "fullSignature": "Session.netLog",
      "tldr": "A `NetLog` object for this session.",
      "slug": "sessionnetlog",
      "url": "https://electronjs.org/docs/api/session#sessionnetlog",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:netLog",
        "api:sessionnetlog",
        "api:Session.netLog",
        "doc:netLog",
        "doc:sessionnetlog",
        "doc:Session.netLog"
      ]
    },
    {
      "objectID": "api-session#sessiongetcachesize",
      "name": "getCacheSize",
      "signature": "()",
      "description": "the session's current cache size, in bytes.",
      "parameters": [],
      "returns": {
        "collection": false,
        "type": "Promise",
        "innerTypes": [
          {
            "collection": false,
            "type": "Integer"
          }
        ]
      },
      "additionalTags": [],
      "apiType": "instanceMethod",
      "fullSignature": "session.getCacheSize()",
      "tldr": "the session's current cache size, in bytes.",
      "slug": "sessiongetcachesize",
      "url": "https://electronjs.org/docs/api/session#sessiongetcachesize",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:getCacheSize",
        "api:sessiongetcachesize",
        "api:session.getCacheSize()",
        "doc:getCacheSize",
        "doc:sessiongetcachesize",
        "doc:session.getCacheSize()"
      ]
    },
    {
      "objectID": "api-session#sessionclearcache",
      "name": "clearCache",
      "signature": "()",
      "description": "resolves when the cache clear operation is complete.\n\nClears the session’s HTTP cache.",
      "parameters": [],
      "returns": {
        "collection": false,
        "type": "Promise",
        "innerTypes": [
          {
            "collection": false,
            "type": "void"
          }
        ]
      },
      "additionalTags": [],
      "apiType": "instanceMethod",
      "fullSignature": "session.clearCache()",
      "tldr": "resolves when the cache clear operation is complete.\n\nClears the session’s HTTP cache.",
      "slug": "sessionclearcache",
      "url": "https://electronjs.org/docs/api/session#sessionclearcache",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:clearCache",
        "api:sessionclearcache",
        "api:session.clearCache()",
        "doc:clearCache",
        "doc:sessionclearcache",
        "doc:session.clearCache()"
      ]
    },
    {
      "objectID": "api-session#sessionclearstoragedataoptions",
      "name": "clearStorageData",
      "signature": "([options])",
      "description": "resolves when the storage data has been cleared.",
      "parameters": [
        {
          "name": "options",
          "description": "",
          "required": false,
          "collection": false,
          "type": "Object",
          "properties": [
            {
              "name": "origin",
              "description": "Should follow `window.location.origin`’s representation `scheme://host:port`.",
              "required": false,
              "additionalTags": [],
              "collection": false,
              "type": "String",
              "possibleValues": null
            },
            {
              "name": "storages",
              "description": "The types of storages to clear, can contain: `appcache`, `cookies`, `filesystem`, `indexdb`, `localstorage`, `shadercache`, `websql`, `serviceworkers`, `cachestorage`.",
              "required": false,
              "additionalTags": [],
              "collection": true,
              "type": "String",
              "possibleValues": null
            },
            {
              "name": "quotas",
              "description": "The types of quotas to clear, can contain: `temporary`, `persistent`, `syncable`.",
              "required": false,
              "additionalTags": [],
              "collection": true,
              "type": "String",
              "possibleValues": null
            }
          ]
        }
      ],
      "returns": {
        "collection": false,
        "type": "Promise",
        "innerTypes": [
          {
            "collection": false,
            "type": "void"
          }
        ]
      },
      "additionalTags": [],
      "apiType": "instanceMethod",
      "fullSignature": "session.clearStorageData([options])",
      "tldr": "resolves when the storage data has been cleared.",
      "slug": "sessionclearstoragedataoptions",
      "url": "https://electronjs.org/docs/api/session#sessionclearstoragedataoptions",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:clearStorageData",
        "api:sessionclearstoragedataoptions",
        "api:session.clearStorageData([options])",
        "doc:clearStorageData",
        "doc:sessionclearstoragedataoptions",
        "doc:session.clearStorageData([options])"
      ]
    },
    {
      "objectID": "api-session#sessionflushstoragedata",
      "name": "flushStorageData",
      "signature": "()",
      "description": "Writes any unwritten DOMStorage data to disk.",
      "parameters": [],
      "returns": null,
      "additionalTags": [],
      "apiType": "instanceMethod",
      "fullSignature": "session.flushStorageData()",
      "tldr": "Writes any unwritten DOMStorage data to disk.",
      "slug": "sessionflushstoragedata",
      "url": "https://electronjs.org/docs/api/session#sessionflushstoragedata",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:flushStorageData",
        "api:sessionflushstoragedata",
        "api:session.flushStorageData()",
        "doc:flushStorageData",
        "doc:sessionflushstoragedata",
        "doc:session.flushStorageData()"
      ]
    },
    {
      "objectID": "api-session#sessionsetproxyconfig",
      "name": "setProxy",
      "signature": "(config)",
      "description": "Resolves when the proxy setting process is complete.\n\nSets the proxy settings.\n\nWhen `pacScript` and `proxyRules` are provided together, the `proxyRules` option is ignored and `pacScript` configuration is applied.\n\nThe `proxyRules` has to follow the rules below:\n\nFor example:\n\n* `http=foopy:80;ftp=foopy2` - Use HTTP proxy `foopy:80` for `http://` URLs, and HTTP proxy `foopy2:80` for `ftp://` URLs.\n* `foopy:80` - Use HTTP proxy `foopy:80` for all URLs.\n* `foopy:80,bar,direct://` - Use HTTP proxy `foopy:80` for all URLs, failing over to `bar` if `foopy:80` is unavailable, and after that using no proxy.\n* `socks4://foopy` - Use SOCKS v4 proxy `foopy:1080` for all URLs.\n* `http=foopy,socks5://bar.com` - Use HTTP proxy `foopy` for http URLs, and fail over to the SOCKS5 proxy `bar.com` if `foopy` is unavailable.\n* `http=foopy,direct://` - Use HTTP proxy `foopy` for http URLs, and use no proxy if `foopy` is unavailable.\n* `http=foopy;socks=foopy2` - Use HTTP proxy `foopy` for http URLs, and use `socks4://foopy2` for all other URLs.\n\nThe `proxyBypassRules` is a comma separated list of rules described below:\n\n* `[ URL_SCHEME \"://\" ] HOSTNAME_PATTERN [ \":\" <port> ]`\n\nMatch all hostnames that match the pattern HOSTNAME_PATTERN.\n\nExamples: \"foobar.com\", \"*foobar.com\", \"*.foobar.com\", \"*foobar.com:99\", \"https://x.*.y.com:99\"\n* `\".\" HOSTNAME_SUFFIX_PATTERN [ \":\" PORT ]`\n\nMatch a particular domain suffix.\n\nExamples: \".google.com\", \".com\", \"http://.google.com\"\n* `[ SCHEME \"://\" ] IP_LITERAL [ \":\" PORT ]`\n\nMatch URLs which are IP address literals.\n\nExamples: \"127.0.1\", \"[0:0::1]\", \"[::1]\", \"http://[::1]:99\"\n* `IP_LITERAL \"/\" PREFIX_LENGTH_IN_BITS`\n\nMatch any URL that is to an IP literal that falls between the given range. IP range is specified using CIDR notation.\n\nExamples: \"192.168.1.1/16\", \"fefe:13::abc/33\".\n* `<local>`\n\nMatch local addresses. The meaning of `<local>` is whether the host matches one of: \"127.0.0.1\", \"::1\", \"localhost\".",
      "parameters": [
        {
          "name": "config",
          "description": "",
          "required": true,
          "collection": false,
          "type": "Object",
          "properties": [
            {
              "name": "pacScript",
              "description": "The URL associated with the PAC file.",
              "required": true,
              "additionalTags": [],
              "collection": false,
              "type": "String",
              "possibleValues": null
            },
            {
              "name": "proxyRules",
              "description": "Rules indicating which proxies to use.",
              "required": true,
              "additionalTags": [],
              "collection": false,
              "type": "String",
              "possibleValues": null
            },
            {
              "name": "proxyBypassRules",
              "description": "Rules indicating which URLs should bypass the proxy settings.",
              "required": true,
              "additionalTags": [],
              "collection": false,
              "type": "String",
              "possibleValues": null
            }
          ]
        }
      ],
      "returns": {
        "collection": false,
        "type": "Promise",
        "innerTypes": [
          {
            "collection": false,
            "type": "void"
          }
        ]
      },
      "additionalTags": [],
      "apiType": "instanceMethod",
      "fullSignature": "session.setProxy(config)",
      "tldr": "Resolves when the proxy setting process is complete.\n\nSets the proxy settings.\n\nWhen `pacScript` and `proxyRules` are provided together, the `proxyRules` option is ignored and `pacScript` configuration is applied.\n\nThe `proxyRules` has to follow the rules below:\n\nFor example:\n\n* `http=foopy:80;ftp=foopy2` - Use HTTP proxy `foopy:80` for `http://` URLs, and HTTP proxy `foopy2:80` for `ftp://` URLs.\n* `foopy:80` - Use HTTP proxy `foopy:80` for all URLs.\n* `foopy:80,bar,direct://` - Use HTTP proxy `foopy:80` for all URLs, failing over to `bar` if `foopy:80` is unavailable, and after that using no proxy.\n* `socks4://foopy` - Use SOCKS v4 proxy `foopy:1080` for all URLs.\n* `http=foopy,socks5://bar.com` - Use HTTP proxy `foopy` for http URLs, and fail over to the SOCKS5 proxy `bar.com` if `foopy` is unavailable.\n* `http=foopy,direct://` - Use HTTP proxy `foopy` for http URLs, and use no proxy if `foopy` is unavailable.\n* `http=foopy;socks=foopy2` - Use HTTP proxy `foopy` for http URLs, and use `socks4://foopy2` for all other URLs.\n\nThe `proxyBypassRules` is a comma separated list of rules described below:\n\n* `[ URL_SCHEME \"://\" ] HOSTNAME_PATTERN [ \":\" <port> ]`\n\nMatch all hostnames that match the pattern HOSTNAME_PATTERN.\n\nExamples: \"foobar.com\", \"*foobar.com\", \"*.foobar.com\", \"*foobar.com:99\", \"https://x.*.y.com:99\"\n* `\".\" HOSTNAME_SUFFIX_PATTERN [ \":\" PORT ]`\n\nMatch a particular domain suffix.\n\nExamples: \".google.com\", \".com\", \"http://.google.com\"\n* `[ SCHEME \"://\" ] IP_LITERAL [ \":\" PORT ]`\n\nMatch URLs which are IP address literals.\n\nExamples: \"127.0.1\", \"[0:0::1]\", \"[::1]\", \"http://[::1]:99\"\n* `IP_LITERAL \"/\" PREFIX_LENGTH_IN_BITS`\n\nMatch any URL that is to an IP literal that falls between the given range.",
      "slug": "sessionsetproxyconfig",
      "url": "https://electronjs.org/docs/api/session#sessionsetproxyconfig",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:setProxy",
        "api:sessionsetproxyconfig",
        "api:session.setProxy(config)",
        "doc:setProxy",
        "doc:sessionsetproxyconfig",
        "doc:session.setProxy(config)"
      ]
    },
    {
      "objectID": "api-session#sessionresolveproxyurl",
      "name": "resolveProxy",
      "signature": "(url)",
      "description": "Resolves with the proxy information for `url`.",
      "parameters": [
        {
          "name": "url",
          "description": "",
          "required": true,
          "collection": false,
          "type": "URL"
        }
      ],
      "returns": {
        "collection": false,
        "type": "Promise",
        "innerTypes": [
          {
            "collection": false,
            "type": "String",
            "possibleValues": null
          }
        ]
      },
      "additionalTags": [],
      "apiType": "instanceMethod",
      "fullSignature": "session.resolveProxy(url)",
      "tldr": "Resolves with the proxy information for `url`.",
      "slug": "sessionresolveproxyurl",
      "url": "https://electronjs.org/docs/api/session#sessionresolveproxyurl",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:resolveProxy",
        "api:sessionresolveproxyurl",
        "api:session.resolveProxy(url)",
        "doc:resolveProxy",
        "doc:sessionresolveproxyurl",
        "doc:session.resolveProxy(url)"
      ]
    },
    {
      "objectID": "api-session#sessionsetdownloadpathpath",
      "name": "setDownloadPath",
      "signature": "(path)",
      "description": "Sets download saving directory. By default, the download directory will be the `Downloads` under the respective app folder.",
      "parameters": [
        {
          "name": "path",
          "description": "The download location.",
          "required": true,
          "collection": false,
          "type": "String",
          "possibleValues": null
        }
      ],
      "returns": null,
      "additionalTags": [],
      "apiType": "instanceMethod",
      "fullSignature": "session.setDownloadPath(path)",
      "tldr": "Sets download saving directory.",
      "slug": "sessionsetdownloadpathpath",
      "url": "https://electronjs.org/docs/api/session#sessionsetdownloadpathpath",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:setDownloadPath",
        "api:sessionsetdownloadpathpath",
        "api:session.setDownloadPath(path)",
        "doc:setDownloadPath",
        "doc:sessionsetdownloadpathpath",
        "doc:session.setDownloadPath(path)"
      ]
    },
    {
      "objectID": "api-session#sessionenablenetworkemulationoptions",
      "name": "enableNetworkEmulation",
      "signature": "(options)",
      "description": "Emulates network with the given configuration for the `session`.",
      "parameters": [
        {
          "name": "options",
          "description": "",
          "required": true,
          "collection": false,
          "type": "Object",
          "properties": [
            {
              "name": "offline",
              "description": "Whether to emulate network outage. Defaults to false.",
              "required": false,
              "additionalTags": [],
              "collection": false,
              "type": "Boolean"
            },
            {
              "name": "latency",
              "description": "RTT in ms. Defaults to 0 which will disable latency throttling.",
              "required": false,
              "additionalTags": [],
              "collection": false,
              "type": "Double"
            },
            {
              "name": "downloadThroughput",
              "description": "Download rate in Bps. Defaults to 0 which will disable download throttling.",
              "required": false,
              "additionalTags": [],
              "collection": false,
              "type": "Double"
            },
            {
              "name": "uploadThroughput",
              "description": "Upload rate in Bps. Defaults to 0 which will disable upload throttling.",
              "required": false,
              "additionalTags": [],
              "collection": false,
              "type": "Double"
            }
          ]
        }
      ],
      "returns": null,
      "additionalTags": [],
      "apiType": "instanceMethod",
      "fullSignature": "session.enableNetworkEmulation(options)",
      "tldr": "Emulates network with the given configuration for the `session`.",
      "slug": "sessionenablenetworkemulationoptions",
      "url": "https://electronjs.org/docs/api/session#sessionenablenetworkemulationoptions",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:enableNetworkEmulation",
        "api:sessionenablenetworkemulationoptions",
        "api:session.enableNetworkEmulation(options)",
        "doc:enableNetworkEmulation",
        "doc:sessionenablenetworkemulationoptions",
        "doc:session.enableNetworkEmulation(options)"
      ]
    },
    {
      "objectID": "api-session#sessionpreconnectoptions",
      "name": "preconnect",
      "signature": "(options)",
      "description": "Preconnects the given number of sockets to an origin.",
      "parameters": [
        {
          "name": "options",
          "description": "",
          "required": true,
          "collection": false,
          "type": "Object",
          "properties": [
            {
              "name": "url",
              "description": "URL for preconnect. Only the origin is relevant for opening the socket.",
              "required": true,
              "additionalTags": [],
              "collection": false,
              "type": "String",
              "possibleValues": null
            },
            {
              "name": "numSockets",
              "description": "number of sockets to preconnect. Must be between 1 and 6. Defaults to 1.",
              "required": false,
              "additionalTags": [],
              "collection": false,
              "type": "Number"
            }
          ]
        }
      ],
      "returns": null,
      "additionalTags": [
        "stability_experimental"
      ],
      "apiType": "instanceMethod",
      "fullSignature": "session.preconnect(options)",
      "tldr": "Preconnects the given number of sockets to an origin.",
      "slug": "sessionpreconnectoptions",
      "url": "https://electronjs.org/docs/api/session#sessionpreconnectoptions",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:preconnect",
        "api:sessionpreconnectoptions",
        "api:session.preconnect(options)",
        "doc:preconnect",
        "doc:sessionpreconnectoptions",
        "doc:session.preconnect(options)"
      ]
    },
    {
      "objectID": "api-session#sessiondisablenetworkemulation",
      "name": "disableNetworkEmulation",
      "signature": "()",
      "description": "Disables any network emulation already active for the `session`. Resets to the original network configuration.",
      "parameters": [],
      "returns": null,
      "additionalTags": [],
      "apiType": "instanceMethod",
      "fullSignature": "session.disableNetworkEmulation()",
      "tldr": "Disables any network emulation already active for the `session`.",
      "slug": "sessiondisablenetworkemulation",
      "url": "https://electronjs.org/docs/api/session#sessiondisablenetworkemulation",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:disableNetworkEmulation",
        "api:sessiondisablenetworkemulation",
        "api:session.disableNetworkEmulation()",
        "doc:disableNetworkEmulation",
        "doc:sessiondisablenetworkemulation",
        "doc:session.disableNetworkEmulation()"
      ]
    },
    {
      "objectID": "api-session#sessionsetcertificateverifyprocproc",
      "name": "setCertificateVerifyProc",
      "signature": "(proc)",
      "description": "Sets the certificate verify proc for `session`, the `proc` will be called with `proc(request, callback)` whenever a server certificate verification is requested. Calling `callback(0)` accepts the certificate, calling `callback(-2)` rejects it.\n\nCalling `setCertificateVerifyProc(null)` will revert back to default certificate verify proc.",
      "parameters": [
        {
          "name": "proc",
          "description": "",
          "required": true,
          "collection": false,
          "type": "Function",
          "parameters": [
            {
              "name": "request",
              "description": "",
              "required": true,
              "collection": false,
              "type": "Object",
              "properties": [
                {
                  "name": "hostname",
                  "description": "",
                  "required": true,
                  "additionalTags": [],
                  "collection": false,
                  "type": "String",
                  "possibleValues": null
                },
                {
                  "name": "certificate",
                  "description": "",
                  "required": true,
                  "additionalTags": [],
                  "collection": false,
                  "type": "Certificate"
                },
                {
                  "name": "verificationResult",
                  "description": "Verification result from chromium.",
                  "required": true,
                  "additionalTags": [],
                  "collection": false,
                  "type": "String",
                  "possibleValues": null
                },
                {
                  "name": "errorCode",
                  "description": "Error code.",
                  "required": true,
                  "additionalTags": [],
                  "collection": false,
                  "type": "Integer"
                }
              ]
            },
            {
              "name": "callback",
              "description": "",
              "required": true,
              "collection": false,
              "type": "Function",
              "parameters": [
                {
                  "name": "verificationResult",
                  "description": "Value can be one of certificate error codes from here. Apart from the certificate error codes, the following special codes can be used.",
                  "required": true,
                  "collection": false,
                  "type": "Integer"
                }
              ],
              "returns": null
            }
          ],
          "returns": null
        }
      ],
      "returns": null,
      "additionalTags": [],
      "apiType": "instanceMethod",
      "fullSignature": "session.setCertificateVerifyProc(proc)",
      "tldr": "Sets the certificate verify proc for `session`, the `proc` will be called with `proc(request, callback)` whenever a server certificate verification is requested.",
      "slug": "sessionsetcertificateverifyprocproc",
      "url": "https://electronjs.org/docs/api/session#sessionsetcertificateverifyprocproc",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:setCertificateVerifyProc",
        "api:sessionsetcertificateverifyprocproc",
        "api:session.setCertificateVerifyProc(proc)",
        "doc:setCertificateVerifyProc",
        "doc:sessionsetcertificateverifyprocproc",
        "doc:session.setCertificateVerifyProc(proc)"
      ]
    },
    {
      "objectID": "api-session#sessionsetpermissionrequesthandlerhandler",
      "name": "setPermissionRequestHandler",
      "signature": "(handler)",
      "description": "Sets the handler which can be used to respond to permission requests for the `session`. Calling `callback(true)` will allow the permission and `callback(false)` will reject it. To clear the handler, call `setPermissionRequestHandler(null)`.",
      "parameters": [
        {
          "name": "handler",
          "description": "",
          "required": true,
          "collection": false,
          "type": [
            {
              "collection": false,
              "type": "Function",
              "parameters": [
                {
                  "name": "webContents",
                  "description": "WebContents requesting the permission.  Please note that if the request comes from a subframe you should use `requestingUrl` to check the request origin.",
                  "required": true,
                  "collection": false,
                  "type": "WebContents"
                },
                {
                  "name": "permission",
                  "description": "Enum of 'media', 'geolocation', 'notifications', 'midiSysex', 'pointerLock', 'fullscreen', 'openExternal'.",
                  "required": true,
                  "collection": false,
                  "type": "String",
                  "possibleValues": null
                },
                {
                  "name": "callback",
                  "description": "",
                  "required": true,
                  "collection": false,
                  "type": "Function",
                  "parameters": [
                    {
                      "name": "permissionGranted",
                      "description": "Allow or deny the permission.",
                      "required": true,
                      "collection": false,
                      "type": "Boolean"
                    }
                  ],
                  "returns": null
                },
                {
                  "name": "details",
                  "description": "Some properties are only available on certain permission types.",
                  "required": true,
                  "collection": false,
                  "type": "Object",
                  "properties": [
                    {
                      "name": "externalURL",
                      "description": "The url of the `openExternal` request.",
                      "required": false,
                      "additionalTags": [],
                      "collection": false,
                      "type": "String",
                      "possibleValues": null
                    },
                    {
                      "name": "mediaTypes",
                      "description": "The types of media access being requested, elements can be `video` or `audio`",
                      "required": false,
                      "additionalTags": [],
                      "collection": true,
                      "type": "String",
                      "possibleValues": [
                        {
                          "value": "video",
                          "description": ""
                        },
                        {
                          "value": "audio",
                          "description": ""
                        }
                      ]
                    },
                    {
                      "name": "requestingUrl",
                      "description": "The last URL the requesting frame loaded",
                      "required": true,
                      "additionalTags": [],
                      "collection": false,
                      "type": "String",
                      "possibleValues": null
                    },
                    {
                      "name": "isMainFrame",
                      "description": "Whether the frame making the request is the main frame",
                      "required": true,
                      "additionalTags": [],
                      "collection": false,
                      "type": "Boolean"
                    }
                  ]
                }
              ],
              "returns": null
            },
            {
              "type": "null",
              "collection": false
            }
          ]
        }
      ],
      "returns": null,
      "additionalTags": [],
      "apiType": "instanceMethod",
      "fullSignature": "session.setPermissionRequestHandler(handler)",
      "tldr": "Sets the handler which can be used to respond to permission requests for the `session`.",
      "slug": "sessionsetpermissionrequesthandlerhandler",
      "url": "https://electronjs.org/docs/api/session#sessionsetpermissionrequesthandlerhandler",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:setPermissionRequestHandler",
        "api:sessionsetpermissionrequesthandlerhandler",
        "api:session.setPermissionRequestHandler(handler)",
        "doc:setPermissionRequestHandler",
        "doc:sessionsetpermissionrequesthandlerhandler",
        "doc:session.setPermissionRequestHandler(handler)"
      ]
    },
    {
      "objectID": "api-session#sessionsetpermissioncheckhandlerhandler",
      "name": "setPermissionCheckHandler",
      "signature": "(handler)",
      "description": "Sets the handler which can be used to respond to permission checks for the `session`. Returning `true` will allow the permission and `false` will reject it. To clear the handler, call `setPermissionCheckHandler(null)`.",
      "parameters": [
        {
          "name": "handler",
          "description": "",
          "required": true,
          "collection": false,
          "type": [
            {
              "collection": false,
              "type": "Function",
              "parameters": [
                {
                  "name": "webContents",
                  "description": "WebContents checking the permission.  Please note that if the request comes from a subframe you should use `requestingUrl` to check the request origin.",
                  "required": true,
                  "collection": false,
                  "type": "WebContents"
                },
                {
                  "name": "permission",
                  "description": "Enum of 'media'.",
                  "required": true,
                  "collection": false,
                  "type": "String",
                  "possibleValues": null
                },
                {
                  "name": "requestingOrigin",
                  "description": "The origin URL of the permission check",
                  "required": true,
                  "collection": false,
                  "type": "String",
                  "possibleValues": null
                },
                {
                  "name": "details",
                  "description": "Some properties are only available on certain permission types.",
                  "required": true,
                  "collection": false,
                  "type": "Object",
                  "properties": [
                    {
                      "name": "securityOrigin",
                      "description": "The security orign of the `media` check.",
                      "required": true,
                      "additionalTags": [],
                      "collection": false,
                      "type": "String",
                      "possibleValues": null
                    },
                    {
                      "name": "mediaType",
                      "description": "The type of media access being requested, can be `video`, `audio` or `unknown`",
                      "required": true,
                      "additionalTags": [],
                      "collection": false,
                      "type": "String",
                      "possibleValues": [
                        {
                          "value": "video",
                          "description": ""
                        },
                        {
                          "value": "audio",
                          "description": ""
                        },
                        {
                          "value": "unknown",
                          "description": ""
                        }
                      ]
                    },
                    {
                      "name": "requestingUrl",
                      "description": "The last URL the requesting frame loaded",
                      "required": true,
                      "additionalTags": [],
                      "collection": false,
                      "type": "String",
                      "possibleValues": null
                    },
                    {
                      "name": "isMainFrame",
                      "description": "Whether the frame making the request is the main frame",
                      "required": true,
                      "additionalTags": [],
                      "collection": false,
                      "type": "Boolean"
                    }
                  ]
                }
              ],
              "returns": {
                "collection": false,
                "type": "Boolean"
              }
            },
            {
              "type": "null",
              "collection": false
            }
          ]
        }
      ],
      "returns": null,
      "additionalTags": [],
      "apiType": "instanceMethod",
      "fullSignature": "session.setPermissionCheckHandler(handler)",
      "tldr": "Sets the handler which can be used to respond to permission checks for the `session`.",
      "slug": "sessionsetpermissioncheckhandlerhandler",
      "url": "https://electronjs.org/docs/api/session#sessionsetpermissioncheckhandlerhandler",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:setPermissionCheckHandler",
        "api:sessionsetpermissioncheckhandlerhandler",
        "api:session.setPermissionCheckHandler(handler)",
        "doc:setPermissionCheckHandler",
        "doc:sessionsetpermissioncheckhandlerhandler",
        "doc:session.setPermissionCheckHandler(handler)"
      ]
    },
    {
      "objectID": "api-session#sessionclearhostresolvercache",
      "name": "clearHostResolverCache",
      "signature": "()",
      "description": "Resolves when the operation is complete.\n\nClears the host resolver cache.",
      "parameters": [],
      "returns": {
        "collection": false,
        "type": "Promise",
        "innerTypes": [
          {
            "collection": false,
            "type": "void"
          }
        ]
      },
      "additionalTags": [],
      "apiType": "instanceMethod",
      "fullSignature": "session.clearHostResolverCache()",
      "tldr": "Resolves when the operation is complete.\n\nClears the host resolver cache.",
      "slug": "sessionclearhostresolvercache",
      "url": "https://electronjs.org/docs/api/session#sessionclearhostresolvercache",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:clearHostResolverCache",
        "api:sessionclearhostresolvercache",
        "api:session.clearHostResolverCache()",
        "doc:clearHostResolverCache",
        "doc:sessionclearhostresolvercache",
        "doc:session.clearHostResolverCache()"
      ]
    },
    {
      "objectID": "api-session#sessionallowntlmcredentialsfordomainsdomains",
      "name": "allowNTLMCredentialsForDomains",
      "signature": "(domains)",
      "description": "Dynamically sets whether to always send credentials for HTTP NTLM or Negotiate authentication.",
      "parameters": [
        {
          "name": "domains",
          "description": "A comma-separated list of servers for which integrated authentication is enabled.",
          "required": true,
          "collection": false,
          "type": "String",
          "possibleValues": null
        }
      ],
      "returns": null,
      "additionalTags": [],
      "apiType": "instanceMethod",
      "fullSignature": "session.allowNTLMCredentialsForDomains(domains)",
      "tldr": "Dynamically sets whether to always send credentials for HTTP NTLM or Negotiate authentication.",
      "slug": "sessionallowntlmcredentialsfordomainsdomains",
      "url": "https://electronjs.org/docs/api/session#sessionallowntlmcredentialsfordomainsdomains",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:allowNTLMCredentialsForDomains",
        "api:sessionallowntlmcredentialsfordomainsdomains",
        "api:session.allowNTLMCredentialsForDomains(domains)",
        "doc:allowNTLMCredentialsForDomains",
        "doc:sessionallowntlmcredentialsfordomainsdomains",
        "doc:session.allowNTLMCredentialsForDomains(domains)"
      ]
    },
    {
      "objectID": "api-session#sessionsetuseragentuseragent-acceptlanguages",
      "name": "setUserAgent",
      "signature": "(userAgent[, acceptLanguages])",
      "description": "Overrides the `userAgent` and `acceptLanguages` for this session.\n\nThe `acceptLanguages` must a comma separated ordered list of language codes, for example `\"en-US,fr,de,ko,zh-CN,ja\"`.\n\nThis doesn't affect existing `WebContents`, and each `WebContents` can use `webContents.setUserAgent` to override the session-wide user agent.",
      "parameters": [
        {
          "name": "userAgent",
          "description": "",
          "required": true,
          "collection": false,
          "type": "String",
          "possibleValues": null
        },
        {
          "name": "acceptLanguages",
          "description": "",
          "required": false,
          "collection": false,
          "type": "String",
          "possibleValues": null
        }
      ],
      "returns": null,
      "additionalTags": [],
      "apiType": "instanceMethod",
      "fullSignature": "session.setUserAgent(userAgent[, acceptLanguages])",
      "tldr": "Overrides the `userAgent` and `acceptLanguages` for this session.\n\nThe `acceptLanguages` must a comma separated ordered list of language codes, for example `\"en-US,fr,de,ko,zh-CN,ja\"`.\n\nThis doesn't affect existing `WebContents`, and each `WebContents` can use `webContents.setUserAgent` to override the session-wide user agent.",
      "slug": "sessionsetuseragentuseragent-acceptlanguages",
      "url": "https://electronjs.org/docs/api/session#sessionsetuseragentuseragent-acceptlanguages",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:setUserAgent",
        "api:sessionsetuseragentuseragent-acceptlanguages",
        "api:session.setUserAgent(userAgent[, acceptLanguages])",
        "doc:setUserAgent",
        "doc:sessionsetuseragentuseragent-acceptlanguages",
        "doc:session.setUserAgent(userAgent[, acceptLanguages])"
      ]
    },
    {
      "objectID": "api-session#sessiongetuseragent",
      "name": "getUserAgent",
      "signature": "()",
      "description": "The user agent for this session.",
      "parameters": [],
      "returns": {
        "collection": false,
        "type": "String",
        "possibleValues": null
      },
      "additionalTags": [],
      "apiType": "instanceMethod",
      "fullSignature": "session.getUserAgent()",
      "tldr": "The user agent for this session.",
      "slug": "sessiongetuseragent",
      "url": "https://electronjs.org/docs/api/session#sessiongetuseragent",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:getUserAgent",
        "api:sessiongetuseragent",
        "api:session.getUserAgent()",
        "doc:getUserAgent",
        "doc:sessiongetuseragent",
        "doc:session.getUserAgent()"
      ]
    },
    {
      "objectID": "api-session#sessiongetblobdataidentifier",
      "name": "getBlobData",
      "signature": "(identifier)",
      "description": "resolves with blob data.",
      "parameters": [
        {
          "name": "identifier",
          "description": "Valid UUID.",
          "required": true,
          "collection": false,
          "type": "String",
          "possibleValues": null
        }
      ],
      "returns": {
        "collection": false,
        "type": "Promise",
        "innerTypes": [
          {
            "collection": false,
            "type": "Buffer"
          }
        ]
      },
      "additionalTags": [],
      "apiType": "instanceMethod",
      "fullSignature": "session.getBlobData(identifier)",
      "tldr": "resolves with blob data.",
      "slug": "sessiongetblobdataidentifier",
      "url": "https://electronjs.org/docs/api/session#sessiongetblobdataidentifier",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:getBlobData",
        "api:sessiongetblobdataidentifier",
        "api:session.getBlobData(identifier)",
        "doc:getBlobData",
        "doc:sessiongetblobdataidentifier",
        "doc:session.getBlobData(identifier)"
      ]
    },
    {
      "objectID": "api-session#sessioncreateinterrupteddownloadoptions",
      "name": "createInterruptedDownload",
      "signature": "(options)",
      "description": "Allows resuming `cancelled` or `interrupted` downloads from previous `Session`. The API will generate a DownloadItem that can be accessed with the will-download event. The DownloadItem will not have any `WebContents` associated with it and the initial state will be `interrupted`. The download will start only when the `resume` API is called on the DownloadItem.",
      "parameters": [
        {
          "name": "options",
          "description": "",
          "required": true,
          "collection": false,
          "type": "Object",
          "properties": [
            {
              "name": "path",
              "description": "Absolute path of the download.",
              "required": true,
              "additionalTags": [],
              "collection": false,
              "type": "String",
              "possibleValues": null
            },
            {
              "name": "urlChain",
              "description": "Complete URL chain for the download.",
              "required": true,
              "additionalTags": [],
              "collection": true,
              "type": "String",
              "possibleValues": null
            },
            {
              "name": "mimeType",
              "description": "",
              "required": false,
              "additionalTags": [],
              "collection": false,
              "type": "String",
              "possibleValues": null
            },
            {
              "name": "offset",
              "description": "Start range for the download.",
              "required": true,
              "additionalTags": [],
              "collection": false,
              "type": "Integer"
            },
            {
              "name": "length",
              "description": "Total length of the download.",
              "required": true,
              "additionalTags": [],
              "collection": false,
              "type": "Integer"
            },
            {
              "name": "lastModified",
              "description": "Last-Modified header value.",
              "required": true,
              "additionalTags": [],
              "collection": false,
              "type": "String",
              "possibleValues": null
            },
            {
              "name": "eTag",
              "description": "ETag header value.",
              "required": true,
              "additionalTags": [],
              "collection": false,
              "type": "String",
              "possibleValues": null
            },
            {
              "name": "startTime",
              "description": "Time when download was started in number of seconds since UNIX epoch.",
              "required": false,
              "additionalTags": [],
              "collection": false,
              "type": "Double"
            }
          ]
        }
      ],
      "returns": null,
      "additionalTags": [],
      "apiType": "instanceMethod",
      "fullSignature": "session.createInterruptedDownload(options)",
      "tldr": "Allows resuming `cancelled` or `interrupted` downloads from previous `Session`.",
      "slug": "sessioncreateinterrupteddownloadoptions",
      "url": "https://electronjs.org/docs/api/session#sessioncreateinterrupteddownloadoptions",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:createInterruptedDownload",
        "api:sessioncreateinterrupteddownloadoptions",
        "api:session.createInterruptedDownload(options)",
        "doc:createInterruptedDownload",
        "doc:sessioncreateinterrupteddownloadoptions",
        "doc:session.createInterruptedDownload(options)"
      ]
    },
    {
      "objectID": "api-session#sessionclearauthcacheoptions",
      "name": "clearAuthCache",
      "signature": "(options)",
      "description": "resolves when the session’s HTTP authentication cache has been cleared.",
      "parameters": [
        {
          "name": "options",
          "description": "",
          "required": true,
          "collection": false,
          "type": [
            {
              "collection": false,
              "type": "RemovePassword"
            },
            {
              "collection": false,
              "type": "RemoveClientCertificate"
            }
          ]
        }
      ],
      "returns": {
        "collection": false,
        "type": "Promise",
        "innerTypes": [
          {
            "collection": false,
            "type": "void"
          }
        ]
      },
      "additionalTags": [],
      "apiType": "instanceMethod",
      "fullSignature": "session.clearAuthCache(options)",
      "tldr": "resolves when the session’s HTTP authentication cache has been cleared.",
      "slug": "sessionclearauthcacheoptions",
      "url": "https://electronjs.org/docs/api/session#sessionclearauthcacheoptions",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:clearAuthCache",
        "api:sessionclearauthcacheoptions",
        "api:session.clearAuthCache(options)",
        "doc:clearAuthCache",
        "doc:sessionclearauthcacheoptions",
        "doc:session.clearAuthCache(options)"
      ]
    },
    {
      "objectID": "api-session#sessionsetpreloadspreloads",
      "name": "setPreloads",
      "signature": "(preloads)",
      "description": "Adds scripts that will be executed on ALL web contents that are associated with this session just before normal `preload` scripts run.",
      "parameters": [
        {
          "name": "preloads",
          "description": "An array of absolute path to preload scripts",
          "required": true,
          "collection": true,
          "type": "String",
          "possibleValues": null
        }
      ],
      "returns": null,
      "additionalTags": [],
      "apiType": "instanceMethod",
      "fullSignature": "session.setPreloads(preloads)",
      "tldr": "Adds scripts that will be executed on ALL web contents that are associated with this session just before normal `preload` scripts run.",
      "slug": "sessionsetpreloadspreloads",
      "url": "https://electronjs.org/docs/api/session#sessionsetpreloadspreloads",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:setPreloads",
        "api:sessionsetpreloadspreloads",
        "api:session.setPreloads(preloads)",
        "doc:setPreloads",
        "doc:sessionsetpreloadspreloads",
        "doc:session.setPreloads(preloads)"
      ]
    },
    {
      "objectID": "api-session#sessiongetpreloads",
      "name": "getPreloads",
      "signature": "()",
      "description": "an array of paths to preload scripts that have been registered.",
      "parameters": [],
      "returns": {
        "collection": true,
        "type": "String",
        "possibleValues": null
      },
      "additionalTags": [],
      "apiType": "instanceMethod",
      "fullSignature": "session.getPreloads()",
      "tldr": "an array of paths to preload scripts that have been registered.",
      "slug": "sessiongetpreloads",
      "url": "https://electronjs.org/docs/api/session#sessiongetpreloads",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:getPreloads",
        "api:sessiongetpreloads",
        "api:session.getPreloads()",
        "doc:getPreloads",
        "doc:sessiongetpreloads",
        "doc:session.getPreloads()"
      ]
    },
    {
      "objectID": "api-session#event-will-download",
      "name": "will-download",
      "description": "Emitted when Electron is about to download `item` in `webContents`.\n\nCalling `event.preventDefault()` will cancel the download and `item` will not be available from next tick of the process.",
      "parameters": [
        {
          "name": "event",
          "description": "",
          "collection": false,
          "type": "Event",
          "required": true
        },
        {
          "name": "item",
          "description": "",
          "collection": false,
          "type": "DownloadItem",
          "required": true
        },
        {
          "name": "webContents",
          "description": "",
          "collection": false,
          "type": "WebContents",
          "required": true
        }
      ],
      "additionalTags": [],
      "apiType": "event",
      "fullSignature": "session.on('will-download')",
      "url": "https://electronjs.org/docs/api/session#event-will-download",
      "slug": "sessiononwill-download",
      "tldr": "Emitted when Electron is about to download `item` in `webContents`.\n\nCalling `event.preventDefault()` will cancel the download and `item` will not be available from next tick of the process.",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:will-download",
        "api:sessiononwill-download",
        "api:session.on('will-download')",
        "doc:will-download",
        "doc:sessiononwill-download",
        "doc:session.on('will-download')"
      ]
    },
    {
      "objectID": "api-session#event-preconnect",
      "name": "preconnect",
      "description": "Emitted when a render process requests preconnection to a URL, generally due to a resource hint.",
      "parameters": [
        {
          "name": "event",
          "description": "",
          "collection": false,
          "type": "Event",
          "required": true
        },
        {
          "name": "preconnectUrl",
          "description": "The URL being requested for preconnection by the renderer.",
          "collection": false,
          "type": "String",
          "possibleValues": null,
          "required": true
        },
        {
          "name": "allowCredentials",
          "description": "True if the renderer is requesting that the connection include credentials (see the spec for more details.)",
          "collection": false,
          "type": "Boolean",
          "required": true
        }
      ],
      "additionalTags": [
        "stability_experimental"
      ],
      "apiType": "event",
      "fullSignature": "session.on('preconnect')",
      "url": "https://electronjs.org/docs/api/session#event-preconnect",
      "slug": "sessiononpreconnect",
      "tldr": "Emitted when a render process requests preconnection to a URL, generally due to a resource hint.",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:preconnect",
        "api:sessiononpreconnect",
        "api:session.on('preconnect')",
        "doc:preconnect",
        "doc:sessiononpreconnect",
        "doc:session.on('preconnect')"
      ]
    },
    {
      "objectID": "api-shell#shellshowiteminfolderfullpath",
      "name": "showItemInFolder",
      "signature": "(fullPath)",
      "description": "Show the given file in a file manager. If possible, select the file.",
      "parameters": [
        {
          "name": "fullPath",
          "description": "",
          "required": true,
          "collection": false,
          "type": "String",
          "possibleValues": null
        }
      ],
      "returns": null,
      "additionalTags": [],
      "apiType": "methods",
      "fullSignature": "shell.showItemInFolder(fullPath)",
      "tldr": "Show the given file in a file manager.",
      "slug": "shellshowiteminfolderfullpath",
      "url": "https://electronjs.org/docs/api/shell#shellshowiteminfolderfullpath",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:showItemInFolder",
        "api:shellshowiteminfolderfullpath",
        "api:shell.showItemInFolder(fullPath)",
        "doc:showItemInFolder",
        "doc:shellshowiteminfolderfullpath",
        "doc:shell.showItemInFolder(fullPath)"
      ]
    },
    {
      "objectID": "api-shell#shellopenitemfullpath",
      "name": "openItem",
      "signature": "(fullPath)",
      "description": "Whether the item was successfully opened.\n\nOpen the given file in the desktop's default manner.",
      "parameters": [
        {
          "name": "fullPath",
          "description": "",
          "required": true,
          "collection": false,
          "type": "String",
          "possibleValues": null
        }
      ],
      "returns": {
        "collection": false,
        "type": "Boolean"
      },
      "additionalTags": [],
      "apiType": "methods",
      "fullSignature": "shell.openItem(fullPath)",
      "tldr": "Whether the item was successfully opened.\n\nOpen the given file in the desktop's default manner.",
      "slug": "shellopenitemfullpath",
      "url": "https://electronjs.org/docs/api/shell#shellopenitemfullpath",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:openItem",
        "api:shellopenitemfullpath",
        "api:shell.openItem(fullPath)",
        "doc:openItem",
        "doc:shellopenitemfullpath",
        "doc:shell.openItem(fullPath)"
      ]
    },
    {
      "objectID": "api-shell#shellopenexternalurl-options",
      "name": "openExternal",
      "signature": "(url[, options])",
      "description": "Open the given external protocol URL in the desktop's default manner. (For example, mailto: URLs in the user's default mail agent).",
      "parameters": [
        {
          "name": "url",
          "description": "Max 2081 characters on windows.",
          "required": true,
          "collection": false,
          "type": "String",
          "possibleValues": null
        },
        {
          "name": "options",
          "description": "",
          "required": false,
          "collection": false,
          "type": "Object",
          "properties": [
            {
              "name": "activate",
              "description": "`true` to bring the opened application to the foreground. The default is `true`.",
              "required": false,
              "additionalTags": [
                "os_macos"
              ],
              "collection": false,
              "type": "Boolean"
            },
            {
              "name": "workingDirectory",
              "description": "The working directory.",
              "required": false,
              "additionalTags": [
                "os_windows"
              ],
              "collection": false,
              "type": "String",
              "possibleValues": null
            }
          ]
        }
      ],
      "returns": {
        "collection": false,
        "type": "Promise",
        "innerTypes": [
          {
            "collection": false,
            "type": "void"
          }
        ]
      },
      "additionalTags": [],
      "apiType": "methods",
      "fullSignature": "shell.openExternal(url[, options])",
      "tldr": "Open the given external protocol URL in the desktop's default manner.",
      "slug": "shellopenexternalurl-options",
      "url": "https://electronjs.org/docs/api/shell#shellopenexternalurl-options",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:openExternal",
        "api:shellopenexternalurl-options",
        "api:shell.openExternal(url[, options])",
        "doc:openExternal",
        "doc:shellopenexternalurl-options",
        "doc:shell.openExternal(url[, options])"
      ]
    },
    {
      "objectID": "api-shell#shellmoveitemtotrashfullpath",
      "name": "moveItemToTrash",
      "signature": "(fullPath)",
      "description": "Whether the item was successfully moved to the trash.\n\nMove the given file to trash and returns a boolean status for the operation.",
      "parameters": [
        {
          "name": "fullPath",
          "description": "",
          "required": true,
          "collection": false,
          "type": "String",
          "possibleValues": null
        }
      ],
      "returns": {
        "collection": false,
        "type": "Boolean"
      },
      "additionalTags": [],
      "apiType": "methods",
      "fullSignature": "shell.moveItemToTrash(fullPath)",
      "tldr": "Whether the item was successfully moved to the trash.\n\nMove the given file to trash and returns a boolean status for the operation.",
      "slug": "shellmoveitemtotrashfullpath",
      "url": "https://electronjs.org/docs/api/shell#shellmoveitemtotrashfullpath",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:moveItemToTrash",
        "api:shellmoveitemtotrashfullpath",
        "api:shell.moveItemToTrash(fullPath)",
        "doc:moveItemToTrash",
        "doc:shellmoveitemtotrashfullpath",
        "doc:shell.moveItemToTrash(fullPath)"
      ]
    },
    {
      "objectID": "api-shell#shellbeep",
      "name": "beep",
      "signature": "()",
      "description": "Play the beep sound.",
      "parameters": [],
      "returns": null,
      "additionalTags": [],
      "apiType": "methods",
      "fullSignature": "shell.beep()",
      "tldr": "Play the beep sound.",
      "slug": "shellbeep",
      "url": "https://electronjs.org/docs/api/shell#shellbeep",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:beep",
        "api:shellbeep",
        "api:shell.beep()",
        "doc:beep",
        "doc:shellbeep",
        "doc:shell.beep()"
      ]
    },
    {
      "objectID": "api-shell#shellwriteshortcutlinkshortcutpath-operation-options",
      "name": "writeShortcutLink",
      "signature": "(shortcutPath[, operation], options)",
      "description": "Whether the shortcut was created successfully.\n\nCreates or updates a shortcut link at `shortcutPath`.",
      "parameters": [
        {
          "name": "shortcutPath",
          "description": "",
          "required": true,
          "collection": false,
          "type": "String",
          "possibleValues": null
        },
        {
          "name": "operation",
          "description": "Default is `create`, can be one of following:",
          "required": false,
          "collection": false,
          "type": "String",
          "possibleValues": [
            {
              "value": "create",
              "description": "Creates a new shortcut, overwriting if necessary."
            },
            {
              "value": "update",
              "description": "Updates specified properties only on an existing shortcut."
            },
            {
              "value": "replace",
              "description": "Overwrites an existing shortcut, fails if the shortcut doesn't exist."
            }
          ]
        },
        {
          "name": "options",
          "description": "",
          "required": true,
          "collection": false,
          "type": "ShortcutDetails"
        }
      ],
      "returns": {
        "collection": false,
        "type": "Boolean"
      },
      "additionalTags": [
        "os_windows"
      ],
      "apiType": "methods",
      "fullSignature": "shell.writeShortcutLink(shortcutPath[, operation], options)",
      "tldr": "Whether the shortcut was created successfully.\n\nCreates or updates a shortcut link at `shortcutPath`.",
      "slug": "shellwriteshortcutlinkshortcutpath-operation-options",
      "url": "https://electronjs.org/docs/api/shell#shellwriteshortcutlinkshortcutpath-operation-options",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:writeShortcutLink",
        "api:shellwriteshortcutlinkshortcutpath-operation-options",
        "api:shell.writeShortcutLink(shortcutPath[, operation], options)",
        "doc:writeShortcutLink",
        "doc:shellwriteshortcutlinkshortcutpath-operation-options",
        "doc:shell.writeShortcutLink(shortcutPath[, operation], options)"
      ]
    },
    {
      "objectID": "api-shell#shellreadshortcutlinkshortcutpath",
      "name": "readShortcutLink",
      "signature": "(shortcutPath)",
      "description": "Resolves the shortcut link at `shortcutPath`.\n\nAn exception will be thrown when any error happens.",
      "parameters": [
        {
          "name": "shortcutPath",
          "description": "",
          "required": true,
          "collection": false,
          "type": "String",
          "possibleValues": null
        }
      ],
      "returns": {
        "collection": false,
        "type": "ShortcutDetails"
      },
      "additionalTags": [
        "os_windows"
      ],
      "apiType": "methods",
      "fullSignature": "shell.readShortcutLink(shortcutPath)",
      "tldr": "Resolves the shortcut link at `shortcutPath`.\n\nAn exception will be thrown when any error happens.",
      "slug": "shellreadshortcutlinkshortcutpath",
      "url": "https://electronjs.org/docs/api/shell#shellreadshortcutlinkshortcutpath",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:readShortcutLink",
        "api:shellreadshortcutlinkshortcutpath",
        "api:shell.readShortcutLink(shortcutPath)",
        "doc:readShortcutLink",
        "doc:shellreadshortcutlinkshortcutpath",
        "doc:shell.readShortcutLink(shortcutPath)"
      ]
    },
    {
      "objectID": "api-system-preferences#systempreferencesapplevelappearance",
      "name": "appLevelAppearance",
      "description": "A `String` property that can be `dark`, `light` or `unknown`. It determines the macOS appearance setting for your application. This maps to values in: NSApplication.appearance. Setting this will override the system default as well as the value of `getEffectiveAppearance`.\n\nPossible values that can be set are `dark` and `light`, and possible return values are `dark`, `light`, and `unknown`.\n\nThis property is only available on macOS 10.14 Mojave or newer.",
      "required": true,
      "additionalTags": [
        "os_macos"
      ],
      "collection": false,
      "type": "String",
      "possibleValues": [
        {
          "value": "dark",
          "description": ""
        },
        {
          "value": "light",
          "description": ""
        },
        {
          "value": "unknown",
          "description": ""
        }
      ],
      "apiType": "properties",
      "fullSignature": "systemPreferences.appLevelAppearance",
      "tldr": "A `String` property that can be `dark`, `light` or `unknown`.",
      "slug": "systempreferencesapplevelappearance",
      "url": "https://electronjs.org/docs/api/system-preferences#systempreferencesapplevelappearance",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:appLevelAppearance",
        "api:systempreferencesapplevelappearance",
        "api:systemPreferences.appLevelAppearance",
        "doc:appLevelAppearance",
        "doc:systempreferencesapplevelappearance",
        "doc:systemPreferences.appLevelAppearance"
      ]
    },
    {
      "objectID": "api-system-preferences#systempreferenceseffectiveappearance",
      "name": "effectiveAppearance",
      "description": "A `String` property that can be `dark`, `light` or `unknown`.\n\nReturns the macOS appearance setting that is currently applied to your application, maps to NSApplication.effectiveAppearance\n\nPlease note that until Electron is built targeting the 10.14 SDK, your application's `effectiveAppearance` will default to 'light' and won't inherit the OS preference. In the interim in order for your application to inherit the OS preference you must set the `NSRequiresAquaSystemAppearance` key in your apps `Info.plist` to `false`.  If you are using `electron-packager` or `electron-forge` just set the `enableDarwinDarkMode` packager option to `true`.  See the Electron Packager API for more details.",
      "required": true,
      "additionalTags": [
        "os_macos",
        "availability_readonly"
      ],
      "collection": false,
      "type": "String",
      "possibleValues": [
        {
          "value": "dark",
          "description": ""
        },
        {
          "value": "light",
          "description": ""
        },
        {
          "value": "unknown",
          "description": ""
        }
      ],
      "apiType": "properties",
      "fullSignature": "systemPreferences.effectiveAppearance",
      "tldr": "A `String` property that can be `dark`, `light` or `unknown`.\n\nReturns the macOS appearance setting that is currently applied to your application, maps to NSApplication.effectiveAppearance\n\nPlease note that until Electron is built targeting the 10.14 SDK, your application's `effectiveAppearance` will default to 'light' and won't inherit the OS preference.",
      "slug": "systempreferenceseffectiveappearance",
      "url": "https://electronjs.org/docs/api/system-preferences#systempreferenceseffectiveappearance",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:effectiveAppearance",
        "api:systempreferenceseffectiveappearance",
        "api:systemPreferences.effectiveAppearance",
        "doc:effectiveAppearance",
        "doc:systempreferenceseffectiveappearance",
        "doc:systemPreferences.effectiveAppearance"
      ]
    },
    {
      "objectID": "api-system-preferences#systempreferencesisdarkmode",
      "name": "isDarkMode",
      "signature": "()",
      "description": "Whether the system is in Dark Mode.\n\n**Note:** On macOS 10.15 Catalina in order for this API to return the correct value when in the \"automatic\" dark mode setting you must either have `NSRequiresAquaSystemAppearance=false` in your `Info.plist` or be on Electron `>=7.0.0`.  See the dark mode guide for more information.\n\n**Deprecated:** Should use the new `nativeTheme.shouldUseDarkColors` API.",
      "parameters": [],
      "returns": {
        "collection": false,
        "type": "Boolean"
      },
      "additionalTags": [
        "os_macos",
        "os_windows",
        "stability_deprecated"
      ],
      "apiType": "methods",
      "fullSignature": "systemPreferences.isDarkMode()",
      "tldr": "Whether the system is in Dark Mode.\n\n**Note:** On macOS 10.15 Catalina in order for this API to return the correct value when in the \"automatic\" dark mode setting you must either have `NSRequiresAquaSystemAppearance=false` in your `Info.plist` or be on Electron `>=7.0.0`.",
      "slug": "systempreferencesisdarkmode",
      "url": "https://electronjs.org/docs/api/system-preferences#systempreferencesisdarkmode",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:isDarkMode",
        "api:systempreferencesisdarkmode",
        "api:systemPreferences.isDarkMode()",
        "doc:isDarkMode",
        "doc:systempreferencesisdarkmode",
        "doc:systemPreferences.isDarkMode()"
      ]
    },
    {
      "objectID": "api-system-preferences#systempreferencesisswipetrackingfromscrolleventsenabled",
      "name": "isSwipeTrackingFromScrollEventsEnabled",
      "signature": "()",
      "description": "Whether the Swipe between pages setting is on.",
      "parameters": [],
      "returns": {
        "collection": false,
        "type": "Boolean"
      },
      "additionalTags": [
        "os_macos"
      ],
      "apiType": "methods",
      "fullSignature": "systemPreferences.isSwipeTrackingFromScrollEventsEnabled()",
      "tldr": "Whether the Swipe between pages setting is on.",
      "slug": "systempreferencesisswipetrackingfromscrolleventsenabled",
      "url": "https://electronjs.org/docs/api/system-preferences#systempreferencesisswipetrackingfromscrolleventsenabled",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:isSwipeTrackingFromScrollEventsEnabled",
        "api:systempreferencesisswipetrackingfromscrolleventsenabled",
        "api:systemPreferences.isSwipeTrackingFromScrollEventsEnabled()",
        "doc:isSwipeTrackingFromScrollEventsEnabled",
        "doc:systempreferencesisswipetrackingfromscrolleventsenabled",
        "doc:systemPreferences.isSwipeTrackingFromScrollEventsEnabled()"
      ]
    },
    {
      "objectID": "api-system-preferences#systempreferencespostnotificationevent-userinfo-deliverimmediately",
      "name": "postNotification",
      "signature": "(event, userInfo[, deliverImmediately])",
      "description": "Posts `event` as native notifications of macOS. The `userInfo` is an Object that contains the user information dictionary sent along with the notification.",
      "parameters": [
        {
          "name": "event",
          "description": "",
          "required": true,
          "collection": false,
          "type": "String",
          "possibleValues": null
        },
        {
          "name": "userInfo",
          "description": "",
          "required": true,
          "collection": false,
          "type": "Record",
          "innerTypes": [
            {
              "collection": false,
              "type": "String",
              "possibleValues": null
            },
            {
              "collection": false,
              "type": "any"
            }
          ]
        },
        {
          "name": "deliverImmediately",
          "description": "`true` to post notifications immediately even when the subscribing app is inactive.",
          "required": false,
          "collection": false,
          "type": "Boolean"
        }
      ],
      "returns": null,
      "additionalTags": [
        "os_macos"
      ],
      "apiType": "methods",
      "fullSignature": "systemPreferences.postNotification(event, userInfo[, deliverImmediately])",
      "tldr": "Posts `event` as native notifications of macOS.",
      "slug": "systempreferencespostnotificationevent-userinfo-deliverimmediately",
      "url": "https://electronjs.org/docs/api/system-preferences#systempreferencespostnotificationevent-userinfo-deliverimmediately",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:postNotification",
        "api:systempreferencespostnotificationevent-userinfo-deliverimmediately",
        "api:systemPreferences.postNotification(event, userInfo[, deliverImmediately])",
        "doc:postNotification",
        "doc:systempreferencespostnotificationevent-userinfo-deliverimmediately",
        "doc:systemPreferences.postNotification(event, userInfo[, deliverImmediately])"
      ]
    },
    {
      "objectID": "api-system-preferences#systempreferencespostlocalnotificationevent-userinfo",
      "name": "postLocalNotification",
      "signature": "(event, userInfo)",
      "description": "Posts `event` as native notifications of macOS. The `userInfo` is an Object that contains the user information dictionary sent along with the notification.",
      "parameters": [
        {
          "name": "event",
          "description": "",
          "required": true,
          "collection": false,
          "type": "String",
          "possibleValues": null
        },
        {
          "name": "userInfo",
          "description": "",
          "required": true,
          "collection": false,
          "type": "Record",
          "innerTypes": [
            {
              "collection": false,
              "type": "String",
              "possibleValues": null
            },
            {
              "collection": false,
              "type": "any"
            }
          ]
        }
      ],
      "returns": null,
      "additionalTags": [
        "os_macos"
      ],
      "apiType": "methods",
      "fullSignature": "systemPreferences.postLocalNotification(event, userInfo)",
      "tldr": "Posts `event` as native notifications of macOS.",
      "slug": "systempreferencespostlocalnotificationevent-userinfo",
      "url": "https://electronjs.org/docs/api/system-preferences#systempreferencespostlocalnotificationevent-userinfo",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:postLocalNotification",
        "api:systempreferencespostlocalnotificationevent-userinfo",
        "api:systemPreferences.postLocalNotification(event, userInfo)",
        "doc:postLocalNotification",
        "doc:systempreferencespostlocalnotificationevent-userinfo",
        "doc:systemPreferences.postLocalNotification(event, userInfo)"
      ]
    },
    {
      "objectID": "api-system-preferences#systempreferencespostworkspacenotificationevent-userinfo",
      "name": "postWorkspaceNotification",
      "signature": "(event, userInfo)",
      "description": "Posts `event` as native notifications of macOS. The `userInfo` is an Object that contains the user information dictionary sent along with the notification.",
      "parameters": [
        {
          "name": "event",
          "description": "",
          "required": true,
          "collection": false,
          "type": "String",
          "possibleValues": null
        },
        {
          "name": "userInfo",
          "description": "",
          "required": true,
          "collection": false,
          "type": "Record",
          "innerTypes": [
            {
              "collection": false,
              "type": "String",
              "possibleValues": null
            },
            {
              "collection": false,
              "type": "any"
            }
          ]
        }
      ],
      "returns": null,
      "additionalTags": [
        "os_macos"
      ],
      "apiType": "methods",
      "fullSignature": "systemPreferences.postWorkspaceNotification(event, userInfo)",
      "tldr": "Posts `event` as native notifications of macOS.",
      "slug": "systempreferencespostworkspacenotificationevent-userinfo",
      "url": "https://electronjs.org/docs/api/system-preferences#systempreferencespostworkspacenotificationevent-userinfo",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:postWorkspaceNotification",
        "api:systempreferencespostworkspacenotificationevent-userinfo",
        "api:systemPreferences.postWorkspaceNotification(event, userInfo)",
        "doc:postWorkspaceNotification",
        "doc:systempreferencespostworkspacenotificationevent-userinfo",
        "doc:systemPreferences.postWorkspaceNotification(event, userInfo)"
      ]
    },
    {
      "objectID": "api-system-preferences#systempreferencessubscribenotificationevent-callback",
      "name": "subscribeNotification",
      "signature": "(event, callback)",
      "description": "The ID of this subscription\n\nSubscribes to native notifications of macOS, `callback` will be called with `callback(event, userInfo)` when the corresponding `event` happens. The `userInfo` is an Object that contains the user information dictionary sent along with the notification. The `object` is the sender of the notification, and only supports `NSString` values for now.\n\nThe `id` of the subscriber is returned, which can be used to unsubscribe the `event`.\n\nUnder the hood this API subscribes to `NSDistributedNotificationCenter`, example values of `event` are:\n\n* `AppleInterfaceThemeChangedNotification`\n* `AppleAquaColorVariantChanged`\n* `AppleColorPreferencesChangedNotification`\n* `AppleShowScrollBarsSettingChanged`",
      "parameters": [
        {
          "name": "event",
          "description": "",
          "required": true,
          "collection": false,
          "type": "String",
          "possibleValues": null
        },
        {
          "name": "callback",
          "description": "",
          "required": true,
          "collection": false,
          "type": "Function",
          "parameters": [
            {
              "name": "event",
              "description": "",
              "required": true,
              "collection": false,
              "type": "String",
              "possibleValues": null
            },
            {
              "name": "userInfo",
              "description": "",
              "required": true,
              "collection": false,
              "type": "Record",
              "innerTypes": [
                {
                  "collection": false,
                  "type": "String",
                  "possibleValues": null
                },
                {
                  "collection": false,
                  "type": "unknown"
                }
              ]
            },
            {
              "name": "object",
              "description": "",
              "required": true,
              "collection": false,
              "type": "String",
              "possibleValues": null
            }
          ],
          "returns": null
        }
      ],
      "returns": {
        "collection": false,
        "type": "Number"
      },
      "additionalTags": [
        "os_macos"
      ],
      "apiType": "methods",
      "fullSignature": "systemPreferences.subscribeNotification(event, callback)",
      "tldr": "The ID of this subscription\n\nSubscribes to native notifications of macOS, `callback` will be called with `callback(event, userInfo)` when the corresponding `event` happens.",
      "slug": "systempreferencessubscribenotificationevent-callback",
      "url": "https://electronjs.org/docs/api/system-preferences#systempreferencessubscribenotificationevent-callback",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:subscribeNotification",
        "api:systempreferencessubscribenotificationevent-callback",
        "api:systemPreferences.subscribeNotification(event, callback)",
        "doc:subscribeNotification",
        "doc:systempreferencessubscribenotificationevent-callback",
        "doc:systemPreferences.subscribeNotification(event, callback)"
      ]
    },
    {
      "objectID": "api-system-preferences#systempreferencessubscribelocalnotificationevent-callback",
      "name": "subscribeLocalNotification",
      "signature": "(event, callback)",
      "description": "The ID of this subscription\n\nSame as `subscribeNotification`, but uses `NSNotificationCenter` for local defaults. This is necessary for events such as `NSUserDefaultsDidChangeNotification`.",
      "parameters": [
        {
          "name": "event",
          "description": "",
          "required": true,
          "collection": false,
          "type": "String",
          "possibleValues": null
        },
        {
          "name": "callback",
          "description": "",
          "required": true,
          "collection": false,
          "type": "Function",
          "parameters": [
            {
              "name": "event",
              "description": "",
              "required": true,
              "collection": false,
              "type": "String",
              "possibleValues": null
            },
            {
              "name": "userInfo",
              "description": "",
              "required": true,
              "collection": false,
              "type": "Record",
              "innerTypes": [
                {
                  "collection": false,
                  "type": "String",
                  "possibleValues": null
                },
                {
                  "collection": false,
                  "type": "unknown"
                }
              ]
            },
            {
              "name": "object",
              "description": "",
              "required": true,
              "collection": false,
              "type": "String",
              "possibleValues": null
            }
          ],
          "returns": null
        }
      ],
      "returns": {
        "collection": false,
        "type": "Number"
      },
      "additionalTags": [
        "os_macos"
      ],
      "apiType": "methods",
      "fullSignature": "systemPreferences.subscribeLocalNotification(event, callback)",
      "tldr": "The ID of this subscription\n\nSame as `subscribeNotification`, but uses `NSNotificationCenter` for local defaults.",
      "slug": "systempreferencessubscribelocalnotificationevent-callback",
      "url": "https://electronjs.org/docs/api/system-preferences#systempreferencessubscribelocalnotificationevent-callback",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:subscribeLocalNotification",
        "api:systempreferencessubscribelocalnotificationevent-callback",
        "api:systemPreferences.subscribeLocalNotification(event, callback)",
        "doc:subscribeLocalNotification",
        "doc:systempreferencessubscribelocalnotificationevent-callback",
        "doc:systemPreferences.subscribeLocalNotification(event, callback)"
      ]
    },
    {
      "objectID": "api-system-preferences#systempreferencessubscribeworkspacenotificationevent-callback",
      "name": "subscribeWorkspaceNotification",
      "signature": "(event, callback)",
      "description": "Same as `subscribeNotification`, but uses `NSWorkspace.sharedWorkspace.notificationCenter`. This is necessary for events such as `NSWorkspaceDidActivateApplicationNotification`.",
      "parameters": [
        {
          "name": "event",
          "description": "",
          "required": true,
          "collection": false,
          "type": "String",
          "possibleValues": null
        },
        {
          "name": "callback",
          "description": "",
          "required": true,
          "collection": false,
          "type": "Function",
          "parameters": [
            {
              "name": "event",
              "description": "",
              "required": true,
              "collection": false,
              "type": "String",
              "possibleValues": null
            },
            {
              "name": "userInfo",
              "description": "",
              "required": true,
              "collection": false,
              "type": "Record",
              "innerTypes": [
                {
                  "collection": false,
                  "type": "String",
                  "possibleValues": null
                },
                {
                  "collection": false,
                  "type": "unknown"
                }
              ]
            },
            {
              "name": "object",
              "description": "",
              "required": true,
              "collection": false,
              "type": "String",
              "possibleValues": null
            }
          ],
          "returns": null
        }
      ],
      "returns": null,
      "additionalTags": [
        "os_macos"
      ],
      "apiType": "methods",
      "fullSignature": "systemPreferences.subscribeWorkspaceNotification(event, callback)",
      "tldr": "Same as `subscribeNotification`, but uses `NSWorkspace.sharedWorkspace.notificationCenter`.",
      "slug": "systempreferencessubscribeworkspacenotificationevent-callback",
      "url": "https://electronjs.org/docs/api/system-preferences#systempreferencessubscribeworkspacenotificationevent-callback",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:subscribeWorkspaceNotification",
        "api:systempreferencessubscribeworkspacenotificationevent-callback",
        "api:systemPreferences.subscribeWorkspaceNotification(event, callback)",
        "doc:subscribeWorkspaceNotification",
        "doc:systempreferencessubscribeworkspacenotificationevent-callback",
        "doc:systemPreferences.subscribeWorkspaceNotification(event, callback)"
      ]
    },
    {
      "objectID": "api-system-preferences#systempreferencesunsubscribenotificationid",
      "name": "unsubscribeNotification",
      "signature": "(id)",
      "description": "Removes the subscriber with `id`.",
      "parameters": [
        {
          "name": "id",
          "description": "",
          "required": true,
          "collection": false,
          "type": "Integer"
        }
      ],
      "returns": null,
      "additionalTags": [
        "os_macos"
      ],
      "apiType": "methods",
      "fullSignature": "systemPreferences.unsubscribeNotification(id)",
      "tldr": "Removes the subscriber with `id`.",
      "slug": "systempreferencesunsubscribenotificationid",
      "url": "https://electronjs.org/docs/api/system-preferences#systempreferencesunsubscribenotificationid",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:unsubscribeNotification",
        "api:systempreferencesunsubscribenotificationid",
        "api:systemPreferences.unsubscribeNotification(id)",
        "doc:unsubscribeNotification",
        "doc:systempreferencesunsubscribenotificationid",
        "doc:systemPreferences.unsubscribeNotification(id)"
      ]
    },
    {
      "objectID": "api-system-preferences#systempreferencesunsubscribelocalnotificationid",
      "name": "unsubscribeLocalNotification",
      "signature": "(id)",
      "description": "Same as `unsubscribeNotification`, but removes the subscriber from `NSNotificationCenter`.",
      "parameters": [
        {
          "name": "id",
          "description": "",
          "required": true,
          "collection": false,
          "type": "Integer"
        }
      ],
      "returns": null,
      "additionalTags": [
        "os_macos"
      ],
      "apiType": "methods",
      "fullSignature": "systemPreferences.unsubscribeLocalNotification(id)",
      "tldr": "Same as `unsubscribeNotification`, but removes the subscriber from `NSNotificationCenter`.",
      "slug": "systempreferencesunsubscribelocalnotificationid",
      "url": "https://electronjs.org/docs/api/system-preferences#systempreferencesunsubscribelocalnotificationid",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:unsubscribeLocalNotification",
        "api:systempreferencesunsubscribelocalnotificationid",
        "api:systemPreferences.unsubscribeLocalNotification(id)",
        "doc:unsubscribeLocalNotification",
        "doc:systempreferencesunsubscribelocalnotificationid",
        "doc:systemPreferences.unsubscribeLocalNotification(id)"
      ]
    },
    {
      "objectID": "api-system-preferences#systempreferencesunsubscribeworkspacenotificationid",
      "name": "unsubscribeWorkspaceNotification",
      "signature": "(id)",
      "description": "Same as `unsubscribeNotification`, but removes the subscriber from `NSWorkspace.sharedWorkspace.notificationCenter`.",
      "parameters": [
        {
          "name": "id",
          "description": "",
          "required": true,
          "collection": false,
          "type": "Integer"
        }
      ],
      "returns": null,
      "additionalTags": [
        "os_macos"
      ],
      "apiType": "methods",
      "fullSignature": "systemPreferences.unsubscribeWorkspaceNotification(id)",
      "tldr": "Same as `unsubscribeNotification`, but removes the subscriber from `NSWorkspace.sharedWorkspace.notificationCenter`.",
      "slug": "systempreferencesunsubscribeworkspacenotificationid",
      "url": "https://electronjs.org/docs/api/system-preferences#systempreferencesunsubscribeworkspacenotificationid",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:unsubscribeWorkspaceNotification",
        "api:systempreferencesunsubscribeworkspacenotificationid",
        "api:systemPreferences.unsubscribeWorkspaceNotification(id)",
        "doc:unsubscribeWorkspaceNotification",
        "doc:systempreferencesunsubscribeworkspacenotificationid",
        "doc:systemPreferences.unsubscribeWorkspaceNotification(id)"
      ]
    },
    {
      "objectID": "api-system-preferences#systempreferencesregisterdefaultsdefaults",
      "name": "registerDefaults",
      "signature": "(defaults)",
      "description": "Add the specified defaults to your application's `NSUserDefaults`.",
      "parameters": [
        {
          "name": "defaults",
          "description": "a dictionary of (`key: value`) user defaults",
          "required": true,
          "collection": false,
          "type": "Record",
          "innerTypes": [
            {
              "collection": false,
              "type": "String",
              "possibleValues": null
            },
            {
              "collection": false,
              "type": [
                {
                  "collection": false,
                  "type": "String",
                  "possibleValues": null
                },
                {
                  "collection": false,
                  "type": "Boolean"
                },
                {
                  "collection": false,
                  "type": "Number"
                }
              ]
            }
          ]
        }
      ],
      "returns": null,
      "additionalTags": [
        "os_macos"
      ],
      "apiType": "methods",
      "fullSignature": "systemPreferences.registerDefaults(defaults)",
      "tldr": "Add the specified defaults to your application's `NSUserDefaults`.",
      "slug": "systempreferencesregisterdefaultsdefaults",
      "url": "https://electronjs.org/docs/api/system-preferences#systempreferencesregisterdefaultsdefaults",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:registerDefaults",
        "api:systempreferencesregisterdefaultsdefaults",
        "api:systemPreferences.registerDefaults(defaults)",
        "doc:registerDefaults",
        "doc:systempreferencesregisterdefaultsdefaults",
        "doc:systemPreferences.registerDefaults(defaults)"
      ]
    },
    {
      "objectID": "api-system-preferences#systempreferencesgetuserdefaultkey-type",
      "name": "getUserDefault",
      "signature": "(key, type)",
      "description": "The value of `key` in `NSUserDefaults`.\n\nSome popular `key` and `type`s are:\n\n* `AppleInterfaceStyle`: `string`\n* `AppleAquaColorVariant`: `integer`\n* `AppleHighlightColor`: `string`\n* `AppleShowScrollBars`: `string`\n* `NSNavRecentPlaces`: `array`\n* `NSPreferredWebServices`: `dictionary`\n* `NSUserDictionaryReplacementItems`: `array`",
      "parameters": [
        {
          "name": "key",
          "description": "",
          "required": true,
          "collection": false,
          "type": "String",
          "possibleValues": null
        },
        {
          "name": "type",
          "description": "Can be `string`, `boolean`, `integer`, `float`, `double`, `url`, `array` or `dictionary`.",
          "required": true,
          "collection": false,
          "type": "String",
          "possibleValues": [
            {
              "value": "string",
              "description": ""
            },
            {
              "value": "boolean",
              "description": ""
            },
            {
              "value": "integer",
              "description": ""
            },
            {
              "value": "float",
              "description": ""
            },
            {
              "value": "double",
              "description": ""
            },
            {
              "value": "url",
              "description": ""
            },
            {
              "value": "array",
              "description": ""
            },
            {
              "value": "dictionary",
              "description": ""
            }
          ]
        }
      ],
      "returns": {
        "collection": false,
        "type": "any"
      },
      "additionalTags": [
        "os_macos"
      ],
      "apiType": "methods",
      "fullSignature": "systemPreferences.getUserDefault(key, type)",
      "tldr": "The value of `key` in `NSUserDefaults`.\n\nSome popular `key` and `type`s are:\n\n* `AppleInterfaceStyle`: `string`\n* `AppleAquaColorVariant`: `integer`\n* `AppleHighlightColor`: `string`\n* `AppleShowScrollBars`: `string`\n* `NSNavRecentPlaces`: `array`\n* `NSPreferredWebServices`: `dictionary`\n* `NSUserDictionaryReplacementItems`: `array`.",
      "slug": "systempreferencesgetuserdefaultkey-type",
      "url": "https://electronjs.org/docs/api/system-preferences#systempreferencesgetuserdefaultkey-type",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:getUserDefault",
        "api:systempreferencesgetuserdefaultkey-type",
        "api:systemPreferences.getUserDefault(key, type)",
        "doc:getUserDefault",
        "doc:systempreferencesgetuserdefaultkey-type",
        "doc:systemPreferences.getUserDefault(key, type)"
      ]
    },
    {
      "objectID": "api-system-preferences#systempreferencessetuserdefaultkey-type-value",
      "name": "setUserDefault",
      "signature": "(key, type, value)",
      "description": "Set the value of `key` in `NSUserDefaults`.\n\nNote that `type` should match actual type of `value`. An exception is thrown if they don't.\n\nSome popular `key` and `type`s are:\n\n* `ApplePressAndHoldEnabled`: `boolean`",
      "parameters": [
        {
          "name": "key",
          "description": "",
          "required": true,
          "collection": false,
          "type": "String",
          "possibleValues": null
        },
        {
          "name": "type",
          "description": "See `getUserDefault`.",
          "required": true,
          "collection": false,
          "type": "String",
          "possibleValues": null
        },
        {
          "name": "value",
          "description": "",
          "required": true,
          "collection": false,
          "type": "String",
          "possibleValues": null
        }
      ],
      "returns": null,
      "additionalTags": [
        "os_macos"
      ],
      "apiType": "methods",
      "fullSignature": "systemPreferences.setUserDefault(key, type, value)",
      "tldr": "Set the value of `key` in `NSUserDefaults`.\n\nNote that `type` should match actual type of `value`.",
      "slug": "systempreferencessetuserdefaultkey-type-value",
      "url": "https://electronjs.org/docs/api/system-preferences#systempreferencessetuserdefaultkey-type-value",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:setUserDefault",
        "api:systempreferencessetuserdefaultkey-type-value",
        "api:systemPreferences.setUserDefault(key, type, value)",
        "doc:setUserDefault",
        "doc:systempreferencessetuserdefaultkey-type-value",
        "doc:systemPreferences.setUserDefault(key, type, value)"
      ]
    },
    {
      "objectID": "api-system-preferences#systempreferencesremoveuserdefaultkey",
      "name": "removeUserDefault",
      "signature": "(key)",
      "description": "Removes the `key` in `NSUserDefaults`. This can be used to restore the default or global value of a `key` previously set with `setUserDefault`.",
      "parameters": [
        {
          "name": "key",
          "description": "",
          "required": true,
          "collection": false,
          "type": "String",
          "possibleValues": null
        }
      ],
      "returns": null,
      "additionalTags": [
        "os_macos"
      ],
      "apiType": "methods",
      "fullSignature": "systemPreferences.removeUserDefault(key)",
      "tldr": "Removes the `key` in `NSUserDefaults`.",
      "slug": "systempreferencesremoveuserdefaultkey",
      "url": "https://electronjs.org/docs/api/system-preferences#systempreferencesremoveuserdefaultkey",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:removeUserDefault",
        "api:systempreferencesremoveuserdefaultkey",
        "api:systemPreferences.removeUserDefault(key)",
        "doc:removeUserDefault",
        "doc:systempreferencesremoveuserdefaultkey",
        "doc:systemPreferences.removeUserDefault(key)"
      ]
    },
    {
      "objectID": "api-system-preferences#systempreferencesisaeroglassenabled",
      "name": "isAeroGlassEnabled",
      "signature": "()",
      "description": "`true` if DWM composition (Aero Glass) is enabled, and `false` otherwise.\n\nAn example of using it to determine if you should create a transparent window or not (transparent windows won't work correctly when DWM composition is disabled):",
      "parameters": [],
      "returns": {
        "collection": false,
        "type": "Boolean"
      },
      "additionalTags": [
        "os_windows"
      ],
      "apiType": "methods",
      "fullSignature": "systemPreferences.isAeroGlassEnabled()",
      "tldr": "`true` if DWM composition (Aero Glass) is enabled, and `false` otherwise.\n\nAn example of using it to determine if you should create a transparent window or not (transparent windows won't work correctly when DWM composition is disabled):.",
      "slug": "systempreferencesisaeroglassenabled",
      "url": "https://electronjs.org/docs/api/system-preferences#systempreferencesisaeroglassenabled",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:isAeroGlassEnabled",
        "api:systempreferencesisaeroglassenabled",
        "api:systemPreferences.isAeroGlassEnabled()",
        "doc:isAeroGlassEnabled",
        "doc:systempreferencesisaeroglassenabled",
        "doc:systemPreferences.isAeroGlassEnabled()"
      ]
    },
    {
      "objectID": "api-system-preferences#systempreferencesgetaccentcolor",
      "name": "getAccentColor",
      "signature": "()",
      "description": "The users current system wide accent color preference in RGBA hexadecimal form.\n\nThis API is only available on macOS 10.14 Mojave or newer.",
      "parameters": [],
      "returns": {
        "collection": false,
        "type": "String",
        "possibleValues": null
      },
      "additionalTags": [
        "os_windows",
        "os_macos"
      ],
      "apiType": "methods",
      "fullSignature": "systemPreferences.getAccentColor()",
      "tldr": "The users current system wide accent color preference in RGBA hexadecimal form.\n\nThis API is only available on macOS 10.14 Mojave or newer.",
      "slug": "systempreferencesgetaccentcolor",
      "url": "https://electronjs.org/docs/api/system-preferences#systempreferencesgetaccentcolor",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:getAccentColor",
        "api:systempreferencesgetaccentcolor",
        "api:systemPreferences.getAccentColor()",
        "doc:getAccentColor",
        "doc:systempreferencesgetaccentcolor",
        "doc:systemPreferences.getAccentColor()"
      ]
    },
    {
      "objectID": "api-system-preferences#systempreferencesgetcolorcolor",
      "name": "getColor",
      "signature": "(color)",
      "description": "The system color setting in RGB hexadecimal form (`#ABCDEF`). See the Windows docs and the MacOS docs for more details.",
      "parameters": [
        {
          "name": "color",
          "description": "One of the following values:",
          "required": true,
          "collection": false,
          "type": "String",
          "possibleValues": [
            {
              "value": "3d-dark-shadow",
              "description": "Dark shadow for three-dimensional display elements."
            },
            {
              "value": "3d-face",
              "description": "Face color for three-dimensional display elements and for dialog box backgrounds."
            },
            {
              "value": "3d-highlight",
              "description": "Highlight color for three-dimensional display elements."
            },
            {
              "value": "3d-light",
              "description": "Light color for three-dimensional display elements."
            },
            {
              "value": "3d-shadow",
              "description": "Shadow color for three-dimensional display elements."
            },
            {
              "value": "active-border",
              "description": "Active window border."
            },
            {
              "value": "active-caption",
              "description": "Active window title bar. Specifies the left side color in the color gradient of an active window's title bar if the gradient effect is enabled."
            },
            {
              "value": "active-caption-gradient",
              "description": "Right side color in the color gradient of an active window's title bar."
            },
            {
              "value": "app-workspace",
              "description": "Background color of multiple document interface (MDI) applications."
            },
            {
              "value": "button-text",
              "description": "Text on push buttons."
            },
            {
              "value": "caption-text",
              "description": "Text in caption, size box, and scroll bar arrow box."
            },
            {
              "value": "desktop",
              "description": "Desktop background color."
            },
            {
              "value": "disabled-text",
              "description": "Grayed (disabled) text."
            },
            {
              "value": "highlight",
              "description": "Item(s) selected in a control."
            },
            {
              "value": "highlight-text",
              "description": "Text of item(s) selected in a control."
            },
            {
              "value": "hotlight",
              "description": "Color for a hyperlink or hot-tracked item."
            },
            {
              "value": "inactive-border",
              "description": "Inactive window border."
            },
            {
              "value": "inactive-caption",
              "description": "Inactive window caption. Specifies the left side color in the color gradient of an inactive window's title bar if the gradient effect is enabled."
            },
            {
              "value": "inactive-caption-gradient",
              "description": "Right side color in the color gradient of an inactive window's title bar."
            },
            {
              "value": "inactive-caption-text",
              "description": "Color of text in an inactive caption."
            },
            {
              "value": "info-background",
              "description": "Background color for tooltip controls."
            },
            {
              "value": "info-text",
              "description": "Text color for tooltip controls."
            },
            {
              "value": "menu",
              "description": "Menu background."
            },
            {
              "value": "menu-highlight",
              "description": "The color used to highlight menu items when the menu appears as a flat menu."
            },
            {
              "value": "menubar",
              "description": "The background color for the menu bar when menus appear as flat menus."
            },
            {
              "value": "menu-text",
              "description": "Text in menus."
            },
            {
              "value": "scrollbar",
              "description": "Scroll bar gray area."
            },
            {
              "value": "window",
              "description": "Window background."
            },
            {
              "value": "window-frame",
              "description": "Window frame."
            },
            {
              "value": "window-text",
              "description": "Text in windows."
            },
            {
              "value": "alternate-selected-control-text",
              "description": "The text on a selected surface in a list or table."
            },
            {
              "value": "control-background",
              "description": "The background of a large interface element, such as a browser or table."
            },
            {
              "value": "control",
              "description": "The surface of a control."
            },
            {
              "value": "control-text",
              "description": "The text of a control that isn’t disabled."
            },
            {
              "value": "disabled-control-text",
              "description": "The text of a control that’s disabled."
            },
            {
              "value": "find-highlight",
              "description": "The color of a find indicator."
            },
            {
              "value": "grid",
              "description": "The gridlines of an interface element such as a table."
            },
            {
              "value": "header-text",
              "description": "The text of a header cell in a table."
            },
            {
              "value": "highlight",
              "description": "The virtual light source onscreen."
            },
            {
              "value": "keyboard-focus-indicator",
              "description": "The ring that appears around the currently focused control when using the keyboard for interface navigation."
            },
            {
              "value": "label",
              "description": "The text of a label containing primary content."
            },
            {
              "value": "link",
              "description": "A link to other content."
            },
            {
              "value": "placeholder-text",
              "description": " A placeholder string in a control or text view."
            },
            {
              "value": "quaternary-label",
              "description": "The text of a label of lesser importance than a tertiary label such as watermark text."
            },
            {
              "value": "scrubber-textured-background",
              "description": "The background of a scrubber in the Touch Bar."
            },
            {
              "value": "secondary-label",
              "description": "The text of a label of lesser importance than a normal label such as a label used to represent a subheading or additional information."
            },
            {
              "value": "selected-content-background",
              "description": "The background for selected content in a key window or view."
            },
            {
              "value": "selected-control",
              "description": "The surface of a selected control."
            },
            {
              "value": "selected-control-text",
              "description": "The text of a selected control."
            },
            {
              "value": "selected-menu-item",
              "description": "The text of a selected menu."
            },
            {
              "value": "selected-text-background",
              "description": "The background of selected text."
            },
            {
              "value": "selected-text",
              "description": "Selected text."
            },
            {
              "value": "separator",
              "description": "A separator between different sections of content."
            },
            {
              "value": "shadow",
              "description": "The virtual shadow cast by a raised object onscreen."
            },
            {
              "value": "tertiary-label",
              "description": "The text of a label of lesser importance than a secondary label such as a label used to represent disabled text."
            },
            {
              "value": "text-background",
              "description": "Text background."
            },
            {
              "value": "text",
              "description": " The text in a document."
            },
            {
              "value": "under-page-background",
              "description": " The background behind a document's content."
            },
            {
              "value": "unemphasized-selected-content-background",
              "description": "The selected content in a non-key window or view."
            },
            {
              "value": "unemphasized-selected-text-background",
              "description": "A background for selected text in a non-key window or view."
            },
            {
              "value": "unemphasized-selected-text",
              "description": "Selected text in a non-key window or view."
            },
            {
              "value": "window-background",
              "description": "The background of a window."
            },
            {
              "value": "window-frame-text",
              "description": "The text in the window's titlebar area."
            }
          ]
        }
      ],
      "returns": {
        "collection": false,
        "type": "String",
        "possibleValues": null
      },
      "additionalTags": [
        "os_windows",
        "os_macos"
      ],
      "apiType": "methods",
      "fullSignature": "systemPreferences.getColor(color)",
      "tldr": "The system color setting in RGB hexadecimal form (`#ABCDEF`).",
      "slug": "systempreferencesgetcolorcolor",
      "url": "https://electronjs.org/docs/api/system-preferences#systempreferencesgetcolorcolor",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:getColor",
        "api:systempreferencesgetcolorcolor",
        "api:systemPreferences.getColor(color)",
        "doc:getColor",
        "doc:systempreferencesgetcolorcolor",
        "doc:systemPreferences.getColor(color)"
      ]
    },
    {
      "objectID": "api-system-preferences#systempreferencesgetsystemcolorcolor",
      "name": "getSystemColor",
      "signature": "(color)",
      "description": "The standard system color formatted as `#RRGGBBAA`.\n\nReturns one of several standard system colors that automatically adapt to vibrancy and changes in accessibility settings like 'Increase contrast' and 'Reduce transparency'. See Apple Documentation for  more details.",
      "parameters": [
        {
          "name": "color",
          "description": "One of the following values:",
          "required": true,
          "collection": false,
          "type": "String",
          "possibleValues": [
            {
              "value": "blue",
              "description": ""
            },
            {
              "value": "brown",
              "description": ""
            },
            {
              "value": "gray",
              "description": ""
            },
            {
              "value": "green",
              "description": ""
            },
            {
              "value": "orange",
              "description": ""
            },
            {
              "value": "pink",
              "description": ""
            },
            {
              "value": "purple",
              "description": ""
            },
            {
              "value": "red",
              "description": ""
            },
            {
              "value": "yellow",
              "description": ""
            }
          ]
        }
      ],
      "returns": {
        "collection": false,
        "type": "String",
        "possibleValues": null
      },
      "additionalTags": [
        "os_macos"
      ],
      "apiType": "methods",
      "fullSignature": "systemPreferences.getSystemColor(color)",
      "tldr": "The standard system color formatted as `#RRGGBBAA`.\n\nReturns one of several standard system colors that automatically adapt to vibrancy and changes in accessibility settings like 'Increase contrast' and 'Reduce transparency'.",
      "slug": "systempreferencesgetsystemcolorcolor",
      "url": "https://electronjs.org/docs/api/system-preferences#systempreferencesgetsystemcolorcolor",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:getSystemColor",
        "api:systempreferencesgetsystemcolorcolor",
        "api:systemPreferences.getSystemColor(color)",
        "doc:getSystemColor",
        "doc:systempreferencesgetsystemcolorcolor",
        "doc:systemPreferences.getSystemColor(color)"
      ]
    },
    {
      "objectID": "api-system-preferences#systempreferencesisinvertedcolorscheme",
      "name": "isInvertedColorScheme",
      "signature": "()",
      "description": "`true` if an inverted color scheme (a high contrast color scheme with light text and dark backgrounds) is active, `false` otherwise.\n\n**Deprecated:** Should use the new `nativeTheme.shouldUseInvertedColorScheme` API.",
      "parameters": [],
      "returns": {
        "collection": false,
        "type": "Boolean"
      },
      "additionalTags": [
        "os_windows",
        "stability_deprecated"
      ],
      "apiType": "methods",
      "fullSignature": "systemPreferences.isInvertedColorScheme()",
      "tldr": "`true` if an inverted color scheme (a high contrast color scheme with light text and dark backgrounds) is active, `false` otherwise.\n\n**Deprecated:** Should use the new `nativeTheme.shouldUseInvertedColorScheme` API.",
      "slug": "systempreferencesisinvertedcolorscheme",
      "url": "https://electronjs.org/docs/api/system-preferences#systempreferencesisinvertedcolorscheme",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:isInvertedColorScheme",
        "api:systempreferencesisinvertedcolorscheme",
        "api:systemPreferences.isInvertedColorScheme()",
        "doc:isInvertedColorScheme",
        "doc:systempreferencesisinvertedcolorscheme",
        "doc:systemPreferences.isInvertedColorScheme()"
      ]
    },
    {
      "objectID": "api-system-preferences#systempreferencesishighcontrastcolorscheme",
      "name": "isHighContrastColorScheme",
      "signature": "()",
      "description": "`true` if a high contrast theme is active, `false` otherwise.\n\n**Depreacted:** Should use the new `nativeTheme.shouldUseHighContrastColors` API.",
      "parameters": [],
      "returns": {
        "collection": false,
        "type": "Boolean"
      },
      "additionalTags": [
        "os_macos",
        "os_windows",
        "stability_deprecated"
      ],
      "apiType": "methods",
      "fullSignature": "systemPreferences.isHighContrastColorScheme()",
      "tldr": "`true` if a high contrast theme is active, `false` otherwise.\n\n**Depreacted:** Should use the new `nativeTheme.shouldUseHighContrastColors` API.",
      "slug": "systempreferencesishighcontrastcolorscheme",
      "url": "https://electronjs.org/docs/api/system-preferences#systempreferencesishighcontrastcolorscheme",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:isHighContrastColorScheme",
        "api:systempreferencesishighcontrastcolorscheme",
        "api:systemPreferences.isHighContrastColorScheme()",
        "doc:isHighContrastColorScheme",
        "doc:systempreferencesishighcontrastcolorscheme",
        "doc:systemPreferences.isHighContrastColorScheme()"
      ]
    },
    {
      "objectID": "api-system-preferences#systempreferencesgeteffectiveappearance",
      "name": "getEffectiveAppearance",
      "signature": "()",
      "description": "Can be `dark`, `light` or `unknown`.\n\nGets the macOS appearance setting that is currently applied to your application, maps to NSApplication.effectiveAppearance\n\nPlease note that until Electron is built targeting the 10.14 SDK, your application's `effectiveAppearance` will default to 'light' and won't inherit the OS preference. In the interim in order for your application to inherit the OS preference you must set the `NSRequiresAquaSystemAppearance` key in your apps `Info.plist` to `false`.  If you are using `electron-packager` or `electron-forge` just set the `enableDarwinDarkMode` packager option to `true`.  See the Electron Packager API for more details.\n\n**Deprecated**",
      "parameters": [],
      "returns": {
        "collection": false,
        "type": "String",
        "possibleValues": [
          {
            "value": "dark",
            "description": ""
          },
          {
            "value": "light",
            "description": ""
          },
          {
            "value": "unknown",
            "description": ""
          }
        ]
      },
      "additionalTags": [
        "os_macos"
      ],
      "apiType": "methods",
      "fullSignature": "systemPreferences.getEffectiveAppearance()",
      "tldr": "Can be `dark`, `light` or `unknown`.\n\nGets the macOS appearance setting that is currently applied to your application, maps to NSApplication.effectiveAppearance\n\nPlease note that until Electron is built targeting the 10.14 SDK, your application's `effectiveAppearance` will default to 'light' and won't inherit the OS preference.",
      "slug": "systempreferencesgeteffectiveappearance",
      "url": "https://electronjs.org/docs/api/system-preferences#systempreferencesgeteffectiveappearance",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:getEffectiveAppearance",
        "api:systempreferencesgeteffectiveappearance",
        "api:systemPreferences.getEffectiveAppearance()",
        "doc:getEffectiveAppearance",
        "doc:systempreferencesgeteffectiveappearance",
        "doc:systemPreferences.getEffectiveAppearance()"
      ]
    },
    {
      "objectID": "api-system-preferences#systempreferencesgetapplevelappearance",
      "name": "getAppLevelAppearance",
      "signature": "()",
      "description": "| `null` - Can be `dark`, `light` or `unknown`.\n\nGets the macOS appearance setting that you have declared you want for your application, maps to NSApplication.appearance. You can use the `setAppLevelAppearance` API to set this value.\n\n**Deprecated**",
      "parameters": [],
      "returns": {
        "collection": false,
        "type": "String",
        "possibleValues": [
          {
            "value": "dark",
            "description": ""
          },
          {
            "value": "light",
            "description": ""
          },
          {
            "value": "unknown",
            "description": ""
          }
        ]
      },
      "additionalTags": [
        "os_macos",
        "stability_deprecated"
      ],
      "apiType": "methods",
      "fullSignature": "systemPreferences.getAppLevelAppearance()",
      "tldr": "| `null` - Can be `dark`, `light` or `unknown`.\n\nGets the macOS appearance setting that you have declared you want for your application, maps to NSApplication.appearance.",
      "slug": "systempreferencesgetapplevelappearance",
      "url": "https://electronjs.org/docs/api/system-preferences#systempreferencesgetapplevelappearance",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:getAppLevelAppearance",
        "api:systempreferencesgetapplevelappearance",
        "api:systemPreferences.getAppLevelAppearance()",
        "doc:getAppLevelAppearance",
        "doc:systempreferencesgetapplevelappearance",
        "doc:systemPreferences.getAppLevelAppearance()"
      ]
    },
    {
      "objectID": "api-system-preferences#systempreferencessetapplevelappearanceappearance",
      "name": "setAppLevelAppearance",
      "signature": "(appearance)",
      "description": "Sets the appearance setting for your application, this should override the system default and override the value of `getEffectiveAppearance`.\n\n**Deprecated**",
      "parameters": [
        {
          "name": "appearance",
          "description": "Can be `dark` or `light`",
          "required": true,
          "collection": false,
          "type": [
            {
              "collection": false,
              "type": "String",
              "possibleValues": [
                {
                  "value": "dark",
                  "description": ""
                },
                {
                  "value": "light",
                  "description": ""
                }
              ]
            },
            {
              "type": "null",
              "collection": false
            }
          ]
        }
      ],
      "returns": null,
      "additionalTags": [
        "os_macos",
        "stability_deprecated"
      ],
      "apiType": "methods",
      "fullSignature": "systemPreferences.setAppLevelAppearance(appearance)",
      "tldr": "Sets the appearance setting for your application, this should override the system default and override the value of `getEffectiveAppearance`.\n\n**Deprecated**.",
      "slug": "systempreferencessetapplevelappearanceappearance",
      "url": "https://electronjs.org/docs/api/system-preferences#systempreferencessetapplevelappearanceappearance",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:setAppLevelAppearance",
        "api:systempreferencessetapplevelappearanceappearance",
        "api:systemPreferences.setAppLevelAppearance(appearance)",
        "doc:setAppLevelAppearance",
        "doc:systempreferencessetapplevelappearanceappearance",
        "doc:systemPreferences.setAppLevelAppearance(appearance)"
      ]
    },
    {
      "objectID": "api-system-preferences#systempreferencescanprompttouchid",
      "name": "canPromptTouchID",
      "signature": "()",
      "description": "whether or not this device has the ability to use Touch ID.\n\n**NOTE:** This API will return `false` on macOS systems older than Sierra 10.12.2.\n\n**Deprecated**",
      "parameters": [],
      "returns": {
        "collection": false,
        "type": "Boolean"
      },
      "additionalTags": [
        "os_macos"
      ],
      "apiType": "methods",
      "fullSignature": "systemPreferences.canPromptTouchID()",
      "tldr": "whether or not this device has the ability to use Touch ID.\n\n**NOTE:** This API will return `false` on macOS systems older than Sierra 10.12.2.\n\n**Deprecated**.",
      "slug": "systempreferencescanprompttouchid",
      "url": "https://electronjs.org/docs/api/system-preferences#systempreferencescanprompttouchid",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:canPromptTouchID",
        "api:systempreferencescanprompttouchid",
        "api:systemPreferences.canPromptTouchID()",
        "doc:canPromptTouchID",
        "doc:systempreferencescanprompttouchid",
        "doc:systemPreferences.canPromptTouchID()"
      ]
    },
    {
      "objectID": "api-system-preferences#systempreferencesprompttouchidreason",
      "name": "promptTouchID",
      "signature": "(reason)",
      "description": "resolves if the user has successfully authenticated with Touch ID.\n\nThis API itself will not protect your user data; rather, it is a mechanism to allow you to do so. Native apps will need to set Access Control Constants like `kSecAccessControlUserPresence` on the their keychain entry so that reading it would auto-prompt for Touch ID biometric consent. This could be done with `node-keytar`, such that one would store an encryption key with `node-keytar` and only fetch it if `promptTouchID()` resolves.\n\n**NOTE:** This API will return a rejected Promise on macOS systems older than Sierra 10.12.2.",
      "parameters": [
        {
          "name": "reason",
          "description": "The reason you are asking for Touch ID authentication",
          "required": true,
          "collection": false,
          "type": "String",
          "possibleValues": null
        }
      ],
      "returns": {
        "collection": false,
        "type": "Promise",
        "innerTypes": [
          {
            "collection": false,
            "type": "void"
          }
        ]
      },
      "additionalTags": [
        "os_macos"
      ],
      "apiType": "methods",
      "fullSignature": "systemPreferences.promptTouchID(reason)",
      "tldr": "resolves if the user has successfully authenticated with Touch ID.\n\nThis API itself will not protect your user data; rather, it is a mechanism to allow you to do so.",
      "slug": "systempreferencesprompttouchidreason",
      "url": "https://electronjs.org/docs/api/system-preferences#systempreferencesprompttouchidreason",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:promptTouchID",
        "api:systempreferencesprompttouchidreason",
        "api:systemPreferences.promptTouchID(reason)",
        "doc:promptTouchID",
        "doc:systempreferencesprompttouchidreason",
        "doc:systemPreferences.promptTouchID(reason)"
      ]
    },
    {
      "objectID": "api-system-preferences#systempreferencesistrustedaccessibilityclientprompt",
      "name": "isTrustedAccessibilityClient",
      "signature": "(prompt)",
      "description": "`true` if the current process is a trusted accessibility client and `false` if it is not.",
      "parameters": [
        {
          "name": "prompt",
          "description": "whether or not the user will be informed via prompt if the current process is untrusted.",
          "required": true,
          "collection": false,
          "type": "Boolean"
        }
      ],
      "returns": {
        "collection": false,
        "type": "Boolean"
      },
      "additionalTags": [
        "os_macos"
      ],
      "apiType": "methods",
      "fullSignature": "systemPreferences.isTrustedAccessibilityClient(prompt)",
      "tldr": "`true` if the current process is a trusted accessibility client and `false` if it is not.",
      "slug": "systempreferencesistrustedaccessibilityclientprompt",
      "url": "https://electronjs.org/docs/api/system-preferences#systempreferencesistrustedaccessibilityclientprompt",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:isTrustedAccessibilityClient",
        "api:systempreferencesistrustedaccessibilityclientprompt",
        "api:systemPreferences.isTrustedAccessibilityClient(prompt)",
        "doc:isTrustedAccessibilityClient",
        "doc:systempreferencesistrustedaccessibilityclientprompt",
        "doc:systemPreferences.isTrustedAccessibilityClient(prompt)"
      ]
    },
    {
      "objectID": "api-system-preferences#systempreferencesgetmediaaccessstatusmediatype",
      "name": "getMediaAccessStatus",
      "signature": "(mediaType)",
      "description": "Can be `not-determined`, `granted`, `denied`, `restricted` or `unknown`.\n\nThis user consent was not required until macOS 10.14 Mojave, so this method will always return `granted` if your system is running 10.13 High Sierra or lower.",
      "parameters": [
        {
          "name": "mediaType",
          "description": "`microphone` or `camera`.",
          "required": true,
          "collection": false,
          "type": "String",
          "possibleValues": null
        }
      ],
      "returns": {
        "collection": false,
        "type": "String",
        "possibleValues": [
          {
            "value": "not-determined",
            "description": ""
          },
          {
            "value": "granted",
            "description": ""
          },
          {
            "value": "denied",
            "description": ""
          },
          {
            "value": "restricted",
            "description": ""
          },
          {
            "value": "unknown",
            "description": ""
          }
        ]
      },
      "additionalTags": [
        "os_macos"
      ],
      "apiType": "methods",
      "fullSignature": "systemPreferences.getMediaAccessStatus(mediaType)",
      "tldr": "Can be `not-determined`, `granted`, `denied`, `restricted` or `unknown`.\n\nThis user consent was not required until macOS 10.14 Mojave, so this method will always return `granted` if your system is running 10.13 High Sierra or lower.",
      "slug": "systempreferencesgetmediaaccessstatusmediatype",
      "url": "https://electronjs.org/docs/api/system-preferences#systempreferencesgetmediaaccessstatusmediatype",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:getMediaAccessStatus",
        "api:systempreferencesgetmediaaccessstatusmediatype",
        "api:systemPreferences.getMediaAccessStatus(mediaType)",
        "doc:getMediaAccessStatus",
        "doc:systempreferencesgetmediaaccessstatusmediatype",
        "doc:systemPreferences.getMediaAccessStatus(mediaType)"
      ]
    },
    {
      "objectID": "api-system-preferences#systempreferencesaskformediaaccessmediatype",
      "name": "askForMediaAccess",
      "signature": "(mediaType)",
      "description": "A promise that resolves with `true` if consent was granted and `false` if it was denied. If an invalid `mediaType` is passed, the promise will be rejected. If an access request was denied and later is changed through the System Preferences pane, a restart of the app will be required for the new permissions to take effect. If access has already been requested and denied, it _must_ be changed through the preference pane; an alert will not pop up and the promise will resolve with the existing access status.\n\n**Important:** In order to properly leverage this API, you must set the `NSMicrophoneUsageDescription` and `NSCameraUsageDescription` strings in your app's `Info.plist` file. The values for these keys will be used to populate the permission dialogs so that the user will be properly informed as to the purpose of the permission request. See Electron Application Distribution for more information about how to set these in the context of Electron.\n\nThis user consent was not required until macOS 10.14 Mojave, so this method will always return `true` if your system is running 10.13 High Sierra or lower.",
      "parameters": [
        {
          "name": "mediaType",
          "description": "the type of media being requested; can be `microphone`, `camera`.",
          "required": true,
          "collection": false,
          "type": "String",
          "possibleValues": [
            {
              "value": "microphone",
              "description": ""
            },
            {
              "value": "camera",
              "description": ""
            }
          ]
        }
      ],
      "returns": {
        "collection": false,
        "type": "Promise",
        "innerTypes": [
          {
            "collection": false,
            "type": "Boolean"
          }
        ]
      },
      "additionalTags": [
        "os_macos"
      ],
      "apiType": "methods",
      "fullSignature": "systemPreferences.askForMediaAccess(mediaType)",
      "tldr": "A promise that resolves with `true` if consent was granted and `false` if it was denied.",
      "slug": "systempreferencesaskformediaaccessmediatype",
      "url": "https://electronjs.org/docs/api/system-preferences#systempreferencesaskformediaaccessmediatype",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:askForMediaAccess",
        "api:systempreferencesaskformediaaccessmediatype",
        "api:systemPreferences.askForMediaAccess(mediaType)",
        "doc:askForMediaAccess",
        "doc:systempreferencesaskformediaaccessmediatype",
        "doc:systemPreferences.askForMediaAccess(mediaType)"
      ]
    },
    {
      "objectID": "api-system-preferences#systempreferencesgetanimationsettings",
      "name": "getAnimationSettings",
      "signature": "()",
      "description": "* `shouldRenderRichAnimation` Boolean - Returns true if rich animations should be rendered. Looks at session type (e.g. remote desktop) and accessibility settings to give guidance for heavy animations.\n* `scrollAnimationsEnabledBySystem` Boolean - Determines on a per-platform basis whether scroll animations (e.g. produced by home/end key) should be enabled.\n* `prefersReducedMotion` Boolean - Determines whether the user desires reduced motion based on platform APIs.\n\nReturns an object with system animation settings.",
      "parameters": [],
      "returns": {
        "collection": false,
        "type": "Object",
        "properties": [
          {
            "name": "shouldRenderRichAnimation",
            "description": "Returns true if rich animations should be rendered. Looks at session type (e.g. remote desktop) and accessibility settings to give guidance for heavy animations.",
            "required": true,
            "additionalTags": [],
            "collection": false,
            "type": "Boolean"
          },
          {
            "name": "scrollAnimationsEnabledBySystem",
            "description": "Determines on a per-platform basis whether scroll animations (e.g. produced by home/end key) should be enabled.",
            "required": true,
            "additionalTags": [],
            "collection": false,
            "type": "Boolean"
          },
          {
            "name": "prefersReducedMotion",
            "description": "Determines whether the user desires reduced motion based on platform APIs.",
            "required": true,
            "additionalTags": [],
            "collection": false,
            "type": "Boolean"
          }
        ]
      },
      "additionalTags": [],
      "apiType": "methods",
      "fullSignature": "systemPreferences.getAnimationSettings()",
      "tldr": "* `shouldRenderRichAnimation` Boolean - Returns true if rich animations should be rendered.",
      "slug": "systempreferencesgetanimationsettings",
      "url": "https://electronjs.org/docs/api/system-preferences#systempreferencesgetanimationsettings",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:getAnimationSettings",
        "api:systempreferencesgetanimationsettings",
        "api:systemPreferences.getAnimationSettings()",
        "doc:getAnimationSettings",
        "doc:systempreferencesgetanimationsettings",
        "doc:systemPreferences.getAnimationSettings()"
      ]
    },
    {
      "objectID": "api-system-preferences#event-accent-color-changed",
      "name": "accent-color-changed",
      "description": "",
      "parameters": [
        {
          "name": "event",
          "description": "",
          "collection": false,
          "type": "Event",
          "required": true
        },
        {
          "name": "newColor",
          "description": "The new RGBA color the user assigned to be their system accent color.",
          "collection": false,
          "type": "String",
          "possibleValues": null,
          "required": true
        }
      ],
      "additionalTags": [
        "os_windows"
      ],
      "apiType": "event",
      "fullSignature": "systemPreferences.on('accent-color-changed')",
      "url": "https://electronjs.org/docs/api/system-preferences#event-accent-color-changed",
      "slug": "systempreferencesonaccent-color-changed",
      "tldr": null,
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:accent-color-changed",
        "api:systempreferencesonaccent-color-changed",
        "api:systemPreferences.on('accent-color-changed')",
        "doc:accent-color-changed",
        "doc:systempreferencesonaccent-color-changed",
        "doc:systemPreferences.on('accent-color-changed')"
      ]
    },
    {
      "objectID": "api-system-preferences#event-color-changed",
      "name": "color-changed",
      "description": "",
      "parameters": [
        {
          "name": "event",
          "description": "",
          "collection": false,
          "type": "Event",
          "required": true
        }
      ],
      "additionalTags": [
        "os_windows"
      ],
      "apiType": "event",
      "fullSignature": "systemPreferences.on('color-changed')",
      "url": "https://electronjs.org/docs/api/system-preferences#event-color-changed",
      "slug": "systempreferencesoncolor-changed",
      "tldr": null,
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:color-changed",
        "api:systempreferencesoncolor-changed",
        "api:systemPreferences.on('color-changed')",
        "doc:color-changed",
        "doc:systempreferencesoncolor-changed",
        "doc:systemPreferences.on('color-changed')"
      ]
    },
    {
      "objectID": "api-system-preferences#event-inverted-color-scheme-changed",
      "name": "inverted-color-scheme-changed",
      "description": "**Deprecated:** Should use the new `updated` event on the `nativeTheme` module.",
      "parameters": [
        {
          "name": "event",
          "description": "",
          "collection": false,
          "type": "Event",
          "required": true
        },
        {
          "name": "invertedColorScheme",
          "description": "`true` if an inverted color scheme (a high contrast color scheme with light text and dark backgrounds) is being used, `false` otherwise.",
          "collection": false,
          "type": "Boolean",
          "required": true
        }
      ],
      "additionalTags": [
        "os_windows",
        "stability_deprecated"
      ],
      "apiType": "event",
      "fullSignature": "systemPreferences.on('inverted-color-scheme-changed')",
      "url": "https://electronjs.org/docs/api/system-preferences#event-inverted-color-scheme-changed",
      "slug": "systempreferencesoninverted-color-scheme-changed",
      "tldr": "**Deprecated:** Should use the new `updated` event on the `nativeTheme` module.",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:inverted-color-scheme-changed",
        "api:systempreferencesoninverted-color-scheme-changed",
        "api:systemPreferences.on('inverted-color-scheme-changed')",
        "doc:inverted-color-scheme-changed",
        "doc:systempreferencesoninverted-color-scheme-changed",
        "doc:systemPreferences.on('inverted-color-scheme-changed')"
      ]
    },
    {
      "objectID": "api-system-preferences#event-high-contrast-color-scheme-changed",
      "name": "high-contrast-color-scheme-changed",
      "description": "**Deprecated:** Should use the new `updated` event on the `nativeTheme` module.",
      "parameters": [
        {
          "name": "event",
          "description": "",
          "collection": false,
          "type": "Event",
          "required": true
        },
        {
          "name": "highContrastColorScheme",
          "description": "`true` if a high contrast theme is being used, `false` otherwise.",
          "collection": false,
          "type": "Boolean",
          "required": true
        }
      ],
      "additionalTags": [
        "os_windows",
        "stability_deprecated"
      ],
      "apiType": "event",
      "fullSignature": "systemPreferences.on('high-contrast-color-scheme-changed')",
      "url": "https://electronjs.org/docs/api/system-preferences#event-high-contrast-color-scheme-changed",
      "slug": "systempreferencesonhigh-contrast-color-scheme-changed",
      "tldr": "**Deprecated:** Should use the new `updated` event on the `nativeTheme` module.",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:high-contrast-color-scheme-changed",
        "api:systempreferencesonhigh-contrast-color-scheme-changed",
        "api:systemPreferences.on('high-contrast-color-scheme-changed')",
        "doc:high-contrast-color-scheme-changed",
        "doc:systempreferencesonhigh-contrast-color-scheme-changed",
        "doc:systemPreferences.on('high-contrast-color-scheme-changed')"
      ]
    },
    {
      "objectID": "api-touch-bar-button#touchbarbuttonlabel",
      "name": "label",
      "description": "A `String` representing the button's current text. Changing this value immediately updates the button in the touch bar.",
      "required": true,
      "additionalTags": [],
      "collection": false,
      "type": "String",
      "possibleValues": null,
      "apiType": "instanceProperties",
      "fullSignature": "TouchBarButton.label",
      "tldr": "A `String` representing the button's current text.",
      "slug": "touchbarbuttonlabel",
      "url": "https://electronjs.org/docs/api/touch-bar-button#touchbarbuttonlabel",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:label",
        "api:touchbarbuttonlabel",
        "api:TouchBarButton.label",
        "doc:label",
        "doc:touchbarbuttonlabel",
        "doc:TouchBarButton.label"
      ]
    },
    {
      "objectID": "api-touch-bar-button#touchbarbuttonbackgroundcolor",
      "name": "backgroundColor",
      "description": "A `String` hex code representing the button's current background color. Changing this value immediately updates the button in the touch bar.",
      "required": true,
      "additionalTags": [],
      "collection": false,
      "type": "String",
      "possibleValues": null,
      "apiType": "instanceProperties",
      "fullSignature": "TouchBarButton.backgroundColor",
      "tldr": "A `String` hex code representing the button's current background color.",
      "slug": "touchbarbuttonbackgroundcolor",
      "url": "https://electronjs.org/docs/api/touch-bar-button#touchbarbuttonbackgroundcolor",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:backgroundColor",
        "api:touchbarbuttonbackgroundcolor",
        "api:TouchBarButton.backgroundColor",
        "doc:backgroundColor",
        "doc:touchbarbuttonbackgroundcolor",
        "doc:TouchBarButton.backgroundColor"
      ]
    },
    {
      "objectID": "api-touch-bar-button#touchbarbuttonicon",
      "name": "icon",
      "description": "A `NativeImage` representing the button's current icon. Changing this value immediately updates the button in the touch bar.",
      "required": true,
      "additionalTags": [],
      "collection": false,
      "type": "NativeImage",
      "apiType": "instanceProperties",
      "fullSignature": "TouchBarButton.icon",
      "tldr": "A `NativeImage` representing the button's current icon.",
      "slug": "touchbarbuttonicon",
      "url": "https://electronjs.org/docs/api/touch-bar-button#touchbarbuttonicon",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:icon",
        "api:touchbarbuttonicon",
        "api:TouchBarButton.icon",
        "doc:icon",
        "doc:touchbarbuttonicon",
        "doc:TouchBarButton.icon"
      ]
    },
    {
      "objectID": "api-touch-bar-color-picker#touchbarcolorpickeravailablecolors",
      "name": "availableColors",
      "description": "A `String[]` array representing the color picker's available colors to select. Changing this value immediately updates the color picker in the touch bar.",
      "required": true,
      "additionalTags": [],
      "collection": true,
      "type": "String",
      "possibleValues": null,
      "apiType": "instanceProperties",
      "fullSignature": "TouchBarColorPicker.availableColors",
      "tldr": "A `String[]` array representing the color picker's available colors to select.",
      "slug": "touchbarcolorpickeravailablecolors",
      "url": "https://electronjs.org/docs/api/touch-bar-color-picker#touchbarcolorpickeravailablecolors",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:availableColors",
        "api:touchbarcolorpickeravailablecolors",
        "api:TouchBarColorPicker.availableColors",
        "doc:availableColors",
        "doc:touchbarcolorpickeravailablecolors",
        "doc:TouchBarColorPicker.availableColors"
      ]
    },
    {
      "objectID": "api-touch-bar-color-picker#touchbarcolorpickerselectedcolor",
      "name": "selectedColor",
      "description": "A `String` hex code representing the color picker's currently selected color. Changing this value immediately updates the color picker in the touch bar.",
      "required": true,
      "additionalTags": [],
      "collection": false,
      "type": "String",
      "possibleValues": null,
      "apiType": "instanceProperties",
      "fullSignature": "TouchBarColorPicker.selectedColor",
      "tldr": "A `String` hex code representing the color picker's currently selected color.",
      "slug": "touchbarcolorpickerselectedcolor",
      "url": "https://electronjs.org/docs/api/touch-bar-color-picker#touchbarcolorpickerselectedcolor",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:selectedColor",
        "api:touchbarcolorpickerselectedcolor",
        "api:TouchBarColorPicker.selectedColor",
        "doc:selectedColor",
        "doc:touchbarcolorpickerselectedcolor",
        "doc:TouchBarColorPicker.selectedColor"
      ]
    },
    {
      "objectID": "api-touch-bar-label#touchbarlabellabel",
      "name": "label",
      "description": "A `String` representing the label's current text. Changing this value immediately updates the label in the touch bar.",
      "required": true,
      "additionalTags": [],
      "collection": false,
      "type": "String",
      "possibleValues": null,
      "apiType": "instanceProperties",
      "fullSignature": "TouchBarLabel.label",
      "tldr": "A `String` representing the label's current text.",
      "slug": "touchbarlabellabel",
      "url": "https://electronjs.org/docs/api/touch-bar-label#touchbarlabellabel",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:label",
        "api:touchbarlabellabel",
        "api:TouchBarLabel.label",
        "doc:label",
        "doc:touchbarlabellabel",
        "doc:TouchBarLabel.label"
      ]
    },
    {
      "objectID": "api-touch-bar-label#touchbarlabeltextcolor",
      "name": "textColor",
      "description": "A `String` hex code representing the label's current text color. Changing this value immediately updates the label in the touch bar.",
      "required": true,
      "additionalTags": [],
      "collection": false,
      "type": "String",
      "possibleValues": null,
      "apiType": "instanceProperties",
      "fullSignature": "TouchBarLabel.textColor",
      "tldr": "A `String` hex code representing the label's current text color.",
      "slug": "touchbarlabeltextcolor",
      "url": "https://electronjs.org/docs/api/touch-bar-label#touchbarlabeltextcolor",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:textColor",
        "api:touchbarlabeltextcolor",
        "api:TouchBarLabel.textColor",
        "doc:textColor",
        "doc:touchbarlabeltextcolor",
        "doc:TouchBarLabel.textColor"
      ]
    },
    {
      "objectID": "api-touch-bar-popover#touchbarpopoverlabel",
      "name": "label",
      "description": "A `String` representing the popover's current button text. Changing this value immediately updates the popover in the touch bar.",
      "required": true,
      "additionalTags": [],
      "collection": false,
      "type": "String",
      "possibleValues": null,
      "apiType": "instanceProperties",
      "fullSignature": "TouchBarPopover.label",
      "tldr": "A `String` representing the popover's current button text.",
      "slug": "touchbarpopoverlabel",
      "url": "https://electronjs.org/docs/api/touch-bar-popover#touchbarpopoverlabel",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:label",
        "api:touchbarpopoverlabel",
        "api:TouchBarPopover.label",
        "doc:label",
        "doc:touchbarpopoverlabel",
        "doc:TouchBarPopover.label"
      ]
    },
    {
      "objectID": "api-touch-bar-popover#touchbarpopovericon",
      "name": "icon",
      "description": "A `NativeImage` representing the popover's current button icon. Changing this value immediately updates the popover in the touch bar.",
      "required": true,
      "additionalTags": [],
      "collection": false,
      "type": "NativeImage",
      "apiType": "instanceProperties",
      "fullSignature": "TouchBarPopover.icon",
      "tldr": "A `NativeImage` representing the popover's current button icon.",
      "slug": "touchbarpopovericon",
      "url": "https://electronjs.org/docs/api/touch-bar-popover#touchbarpopovericon",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:icon",
        "api:touchbarpopovericon",
        "api:TouchBarPopover.icon",
        "doc:icon",
        "doc:touchbarpopovericon",
        "doc:TouchBarPopover.icon"
      ]
    },
    {
      "objectID": "api-touch-bar-scrubber#touchbarscrubberitems",
      "name": "items",
      "description": "A `ScrubberItem[]` array representing the items in this scrubber. Updating this value immediately updates the control in the touch bar. Updating deep properties inside this array **does not update the touch bar**.",
      "required": true,
      "additionalTags": [],
      "collection": true,
      "type": "ScrubberItem",
      "apiType": "instanceProperties",
      "fullSignature": "TouchBarScrubber.items",
      "tldr": "A `ScrubberItem[]` array representing the items in this scrubber.",
      "slug": "touchbarscrubberitems",
      "url": "https://electronjs.org/docs/api/touch-bar-scrubber#touchbarscrubberitems",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:items",
        "api:touchbarscrubberitems",
        "api:TouchBarScrubber.items",
        "doc:items",
        "doc:touchbarscrubberitems",
        "doc:TouchBarScrubber.items"
      ]
    },
    {
      "objectID": "api-touch-bar-scrubber#touchbarscrubberselectedstyle",
      "name": "selectedStyle",
      "description": "A `String` representing the style that selected items in the scrubber should have. Updating this value immediately updates the control in the touch bar. Possible values:\n\n* `background` - Maps to `[NSScrubberSelectionStyle roundedBackgroundStyle]`.\n* `outline` - Maps to `[NSScrubberSelectionStyle outlineOverlayStyle]`.\n* `null` - Actually null, not a string, removes all styles.",
      "required": true,
      "additionalTags": [],
      "collection": false,
      "type": "String",
      "possibleValues": [
        {
          "value": "background",
          "description": "Maps to `[NSScrubberSelectionStyle roundedBackgroundStyle]`."
        },
        {
          "value": "outline",
          "description": "Maps to `[NSScrubberSelectionStyle outlineOverlayStyle]`."
        },
        {
          "value": "null",
          "description": "Actually null, not a string, removes all styles."
        }
      ],
      "apiType": "instanceProperties",
      "fullSignature": "TouchBarScrubber.selectedStyle",
      "tldr": "A `String` representing the style that selected items in the scrubber should have.",
      "slug": "touchbarscrubberselectedstyle",
      "url": "https://electronjs.org/docs/api/touch-bar-scrubber#touchbarscrubberselectedstyle",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:selectedStyle",
        "api:touchbarscrubberselectedstyle",
        "api:TouchBarScrubber.selectedStyle",
        "doc:selectedStyle",
        "doc:touchbarscrubberselectedstyle",
        "doc:TouchBarScrubber.selectedStyle"
      ]
    },
    {
      "objectID": "api-touch-bar-scrubber#touchbarscrubberoverlaystyle",
      "name": "overlayStyle",
      "description": "A `String` representing the style that selected items in the scrubber should have. This style is overlayed on top of the scrubber item instead of being placed behind it. Updating this value immediately updates the control in the touch bar. Possible values:\n\n* `background` - Maps to `[NSScrubberSelectionStyle roundedBackgroundStyle]`.\n* `outline` - Maps to `[NSScrubberSelectionStyle outlineOverlayStyle]`.\n* `null` - Actually null, not a string, removes all styles.",
      "required": true,
      "additionalTags": [],
      "collection": false,
      "type": "String",
      "possibleValues": [
        {
          "value": "background",
          "description": "Maps to `[NSScrubberSelectionStyle roundedBackgroundStyle]`."
        },
        {
          "value": "outline",
          "description": "Maps to `[NSScrubberSelectionStyle outlineOverlayStyle]`."
        },
        {
          "value": "null",
          "description": "Actually null, not a string, removes all styles."
        }
      ],
      "apiType": "instanceProperties",
      "fullSignature": "TouchBarScrubber.overlayStyle",
      "tldr": "A `String` representing the style that selected items in the scrubber should have.",
      "slug": "touchbarscrubberoverlaystyle",
      "url": "https://electronjs.org/docs/api/touch-bar-scrubber#touchbarscrubberoverlaystyle",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:overlayStyle",
        "api:touchbarscrubberoverlaystyle",
        "api:TouchBarScrubber.overlayStyle",
        "doc:overlayStyle",
        "doc:touchbarscrubberoverlaystyle",
        "doc:TouchBarScrubber.overlayStyle"
      ]
    },
    {
      "objectID": "api-touch-bar-scrubber#touchbarscrubbershowarrowbuttons",
      "name": "showArrowButtons",
      "description": "A `Boolean` representing whether to show the left / right selection arrows in this scrubber. Updating this value immediately updates the control in the touch bar.",
      "required": true,
      "additionalTags": [],
      "collection": false,
      "type": "Boolean",
      "apiType": "instanceProperties",
      "fullSignature": "TouchBarScrubber.showArrowButtons",
      "tldr": "A `Boolean` representing whether to show the left / right selection arrows in this scrubber.",
      "slug": "touchbarscrubbershowarrowbuttons",
      "url": "https://electronjs.org/docs/api/touch-bar-scrubber#touchbarscrubbershowarrowbuttons",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:showArrowButtons",
        "api:touchbarscrubbershowarrowbuttons",
        "api:TouchBarScrubber.showArrowButtons",
        "doc:showArrowButtons",
        "doc:touchbarscrubbershowarrowbuttons",
        "doc:TouchBarScrubber.showArrowButtons"
      ]
    },
    {
      "objectID": "api-touch-bar-scrubber#touchbarscrubbermode",
      "name": "mode",
      "description": "A `String` representing the mode of this scrubber. Updating this value immediately updates the control in the touch bar. Possible values:\n\n* `fixed` - Maps to `NSScrubberModeFixed`.\n* `free` - Maps to `NSScrubberModeFree`.",
      "required": true,
      "additionalTags": [],
      "collection": false,
      "type": "String",
      "possibleValues": [
        {
          "value": "fixed",
          "description": "Maps to `NSScrubberModeFixed`."
        },
        {
          "value": "free",
          "description": "Maps to `NSScrubberModeFree`."
        }
      ],
      "apiType": "instanceProperties",
      "fullSignature": "TouchBarScrubber.mode",
      "tldr": "A `String` representing the mode of this scrubber.",
      "slug": "touchbarscrubbermode",
      "url": "https://electronjs.org/docs/api/touch-bar-scrubber#touchbarscrubbermode",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:mode",
        "api:touchbarscrubbermode",
        "api:TouchBarScrubber.mode",
        "doc:mode",
        "doc:touchbarscrubbermode",
        "doc:TouchBarScrubber.mode"
      ]
    },
    {
      "objectID": "api-touch-bar-scrubber#touchbarscrubbercontinuous",
      "name": "continuous",
      "description": "A `Boolean` representing whether this scrubber is continuous or not. Updating this value immediately updates the control in the touch bar.",
      "required": true,
      "additionalTags": [],
      "collection": false,
      "type": "Boolean",
      "apiType": "instanceProperties",
      "fullSignature": "TouchBarScrubber.continuous",
      "tldr": "A `Boolean` representing whether this scrubber is continuous or not.",
      "slug": "touchbarscrubbercontinuous",
      "url": "https://electronjs.org/docs/api/touch-bar-scrubber#touchbarscrubbercontinuous",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:continuous",
        "api:touchbarscrubbercontinuous",
        "api:TouchBarScrubber.continuous",
        "doc:continuous",
        "doc:touchbarscrubbercontinuous",
        "doc:TouchBarScrubber.continuous"
      ]
    },
    {
      "objectID": "api-touch-bar-segmented-control#touchbarsegmentedcontrolsegmentstyle",
      "name": "segmentStyle",
      "description": "A `String` representing the controls current segment style. Updating this value immediately updates the control in the touch bar.",
      "required": true,
      "additionalTags": [],
      "collection": false,
      "type": "String",
      "possibleValues": null,
      "apiType": "instanceProperties",
      "fullSignature": "TouchBarSegmentedControl.segmentStyle",
      "tldr": "A `String` representing the controls current segment style.",
      "slug": "touchbarsegmentedcontrolsegmentstyle",
      "url": "https://electronjs.org/docs/api/touch-bar-segmented-control#touchbarsegmentedcontrolsegmentstyle",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:segmentStyle",
        "api:touchbarsegmentedcontrolsegmentstyle",
        "api:TouchBarSegmentedControl.segmentStyle",
        "doc:segmentStyle",
        "doc:touchbarsegmentedcontrolsegmentstyle",
        "doc:TouchBarSegmentedControl.segmentStyle"
      ]
    },
    {
      "objectID": "api-touch-bar-segmented-control#touchbarsegmentedcontrolsegments",
      "name": "segments",
      "description": "A `SegmentedControlSegment[]` array representing the segments in this control. Updating this value immediately updates the control in the touch bar. Updating deep properties inside this array **does not update the touch bar**.",
      "required": true,
      "additionalTags": [],
      "collection": true,
      "type": "SegmentedControlSegment",
      "apiType": "instanceProperties",
      "fullSignature": "TouchBarSegmentedControl.segments",
      "tldr": "A `SegmentedControlSegment[]` array representing the segments in this control.",
      "slug": "touchbarsegmentedcontrolsegments",
      "url": "https://electronjs.org/docs/api/touch-bar-segmented-control#touchbarsegmentedcontrolsegments",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:segments",
        "api:touchbarsegmentedcontrolsegments",
        "api:TouchBarSegmentedControl.segments",
        "doc:segments",
        "doc:touchbarsegmentedcontrolsegments",
        "doc:TouchBarSegmentedControl.segments"
      ]
    },
    {
      "objectID": "api-touch-bar-segmented-control#touchbarsegmentedcontrolselectedindex",
      "name": "selectedIndex",
      "description": "An `Integer` representing the currently selected segment. Changing this value immediately updates the control in the touch bar. User interaction with the touch bar will update this value automatically.",
      "required": true,
      "additionalTags": [],
      "collection": false,
      "type": "Integer",
      "apiType": "instanceProperties",
      "fullSignature": "TouchBarSegmentedControl.selectedIndex",
      "tldr": "An `Integer` representing the currently selected segment.",
      "slug": "touchbarsegmentedcontrolselectedindex",
      "url": "https://electronjs.org/docs/api/touch-bar-segmented-control#touchbarsegmentedcontrolselectedindex",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:selectedIndex",
        "api:touchbarsegmentedcontrolselectedindex",
        "api:TouchBarSegmentedControl.selectedIndex",
        "doc:selectedIndex",
        "doc:touchbarsegmentedcontrolselectedindex",
        "doc:TouchBarSegmentedControl.selectedIndex"
      ]
    },
    {
      "objectID": "api-touch-bar-slider#touchbarsliderlabel",
      "name": "label",
      "description": "A `String` representing the slider's current text. Changing this value immediately updates the slider in the touch bar.",
      "required": true,
      "additionalTags": [],
      "collection": false,
      "type": "String",
      "possibleValues": null,
      "apiType": "instanceProperties",
      "fullSignature": "TouchBarSlider.label",
      "tldr": "A `String` representing the slider's current text.",
      "slug": "touchbarsliderlabel",
      "url": "https://electronjs.org/docs/api/touch-bar-slider#touchbarsliderlabel",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:label",
        "api:touchbarsliderlabel",
        "api:TouchBarSlider.label",
        "doc:label",
        "doc:touchbarsliderlabel",
        "doc:TouchBarSlider.label"
      ]
    },
    {
      "objectID": "api-touch-bar-slider#touchbarslidervalue",
      "name": "value",
      "description": "A `Number` representing the slider's current value. Changing this value immediately updates the slider in the touch bar.",
      "required": true,
      "additionalTags": [],
      "collection": false,
      "type": "Number",
      "apiType": "instanceProperties",
      "fullSignature": "TouchBarSlider.value",
      "tldr": "A `Number` representing the slider's current value.",
      "slug": "touchbarslidervalue",
      "url": "https://electronjs.org/docs/api/touch-bar-slider#touchbarslidervalue",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:value",
        "api:touchbarslidervalue",
        "api:TouchBarSlider.value",
        "doc:value",
        "doc:touchbarslidervalue",
        "doc:TouchBarSlider.value"
      ]
    },
    {
      "objectID": "api-touch-bar-slider#touchbarsliderminvalue",
      "name": "minValue",
      "description": "A `Number` representing the slider's current minimum value. Changing this value immediately updates the slider in the touch bar.",
      "required": true,
      "additionalTags": [],
      "collection": false,
      "type": "Number",
      "apiType": "instanceProperties",
      "fullSignature": "TouchBarSlider.minValue",
      "tldr": "A `Number` representing the slider's current minimum value.",
      "slug": "touchbarsliderminvalue",
      "url": "https://electronjs.org/docs/api/touch-bar-slider#touchbarsliderminvalue",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:minValue",
        "api:touchbarsliderminvalue",
        "api:TouchBarSlider.minValue",
        "doc:minValue",
        "doc:touchbarsliderminvalue",
        "doc:TouchBarSlider.minValue"
      ]
    },
    {
      "objectID": "api-touch-bar-slider#touchbarslidermaxvalue",
      "name": "maxValue",
      "description": "A `Number` representing the slider's current maximum value. Changing this value immediately updates the slider in the touch bar.",
      "required": true,
      "additionalTags": [],
      "collection": false,
      "type": "Number",
      "apiType": "instanceProperties",
      "fullSignature": "TouchBarSlider.maxValue",
      "tldr": "A `Number` representing the slider's current maximum value.",
      "slug": "touchbarslidermaxvalue",
      "url": "https://electronjs.org/docs/api/touch-bar-slider#touchbarslidermaxvalue",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:maxValue",
        "api:touchbarslidermaxvalue",
        "api:TouchBarSlider.maxValue",
        "doc:maxValue",
        "doc:touchbarslidermaxvalue",
        "doc:TouchBarSlider.maxValue"
      ]
    },
    {
      "objectID": "api-touch-bar#touchbarescapeitem",
      "name": "escapeItem",
      "description": "A `TouchBarItem` that will replace the \"esc\" button on the touch bar when set. Setting to `null` restores the default \"esc\" button. Changing this value immediately updates the escape item in the touch bar.",
      "required": true,
      "additionalTags": [],
      "collection": false,
      "type": "TouchBarItem",
      "apiType": "instanceProperties",
      "fullSignature": "TouchBar.escapeItem",
      "tldr": "A `TouchBarItem` that will replace the \"esc\" button on the touch bar when set.",
      "slug": "touchbarescapeitem",
      "url": "https://electronjs.org/docs/api/touch-bar#touchbarescapeitem",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:escapeItem",
        "api:touchbarescapeitem",
        "api:TouchBar.escapeItem",
        "doc:escapeItem",
        "doc:touchbarescapeitem",
        "doc:TouchBar.escapeItem"
      ]
    },
    {
      "objectID": "api-tray#traydestroy",
      "name": "destroy",
      "signature": "()",
      "description": "Destroys the tray icon immediately.",
      "parameters": [],
      "returns": null,
      "additionalTags": [],
      "apiType": "instanceMethod",
      "fullSignature": "tray.destroy()",
      "tldr": "Destroys the tray icon immediately.",
      "slug": "traydestroy",
      "url": "https://electronjs.org/docs/api/tray#traydestroy",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:destroy",
        "api:traydestroy",
        "api:tray.destroy()",
        "doc:destroy",
        "doc:traydestroy",
        "doc:tray.destroy()"
      ]
    },
    {
      "objectID": "api-tray#traysetimageimage",
      "name": "setImage",
      "signature": "(image)",
      "description": "Sets the `image` associated with this tray icon.",
      "parameters": [
        {
          "name": "image",
          "description": "",
          "required": true,
          "collection": false,
          "type": [
            {
              "collection": false,
              "type": "NativeImage"
            },
            {
              "collection": false,
              "type": "String",
              "possibleValues": null
            }
          ]
        }
      ],
      "returns": null,
      "additionalTags": [],
      "apiType": "instanceMethod",
      "fullSignature": "tray.setImage(image)",
      "tldr": "Sets the `image` associated with this tray icon.",
      "slug": "traysetimageimage",
      "url": "https://electronjs.org/docs/api/tray#traysetimageimage",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:setImage",
        "api:traysetimageimage",
        "api:tray.setImage(image)",
        "doc:setImage",
        "doc:traysetimageimage",
        "doc:tray.setImage(image)"
      ]
    },
    {
      "objectID": "api-tray#traysetpressedimageimage",
      "name": "setPressedImage",
      "signature": "(image)",
      "description": "Sets the `image` associated with this tray icon when pressed on macOS.",
      "parameters": [
        {
          "name": "image",
          "description": "",
          "required": true,
          "collection": false,
          "type": [
            {
              "collection": false,
              "type": "NativeImage"
            },
            {
              "collection": false,
              "type": "String",
              "possibleValues": null
            }
          ]
        }
      ],
      "returns": null,
      "additionalTags": [
        "os_macos"
      ],
      "apiType": "instanceMethod",
      "fullSignature": "tray.setPressedImage(image)",
      "tldr": "Sets the `image` associated with this tray icon when pressed on macOS.",
      "slug": "traysetpressedimageimage",
      "url": "https://electronjs.org/docs/api/tray#traysetpressedimageimage",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:setPressedImage",
        "api:traysetpressedimageimage",
        "api:tray.setPressedImage(image)",
        "doc:setPressedImage",
        "doc:traysetpressedimageimage",
        "doc:tray.setPressedImage(image)"
      ]
    },
    {
      "objectID": "api-tray#traysettooltiptooltip",
      "name": "setToolTip",
      "signature": "(toolTip)",
      "description": "Sets the hover text for this tray icon.",
      "parameters": [
        {
          "name": "toolTip",
          "description": "",
          "required": true,
          "collection": false,
          "type": "String",
          "possibleValues": null
        }
      ],
      "returns": null,
      "additionalTags": [],
      "apiType": "instanceMethod",
      "fullSignature": "tray.setToolTip(toolTip)",
      "tldr": "Sets the hover text for this tray icon.",
      "slug": "traysettooltiptooltip",
      "url": "https://electronjs.org/docs/api/tray#traysettooltiptooltip",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:setToolTip",
        "api:traysettooltiptooltip",
        "api:tray.setToolTip(toolTip)",
        "doc:setToolTip",
        "doc:traysettooltiptooltip",
        "doc:tray.setToolTip(toolTip)"
      ]
    },
    {
      "objectID": "api-tray#traysettitletitle",
      "name": "setTitle",
      "signature": "(title)",
      "description": "Sets the title displayed next to the tray icon in the status bar (Support ANSI colors).",
      "parameters": [
        {
          "name": "title",
          "description": "",
          "required": true,
          "collection": false,
          "type": "String",
          "possibleValues": null
        }
      ],
      "returns": null,
      "additionalTags": [
        "os_macos"
      ],
      "apiType": "instanceMethod",
      "fullSignature": "tray.setTitle(title)",
      "tldr": "Sets the title displayed next to the tray icon in the status bar (Support ANSI colors).",
      "slug": "traysettitletitle",
      "url": "https://electronjs.org/docs/api/tray#traysettitletitle",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:setTitle",
        "api:traysettitletitle",
        "api:tray.setTitle(title)",
        "doc:setTitle",
        "doc:traysettitletitle",
        "doc:tray.setTitle(title)"
      ]
    },
    {
      "objectID": "api-tray#traygettitle",
      "name": "getTitle",
      "signature": "()",
      "description": "the title displayed next to the tray icon in the status bar",
      "parameters": [],
      "returns": {
        "collection": false,
        "type": "String",
        "possibleValues": null
      },
      "additionalTags": [
        "os_macos"
      ],
      "apiType": "instanceMethod",
      "fullSignature": "tray.getTitle()",
      "tldr": "the title displayed next to the tray icon in the status bar.",
      "slug": "traygettitle",
      "url": "https://electronjs.org/docs/api/tray#traygettitle",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:getTitle",
        "api:traygettitle",
        "api:tray.getTitle()",
        "doc:getTitle",
        "doc:traygettitle",
        "doc:tray.getTitle()"
      ]
    },
    {
      "objectID": "api-tray#traysetignoredoubleclickeventsignore",
      "name": "setIgnoreDoubleClickEvents",
      "signature": "(ignore)",
      "description": "Sets the option to ignore double click events. Ignoring these events allows you to detect every individual click of the tray icon.\n\nThis value is set to false by default.",
      "parameters": [
        {
          "name": "ignore",
          "description": "",
          "required": true,
          "collection": false,
          "type": "Boolean"
        }
      ],
      "returns": null,
      "additionalTags": [
        "os_macos"
      ],
      "apiType": "instanceMethod",
      "fullSignature": "tray.setIgnoreDoubleClickEvents(ignore)",
      "tldr": "Sets the option to ignore double click events.",
      "slug": "traysetignoredoubleclickeventsignore",
      "url": "https://electronjs.org/docs/api/tray#traysetignoredoubleclickeventsignore",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:setIgnoreDoubleClickEvents",
        "api:traysetignoredoubleclickeventsignore",
        "api:tray.setIgnoreDoubleClickEvents(ignore)",
        "doc:setIgnoreDoubleClickEvents",
        "doc:traysetignoredoubleclickeventsignore",
        "doc:tray.setIgnoreDoubleClickEvents(ignore)"
      ]
    },
    {
      "objectID": "api-tray#traygetignoredoubleclickevents",
      "name": "getIgnoreDoubleClickEvents",
      "signature": "()",
      "description": "Whether double click events will be ignored.",
      "parameters": [],
      "returns": {
        "collection": false,
        "type": "Boolean"
      },
      "additionalTags": [
        "os_macos"
      ],
      "apiType": "instanceMethod",
      "fullSignature": "tray.getIgnoreDoubleClickEvents()",
      "tldr": "Whether double click events will be ignored.",
      "slug": "traygetignoredoubleclickevents",
      "url": "https://electronjs.org/docs/api/tray#traygetignoredoubleclickevents",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:getIgnoreDoubleClickEvents",
        "api:traygetignoredoubleclickevents",
        "api:tray.getIgnoreDoubleClickEvents()",
        "doc:getIgnoreDoubleClickEvents",
        "doc:traygetignoredoubleclickevents",
        "doc:tray.getIgnoreDoubleClickEvents()"
      ]
    },
    {
      "objectID": "api-tray#traydisplayballoonoptions",
      "name": "displayBalloon",
      "signature": "(options)",
      "description": "Displays a tray balloon.",
      "parameters": [
        {
          "name": "options",
          "description": "",
          "required": true,
          "collection": false,
          "type": "Object",
          "properties": [
            {
              "name": "icon",
              "description": "",
              "required": false,
              "additionalTags": [],
              "collection": false,
              "type": [
                {
                  "collection": false,
                  "type": "NativeImage"
                },
                {
                  "collection": false,
                  "type": "String",
                  "possibleValues": null
                }
              ]
            },
            {
              "name": "title",
              "description": "",
              "required": true,
              "additionalTags": [],
              "collection": false,
              "type": "String",
              "possibleValues": null
            },
            {
              "name": "content",
              "description": "",
              "required": true,
              "additionalTags": [],
              "collection": false,
              "type": "String",
              "possibleValues": null
            }
          ]
        }
      ],
      "returns": null,
      "additionalTags": [
        "os_windows"
      ],
      "apiType": "instanceMethod",
      "fullSignature": "tray.displayBalloon(options)",
      "tldr": "Displays a tray balloon.",
      "slug": "traydisplayballoonoptions",
      "url": "https://electronjs.org/docs/api/tray#traydisplayballoonoptions",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:displayBalloon",
        "api:traydisplayballoonoptions",
        "api:tray.displayBalloon(options)",
        "doc:displayBalloon",
        "doc:traydisplayballoonoptions",
        "doc:tray.displayBalloon(options)"
      ]
    },
    {
      "objectID": "api-tray#traypopupcontextmenumenu-position",
      "name": "popUpContextMenu",
      "signature": "([menu, position])",
      "description": "Pops up the context menu of the tray icon. When `menu` is passed, the `menu` will be shown instead of the tray icon's context menu.\n\nThe `position` is only available on Windows, and it is (0, 0) by default.",
      "parameters": [
        {
          "name": "menu",
          "description": "",
          "required": false,
          "collection": false,
          "type": "Menu"
        },
        {
          "name": "position",
          "description": "The pop up position.",
          "required": false,
          "collection": false,
          "type": "Point"
        }
      ],
      "returns": null,
      "additionalTags": [
        "os_macos",
        "os_windows"
      ],
      "apiType": "instanceMethod",
      "fullSignature": "tray.popUpContextMenu([menu, position])",
      "tldr": "Pops up the context menu of the tray icon.",
      "slug": "traypopupcontextmenumenu-position",
      "url": "https://electronjs.org/docs/api/tray#traypopupcontextmenumenu-position",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:popUpContextMenu",
        "api:traypopupcontextmenumenu-position",
        "api:tray.popUpContextMenu([menu, position])",
        "doc:popUpContextMenu",
        "doc:traypopupcontextmenumenu-position",
        "doc:tray.popUpContextMenu([menu, position])"
      ]
    },
    {
      "objectID": "api-tray#traysetcontextmenumenu",
      "name": "setContextMenu",
      "signature": "(menu)",
      "description": "Sets the context menu for this icon.",
      "parameters": [
        {
          "name": "menu",
          "description": "",
          "required": true,
          "collection": false,
          "type": [
            {
              "collection": false,
              "type": "Menu"
            },
            {
              "type": "null",
              "collection": false
            }
          ]
        }
      ],
      "returns": null,
      "additionalTags": [],
      "apiType": "instanceMethod",
      "fullSignature": "tray.setContextMenu(menu)",
      "tldr": "Sets the context menu for this icon.",
      "slug": "traysetcontextmenumenu",
      "url": "https://electronjs.org/docs/api/tray#traysetcontextmenumenu",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:setContextMenu",
        "api:traysetcontextmenumenu",
        "api:tray.setContextMenu(menu)",
        "doc:setContextMenu",
        "doc:traysetcontextmenumenu",
        "doc:tray.setContextMenu(menu)"
      ]
    },
    {
      "objectID": "api-tray#traygetbounds",
      "name": "getBounds",
      "signature": "()",
      "description": "The `bounds` of this tray icon as `Object`.",
      "parameters": [],
      "returns": {
        "collection": false,
        "type": "Rectangle"
      },
      "additionalTags": [
        "os_macos",
        "os_windows"
      ],
      "apiType": "instanceMethod",
      "fullSignature": "tray.getBounds()",
      "tldr": "The `bounds` of this tray icon as `Object`.",
      "slug": "traygetbounds",
      "url": "https://electronjs.org/docs/api/tray#traygetbounds",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:getBounds",
        "api:traygetbounds",
        "api:tray.getBounds()",
        "doc:getBounds",
        "doc:traygetbounds",
        "doc:tray.getBounds()"
      ]
    },
    {
      "objectID": "api-tray#trayisdestroyed",
      "name": "isDestroyed",
      "signature": "()",
      "description": "Whether the tray icon is destroyed.",
      "parameters": [],
      "returns": {
        "collection": false,
        "type": "Boolean"
      },
      "additionalTags": [],
      "apiType": "instanceMethod",
      "fullSignature": "tray.isDestroyed()",
      "tldr": "Whether the tray icon is destroyed.",
      "slug": "trayisdestroyed",
      "url": "https://electronjs.org/docs/api/tray#trayisdestroyed",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:isDestroyed",
        "api:trayisdestroyed",
        "api:tray.isDestroyed()",
        "doc:isDestroyed",
        "doc:trayisdestroyed",
        "doc:tray.isDestroyed()"
      ]
    },
    {
      "objectID": "api-tray#event-click",
      "name": "click",
      "description": "Emitted when the tray icon is clicked.",
      "parameters": [
        {
          "name": "event",
          "description": "",
          "collection": false,
          "type": "KeyboardEvent",
          "required": true
        },
        {
          "name": "bounds",
          "description": "The bounds of tray icon.",
          "collection": false,
          "type": "Rectangle",
          "required": true
        },
        {
          "name": "position",
          "description": "The position of the event.",
          "collection": false,
          "type": "Point",
          "required": true
        }
      ],
      "additionalTags": [],
      "apiType": "event",
      "fullSignature": "tray.on('click')",
      "url": "https://electronjs.org/docs/api/tray#event-click",
      "slug": "trayonclick",
      "tldr": "Emitted when the tray icon is clicked.",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:click",
        "api:trayonclick",
        "api:tray.on('click')",
        "doc:click",
        "doc:trayonclick",
        "doc:tray.on('click')"
      ]
    },
    {
      "objectID": "api-tray#event-right-click",
      "name": "right-click",
      "description": "Emitted when the tray icon is right clicked.",
      "parameters": [
        {
          "name": "event",
          "description": "",
          "collection": false,
          "type": "KeyboardEvent",
          "required": true
        },
        {
          "name": "bounds",
          "description": "The bounds of tray icon.",
          "collection": false,
          "type": "Rectangle",
          "required": true
        }
      ],
      "additionalTags": [
        "os_macos",
        "os_windows"
      ],
      "apiType": "event",
      "fullSignature": "tray.on('right-click')",
      "url": "https://electronjs.org/docs/api/tray#event-right-click",
      "slug": "trayonright-click",
      "tldr": "Emitted when the tray icon is right clicked.",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:right-click",
        "api:trayonright-click",
        "api:tray.on('right-click')",
        "doc:right-click",
        "doc:trayonright-click",
        "doc:tray.on('right-click')"
      ]
    },
    {
      "objectID": "api-tray#event-double-click",
      "name": "double-click",
      "description": "Emitted when the tray icon is double clicked.",
      "parameters": [
        {
          "name": "event",
          "description": "",
          "collection": false,
          "type": "KeyboardEvent",
          "required": true
        },
        {
          "name": "bounds",
          "description": "The bounds of tray icon.",
          "collection": false,
          "type": "Rectangle",
          "required": true
        }
      ],
      "additionalTags": [
        "os_macos",
        "os_windows"
      ],
      "apiType": "event",
      "fullSignature": "tray.on('double-click')",
      "url": "https://electronjs.org/docs/api/tray#event-double-click",
      "slug": "trayondouble-click",
      "tldr": "Emitted when the tray icon is double clicked.",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:double-click",
        "api:trayondouble-click",
        "api:tray.on('double-click')",
        "doc:double-click",
        "doc:trayondouble-click",
        "doc:tray.on('double-click')"
      ]
    },
    {
      "objectID": "api-tray#event-balloon-show",
      "name": "balloon-show",
      "description": "Emitted when the tray balloon shows.",
      "parameters": [],
      "additionalTags": [
        "os_windows"
      ],
      "apiType": "event",
      "fullSignature": "tray.on('balloon-show')",
      "url": "https://electronjs.org/docs/api/tray#event-balloon-show",
      "slug": "trayonballoon-show",
      "tldr": "Emitted when the tray balloon shows.",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:balloon-show",
        "api:trayonballoon-show",
        "api:tray.on('balloon-show')",
        "doc:balloon-show",
        "doc:trayonballoon-show",
        "doc:tray.on('balloon-show')"
      ]
    },
    {
      "objectID": "api-tray#event-balloon-click",
      "name": "balloon-click",
      "description": "Emitted when the tray balloon is clicked.",
      "parameters": [],
      "additionalTags": [
        "os_windows"
      ],
      "apiType": "event",
      "fullSignature": "tray.on('balloon-click')",
      "url": "https://electronjs.org/docs/api/tray#event-balloon-click",
      "slug": "trayonballoon-click",
      "tldr": "Emitted when the tray balloon is clicked.",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:balloon-click",
        "api:trayonballoon-click",
        "api:tray.on('balloon-click')",
        "doc:balloon-click",
        "doc:trayonballoon-click",
        "doc:tray.on('balloon-click')"
      ]
    },
    {
      "objectID": "api-tray#event-balloon-closed",
      "name": "balloon-closed",
      "description": "Emitted when the tray balloon is closed because of timeout or user manually closes it.",
      "parameters": [],
      "additionalTags": [
        "os_windows"
      ],
      "apiType": "event",
      "fullSignature": "tray.on('balloon-closed')",
      "url": "https://electronjs.org/docs/api/tray#event-balloon-closed",
      "slug": "trayonballoon-closed",
      "tldr": "Emitted when the tray balloon is closed because of timeout or user manually closes it.",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:balloon-closed",
        "api:trayonballoon-closed",
        "api:tray.on('balloon-closed')",
        "doc:balloon-closed",
        "doc:trayonballoon-closed",
        "doc:tray.on('balloon-closed')"
      ]
    },
    {
      "objectID": "api-tray#event-drop",
      "name": "drop",
      "description": "Emitted when any dragged items are dropped on the tray icon.",
      "parameters": [],
      "additionalTags": [
        "os_macos"
      ],
      "apiType": "event",
      "fullSignature": "tray.on('drop')",
      "url": "https://electronjs.org/docs/api/tray#event-drop",
      "slug": "trayondrop",
      "tldr": "Emitted when any dragged items are dropped on the tray icon.",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:drop",
        "api:trayondrop",
        "api:tray.on('drop')",
        "doc:drop",
        "doc:trayondrop",
        "doc:tray.on('drop')"
      ]
    },
    {
      "objectID": "api-tray#event-drop-files",
      "name": "drop-files",
      "description": "Emitted when dragged files are dropped in the tray icon.",
      "parameters": [
        {
          "name": "event",
          "description": "",
          "collection": false,
          "type": "Event",
          "required": true
        },
        {
          "name": "files",
          "description": "The paths of the dropped files.",
          "collection": true,
          "type": "String",
          "possibleValues": null,
          "required": true
        }
      ],
      "additionalTags": [
        "os_macos"
      ],
      "apiType": "event",
      "fullSignature": "tray.on('drop-files')",
      "url": "https://electronjs.org/docs/api/tray#event-drop-files",
      "slug": "trayondrop-files",
      "tldr": "Emitted when dragged files are dropped in the tray icon.",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:drop-files",
        "api:trayondrop-files",
        "api:tray.on('drop-files')",
        "doc:drop-files",
        "doc:trayondrop-files",
        "doc:tray.on('drop-files')"
      ]
    },
    {
      "objectID": "api-tray#event-drop-text",
      "name": "drop-text",
      "description": "Emitted when dragged text is dropped in the tray icon.",
      "parameters": [
        {
          "name": "event",
          "description": "",
          "collection": false,
          "type": "Event",
          "required": true
        },
        {
          "name": "text",
          "description": "the dropped text string.",
          "collection": false,
          "type": "String",
          "possibleValues": null,
          "required": true
        }
      ],
      "additionalTags": [
        "os_macos"
      ],
      "apiType": "event",
      "fullSignature": "tray.on('drop-text')",
      "url": "https://electronjs.org/docs/api/tray#event-drop-text",
      "slug": "trayondrop-text",
      "tldr": "Emitted when dragged text is dropped in the tray icon.",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:drop-text",
        "api:trayondrop-text",
        "api:tray.on('drop-text')",
        "doc:drop-text",
        "doc:trayondrop-text",
        "doc:tray.on('drop-text')"
      ]
    },
    {
      "objectID": "api-tray#event-drag-enter",
      "name": "drag-enter",
      "description": "Emitted when a drag operation enters the tray icon.",
      "parameters": [],
      "additionalTags": [
        "os_macos"
      ],
      "apiType": "event",
      "fullSignature": "tray.on('drag-enter')",
      "url": "https://electronjs.org/docs/api/tray#event-drag-enter",
      "slug": "trayondrag-enter",
      "tldr": "Emitted when a drag operation enters the tray icon.",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:drag-enter",
        "api:trayondrag-enter",
        "api:tray.on('drag-enter')",
        "doc:drag-enter",
        "doc:trayondrag-enter",
        "doc:tray.on('drag-enter')"
      ]
    },
    {
      "objectID": "api-tray#event-drag-leave",
      "name": "drag-leave",
      "description": "Emitted when a drag operation exits the tray icon.",
      "parameters": [],
      "additionalTags": [
        "os_macos"
      ],
      "apiType": "event",
      "fullSignature": "tray.on('drag-leave')",
      "url": "https://electronjs.org/docs/api/tray#event-drag-leave",
      "slug": "trayondrag-leave",
      "tldr": "Emitted when a drag operation exits the tray icon.",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:drag-leave",
        "api:trayondrag-leave",
        "api:tray.on('drag-leave')",
        "doc:drag-leave",
        "doc:trayondrag-leave",
        "doc:tray.on('drag-leave')"
      ]
    },
    {
      "objectID": "api-tray#event-drag-end",
      "name": "drag-end",
      "description": "Emitted when a drag operation ends on the tray or ends at another location.",
      "parameters": [],
      "additionalTags": [
        "os_macos"
      ],
      "apiType": "event",
      "fullSignature": "tray.on('drag-end')",
      "url": "https://electronjs.org/docs/api/tray#event-drag-end",
      "slug": "trayondrag-end",
      "tldr": "Emitted when a drag operation ends on the tray or ends at another location.",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:drag-end",
        "api:trayondrag-end",
        "api:tray.on('drag-end')",
        "doc:drag-end",
        "doc:trayondrag-end",
        "doc:tray.on('drag-end')"
      ]
    },
    {
      "objectID": "api-tray#event-mouse-enter",
      "name": "mouse-enter",
      "description": "Emitted when the mouse enters the tray icon.",
      "parameters": [
        {
          "name": "event",
          "description": "",
          "collection": false,
          "type": "KeyboardEvent",
          "required": true
        },
        {
          "name": "position",
          "description": "The position of the event.",
          "collection": false,
          "type": "Point",
          "required": true
        }
      ],
      "additionalTags": [
        "os_macos"
      ],
      "apiType": "event",
      "fullSignature": "tray.on('mouse-enter')",
      "url": "https://electronjs.org/docs/api/tray#event-mouse-enter",
      "slug": "trayonmouse-enter",
      "tldr": "Emitted when the mouse enters the tray icon.",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:mouse-enter",
        "api:trayonmouse-enter",
        "api:tray.on('mouse-enter')",
        "doc:mouse-enter",
        "doc:trayonmouse-enter",
        "doc:tray.on('mouse-enter')"
      ]
    },
    {
      "objectID": "api-tray#event-mouse-leave",
      "name": "mouse-leave",
      "description": "Emitted when the mouse exits the tray icon.",
      "parameters": [
        {
          "name": "event",
          "description": "",
          "collection": false,
          "type": "KeyboardEvent",
          "required": true
        },
        {
          "name": "position",
          "description": "The position of the event.",
          "collection": false,
          "type": "Point",
          "required": true
        }
      ],
      "additionalTags": [
        "os_macos"
      ],
      "apiType": "event",
      "fullSignature": "tray.on('mouse-leave')",
      "url": "https://electronjs.org/docs/api/tray#event-mouse-leave",
      "slug": "trayonmouse-leave",
      "tldr": "Emitted when the mouse exits the tray icon.",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:mouse-leave",
        "api:trayonmouse-leave",
        "api:tray.on('mouse-leave')",
        "doc:mouse-leave",
        "doc:trayonmouse-leave",
        "doc:tray.on('mouse-leave')"
      ]
    },
    {
      "objectID": "api-tray#event-mouse-move",
      "name": "mouse-move",
      "description": "Emitted when the mouse moves in the tray icon.",
      "parameters": [
        {
          "name": "event",
          "description": "",
          "collection": false,
          "type": "KeyboardEvent",
          "required": true
        },
        {
          "name": "position",
          "description": "The position of the event.",
          "collection": false,
          "type": "Point",
          "required": true
        }
      ],
      "additionalTags": [
        "os_macos",
        "os_windows"
      ],
      "apiType": "event",
      "fullSignature": "tray.on('mouse-move')",
      "url": "https://electronjs.org/docs/api/tray#event-mouse-move",
      "slug": "trayonmouse-move",
      "tldr": "Emitted when the mouse moves in the tray icon.",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:mouse-move",
        "api:trayonmouse-move",
        "api:tray.on('mouse-move')",
        "doc:mouse-move",
        "doc:trayonmouse-move",
        "doc:tray.on('mouse-move')"
      ]
    },
    {
      "objectID": "api-web-contents#webcontentsgetallwebcontents",
      "name": "getAllWebContents",
      "signature": "()",
      "description": "An array of all `WebContents` instances. This will contain web contents for all windows, webviews, opened devtools, and devtools extension background pages.",
      "parameters": [],
      "returns": {
        "collection": true,
        "type": "WebContents"
      },
      "additionalTags": [],
      "apiType": "methods",
      "fullSignature": "webContents.getAllWebContents()",
      "tldr": "An array of all `WebContents` instances.",
      "slug": "webcontentsgetallwebcontents",
      "url": "https://electronjs.org/docs/api/web-contents#webcontentsgetallwebcontents",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:getAllWebContents",
        "api:webcontentsgetallwebcontents",
        "api:webContents.getAllWebContents()",
        "doc:getAllWebContents",
        "doc:webcontentsgetallwebcontents",
        "doc:webContents.getAllWebContents()"
      ]
    },
    {
      "objectID": "api-web-contents#webcontentsgetfocusedwebcontents",
      "name": "getFocusedWebContents",
      "signature": "()",
      "description": "The web contents that is focused in this application, otherwise returns `null`.",
      "parameters": [],
      "returns": {
        "collection": false,
        "type": "WebContents"
      },
      "additionalTags": [],
      "apiType": "methods",
      "fullSignature": "webContents.getFocusedWebContents()",
      "tldr": "The web contents that is focused in this application, otherwise returns `null`.",
      "slug": "webcontentsgetfocusedwebcontents",
      "url": "https://electronjs.org/docs/api/web-contents#webcontentsgetfocusedwebcontents",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:getFocusedWebContents",
        "api:webcontentsgetfocusedwebcontents",
        "api:webContents.getFocusedWebContents()",
        "doc:getFocusedWebContents",
        "doc:webcontentsgetfocusedwebcontents",
        "doc:webContents.getFocusedWebContents()"
      ]
    },
    {
      "objectID": "api-web-contents#webcontentsfromidid",
      "name": "fromId",
      "signature": "(id)",
      "description": "A WebContents instance with the given ID.",
      "parameters": [
        {
          "name": "id",
          "description": "",
          "required": true,
          "collection": false,
          "type": "Integer"
        }
      ],
      "returns": {
        "collection": false,
        "type": "WebContents"
      },
      "additionalTags": [],
      "apiType": "methods",
      "fullSignature": "webContents.fromId(id)",
      "tldr": "A WebContents instance with the given ID.",
      "slug": "webcontentsfromidid",
      "url": "https://electronjs.org/docs/api/web-contents#webcontentsfromidid",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:fromId",
        "api:webcontentsfromidid",
        "api:webContents.fromId(id)",
        "doc:fromId",
        "doc:webcontentsfromidid",
        "doc:webContents.fromId(id)"
      ]
    },
    {
      "objectID": "api-web-contents#webcontentsaudiomuted",
      "name": "audioMuted",
      "description": "A `Boolean` property that determines whether this page is muted.",
      "required": true,
      "additionalTags": [],
      "collection": false,
      "type": "Boolean",
      "apiType": "instanceProperties",
      "fullSignature": "WebContents.audioMuted",
      "tldr": "A `Boolean` property that determines whether this page is muted.",
      "slug": "webcontentsaudiomuted",
      "url": "https://electronjs.org/docs/api/web-contents#webcontentsaudiomuted",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:audioMuted",
        "api:webcontentsaudiomuted",
        "api:WebContents.audioMuted",
        "doc:audioMuted",
        "doc:webcontentsaudiomuted",
        "doc:WebContents.audioMuted"
      ]
    },
    {
      "objectID": "api-web-contents#webcontentsuseragent",
      "name": "userAgent",
      "description": "A `String` property that determines the user agent for this web page.",
      "required": true,
      "additionalTags": [],
      "collection": false,
      "type": "String",
      "possibleValues": null,
      "apiType": "instanceProperties",
      "fullSignature": "WebContents.userAgent",
      "tldr": "A `String` property that determines the user agent for this web page.",
      "slug": "webcontentsuseragent",
      "url": "https://electronjs.org/docs/api/web-contents#webcontentsuseragent",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:userAgent",
        "api:webcontentsuseragent",
        "api:WebContents.userAgent",
        "doc:userAgent",
        "doc:webcontentsuseragent",
        "doc:WebContents.userAgent"
      ]
    },
    {
      "objectID": "api-web-contents#webcontentszoomlevel",
      "name": "zoomLevel",
      "description": "A `Number` property that determines the zoom level for this web contents.\n\nThe original size is 0 and each increment above or below represents zooming 20% larger or smaller to default limits of 300% and 50% of original size, respectively. The formula for this is `scale := 1.2 ^ level`.",
      "required": true,
      "additionalTags": [],
      "collection": false,
      "type": "Number",
      "apiType": "instanceProperties",
      "fullSignature": "WebContents.zoomLevel",
      "tldr": "A `Number` property that determines the zoom level for this web contents.\n\nThe original size is 0 and each increment above or below represents zooming 20% larger or smaller to default limits of 300% and 50% of original size, respectively.",
      "slug": "webcontentszoomlevel",
      "url": "https://electronjs.org/docs/api/web-contents#webcontentszoomlevel",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:zoomLevel",
        "api:webcontentszoomlevel",
        "api:WebContents.zoomLevel",
        "doc:zoomLevel",
        "doc:webcontentszoomlevel",
        "doc:WebContents.zoomLevel"
      ]
    },
    {
      "objectID": "api-web-contents#webcontentszoomfactor",
      "name": "zoomFactor",
      "description": "A `Number` property that determines the zoom factor for this web contents.\n\nThe zoom factor is the zoom percent divided by 100, so 300% = 3.0.",
      "required": true,
      "additionalTags": [],
      "collection": false,
      "type": "Number",
      "apiType": "instanceProperties",
      "fullSignature": "WebContents.zoomFactor",
      "tldr": "A `Number` property that determines the zoom factor for this web contents.\n\nThe zoom factor is the zoom percent divided by 100, so 300% = 3.0.",
      "slug": "webcontentszoomfactor",
      "url": "https://electronjs.org/docs/api/web-contents#webcontentszoomfactor",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:zoomFactor",
        "api:webcontentszoomfactor",
        "api:WebContents.zoomFactor",
        "doc:zoomFactor",
        "doc:webcontentszoomfactor",
        "doc:WebContents.zoomFactor"
      ]
    },
    {
      "objectID": "api-web-contents#webcontentsframerate",
      "name": "frameRate",
      "description": "An `Integer` property that sets the frame rate of the web contents to the specified number. Only values between 1 and 60 are accepted.\n\nOnly applicable if *offscreen rendering* is enabled.",
      "required": true,
      "additionalTags": [],
      "collection": false,
      "type": "Integer",
      "apiType": "instanceProperties",
      "fullSignature": "WebContents.frameRate",
      "tldr": "An `Integer` property that sets the frame rate of the web contents to the specified number.",
      "slug": "webcontentsframerate",
      "url": "https://electronjs.org/docs/api/web-contents#webcontentsframerate",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:frameRate",
        "api:webcontentsframerate",
        "api:WebContents.frameRate",
        "doc:frameRate",
        "doc:webcontentsframerate",
        "doc:WebContents.frameRate"
      ]
    },
    {
      "objectID": "api-web-contents#webcontentsid",
      "name": "id",
      "description": "A `Integer` representing the unique ID of this WebContents.",
      "required": true,
      "additionalTags": [
        "availability_readonly"
      ],
      "collection": false,
      "type": "Integer",
      "apiType": "instanceProperties",
      "fullSignature": "WebContents.id",
      "tldr": "A `Integer` representing the unique ID of this WebContents.",
      "slug": "webcontentsid",
      "url": "https://electronjs.org/docs/api/web-contents#webcontentsid",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:id",
        "api:webcontentsid",
        "api:WebContents.id",
        "doc:id",
        "doc:webcontentsid",
        "doc:WebContents.id"
      ]
    },
    {
      "objectID": "api-web-contents#webcontentssession",
      "name": "session",
      "description": "A `Session` used by this webContents.",
      "required": true,
      "additionalTags": [
        "availability_readonly"
      ],
      "collection": false,
      "type": "Session",
      "apiType": "instanceProperties",
      "fullSignature": "WebContents.session",
      "tldr": "A `Session` used by this webContents.",
      "slug": "webcontentssession",
      "url": "https://electronjs.org/docs/api/web-contents#webcontentssession",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:session",
        "api:webcontentssession",
        "api:WebContents.session",
        "doc:session",
        "doc:webcontentssession",
        "doc:WebContents.session"
      ]
    },
    {
      "objectID": "api-web-contents#webcontentshostwebcontents",
      "name": "hostWebContents",
      "description": "A `WebContents` instance that might own this `WebContents`.",
      "required": true,
      "additionalTags": [
        "availability_readonly"
      ],
      "collection": false,
      "type": "WebContents",
      "apiType": "instanceProperties",
      "fullSignature": "WebContents.hostWebContents",
      "tldr": "A `WebContents` instance that might own this `WebContents`.",
      "slug": "webcontentshostwebcontents",
      "url": "https://electronjs.org/docs/api/web-contents#webcontentshostwebcontents",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:hostWebContents",
        "api:webcontentshostwebcontents",
        "api:WebContents.hostWebContents",
        "doc:hostWebContents",
        "doc:webcontentshostwebcontents",
        "doc:WebContents.hostWebContents"
      ]
    },
    {
      "objectID": "api-web-contents#webcontentsdevtoolswebcontents",
      "name": "devToolsWebContents",
      "description": "A `WebContents` of DevTools for this `WebContents`.\n\n**Note:** Users should never store this object because it may become `null` when the DevTools has been closed.",
      "required": true,
      "additionalTags": [
        "availability_readonly"
      ],
      "collection": false,
      "type": "WebContents",
      "apiType": "instanceProperties",
      "fullSignature": "WebContents.devToolsWebContents",
      "tldr": "A `WebContents` of DevTools for this `WebContents`.\n\n**Note:** Users should never store this object because it may become `null` when the DevTools has been closed.",
      "slug": "webcontentsdevtoolswebcontents",
      "url": "https://electronjs.org/docs/api/web-contents#webcontentsdevtoolswebcontents",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:devToolsWebContents",
        "api:webcontentsdevtoolswebcontents",
        "api:WebContents.devToolsWebContents",
        "doc:devToolsWebContents",
        "doc:webcontentsdevtoolswebcontents",
        "doc:WebContents.devToolsWebContents"
      ]
    },
    {
      "objectID": "api-web-contents#webcontentsdebugger",
      "name": "debugger",
      "description": "A `Debugger` instance for this webContents.",
      "required": true,
      "additionalTags": [
        "availability_readonly"
      ],
      "collection": false,
      "type": "Debugger",
      "apiType": "instanceProperties",
      "fullSignature": "WebContents.debugger",
      "tldr": "A `Debugger` instance for this webContents.",
      "slug": "webcontentsdebugger",
      "url": "https://electronjs.org/docs/api/web-contents#webcontentsdebugger",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:debugger",
        "api:webcontentsdebugger",
        "api:WebContents.debugger",
        "doc:debugger",
        "doc:webcontentsdebugger",
        "doc:WebContents.debugger"
      ]
    },
    {
      "objectID": "api-web-contents#webcontentsloadurlurl-options",
      "name": "loadURL",
      "signature": "(url[, options])",
      "description": "the promise will resolve when the page has finished loading (see `did-finish-load`), and rejects if the page fails to load (see `did-fail-load`). A noop rejection handler is already attached, which avoids unhandled rejection errors.\n\nLoads the `url` in the window. The `url` must contain the protocol prefix, e.g. the `http://` or `file://`. If the load should bypass http cache then use the `pragma` header to achieve it.",
      "parameters": [
        {
          "name": "url",
          "description": "",
          "required": true,
          "collection": false,
          "type": "String",
          "possibleValues": null
        },
        {
          "name": "options",
          "description": "",
          "required": false,
          "collection": false,
          "type": "Object",
          "properties": [
            {
              "name": "httpReferrer",
              "description": "An HTTP Referrer url.",
              "required": false,
              "additionalTags": [],
              "collection": false,
              "type": [
                {
                  "collection": false,
                  "type": "String",
                  "possibleValues": null
                },
                {
                  "collection": false,
                  "type": "Referrer"
                }
              ]
            },
            {
              "name": "userAgent",
              "description": "A user agent originating the request.",
              "required": false,
              "additionalTags": [],
              "collection": false,
              "type": "String",
              "possibleValues": null
            },
            {
              "name": "extraHeaders",
              "description": "Extra headers separated by \"\\n\".",
              "required": false,
              "additionalTags": [],
              "collection": false,
              "type": "String",
              "possibleValues": null
            },
            {
              "name": "postData",
              "description": "",
              "required": false,
              "additionalTags": [],
              "collection": false,
              "type": [
                {
                  "collection": true,
                  "type": "UploadRawData"
                },
                {
                  "collection": true,
                  "type": "UploadFile"
                },
                {
                  "collection": true,
                  "type": "UploadBlob"
                }
              ]
            },
            {
              "name": "baseURLForDataURL",
              "description": "Base url (with trailing path separator) for files to be loaded by the data url. This is needed only if the specified `url` is a data url and needs to load other files.",
              "required": false,
              "additionalTags": [],
              "collection": false,
              "type": "String",
              "possibleValues": null
            }
          ]
        }
      ],
      "returns": {
        "collection": false,
        "type": "Promise",
        "innerTypes": [
          {
            "collection": false,
            "type": "void"
          }
        ]
      },
      "additionalTags": [],
      "apiType": "instanceMethod",
      "fullSignature": "webContents.loadURL(url[, options])",
      "tldr": "the promise will resolve when the page has finished loading (see `did-finish-load`), and rejects if the page fails to load (see `did-fail-load`).",
      "slug": "webcontentsloadurlurl-options",
      "url": "https://electronjs.org/docs/api/web-contents#webcontentsloadurlurl-options",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:loadURL",
        "api:webcontentsloadurlurl-options",
        "api:webContents.loadURL(url[, options])",
        "doc:loadURL",
        "doc:webcontentsloadurlurl-options",
        "doc:webContents.loadURL(url[, options])"
      ]
    },
    {
      "objectID": "api-web-contents#webcontentsloadfilefilepath-options",
      "name": "loadFile",
      "signature": "(filePath[, options])",
      "description": "the promise will resolve when the page has finished loading (see `did-finish-load`), and rejects if the page fails to load (see `did-fail-load`).\n\nLoads the given file in the window, `filePath` should be a path to an HTML file relative to the root of your application.  For instance an app structure like this:\n\nWould require code like this",
      "parameters": [
        {
          "name": "filePath",
          "description": "",
          "required": true,
          "collection": false,
          "type": "String",
          "possibleValues": null
        },
        {
          "name": "options",
          "description": "",
          "required": false,
          "collection": false,
          "type": "Object",
          "properties": [
            {
              "name": "query",
              "description": "Passed to `url.format()`.",
              "required": false,
              "additionalTags": [],
              "collection": false,
              "type": "Record",
              "innerTypes": [
                {
                  "collection": false,
                  "type": "String",
                  "possibleValues": null
                },
                {
                  "collection": false,
                  "type": "String",
                  "possibleValues": null
                }
              ]
            },
            {
              "name": "search",
              "description": "Passed to `url.format()`.",
              "required": false,
              "additionalTags": [],
              "collection": false,
              "type": "String",
              "possibleValues": null
            },
            {
              "name": "hash",
              "description": "Passed to `url.format()`.",
              "required": false,
              "additionalTags": [],
              "collection": false,
              "type": "String",
              "possibleValues": null
            }
          ]
        }
      ],
      "returns": {
        "collection": false,
        "type": "Promise",
        "innerTypes": [
          {
            "collection": false,
            "type": "void"
          }
        ]
      },
      "additionalTags": [],
      "apiType": "instanceMethod",
      "fullSignature": "webContents.loadFile(filePath[, options])",
      "tldr": "the promise will resolve when the page has finished loading (see `did-finish-load`), and rejects if the page fails to load (see `did-fail-load`).\n\nLoads the given file in the window, `filePath` should be a path to an HTML file relative to the root of your application.",
      "slug": "webcontentsloadfilefilepath-options",
      "url": "https://electronjs.org/docs/api/web-contents#webcontentsloadfilefilepath-options",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:loadFile",
        "api:webcontentsloadfilefilepath-options",
        "api:webContents.loadFile(filePath[, options])",
        "doc:loadFile",
        "doc:webcontentsloadfilefilepath-options",
        "doc:webContents.loadFile(filePath[, options])"
      ]
    },
    {
      "objectID": "api-web-contents#webcontentsdownloadurlurl",
      "name": "downloadURL",
      "signature": "(url)",
      "description": "Initiates a download of the resource at `url` without navigating. The `will-download` event of `session` will be triggered.",
      "parameters": [
        {
          "name": "url",
          "description": "",
          "required": true,
          "collection": false,
          "type": "String",
          "possibleValues": null
        }
      ],
      "returns": null,
      "additionalTags": [],
      "apiType": "instanceMethod",
      "fullSignature": "webContents.downloadURL(url)",
      "tldr": "Initiates a download of the resource at `url` without navigating.",
      "slug": "webcontentsdownloadurlurl",
      "url": "https://electronjs.org/docs/api/web-contents#webcontentsdownloadurlurl",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:downloadURL",
        "api:webcontentsdownloadurlurl",
        "api:webContents.downloadURL(url)",
        "doc:downloadURL",
        "doc:webcontentsdownloadurlurl",
        "doc:webContents.downloadURL(url)"
      ]
    },
    {
      "objectID": "api-web-contents#webcontentsgeturl",
      "name": "getURL",
      "signature": "()",
      "description": "The URL of the current web page.",
      "parameters": [],
      "returns": {
        "collection": false,
        "type": "String",
        "possibleValues": null
      },
      "additionalTags": [],
      "apiType": "instanceMethod",
      "fullSignature": "webContents.getURL()",
      "tldr": "The URL of the current web page.",
      "slug": "webcontentsgeturl",
      "url": "https://electronjs.org/docs/api/web-contents#webcontentsgeturl",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:getURL",
        "api:webcontentsgeturl",
        "api:webContents.getURL()",
        "doc:getURL",
        "doc:webcontentsgeturl",
        "doc:webContents.getURL()"
      ]
    },
    {
      "objectID": "api-web-contents#webcontentsgettitle",
      "name": "getTitle",
      "signature": "()",
      "description": "The title of the current web page.",
      "parameters": [],
      "returns": {
        "collection": false,
        "type": "String",
        "possibleValues": null
      },
      "additionalTags": [],
      "apiType": "instanceMethod",
      "fullSignature": "webContents.getTitle()",
      "tldr": "The title of the current web page.",
      "slug": "webcontentsgettitle",
      "url": "https://electronjs.org/docs/api/web-contents#webcontentsgettitle",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:getTitle",
        "api:webcontentsgettitle",
        "api:webContents.getTitle()",
        "doc:getTitle",
        "doc:webcontentsgettitle",
        "doc:webContents.getTitle()"
      ]
    },
    {
      "objectID": "api-web-contents#webcontentsisdestroyed",
      "name": "isDestroyed",
      "signature": "()",
      "description": "Whether the web page is destroyed.",
      "parameters": [],
      "returns": {
        "collection": false,
        "type": "Boolean"
      },
      "additionalTags": [],
      "apiType": "instanceMethod",
      "fullSignature": "webContents.isDestroyed()",
      "tldr": "Whether the web page is destroyed.",
      "slug": "webcontentsisdestroyed",
      "url": "https://electronjs.org/docs/api/web-contents#webcontentsisdestroyed",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:isDestroyed",
        "api:webcontentsisdestroyed",
        "api:webContents.isDestroyed()",
        "doc:isDestroyed",
        "doc:webcontentsisdestroyed",
        "doc:webContents.isDestroyed()"
      ]
    },
    {
      "objectID": "api-web-contents#webcontentsfocus",
      "name": "focus",
      "signature": "()",
      "description": "Focuses the web page.",
      "parameters": [],
      "returns": null,
      "additionalTags": [],
      "apiType": "instanceMethod",
      "fullSignature": "webContents.focus()",
      "tldr": "Focuses the web page.",
      "slug": "webcontentsfocus",
      "url": "https://electronjs.org/docs/api/web-contents#webcontentsfocus",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:focus",
        "api:webcontentsfocus",
        "api:webContents.focus()",
        "doc:focus",
        "doc:webcontentsfocus",
        "doc:webContents.focus()"
      ]
    },
    {
      "objectID": "api-web-contents#webcontentsisfocused",
      "name": "isFocused",
      "signature": "()",
      "description": "Whether the web page is focused.",
      "parameters": [],
      "returns": {
        "collection": false,
        "type": "Boolean"
      },
      "additionalTags": [],
      "apiType": "instanceMethod",
      "fullSignature": "webContents.isFocused()",
      "tldr": "Whether the web page is focused.",
      "slug": "webcontentsisfocused",
      "url": "https://electronjs.org/docs/api/web-contents#webcontentsisfocused",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:isFocused",
        "api:webcontentsisfocused",
        "api:webContents.isFocused()",
        "doc:isFocused",
        "doc:webcontentsisfocused",
        "doc:webContents.isFocused()"
      ]
    },
    {
      "objectID": "api-web-contents#webcontentsisloading",
      "name": "isLoading",
      "signature": "()",
      "description": "Whether web page is still loading resources.",
      "parameters": [],
      "returns": {
        "collection": false,
        "type": "Boolean"
      },
      "additionalTags": [],
      "apiType": "instanceMethod",
      "fullSignature": "webContents.isLoading()",
      "tldr": "Whether web page is still loading resources.",
      "slug": "webcontentsisloading",
      "url": "https://electronjs.org/docs/api/web-contents#webcontentsisloading",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:isLoading",
        "api:webcontentsisloading",
        "api:webContents.isLoading()",
        "doc:isLoading",
        "doc:webcontentsisloading",
        "doc:webContents.isLoading()"
      ]
    },
    {
      "objectID": "api-web-contents#webcontentsisloadingmainframe",
      "name": "isLoadingMainFrame",
      "signature": "()",
      "description": "Whether the main frame (and not just iframes or frames within it) is still loading.",
      "parameters": [],
      "returns": {
        "collection": false,
        "type": "Boolean"
      },
      "additionalTags": [],
      "apiType": "instanceMethod",
      "fullSignature": "webContents.isLoadingMainFrame()",
      "tldr": "Whether the main frame (and not just iframes or frames within it) is still loading.",
      "slug": "webcontentsisloadingmainframe",
      "url": "https://electronjs.org/docs/api/web-contents#webcontentsisloadingmainframe",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:isLoadingMainFrame",
        "api:webcontentsisloadingmainframe",
        "api:webContents.isLoadingMainFrame()",
        "doc:isLoadingMainFrame",
        "doc:webcontentsisloadingmainframe",
        "doc:webContents.isLoadingMainFrame()"
      ]
    },
    {
      "objectID": "api-web-contents#webcontentsiswaitingforresponse",
      "name": "isWaitingForResponse",
      "signature": "()",
      "description": "Whether the web page is waiting for a first-response from the main resource of the page.",
      "parameters": [],
      "returns": {
        "collection": false,
        "type": "Boolean"
      },
      "additionalTags": [],
      "apiType": "instanceMethod",
      "fullSignature": "webContents.isWaitingForResponse()",
      "tldr": "Whether the web page is waiting for a first-response from the main resource of the page.",
      "slug": "webcontentsiswaitingforresponse",
      "url": "https://electronjs.org/docs/api/web-contents#webcontentsiswaitingforresponse",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:isWaitingForResponse",
        "api:webcontentsiswaitingforresponse",
        "api:webContents.isWaitingForResponse()",
        "doc:isWaitingForResponse",
        "doc:webcontentsiswaitingforresponse",
        "doc:webContents.isWaitingForResponse()"
      ]
    },
    {
      "objectID": "api-web-contents#webcontentsstop",
      "name": "stop",
      "signature": "()",
      "description": "Stops any pending navigation.",
      "parameters": [],
      "returns": null,
      "additionalTags": [],
      "apiType": "instanceMethod",
      "fullSignature": "webContents.stop()",
      "tldr": "Stops any pending navigation.",
      "slug": "webcontentsstop",
      "url": "https://electronjs.org/docs/api/web-contents#webcontentsstop",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:stop",
        "api:webcontentsstop",
        "api:webContents.stop()",
        "doc:stop",
        "doc:webcontentsstop",
        "doc:webContents.stop()"
      ]
    },
    {
      "objectID": "api-web-contents#webcontentsreload",
      "name": "reload",
      "signature": "()",
      "description": "Reloads the current web page.",
      "parameters": [],
      "returns": null,
      "additionalTags": [],
      "apiType": "instanceMethod",
      "fullSignature": "webContents.reload()",
      "tldr": "Reloads the current web page.",
      "slug": "webcontentsreload",
      "url": "https://electronjs.org/docs/api/web-contents#webcontentsreload",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:reload",
        "api:webcontentsreload",
        "api:webContents.reload()",
        "doc:reload",
        "doc:webcontentsreload",
        "doc:webContents.reload()"
      ]
    },
    {
      "objectID": "api-web-contents#webcontentsreloadignoringcache",
      "name": "reloadIgnoringCache",
      "signature": "()",
      "description": "Reloads current page and ignores cache.",
      "parameters": [],
      "returns": null,
      "additionalTags": [],
      "apiType": "instanceMethod",
      "fullSignature": "webContents.reloadIgnoringCache()",
      "tldr": "Reloads current page and ignores cache.",
      "slug": "webcontentsreloadignoringcache",
      "url": "https://electronjs.org/docs/api/web-contents#webcontentsreloadignoringcache",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:reloadIgnoringCache",
        "api:webcontentsreloadignoringcache",
        "api:webContents.reloadIgnoringCache()",
        "doc:reloadIgnoringCache",
        "doc:webcontentsreloadignoringcache",
        "doc:webContents.reloadIgnoringCache()"
      ]
    },
    {
      "objectID": "api-web-contents#webcontentscangoback",
      "name": "canGoBack",
      "signature": "()",
      "description": "Whether the browser can go back to previous web page.",
      "parameters": [],
      "returns": {
        "collection": false,
        "type": "Boolean"
      },
      "additionalTags": [],
      "apiType": "instanceMethod",
      "fullSignature": "webContents.canGoBack()",
      "tldr": "Whether the browser can go back to previous web page.",
      "slug": "webcontentscangoback",
      "url": "https://electronjs.org/docs/api/web-contents#webcontentscangoback",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:canGoBack",
        "api:webcontentscangoback",
        "api:webContents.canGoBack()",
        "doc:canGoBack",
        "doc:webcontentscangoback",
        "doc:webContents.canGoBack()"
      ]
    },
    {
      "objectID": "api-web-contents#webcontentscangoforward",
      "name": "canGoForward",
      "signature": "()",
      "description": "Whether the browser can go forward to next web page.",
      "parameters": [],
      "returns": {
        "collection": false,
        "type": "Boolean"
      },
      "additionalTags": [],
      "apiType": "instanceMethod",
      "fullSignature": "webContents.canGoForward()",
      "tldr": "Whether the browser can go forward to next web page.",
      "slug": "webcontentscangoforward",
      "url": "https://electronjs.org/docs/api/web-contents#webcontentscangoforward",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:canGoForward",
        "api:webcontentscangoforward",
        "api:webContents.canGoForward()",
        "doc:canGoForward",
        "doc:webcontentscangoforward",
        "doc:webContents.canGoForward()"
      ]
    },
    {
      "objectID": "api-web-contents#webcontentscangotooffsetoffset",
      "name": "canGoToOffset",
      "signature": "(offset)",
      "description": "Whether the web page can go to `offset`.",
      "parameters": [
        {
          "name": "offset",
          "description": "",
          "required": true,
          "collection": false,
          "type": "Integer"
        }
      ],
      "returns": {
        "collection": false,
        "type": "Boolean"
      },
      "additionalTags": [],
      "apiType": "instanceMethod",
      "fullSignature": "webContents.canGoToOffset(offset)",
      "tldr": "Whether the web page can go to `offset`.",
      "slug": "webcontentscangotooffsetoffset",
      "url": "https://electronjs.org/docs/api/web-contents#webcontentscangotooffsetoffset",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:canGoToOffset",
        "api:webcontentscangotooffsetoffset",
        "api:webContents.canGoToOffset(offset)",
        "doc:canGoToOffset",
        "doc:webcontentscangotooffsetoffset",
        "doc:webContents.canGoToOffset(offset)"
      ]
    },
    {
      "objectID": "api-web-contents#webcontentsclearhistory",
      "name": "clearHistory",
      "signature": "()",
      "description": "Clears the navigation history.",
      "parameters": [],
      "returns": null,
      "additionalTags": [],
      "apiType": "instanceMethod",
      "fullSignature": "webContents.clearHistory()",
      "tldr": "Clears the navigation history.",
      "slug": "webcontentsclearhistory",
      "url": "https://electronjs.org/docs/api/web-contents#webcontentsclearhistory",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:clearHistory",
        "api:webcontentsclearhistory",
        "api:webContents.clearHistory()",
        "doc:clearHistory",
        "doc:webcontentsclearhistory",
        "doc:webContents.clearHistory()"
      ]
    },
    {
      "objectID": "api-web-contents#webcontentsgoback",
      "name": "goBack",
      "signature": "()",
      "description": "Makes the browser go back a web page.",
      "parameters": [],
      "returns": null,
      "additionalTags": [],
      "apiType": "instanceMethod",
      "fullSignature": "webContents.goBack()",
      "tldr": "Makes the browser go back a web page.",
      "slug": "webcontentsgoback",
      "url": "https://electronjs.org/docs/api/web-contents#webcontentsgoback",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:goBack",
        "api:webcontentsgoback",
        "api:webContents.goBack()",
        "doc:goBack",
        "doc:webcontentsgoback",
        "doc:webContents.goBack()"
      ]
    },
    {
      "objectID": "api-web-contents#webcontentsgoforward",
      "name": "goForward",
      "signature": "()",
      "description": "Makes the browser go forward a web page.",
      "parameters": [],
      "returns": null,
      "additionalTags": [],
      "apiType": "instanceMethod",
      "fullSignature": "webContents.goForward()",
      "tldr": "Makes the browser go forward a web page.",
      "slug": "webcontentsgoforward",
      "url": "https://electronjs.org/docs/api/web-contents#webcontentsgoforward",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:goForward",
        "api:webcontentsgoforward",
        "api:webContents.goForward()",
        "doc:goForward",
        "doc:webcontentsgoforward",
        "doc:webContents.goForward()"
      ]
    },
    {
      "objectID": "api-web-contents#webcontentsgotoindexindex",
      "name": "goToIndex",
      "signature": "(index)",
      "description": "Navigates browser to the specified absolute web page index.",
      "parameters": [
        {
          "name": "index",
          "description": "",
          "required": true,
          "collection": false,
          "type": "Integer"
        }
      ],
      "returns": null,
      "additionalTags": [],
      "apiType": "instanceMethod",
      "fullSignature": "webContents.goToIndex(index)",
      "tldr": "Navigates browser to the specified absolute web page index.",
      "slug": "webcontentsgotoindexindex",
      "url": "https://electronjs.org/docs/api/web-contents#webcontentsgotoindexindex",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:goToIndex",
        "api:webcontentsgotoindexindex",
        "api:webContents.goToIndex(index)",
        "doc:goToIndex",
        "doc:webcontentsgotoindexindex",
        "doc:webContents.goToIndex(index)"
      ]
    },
    {
      "objectID": "api-web-contents#webcontentsgotooffsetoffset",
      "name": "goToOffset",
      "signature": "(offset)",
      "description": "Navigates to the specified offset from the \"current entry\".",
      "parameters": [
        {
          "name": "offset",
          "description": "",
          "required": true,
          "collection": false,
          "type": "Integer"
        }
      ],
      "returns": null,
      "additionalTags": [],
      "apiType": "instanceMethod",
      "fullSignature": "webContents.goToOffset(offset)",
      "tldr": "Navigates to the specified offset from the \"current entry\".",
      "slug": "webcontentsgotooffsetoffset",
      "url": "https://electronjs.org/docs/api/web-contents#webcontentsgotooffsetoffset",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:goToOffset",
        "api:webcontentsgotooffsetoffset",
        "api:webContents.goToOffset(offset)",
        "doc:goToOffset",
        "doc:webcontentsgotooffsetoffset",
        "doc:webContents.goToOffset(offset)"
      ]
    },
    {
      "objectID": "api-web-contents#webcontentsiscrashed",
      "name": "isCrashed",
      "signature": "()",
      "description": "Whether the renderer process has crashed.",
      "parameters": [],
      "returns": {
        "collection": false,
        "type": "Boolean"
      },
      "additionalTags": [],
      "apiType": "instanceMethod",
      "fullSignature": "webContents.isCrashed()",
      "tldr": "Whether the renderer process has crashed.",
      "slug": "webcontentsiscrashed",
      "url": "https://electronjs.org/docs/api/web-contents#webcontentsiscrashed",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:isCrashed",
        "api:webcontentsiscrashed",
        "api:webContents.isCrashed()",
        "doc:isCrashed",
        "doc:webcontentsiscrashed",
        "doc:webContents.isCrashed()"
      ]
    },
    {
      "objectID": "api-web-contents#webcontentssetuseragentuseragent",
      "name": "setUserAgent",
      "signature": "(userAgent)",
      "description": "Overrides the user agent for this web page.\n\n**Deprecated**",
      "parameters": [
        {
          "name": "userAgent",
          "description": "",
          "required": true,
          "collection": false,
          "type": "String",
          "possibleValues": null
        }
      ],
      "returns": null,
      "additionalTags": [],
      "apiType": "instanceMethod",
      "fullSignature": "webContents.setUserAgent(userAgent)",
      "tldr": "Overrides the user agent for this web page.\n\n**Deprecated**.",
      "slug": "webcontentssetuseragentuseragent",
      "url": "https://electronjs.org/docs/api/web-contents#webcontentssetuseragentuseragent",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:setUserAgent",
        "api:webcontentssetuseragentuseragent",
        "api:webContents.setUserAgent(userAgent)",
        "doc:setUserAgent",
        "doc:webcontentssetuseragentuseragent",
        "doc:webContents.setUserAgent(userAgent)"
      ]
    },
    {
      "objectID": "api-web-contents#webcontentsgetuseragent",
      "name": "getUserAgent",
      "signature": "()",
      "description": "The user agent for this web page.\n\n**Deprecated**",
      "parameters": [],
      "returns": {
        "collection": false,
        "type": "String",
        "possibleValues": null
      },
      "additionalTags": [],
      "apiType": "instanceMethod",
      "fullSignature": "webContents.getUserAgent()",
      "tldr": "The user agent for this web page.\n\n**Deprecated**.",
      "slug": "webcontentsgetuseragent",
      "url": "https://electronjs.org/docs/api/web-contents#webcontentsgetuseragent",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:getUserAgent",
        "api:webcontentsgetuseragent",
        "api:webContents.getUserAgent()",
        "doc:getUserAgent",
        "doc:webcontentsgetuseragent",
        "doc:webContents.getUserAgent()"
      ]
    },
    {
      "objectID": "api-web-contents#webcontentsinsertcsscss-options",
      "name": "insertCSS",
      "signature": "(css[, options])",
      "description": "A promise that resolves with a key for the inserted CSS that can later be used to remove the CSS via `contents.removeInsertedCSS(key)`.\n\nInjects CSS into the current web page and returns a unique key for the inserted stylesheet.",
      "parameters": [
        {
          "name": "css",
          "description": "",
          "required": true,
          "collection": false,
          "type": "String",
          "possibleValues": null
        },
        {
          "name": "options",
          "description": "",
          "required": false,
          "collection": false,
          "type": "Object",
          "properties": [
            {
              "name": "cssOrigin",
              "description": "Can be either 'user' or 'author'; Specifying 'user' enables you to prevent websites from overriding the CSS you insert. Default is 'author'.",
              "required": false,
              "additionalTags": [],
              "collection": false,
              "type": "String",
              "possibleValues": null
            }
          ]
        }
      ],
      "returns": {
        "collection": false,
        "type": "Promise",
        "innerTypes": [
          {
            "collection": false,
            "type": "String",
            "possibleValues": null
          }
        ]
      },
      "additionalTags": [],
      "apiType": "instanceMethod",
      "fullSignature": "webContents.insertCSS(css[, options])",
      "tldr": "A promise that resolves with a key for the inserted CSS that can later be used to remove the CSS via `contents.removeInsertedCSS(key)`.\n\nInjects CSS into the current web page and returns a unique key for the inserted stylesheet.",
      "slug": "webcontentsinsertcsscss-options",
      "url": "https://electronjs.org/docs/api/web-contents#webcontentsinsertcsscss-options",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:insertCSS",
        "api:webcontentsinsertcsscss-options",
        "api:webContents.insertCSS(css[, options])",
        "doc:insertCSS",
        "doc:webcontentsinsertcsscss-options",
        "doc:webContents.insertCSS(css[, options])"
      ]
    },
    {
      "objectID": "api-web-contents#webcontentsremoveinsertedcsskey",
      "name": "removeInsertedCSS",
      "signature": "(key)",
      "description": "Resolves if the removal was successful.\n\nRemoves the inserted CSS from the current web page. The stylesheet is identified by its key, which is returned from `contents.insertCSS(css)`.",
      "parameters": [
        {
          "name": "key",
          "description": "",
          "required": true,
          "collection": false,
          "type": "String",
          "possibleValues": null
        }
      ],
      "returns": {
        "collection": false,
        "type": "Promise",
        "innerTypes": [
          {
            "collection": false,
            "type": "void"
          }
        ]
      },
      "additionalTags": [],
      "apiType": "instanceMethod",
      "fullSignature": "webContents.removeInsertedCSS(key)",
      "tldr": "Resolves if the removal was successful.\n\nRemoves the inserted CSS from the current web page.",
      "slug": "webcontentsremoveinsertedcsskey",
      "url": "https://electronjs.org/docs/api/web-contents#webcontentsremoveinsertedcsskey",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:removeInsertedCSS",
        "api:webcontentsremoveinsertedcsskey",
        "api:webContents.removeInsertedCSS(key)",
        "doc:removeInsertedCSS",
        "doc:webcontentsremoveinsertedcsskey",
        "doc:webContents.removeInsertedCSS(key)"
      ]
    },
    {
      "objectID": "api-web-contents#webcontentsexecutejavascriptcode-usergesture",
      "name": "executeJavaScript",
      "signature": "(code[, userGesture])",
      "description": "A promise that resolves with the result of the executed code or is rejected if the result of the code is a rejected promise.\n\nEvaluates `code` in page.\n\nIn the browser window some HTML APIs like `requestFullScreen` can only be invoked by a gesture from the user. Setting `userGesture` to `true` will remove this limitation.\n\nCode execution will be suspended until web page stop loading.",
      "parameters": [
        {
          "name": "code",
          "description": "",
          "required": true,
          "collection": false,
          "type": "String",
          "possibleValues": null
        },
        {
          "name": "userGesture",
          "description": "Default is `false`.",
          "required": false,
          "collection": false,
          "type": "Boolean"
        }
      ],
      "returns": {
        "collection": false,
        "type": "Promise",
        "innerTypes": [
          {
            "collection": false,
            "type": "any"
          }
        ]
      },
      "additionalTags": [],
      "apiType": "instanceMethod",
      "fullSignature": "webContents.executeJavaScript(code[, userGesture])",
      "tldr": "A promise that resolves with the result of the executed code or is rejected if the result of the code is a rejected promise.\n\nEvaluates `code` in page.\n\nIn the browser window some HTML APIs like `requestFullScreen` can only be invoked by a gesture from the user.",
      "slug": "webcontentsexecutejavascriptcode-usergesture",
      "url": "https://electronjs.org/docs/api/web-contents#webcontentsexecutejavascriptcode-usergesture",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:executeJavaScript",
        "api:webcontentsexecutejavascriptcode-usergesture",
        "api:webContents.executeJavaScript(code[, userGesture])",
        "doc:executeJavaScript",
        "doc:webcontentsexecutejavascriptcode-usergesture",
        "doc:webContents.executeJavaScript(code[, userGesture])"
      ]
    },
    {
      "objectID": "api-web-contents#webcontentssetignoremenushortcutsignore",
      "name": "setIgnoreMenuShortcuts",
      "signature": "(ignore)",
      "description": "Ignore application menu shortcuts while this web contents is focused.",
      "parameters": [
        {
          "name": "ignore",
          "description": "",
          "required": true,
          "collection": false,
          "type": "Boolean"
        }
      ],
      "returns": null,
      "additionalTags": [
        "stability_experimental"
      ],
      "apiType": "instanceMethod",
      "fullSignature": "webContents.setIgnoreMenuShortcuts(ignore)",
      "tldr": "Ignore application menu shortcuts while this web contents is focused.",
      "slug": "webcontentssetignoremenushortcutsignore",
      "url": "https://electronjs.org/docs/api/web-contents#webcontentssetignoremenushortcutsignore",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:setIgnoreMenuShortcuts",
        "api:webcontentssetignoremenushortcutsignore",
        "api:webContents.setIgnoreMenuShortcuts(ignore)",
        "doc:setIgnoreMenuShortcuts",
        "doc:webcontentssetignoremenushortcutsignore",
        "doc:webContents.setIgnoreMenuShortcuts(ignore)"
      ]
    },
    {
      "objectID": "api-web-contents#webcontentssetaudiomutedmuted",
      "name": "setAudioMuted",
      "signature": "(muted)",
      "description": "Mute the audio on the current web page.\n\n**Deprecated**",
      "parameters": [
        {
          "name": "muted",
          "description": "",
          "required": true,
          "collection": false,
          "type": "Boolean"
        }
      ],
      "returns": null,
      "additionalTags": [],
      "apiType": "instanceMethod",
      "fullSignature": "webContents.setAudioMuted(muted)",
      "tldr": "Mute the audio on the current web page.\n\n**Deprecated**.",
      "slug": "webcontentssetaudiomutedmuted",
      "url": "https://electronjs.org/docs/api/web-contents#webcontentssetaudiomutedmuted",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:setAudioMuted",
        "api:webcontentssetaudiomutedmuted",
        "api:webContents.setAudioMuted(muted)",
        "doc:setAudioMuted",
        "doc:webcontentssetaudiomutedmuted",
        "doc:webContents.setAudioMuted(muted)"
      ]
    },
    {
      "objectID": "api-web-contents#webcontentsisaudiomuted",
      "name": "isAudioMuted",
      "signature": "()",
      "description": "Whether this page has been muted.\n\n**Deprecated**",
      "parameters": [],
      "returns": {
        "collection": false,
        "type": "Boolean"
      },
      "additionalTags": [],
      "apiType": "instanceMethod",
      "fullSignature": "webContents.isAudioMuted()",
      "tldr": "Whether this page has been muted.\n\n**Deprecated**.",
      "slug": "webcontentsisaudiomuted",
      "url": "https://electronjs.org/docs/api/web-contents#webcontentsisaudiomuted",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:isAudioMuted",
        "api:webcontentsisaudiomuted",
        "api:webContents.isAudioMuted()",
        "doc:isAudioMuted",
        "doc:webcontentsisaudiomuted",
        "doc:webContents.isAudioMuted()"
      ]
    },
    {
      "objectID": "api-web-contents#webcontentsiscurrentlyaudible",
      "name": "isCurrentlyAudible",
      "signature": "()",
      "description": "Whether audio is currently playing.",
      "parameters": [],
      "returns": {
        "collection": false,
        "type": "Boolean"
      },
      "additionalTags": [],
      "apiType": "instanceMethod",
      "fullSignature": "webContents.isCurrentlyAudible()",
      "tldr": "Whether audio is currently playing.",
      "slug": "webcontentsiscurrentlyaudible",
      "url": "https://electronjs.org/docs/api/web-contents#webcontentsiscurrentlyaudible",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:isCurrentlyAudible",
        "api:webcontentsiscurrentlyaudible",
        "api:webContents.isCurrentlyAudible()",
        "doc:isCurrentlyAudible",
        "doc:webcontentsiscurrentlyaudible",
        "doc:webContents.isCurrentlyAudible()"
      ]
    },
    {
      "objectID": "api-web-contents#webcontentssetzoomfactorfactor",
      "name": "setZoomFactor",
      "signature": "(factor)",
      "description": "Changes the zoom factor to the specified factor. Zoom factor is zoom percent divided by 100, so 300% = 3.0.\n\n**Deprecated**",
      "parameters": [
        {
          "name": "factor",
          "description": "Zoom factor.",
          "required": true,
          "collection": false,
          "type": "Number"
        }
      ],
      "returns": null,
      "additionalTags": [],
      "apiType": "instanceMethod",
      "fullSignature": "webContents.setZoomFactor(factor)",
      "tldr": "Changes the zoom factor to the specified factor.",
      "slug": "webcontentssetzoomfactorfactor",
      "url": "https://electronjs.org/docs/api/web-contents#webcontentssetzoomfactorfactor",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:setZoomFactor",
        "api:webcontentssetzoomfactorfactor",
        "api:webContents.setZoomFactor(factor)",
        "doc:setZoomFactor",
        "doc:webcontentssetzoomfactorfactor",
        "doc:webContents.setZoomFactor(factor)"
      ]
    },
    {
      "objectID": "api-web-contents#webcontentsgetzoomfactor",
      "name": "getZoomFactor",
      "signature": "()",
      "description": "the current zoom factor.\n\n**Deprecated**",
      "parameters": [],
      "returns": {
        "collection": false,
        "type": "Number"
      },
      "additionalTags": [],
      "apiType": "instanceMethod",
      "fullSignature": "webContents.getZoomFactor()",
      "tldr": "the current zoom factor.\n\n**Deprecated**.",
      "slug": "webcontentsgetzoomfactor",
      "url": "https://electronjs.org/docs/api/web-contents#webcontentsgetzoomfactor",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:getZoomFactor",
        "api:webcontentsgetzoomfactor",
        "api:webContents.getZoomFactor()",
        "doc:getZoomFactor",
        "doc:webcontentsgetzoomfactor",
        "doc:webContents.getZoomFactor()"
      ]
    },
    {
      "objectID": "api-web-contents#webcontentssetzoomlevellevel",
      "name": "setZoomLevel",
      "signature": "(level)",
      "description": "Changes the zoom level to the specified level. The original size is 0 and each increment above or below represents zooming 20% larger or smaller to default limits of 300% and 50% of original size, respectively. The formula for this is `scale := 1.2 ^ level`.\n\n**Deprecated**",
      "parameters": [
        {
          "name": "level",
          "description": "Zoom level.",
          "required": true,
          "collection": false,
          "type": "Number"
        }
      ],
      "returns": null,
      "additionalTags": [],
      "apiType": "instanceMethod",
      "fullSignature": "webContents.setZoomLevel(level)",
      "tldr": "Changes the zoom level to the specified level.",
      "slug": "webcontentssetzoomlevellevel",
      "url": "https://electronjs.org/docs/api/web-contents#webcontentssetzoomlevellevel",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:setZoomLevel",
        "api:webcontentssetzoomlevellevel",
        "api:webContents.setZoomLevel(level)",
        "doc:setZoomLevel",
        "doc:webcontentssetzoomlevellevel",
        "doc:webContents.setZoomLevel(level)"
      ]
    },
    {
      "objectID": "api-web-contents#webcontentsgetzoomlevel",
      "name": "getZoomLevel",
      "signature": "()",
      "description": "the current zoom level.\n\n**Deprecated**",
      "parameters": [],
      "returns": {
        "collection": false,
        "type": "Number"
      },
      "additionalTags": [],
      "apiType": "instanceMethod",
      "fullSignature": "webContents.getZoomLevel()",
      "tldr": "the current zoom level.\n\n**Deprecated**.",
      "slug": "webcontentsgetzoomlevel",
      "url": "https://electronjs.org/docs/api/web-contents#webcontentsgetzoomlevel",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:getZoomLevel",
        "api:webcontentsgetzoomlevel",
        "api:webContents.getZoomLevel()",
        "doc:getZoomLevel",
        "doc:webcontentsgetzoomlevel",
        "doc:webContents.getZoomLevel()"
      ]
    },
    {
      "objectID": "api-web-contents#webcontentssetvisualzoomlevellimitsminimumlevel-maximumlevel",
      "name": "setVisualZoomLevelLimits",
      "signature": "(minimumLevel, maximumLevel)",
      "description": "Sets the maximum and minimum pinch-to-zoom level.\n\n> **NOTE**: Visual zoom is disabled by default in Electron. To re-enable it, call:",
      "parameters": [
        {
          "name": "minimumLevel",
          "description": "",
          "required": true,
          "collection": false,
          "type": "Number"
        },
        {
          "name": "maximumLevel",
          "description": "",
          "required": true,
          "collection": false,
          "type": "Number"
        }
      ],
      "returns": {
        "collection": false,
        "type": "Promise",
        "innerTypes": [
          {
            "collection": false,
            "type": "void"
          }
        ]
      },
      "additionalTags": [],
      "apiType": "instanceMethod",
      "fullSignature": "webContents.setVisualZoomLevelLimits(minimumLevel, maximumLevel)",
      "tldr": "Sets the maximum and minimum pinch-to-zoom level.\n\n> **NOTE**: Visual zoom is disabled by default in Electron.",
      "slug": "webcontentssetvisualzoomlevellimitsminimumlevel-maximumlevel",
      "url": "https://electronjs.org/docs/api/web-contents#webcontentssetvisualzoomlevellimitsminimumlevel-maximumlevel",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:setVisualZoomLevelLimits",
        "api:webcontentssetvisualzoomlevellimitsminimumlevel-maximumlevel",
        "api:webContents.setVisualZoomLevelLimits(minimumLevel, maximumLevel)",
        "doc:setVisualZoomLevelLimits",
        "doc:webcontentssetvisualzoomlevellimitsminimumlevel-maximumlevel",
        "doc:webContents.setVisualZoomLevelLimits(minimumLevel, maximumLevel)"
      ]
    },
    {
      "objectID": "api-web-contents#webcontentssetlayoutzoomlevellimitsminimumlevel-maximumlevel",
      "name": "setLayoutZoomLevelLimits",
      "signature": "(minimumLevel, maximumLevel)",
      "description": "Sets the maximum and minimum layout-based (i.e. non-visual) zoom level.",
      "parameters": [
        {
          "name": "minimumLevel",
          "description": "",
          "required": true,
          "collection": false,
          "type": "Number"
        },
        {
          "name": "maximumLevel",
          "description": "",
          "required": true,
          "collection": false,
          "type": "Number"
        }
      ],
      "returns": {
        "collection": false,
        "type": "Promise",
        "innerTypes": [
          {
            "collection": false,
            "type": "void"
          }
        ]
      },
      "additionalTags": [],
      "apiType": "instanceMethod",
      "fullSignature": "webContents.setLayoutZoomLevelLimits(minimumLevel, maximumLevel)",
      "tldr": "Sets the maximum and minimum layout-based (i.e.",
      "slug": "webcontentssetlayoutzoomlevellimitsminimumlevel-maximumlevel",
      "url": "https://electronjs.org/docs/api/web-contents#webcontentssetlayoutzoomlevellimitsminimumlevel-maximumlevel",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:setLayoutZoomLevelLimits",
        "api:webcontentssetlayoutzoomlevellimitsminimumlevel-maximumlevel",
        "api:webContents.setLayoutZoomLevelLimits(minimumLevel, maximumLevel)",
        "doc:setLayoutZoomLevelLimits",
        "doc:webcontentssetlayoutzoomlevellimitsminimumlevel-maximumlevel",
        "doc:webContents.setLayoutZoomLevelLimits(minimumLevel, maximumLevel)"
      ]
    },
    {
      "objectID": "api-web-contents#webcontentsundo",
      "name": "undo",
      "signature": "()",
      "description": "Executes the editing command `undo` in web page.",
      "parameters": [],
      "returns": null,
      "additionalTags": [],
      "apiType": "instanceMethod",
      "fullSignature": "webContents.undo()",
      "tldr": "Executes the editing command `undo` in web page.",
      "slug": "webcontentsundo",
      "url": "https://electronjs.org/docs/api/web-contents#webcontentsundo",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:undo",
        "api:webcontentsundo",
        "api:webContents.undo()",
        "doc:undo",
        "doc:webcontentsundo",
        "doc:webContents.undo()"
      ]
    },
    {
      "objectID": "api-web-contents#webcontentsredo",
      "name": "redo",
      "signature": "()",
      "description": "Executes the editing command `redo` in web page.",
      "parameters": [],
      "returns": null,
      "additionalTags": [],
      "apiType": "instanceMethod",
      "fullSignature": "webContents.redo()",
      "tldr": "Executes the editing command `redo` in web page.",
      "slug": "webcontentsredo",
      "url": "https://electronjs.org/docs/api/web-contents#webcontentsredo",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:redo",
        "api:webcontentsredo",
        "api:webContents.redo()",
        "doc:redo",
        "doc:webcontentsredo",
        "doc:webContents.redo()"
      ]
    },
    {
      "objectID": "api-web-contents#webcontentscut",
      "name": "cut",
      "signature": "()",
      "description": "Executes the editing command `cut` in web page.",
      "parameters": [],
      "returns": null,
      "additionalTags": [],
      "apiType": "instanceMethod",
      "fullSignature": "webContents.cut()",
      "tldr": "Executes the editing command `cut` in web page.",
      "slug": "webcontentscut",
      "url": "https://electronjs.org/docs/api/web-contents#webcontentscut",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:cut",
        "api:webcontentscut",
        "api:webContents.cut()",
        "doc:cut",
        "doc:webcontentscut",
        "doc:webContents.cut()"
      ]
    },
    {
      "objectID": "api-web-contents#webcontentscopy",
      "name": "copy",
      "signature": "()",
      "description": "Executes the editing command `copy` in web page.",
      "parameters": [],
      "returns": null,
      "additionalTags": [],
      "apiType": "instanceMethod",
      "fullSignature": "webContents.copy()",
      "tldr": "Executes the editing command `copy` in web page.",
      "slug": "webcontentscopy",
      "url": "https://electronjs.org/docs/api/web-contents#webcontentscopy",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:copy",
        "api:webcontentscopy",
        "api:webContents.copy()",
        "doc:copy",
        "doc:webcontentscopy",
        "doc:webContents.copy()"
      ]
    },
    {
      "objectID": "api-web-contents#webcontentscopyimageatx-y",
      "name": "copyImageAt",
      "signature": "(x, y)",
      "description": "Copy the image at the given position to the clipboard.",
      "parameters": [
        {
          "name": "x",
          "description": "",
          "required": true,
          "collection": false,
          "type": "Integer"
        },
        {
          "name": "y",
          "description": "",
          "required": true,
          "collection": false,
          "type": "Integer"
        }
      ],
      "returns": null,
      "additionalTags": [],
      "apiType": "instanceMethod",
      "fullSignature": "webContents.copyImageAt(x, y)",
      "tldr": "Copy the image at the given position to the clipboard.",
      "slug": "webcontentscopyimageatx-y",
      "url": "https://electronjs.org/docs/api/web-contents#webcontentscopyimageatx-y",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:copyImageAt",
        "api:webcontentscopyimageatx-y",
        "api:webContents.copyImageAt(x, y)",
        "doc:copyImageAt",
        "doc:webcontentscopyimageatx-y",
        "doc:webContents.copyImageAt(x, y)"
      ]
    },
    {
      "objectID": "api-web-contents#webcontentspaste",
      "name": "paste",
      "signature": "()",
      "description": "Executes the editing command `paste` in web page.",
      "parameters": [],
      "returns": null,
      "additionalTags": [],
      "apiType": "instanceMethod",
      "fullSignature": "webContents.paste()",
      "tldr": "Executes the editing command `paste` in web page.",
      "slug": "webcontentspaste",
      "url": "https://electronjs.org/docs/api/web-contents#webcontentspaste",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:paste",
        "api:webcontentspaste",
        "api:webContents.paste()",
        "doc:paste",
        "doc:webcontentspaste",
        "doc:webContents.paste()"
      ]
    },
    {
      "objectID": "api-web-contents#webcontentspasteandmatchstyle",
      "name": "pasteAndMatchStyle",
      "signature": "()",
      "description": "Executes the editing command `pasteAndMatchStyle` in web page.",
      "parameters": [],
      "returns": null,
      "additionalTags": [],
      "apiType": "instanceMethod",
      "fullSignature": "webContents.pasteAndMatchStyle()",
      "tldr": "Executes the editing command `pasteAndMatchStyle` in web page.",
      "slug": "webcontentspasteandmatchstyle",
      "url": "https://electronjs.org/docs/api/web-contents#webcontentspasteandmatchstyle",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:pasteAndMatchStyle",
        "api:webcontentspasteandmatchstyle",
        "api:webContents.pasteAndMatchStyle()",
        "doc:pasteAndMatchStyle",
        "doc:webcontentspasteandmatchstyle",
        "doc:webContents.pasteAndMatchStyle()"
      ]
    },
    {
      "objectID": "api-web-contents#webcontentsdelete",
      "name": "delete",
      "signature": "()",
      "description": "Executes the editing command `delete` in web page.",
      "parameters": [],
      "returns": null,
      "additionalTags": [],
      "apiType": "instanceMethod",
      "fullSignature": "webContents.delete()",
      "tldr": "Executes the editing command `delete` in web page.",
      "slug": "webcontentsdelete",
      "url": "https://electronjs.org/docs/api/web-contents#webcontentsdelete",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:delete",
        "api:webcontentsdelete",
        "api:webContents.delete()",
        "doc:delete",
        "doc:webcontentsdelete",
        "doc:webContents.delete()"
      ]
    },
    {
      "objectID": "api-web-contents#webcontentsselectall",
      "name": "selectAll",
      "signature": "()",
      "description": "Executes the editing command `selectAll` in web page.",
      "parameters": [],
      "returns": null,
      "additionalTags": [],
      "apiType": "instanceMethod",
      "fullSignature": "webContents.selectAll()",
      "tldr": "Executes the editing command `selectAll` in web page.",
      "slug": "webcontentsselectall",
      "url": "https://electronjs.org/docs/api/web-contents#webcontentsselectall",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:selectAll",
        "api:webcontentsselectall",
        "api:webContents.selectAll()",
        "doc:selectAll",
        "doc:webcontentsselectall",
        "doc:webContents.selectAll()"
      ]
    },
    {
      "objectID": "api-web-contents#webcontentsunselect",
      "name": "unselect",
      "signature": "()",
      "description": "Executes the editing command `unselect` in web page.",
      "parameters": [],
      "returns": null,
      "additionalTags": [],
      "apiType": "instanceMethod",
      "fullSignature": "webContents.unselect()",
      "tldr": "Executes the editing command `unselect` in web page.",
      "slug": "webcontentsunselect",
      "url": "https://electronjs.org/docs/api/web-contents#webcontentsunselect",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:unselect",
        "api:webcontentsunselect",
        "api:webContents.unselect()",
        "doc:unselect",
        "doc:webcontentsunselect",
        "doc:webContents.unselect()"
      ]
    },
    {
      "objectID": "api-web-contents#webcontentsreplacetext",
      "name": "replace",
      "signature": "(text)",
      "description": "Executes the editing command `replace` in web page.",
      "parameters": [
        {
          "name": "text",
          "description": "",
          "required": true,
          "collection": false,
          "type": "String",
          "possibleValues": null
        }
      ],
      "returns": null,
      "additionalTags": [],
      "apiType": "instanceMethod",
      "fullSignature": "webContents.replace(text)",
      "tldr": "Executes the editing command `replace` in web page.",
      "slug": "webcontentsreplacetext",
      "url": "https://electronjs.org/docs/api/web-contents#webcontentsreplacetext",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:replace",
        "api:webcontentsreplacetext",
        "api:webContents.replace(text)",
        "doc:replace",
        "doc:webcontentsreplacetext",
        "doc:webContents.replace(text)"
      ]
    },
    {
      "objectID": "api-web-contents#webcontentsreplacemisspellingtext",
      "name": "replaceMisspelling",
      "signature": "(text)",
      "description": "Executes the editing command `replaceMisspelling` in web page.",
      "parameters": [
        {
          "name": "text",
          "description": "",
          "required": true,
          "collection": false,
          "type": "String",
          "possibleValues": null
        }
      ],
      "returns": null,
      "additionalTags": [],
      "apiType": "instanceMethod",
      "fullSignature": "webContents.replaceMisspelling(text)",
      "tldr": "Executes the editing command `replaceMisspelling` in web page.",
      "slug": "webcontentsreplacemisspellingtext",
      "url": "https://electronjs.org/docs/api/web-contents#webcontentsreplacemisspellingtext",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:replaceMisspelling",
        "api:webcontentsreplacemisspellingtext",
        "api:webContents.replaceMisspelling(text)",
        "doc:replaceMisspelling",
        "doc:webcontentsreplacemisspellingtext",
        "doc:webContents.replaceMisspelling(text)"
      ]
    },
    {
      "objectID": "api-web-contents#webcontentsinserttexttext",
      "name": "insertText",
      "signature": "(text)",
      "description": "Inserts `text` to the focused element.",
      "parameters": [
        {
          "name": "text",
          "description": "",
          "required": true,
          "collection": false,
          "type": "String",
          "possibleValues": null
        }
      ],
      "returns": {
        "collection": false,
        "type": "Promise",
        "innerTypes": [
          {
            "collection": false,
            "type": "void"
          }
        ]
      },
      "additionalTags": [],
      "apiType": "instanceMethod",
      "fullSignature": "webContents.insertText(text)",
      "tldr": "Inserts `text` to the focused element.",
      "slug": "webcontentsinserttexttext",
      "url": "https://electronjs.org/docs/api/web-contents#webcontentsinserttexttext",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:insertText",
        "api:webcontentsinserttexttext",
        "api:webContents.insertText(text)",
        "doc:insertText",
        "doc:webcontentsinserttexttext",
        "doc:webContents.insertText(text)"
      ]
    },
    {
      "objectID": "api-web-contents#webcontentsfindinpagetext-options",
      "name": "findInPage",
      "signature": "(text[, options])",
      "description": "The request id used for the request.\n\nStarts a request to find all matches for the `text` in the web page. The result of the request can be obtained by subscribing to `found-in-page` event.",
      "parameters": [
        {
          "name": "text",
          "description": "Content to be searched, must not be empty.",
          "required": true,
          "collection": false,
          "type": "String",
          "possibleValues": null
        },
        {
          "name": "options",
          "description": "",
          "required": false,
          "collection": false,
          "type": "Object",
          "properties": [
            {
              "name": "forward",
              "description": "Whether to search forward or backward, defaults to `true`.",
              "required": false,
              "additionalTags": [],
              "collection": false,
              "type": "Boolean"
            },
            {
              "name": "findNext",
              "description": "Whether the operation is first request or a follow up, defaults to `false`.",
              "required": false,
              "additionalTags": [],
              "collection": false,
              "type": "Boolean"
            },
            {
              "name": "matchCase",
              "description": "Whether search should be case-sensitive, defaults to `false`.",
              "required": false,
              "additionalTags": [],
              "collection": false,
              "type": "Boolean"
            },
            {
              "name": "wordStart",
              "description": "Whether to look only at the start of words. defaults to `false`.",
              "required": false,
              "additionalTags": [],
              "collection": false,
              "type": "Boolean"
            },
            {
              "name": "medialCapitalAsWordStart",
              "description": "When combined with `wordStart`, accepts a match in the middle of a word if the match begins with an uppercase letter followed by a lowercase or non-letter. Accepts several other intra-word matches, defaults to `false`.",
              "required": false,
              "additionalTags": [],
              "collection": false,
              "type": "Boolean"
            }
          ]
        }
      ],
      "returns": {
        "collection": false,
        "type": "Integer"
      },
      "additionalTags": [],
      "apiType": "instanceMethod",
      "fullSignature": "webContents.findInPage(text[, options])",
      "tldr": "The request id used for the request.\n\nStarts a request to find all matches for the `text` in the web page.",
      "slug": "webcontentsfindinpagetext-options",
      "url": "https://electronjs.org/docs/api/web-contents#webcontentsfindinpagetext-options",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:findInPage",
        "api:webcontentsfindinpagetext-options",
        "api:webContents.findInPage(text[, options])",
        "doc:findInPage",
        "doc:webcontentsfindinpagetext-options",
        "doc:webContents.findInPage(text[, options])"
      ]
    },
    {
      "objectID": "api-web-contents#webcontentsstopfindinpageaction",
      "name": "stopFindInPage",
      "signature": "(action)",
      "description": "Stops any `findInPage` request for the `webContents` with the provided `action`.",
      "parameters": [
        {
          "name": "action",
          "description": "Specifies the action to take place when ending [`webContents.findInPage`] request.",
          "required": true,
          "collection": false,
          "type": "String",
          "possibleValues": [
            {
              "value": "clearSelection",
              "description": "Clear the selection."
            },
            {
              "value": "keepSelection",
              "description": "Translate the selection into a normal selection."
            },
            {
              "value": "activateSelection",
              "description": "Focus and click the selection node."
            }
          ]
        }
      ],
      "returns": null,
      "additionalTags": [],
      "apiType": "instanceMethod",
      "fullSignature": "webContents.stopFindInPage(action)",
      "tldr": "Stops any `findInPage` request for the `webContents` with the provided `action`.",
      "slug": "webcontentsstopfindinpageaction",
      "url": "https://electronjs.org/docs/api/web-contents#webcontentsstopfindinpageaction",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:stopFindInPage",
        "api:webcontentsstopfindinpageaction",
        "api:webContents.stopFindInPage(action)",
        "doc:stopFindInPage",
        "doc:webcontentsstopfindinpageaction",
        "doc:webContents.stopFindInPage(action)"
      ]
    },
    {
      "objectID": "api-web-contents#webcontentscapturepagerect",
      "name": "capturePage",
      "signature": "([rect])",
      "description": "Resolves with a NativeImage\n\nCaptures a snapshot of the page within `rect`. Omitting `rect` will capture the whole visible page.",
      "parameters": [
        {
          "name": "rect",
          "description": "The area of the page to be captured.",
          "required": false,
          "collection": false,
          "type": "Rectangle"
        }
      ],
      "returns": {
        "collection": false,
        "type": "Promise",
        "innerTypes": [
          {
            "collection": false,
            "type": "NativeImage"
          }
        ]
      },
      "additionalTags": [],
      "apiType": "instanceMethod",
      "fullSignature": "webContents.capturePage([rect])",
      "tldr": "Resolves with a NativeImage\n\nCaptures a snapshot of the page within `rect`.",
      "slug": "webcontentscapturepagerect",
      "url": "https://electronjs.org/docs/api/web-contents#webcontentscapturepagerect",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:capturePage",
        "api:webcontentscapturepagerect",
        "api:webContents.capturePage([rect])",
        "doc:capturePage",
        "doc:webcontentscapturepagerect",
        "doc:webContents.capturePage([rect])"
      ]
    },
    {
      "objectID": "api-web-contents#webcontentsgetprinters",
      "name": "getPrinters",
      "signature": "()",
      "description": "Get the system printer list.\n\nReturns `PrinterInfo[]`.",
      "parameters": [],
      "returns": null,
      "additionalTags": [],
      "apiType": "instanceMethod",
      "fullSignature": "webContents.getPrinters()",
      "tldr": "Get the system printer list.\n\nReturns `PrinterInfo[]`.",
      "slug": "webcontentsgetprinters",
      "url": "https://electronjs.org/docs/api/web-contents#webcontentsgetprinters",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:getPrinters",
        "api:webcontentsgetprinters",
        "api:webContents.getPrinters()",
        "doc:getPrinters",
        "doc:webcontentsgetprinters",
        "doc:webContents.getPrinters()"
      ]
    },
    {
      "objectID": "api-web-contents#webcontentsprintoptions-callback",
      "name": "print",
      "signature": "([options], [callback])",
      "description": "Prints window's web page. When `silent` is set to `true`, Electron will pick the system's default printer if `deviceName` is empty and the default settings for printing.\n\nUse `page-break-before: always;` CSS style to force to print to a new page.\n\nExample usage:",
      "parameters": [
        {
          "name": "options",
          "description": "",
          "required": false,
          "collection": false,
          "type": "Object",
          "properties": [
            {
              "name": "silent",
              "description": "Don't ask user for print settings. Default is `false`.",
              "required": false,
              "additionalTags": [],
              "collection": false,
              "type": "Boolean"
            },
            {
              "name": "printBackground",
              "description": "Prints the background color and image of the web page. Default is `false`.",
              "required": false,
              "additionalTags": [],
              "collection": false,
              "type": "Boolean"
            },
            {
              "name": "deviceName",
              "description": "Set the printer device name to use. Default is `''`.",
              "required": false,
              "additionalTags": [],
              "collection": false,
              "type": "String",
              "possibleValues": null
            },
            {
              "name": "color",
              "description": "Set whether the printed web page will be in color or grayscale. Default is `true`.",
              "required": false,
              "additionalTags": [],
              "collection": false,
              "type": "Boolean"
            },
            {
              "name": "margins",
              "description": "",
              "required": false,
              "additionalTags": [],
              "collection": false,
              "type": "Object",
              "properties": [
                {
                  "name": "marginType",
                  "description": "Can be `default`, `none`, `printableArea`, or `custom`. If `custom` is chosen, you will also need to specify `top`, `bottom`, `left`, and `right`.",
                  "required": false,
                  "additionalTags": [],
                  "collection": false,
                  "type": "String",
                  "possibleValues": [
                    {
                      "value": "default",
                      "description": ""
                    },
                    {
                      "value": "none",
                      "description": ""
                    },
                    {
                      "value": "printableArea",
                      "description": ""
                    },
                    {
                      "value": "custom",
                      "description": ""
                    }
                  ]
                },
                {
                  "name": "top",
                  "description": "The top margin of the printed web page, in pixels.",
                  "required": false,
                  "additionalTags": [],
                  "collection": false,
                  "type": "Number"
                },
                {
                  "name": "bottom",
                  "description": "The bottom margin of the printed web page, in pixels.",
                  "required": false,
                  "additionalTags": [],
                  "collection": false,
                  "type": "Number"
                },
                {
                  "name": "left",
                  "description": "The left margin of the printed web page, in pixels.",
                  "required": false,
                  "additionalTags": [],
                  "collection": false,
                  "type": "Number"
                },
                {
                  "name": "right",
                  "description": "The right margin of the printed web page, in pixels.",
                  "required": false,
                  "additionalTags": [],
                  "collection": false,
                  "type": "Number"
                }
              ]
            },
            {
              "name": "landscape",
              "description": "Whether the web page should be printed in landscape mode. Default is `false`.",
              "required": false,
              "additionalTags": [],
              "collection": false,
              "type": "Boolean"
            },
            {
              "name": "scaleFactor",
              "description": "The scale factor of the web page.",
              "required": false,
              "additionalTags": [],
              "collection": false,
              "type": "Number"
            },
            {
              "name": "pagesPerSheet",
              "description": "The number of pages to print per page sheet.",
              "required": false,
              "additionalTags": [],
              "collection": false,
              "type": "Number"
            },
            {
              "name": "collate",
              "description": "Whether the web page should be collated.",
              "required": false,
              "additionalTags": [],
              "collection": false,
              "type": "Boolean"
            },
            {
              "name": "copies",
              "description": "The number of copies of the web page to print.",
              "required": false,
              "additionalTags": [],
              "collection": false,
              "type": "Number"
            },
            {
              "name": "pageRanges",
              "description": "The page range to print. Should have two keys: `from` and `to`.",
              "required": false,
              "additionalTags": [],
              "collection": false,
              "type": "Record",
              "innerTypes": [
                {
                  "collection": false,
                  "type": "string"
                },
                {
                  "collection": false,
                  "type": "number"
                }
              ]
            },
            {
              "name": "duplexMode",
              "description": "Set the duplex mode of the printed web page. Can be `simplex`, `shortEdge`, or `longEdge`.",
              "required": false,
              "additionalTags": [],
              "collection": false,
              "type": "String",
              "possibleValues": [
                {
                  "value": "simplex",
                  "description": ""
                },
                {
                  "value": "shortEdge",
                  "description": ""
                },
                {
                  "value": "longEdge",
                  "description": ""
                }
              ]
            },
            {
              "name": "dpi",
              "description": "",
              "required": false,
              "additionalTags": [],
              "collection": false,
              "type": "Object",
              "properties": [
                {
                  "name": "horizontal",
                  "description": "The horizontal dpi.",
                  "required": false,
                  "additionalTags": [],
                  "collection": false,
                  "type": "Number"
                },
                {
                  "name": "vertical",
                  "description": "The vertical dpi.",
                  "required": false,
                  "additionalTags": [],
                  "collection": false,
                  "type": "Number"
                }
              ]
            }
          ]
        },
        {
          "name": "callback",
          "description": "",
          "required": false,
          "collection": false,
          "type": "Function",
          "parameters": [
            {
              "name": "success",
              "description": "Indicates success of the print call.",
              "required": true,
              "collection": false,
              "type": "Boolean"
            },
            {
              "name": "failureReason",
              "description": "Called back if the print fails; can be `cancelled` or `failed`.",
              "required": true,
              "collection": false,
              "type": "String",
              "possibleValues": [
                {
                  "value": "cancelled",
                  "description": ""
                },
                {
                  "value": "failed",
                  "description": ""
                }
              ]
            }
          ],
          "returns": null
        }
      ],
      "returns": null,
      "additionalTags": [],
      "apiType": "instanceMethod",
      "fullSignature": "webContents.print([options], [callback])",
      "tldr": "Prints window's web page.",
      "slug": "webcontentsprintoptions-callback",
      "url": "https://electronjs.org/docs/api/web-contents#webcontentsprintoptions-callback",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:print",
        "api:webcontentsprintoptions-callback",
        "api:webContents.print([options], [callback])",
        "doc:print",
        "doc:webcontentsprintoptions-callback",
        "doc:webContents.print([options], [callback])"
      ]
    },
    {
      "objectID": "api-web-contents#webcontentsprinttopdfoptions",
      "name": "printToPDF",
      "signature": "(options)",
      "description": "Resolves with the generated PDF data.\n\nPrints window's web page as PDF with Chromium's preview printing custom settings.\n\nThe `landscape` will be ignored if `@page` CSS at-rule is used in the web page.\n\nBy default, an empty `options` will be regarded as:\n\nUse `page-break-before: always;` CSS style to force to print to a new page.\n\nAn example of `webContents.printToPDF`:",
      "parameters": [
        {
          "name": "options",
          "description": "",
          "required": true,
          "collection": false,
          "type": "Object",
          "properties": [
            {
              "name": "marginsType",
              "description": "Specifies the type of margins to use. Uses 0 for default margin, 1 for no margin, and 2 for minimum margin.",
              "required": false,
              "additionalTags": [],
              "collection": false,
              "type": "Integer"
            },
            {
              "name": "pageSize",
              "description": "Specify page size of the generated PDF. Can be `A3`, `A4`, `A5`, `Legal`, `Letter`, `Tabloid` or an Object containing `height` and `width` in microns.",
              "required": false,
              "additionalTags": [],
              "collection": false,
              "type": [
                {
                  "collection": false,
                  "type": "String",
                  "possibleValues": null
                },
                {
                  "collection": false,
                  "type": "Size"
                }
              ]
            },
            {
              "name": "printBackground",
              "description": "Whether to print CSS backgrounds.",
              "required": false,
              "additionalTags": [],
              "collection": false,
              "type": "Boolean"
            },
            {
              "name": "printSelectionOnly",
              "description": "Whether to print selection only.",
              "required": false,
              "additionalTags": [],
              "collection": false,
              "type": "Boolean"
            },
            {
              "name": "landscape",
              "description": "`true` for landscape, `false` for portrait.",
              "required": false,
              "additionalTags": [],
              "collection": false,
              "type": "Boolean"
            }
          ]
        }
      ],
      "returns": {
        "collection": false,
        "type": "Promise",
        "innerTypes": [
          {
            "collection": false,
            "type": "Buffer"
          }
        ]
      },
      "additionalTags": [],
      "apiType": "instanceMethod",
      "fullSignature": "webContents.printToPDF(options)",
      "tldr": "Resolves with the generated PDF data.\n\nPrints window's web page as PDF with Chromium's preview printing custom settings.\n\nThe `landscape` will be ignored if `@page` CSS at-rule is used in the web page.\n\nBy default, an empty `options` will be regarded as:\n\nUse `page-break-before: always;` CSS style to force to print to a new page.\n\nAn example of `webContents.printToPDF`:.",
      "slug": "webcontentsprinttopdfoptions",
      "url": "https://electronjs.org/docs/api/web-contents#webcontentsprinttopdfoptions",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:printToPDF",
        "api:webcontentsprinttopdfoptions",
        "api:webContents.printToPDF(options)",
        "doc:printToPDF",
        "doc:webcontentsprinttopdfoptions",
        "doc:webContents.printToPDF(options)"
      ]
    },
    {
      "objectID": "api-web-contents#webcontentsaddworkspacepath",
      "name": "addWorkSpace",
      "signature": "(path)",
      "description": "Adds the specified path to DevTools workspace. Must be used after DevTools creation:",
      "parameters": [
        {
          "name": "path",
          "description": "",
          "required": true,
          "collection": false,
          "type": "String",
          "possibleValues": null
        }
      ],
      "returns": null,
      "additionalTags": [],
      "apiType": "instanceMethod",
      "fullSignature": "webContents.addWorkSpace(path)",
      "tldr": "Adds the specified path to DevTools workspace.",
      "slug": "webcontentsaddworkspacepath",
      "url": "https://electronjs.org/docs/api/web-contents#webcontentsaddworkspacepath",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:addWorkSpace",
        "api:webcontentsaddworkspacepath",
        "api:webContents.addWorkSpace(path)",
        "doc:addWorkSpace",
        "doc:webcontentsaddworkspacepath",
        "doc:webContents.addWorkSpace(path)"
      ]
    },
    {
      "objectID": "api-web-contents#webcontentsremoveworkspacepath",
      "name": "removeWorkSpace",
      "signature": "(path)",
      "description": "Removes the specified path from DevTools workspace.",
      "parameters": [
        {
          "name": "path",
          "description": "",
          "required": true,
          "collection": false,
          "type": "String",
          "possibleValues": null
        }
      ],
      "returns": null,
      "additionalTags": [],
      "apiType": "instanceMethod",
      "fullSignature": "webContents.removeWorkSpace(path)",
      "tldr": "Removes the specified path from DevTools workspace.",
      "slug": "webcontentsremoveworkspacepath",
      "url": "https://electronjs.org/docs/api/web-contents#webcontentsremoveworkspacepath",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:removeWorkSpace",
        "api:webcontentsremoveworkspacepath",
        "api:webContents.removeWorkSpace(path)",
        "doc:removeWorkSpace",
        "doc:webcontentsremoveworkspacepath",
        "doc:webContents.removeWorkSpace(path)"
      ]
    },
    {
      "objectID": "api-web-contents#webcontentssetdevtoolswebcontentsdevtoolswebcontents",
      "name": "setDevToolsWebContents",
      "signature": "(devToolsWebContents)",
      "description": "Uses the `devToolsWebContents` as the target `WebContents` to show devtools.\n\nThe `devToolsWebContents` must not have done any navigation, and it should not be used for other purposes after the call.\n\nBy default Electron manages the devtools by creating an internal `WebContents` with native view, which developers have very limited control of. With the `setDevToolsWebContents` method, developers can use any `WebContents` to show the devtools in it, including `BrowserWindow`, `BrowserView` and `<webview>` tag.\n\nNote that closing the devtools does not destroy the `devToolsWebContents`, it is caller's responsibility to destroy `devToolsWebContents`.\n\nAn example of showing devtools in a `<webview>` tag:\n\nAn example of showing devtools in a `BrowserWindow`:",
      "parameters": [
        {
          "name": "devToolsWebContents",
          "description": "",
          "required": true,
          "collection": false,
          "type": "WebContents"
        }
      ],
      "returns": null,
      "additionalTags": [],
      "apiType": "instanceMethod",
      "fullSignature": "webContents.setDevToolsWebContents(devToolsWebContents)",
      "tldr": "Uses the `devToolsWebContents` as the target `WebContents` to show devtools.\n\nThe `devToolsWebContents` must not have done any navigation, and it should not be used for other purposes after the call.\n\nBy default Electron manages the devtools by creating an internal `WebContents` with native view, which developers have very limited control of.",
      "slug": "webcontentssetdevtoolswebcontentsdevtoolswebcontents",
      "url": "https://electronjs.org/docs/api/web-contents#webcontentssetdevtoolswebcontentsdevtoolswebcontents",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:setDevToolsWebContents",
        "api:webcontentssetdevtoolswebcontentsdevtoolswebcontents",
        "api:webContents.setDevToolsWebContents(devToolsWebContents)",
        "doc:setDevToolsWebContents",
        "doc:webcontentssetdevtoolswebcontentsdevtoolswebcontents",
        "doc:webContents.setDevToolsWebContents(devToolsWebContents)"
      ]
    },
    {
      "objectID": "api-web-contents#webcontentsopendevtoolsoptions",
      "name": "openDevTools",
      "signature": "([options])",
      "description": "Opens the devtools.\n\nWhen `contents` is a `<webview>` tag, the `mode` would be `detach` by default, explicitly passing an empty `mode` can force using last used dock state.",
      "parameters": [
        {
          "name": "options",
          "description": "",
          "required": false,
          "collection": false,
          "type": "Object",
          "properties": [
            {
              "name": "mode",
              "description": "Opens the devtools with specified dock state, can be `right`, `bottom`, `undocked`, `detach`. Defaults to last used dock state. In `undocked` mode it's possible to dock back. In `detach` mode it's not.",
              "required": true,
              "additionalTags": [],
              "collection": false,
              "type": "String",
              "possibleValues": [
                {
                  "value": "right",
                  "description": ""
                },
                {
                  "value": "bottom",
                  "description": ""
                },
                {
                  "value": "undocked",
                  "description": ""
                },
                {
                  "value": "detach",
                  "description": ""
                }
              ]
            },
            {
              "name": "activate",
              "description": "Whether to bring the opened devtools window to the foreground. The default is `true`.",
              "required": false,
              "additionalTags": [],
              "collection": false,
              "type": "Boolean"
            }
          ]
        }
      ],
      "returns": null,
      "additionalTags": [],
      "apiType": "instanceMethod",
      "fullSignature": "webContents.openDevTools([options])",
      "tldr": "Opens the devtools.\n\nWhen `contents` is a `<webview>` tag, the `mode` would be `detach` by default, explicitly passing an empty `mode` can force using last used dock state.",
      "slug": "webcontentsopendevtoolsoptions",
      "url": "https://electronjs.org/docs/api/web-contents#webcontentsopendevtoolsoptions",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:openDevTools",
        "api:webcontentsopendevtoolsoptions",
        "api:webContents.openDevTools([options])",
        "doc:openDevTools",
        "doc:webcontentsopendevtoolsoptions",
        "doc:webContents.openDevTools([options])"
      ]
    },
    {
      "objectID": "api-web-contents#webcontentsclosedevtools",
      "name": "closeDevTools",
      "signature": "()",
      "description": "Closes the devtools.",
      "parameters": [],
      "returns": null,
      "additionalTags": [],
      "apiType": "instanceMethod",
      "fullSignature": "webContents.closeDevTools()",
      "tldr": "Closes the devtools.",
      "slug": "webcontentsclosedevtools",
      "url": "https://electronjs.org/docs/api/web-contents#webcontentsclosedevtools",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:closeDevTools",
        "api:webcontentsclosedevtools",
        "api:webContents.closeDevTools()",
        "doc:closeDevTools",
        "doc:webcontentsclosedevtools",
        "doc:webContents.closeDevTools()"
      ]
    },
    {
      "objectID": "api-web-contents#webcontentsisdevtoolsopened",
      "name": "isDevToolsOpened",
      "signature": "()",
      "description": "Whether the devtools is opened.",
      "parameters": [],
      "returns": {
        "collection": false,
        "type": "Boolean"
      },
      "additionalTags": [],
      "apiType": "instanceMethod",
      "fullSignature": "webContents.isDevToolsOpened()",
      "tldr": "Whether the devtools is opened.",
      "slug": "webcontentsisdevtoolsopened",
      "url": "https://electronjs.org/docs/api/web-contents#webcontentsisdevtoolsopened",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:isDevToolsOpened",
        "api:webcontentsisdevtoolsopened",
        "api:webContents.isDevToolsOpened()",
        "doc:isDevToolsOpened",
        "doc:webcontentsisdevtoolsopened",
        "doc:webContents.isDevToolsOpened()"
      ]
    },
    {
      "objectID": "api-web-contents#webcontentsisdevtoolsfocused",
      "name": "isDevToolsFocused",
      "signature": "()",
      "description": "Whether the devtools view is focused .",
      "parameters": [],
      "returns": {
        "collection": false,
        "type": "Boolean"
      },
      "additionalTags": [],
      "apiType": "instanceMethod",
      "fullSignature": "webContents.isDevToolsFocused()",
      "tldr": "Whether the devtools view is focused .",
      "slug": "webcontentsisdevtoolsfocused",
      "url": "https://electronjs.org/docs/api/web-contents#webcontentsisdevtoolsfocused",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:isDevToolsFocused",
        "api:webcontentsisdevtoolsfocused",
        "api:webContents.isDevToolsFocused()",
        "doc:isDevToolsFocused",
        "doc:webcontentsisdevtoolsfocused",
        "doc:webContents.isDevToolsFocused()"
      ]
    },
    {
      "objectID": "api-web-contents#webcontentstoggledevtools",
      "name": "toggleDevTools",
      "signature": "()",
      "description": "Toggles the developer tools.",
      "parameters": [],
      "returns": null,
      "additionalTags": [],
      "apiType": "instanceMethod",
      "fullSignature": "webContents.toggleDevTools()",
      "tldr": "Toggles the developer tools.",
      "slug": "webcontentstoggledevtools",
      "url": "https://electronjs.org/docs/api/web-contents#webcontentstoggledevtools",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:toggleDevTools",
        "api:webcontentstoggledevtools",
        "api:webContents.toggleDevTools()",
        "doc:toggleDevTools",
        "doc:webcontentstoggledevtools",
        "doc:webContents.toggleDevTools()"
      ]
    },
    {
      "objectID": "api-web-contents#webcontentsinspectelementx-y",
      "name": "inspectElement",
      "signature": "(x, y)",
      "description": "Starts inspecting element at position (`x`, `y`).",
      "parameters": [
        {
          "name": "x",
          "description": "",
          "required": true,
          "collection": false,
          "type": "Integer"
        },
        {
          "name": "y",
          "description": "",
          "required": true,
          "collection": false,
          "type": "Integer"
        }
      ],
      "returns": null,
      "additionalTags": [],
      "apiType": "instanceMethod",
      "fullSignature": "webContents.inspectElement(x, y)",
      "tldr": "Starts inspecting element at position (`x`, `y`).",
      "slug": "webcontentsinspectelementx-y",
      "url": "https://electronjs.org/docs/api/web-contents#webcontentsinspectelementx-y",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:inspectElement",
        "api:webcontentsinspectelementx-y",
        "api:webContents.inspectElement(x, y)",
        "doc:inspectElement",
        "doc:webcontentsinspectelementx-y",
        "doc:webContents.inspectElement(x, y)"
      ]
    },
    {
      "objectID": "api-web-contents#webcontentsinspectsharedworker",
      "name": "inspectSharedWorker",
      "signature": "()",
      "description": "Opens the developer tools for the shared worker context.",
      "parameters": [],
      "returns": null,
      "additionalTags": [],
      "apiType": "instanceMethod",
      "fullSignature": "webContents.inspectSharedWorker()",
      "tldr": "Opens the developer tools for the shared worker context.",
      "slug": "webcontentsinspectsharedworker",
      "url": "https://electronjs.org/docs/api/web-contents#webcontentsinspectsharedworker",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:inspectSharedWorker",
        "api:webcontentsinspectsharedworker",
        "api:webContents.inspectSharedWorker()",
        "doc:inspectSharedWorker",
        "doc:webcontentsinspectsharedworker",
        "doc:webContents.inspectSharedWorker()"
      ]
    },
    {
      "objectID": "api-web-contents#webcontentsinspectserviceworker",
      "name": "inspectServiceWorker",
      "signature": "()",
      "description": "Opens the developer tools for the service worker context.",
      "parameters": [],
      "returns": null,
      "additionalTags": [],
      "apiType": "instanceMethod",
      "fullSignature": "webContents.inspectServiceWorker()",
      "tldr": "Opens the developer tools for the service worker context.",
      "slug": "webcontentsinspectserviceworker",
      "url": "https://electronjs.org/docs/api/web-contents#webcontentsinspectserviceworker",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:inspectServiceWorker",
        "api:webcontentsinspectserviceworker",
        "api:webContents.inspectServiceWorker()",
        "doc:inspectServiceWorker",
        "doc:webcontentsinspectserviceworker",
        "doc:webContents.inspectServiceWorker()"
      ]
    },
    {
      "objectID": "api-web-contents#webcontentssendchannel-args",
      "name": "send",
      "signature": "(channel, ...args)",
      "description": "Send an asynchronous message to renderer process via `channel`, you can also send arbitrary arguments. Arguments will be serialized in JSON internally and hence no functions or prototype chain will be included.\n\nThe renderer process can handle the message by listening to `channel` with the `ipcRenderer` module.\n\nAn example of sending messages from the main process to the renderer process:",
      "parameters": [
        {
          "name": "channel",
          "description": "",
          "required": true,
          "collection": false,
          "type": "String",
          "possibleValues": null
        },
        {
          "name": "...args",
          "description": "",
          "required": true,
          "collection": true,
          "type": "any"
        }
      ],
      "returns": null,
      "additionalTags": [],
      "apiType": "instanceMethod",
      "fullSignature": "webContents.send(channel, ...args)",
      "tldr": "Send an asynchronous message to renderer process via `channel`, you can also send arbitrary arguments.",
      "slug": "webcontentssendchannel-args",
      "url": "https://electronjs.org/docs/api/web-contents#webcontentssendchannel-args",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:send",
        "api:webcontentssendchannel-args",
        "api:webContents.send(channel, ...args)",
        "doc:send",
        "doc:webcontentssendchannel-args",
        "doc:webContents.send(channel, ...args)"
      ]
    },
    {
      "objectID": "api-web-contents#webcontentssendtoframeframeid-channel-args",
      "name": "sendToFrame",
      "signature": "(frameId, channel, ...args)",
      "description": "Send an asynchronous message to a specific frame in a renderer process via `channel`. Arguments will be serialized as JSON internally and as such no functions or prototype chains will be included.\n\nThe renderer process can handle the message by listening to `channel` with the `ipcRenderer` module.\n\nIf you want to get the `frameId` of a given renderer context you should use the `webFrame.routingId` value.  E.g.\n\nYou can also read `frameId` from all incoming IPC messages in the main process.",
      "parameters": [
        {
          "name": "frameId",
          "description": "",
          "required": true,
          "collection": false,
          "type": "Integer"
        },
        {
          "name": "channel",
          "description": "",
          "required": true,
          "collection": false,
          "type": "String",
          "possibleValues": null
        },
        {
          "name": "...args",
          "description": "",
          "required": true,
          "collection": true,
          "type": "any"
        }
      ],
      "returns": null,
      "additionalTags": [],
      "apiType": "instanceMethod",
      "fullSignature": "webContents.sendToFrame(frameId, channel, ...args)",
      "tldr": "Send an asynchronous message to a specific frame in a renderer process via `channel`.",
      "slug": "webcontentssendtoframeframeid-channel-args",
      "url": "https://electronjs.org/docs/api/web-contents#webcontentssendtoframeframeid-channel-args",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:sendToFrame",
        "api:webcontentssendtoframeframeid-channel-args",
        "api:webContents.sendToFrame(frameId, channel, ...args)",
        "doc:sendToFrame",
        "doc:webcontentssendtoframeframeid-channel-args",
        "doc:webContents.sendToFrame(frameId, channel, ...args)"
      ]
    },
    {
      "objectID": "api-web-contents#webcontentsenabledeviceemulationparameters",
      "name": "enableDeviceEmulation",
      "signature": "(parameters)",
      "description": "Enable device emulation with the given parameters.",
      "parameters": [
        {
          "name": "parameters",
          "description": "",
          "required": true,
          "collection": false,
          "type": "Object",
          "properties": [
            {
              "name": "screenPosition",
              "description": "Specify the screen type to emulate (default: `desktop`):",
              "required": true,
              "additionalTags": [],
              "collection": false,
              "type": "String",
              "possibleValues": [
                {
                  "value": "desktop",
                  "description": "Desktop screen type."
                },
                {
                  "value": "mobile",
                  "description": "Mobile screen type."
                }
              ]
            },
            {
              "name": "screenSize",
              "description": "Set the emulated screen size (screenPosition == mobile).",
              "required": true,
              "additionalTags": [],
              "collection": false,
              "type": "Size"
            },
            {
              "name": "viewPosition",
              "description": "Position the view on the screen (screenPosition == mobile) (default: `{ x: 0, y: 0 }`).",
              "required": true,
              "additionalTags": [],
              "collection": false,
              "type": "Point"
            },
            {
              "name": "deviceScaleFactor",
              "description": "Set the device scale factor (if zero defaults to original device scale factor) (default: `0`).",
              "required": true,
              "additionalTags": [],
              "collection": false,
              "type": "Integer"
            },
            {
              "name": "viewSize",
              "description": "Set the emulated view size (empty means no override)",
              "required": true,
              "additionalTags": [],
              "collection": false,
              "type": "Size"
            },
            {
              "name": "scale",
              "description": "Scale of emulated view inside available space (not in fit to view mode) (default: `1`).",
              "required": true,
              "additionalTags": [],
              "collection": false,
              "type": "Float"
            }
          ]
        }
      ],
      "returns": null,
      "additionalTags": [],
      "apiType": "instanceMethod",
      "fullSignature": "webContents.enableDeviceEmulation(parameters)",
      "tldr": "Enable device emulation with the given parameters.",
      "slug": "webcontentsenabledeviceemulationparameters",
      "url": "https://electronjs.org/docs/api/web-contents#webcontentsenabledeviceemulationparameters",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:enableDeviceEmulation",
        "api:webcontentsenabledeviceemulationparameters",
        "api:webContents.enableDeviceEmulation(parameters)",
        "doc:enableDeviceEmulation",
        "doc:webcontentsenabledeviceemulationparameters",
        "doc:webContents.enableDeviceEmulation(parameters)"
      ]
    },
    {
      "objectID": "api-web-contents#webcontentsdisabledeviceemulation",
      "name": "disableDeviceEmulation",
      "signature": "()",
      "description": "Disable device emulation enabled by `webContents.enableDeviceEmulation`.",
      "parameters": [],
      "returns": null,
      "additionalTags": [],
      "apiType": "instanceMethod",
      "fullSignature": "webContents.disableDeviceEmulation()",
      "tldr": "Disable device emulation enabled by `webContents.enableDeviceEmulation`.",
      "slug": "webcontentsdisabledeviceemulation",
      "url": "https://electronjs.org/docs/api/web-contents#webcontentsdisabledeviceemulation",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:disableDeviceEmulation",
        "api:webcontentsdisabledeviceemulation",
        "api:webContents.disableDeviceEmulation()",
        "doc:disableDeviceEmulation",
        "doc:webcontentsdisabledeviceemulation",
        "doc:webContents.disableDeviceEmulation()"
      ]
    },
    {
      "objectID": "api-web-contents#webcontentssendinputeventinputevent",
      "name": "sendInputEvent",
      "signature": "(inputEvent)",
      "description": "Sends an input `event` to the page. **Note:** The `BrowserWindow` containing the contents needs to be focused for `sendInputEvent()` to work.",
      "parameters": [
        {
          "name": "inputEvent",
          "description": "",
          "required": true,
          "collection": false,
          "type": [
            {
              "collection": false,
              "type": "MouseInputEvent"
            },
            {
              "collection": false,
              "type": "MouseWheelInputEvent"
            },
            {
              "collection": false,
              "type": "KeyboardInputEvent"
            }
          ]
        }
      ],
      "returns": null,
      "additionalTags": [],
      "apiType": "instanceMethod",
      "fullSignature": "webContents.sendInputEvent(inputEvent)",
      "tldr": "Sends an input `event` to the page.",
      "slug": "webcontentssendinputeventinputevent",
      "url": "https://electronjs.org/docs/api/web-contents#webcontentssendinputeventinputevent",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:sendInputEvent",
        "api:webcontentssendinputeventinputevent",
        "api:webContents.sendInputEvent(inputEvent)",
        "doc:sendInputEvent",
        "doc:webcontentssendinputeventinputevent",
        "doc:webContents.sendInputEvent(inputEvent)"
      ]
    },
    {
      "objectID": "api-web-contents#webcontentsbeginframesubscriptiononlydirty-callback",
      "name": "beginFrameSubscription",
      "signature": "([onlyDirty ,]callback)",
      "description": "Begin subscribing for presentation events and captured frames, the `callback` will be called with `callback(image, dirtyRect)` when there is a presentation event.\n\nThe `image` is an instance of NativeImage that stores the captured frame.\n\nThe `dirtyRect` is an object with `x, y, width, height` properties that describes which part of the page was repainted. If `onlyDirty` is set to `true`, `image` will only contain the repainted area. `onlyDirty` defaults to `false`.",
      "parameters": [
        {
          "name": "onlyDirty",
          "description": "Defaults to `false`.",
          "required": false,
          "collection": false,
          "type": "Boolean"
        },
        {
          "name": "callback",
          "description": "",
          "required": true,
          "collection": false,
          "type": "Function",
          "parameters": [
            {
              "name": "image",
              "description": "",
              "required": true,
              "collection": false,
              "type": "NativeImage"
            },
            {
              "name": "dirtyRect",
              "description": "",
              "required": true,
              "collection": false,
              "type": "Rectangle"
            }
          ],
          "returns": null
        }
      ],
      "returns": null,
      "additionalTags": [],
      "apiType": "instanceMethod",
      "fullSignature": "webContents.beginFrameSubscription([onlyDirty ,]callback)",
      "tldr": "Begin subscribing for presentation events and captured frames, the `callback` will be called with `callback(image, dirtyRect)` when there is a presentation event.\n\nThe `image` is an instance of NativeImage that stores the captured frame.\n\nThe `dirtyRect` is an object with `x, y, width, height` properties that describes which part of the page was repainted.",
      "slug": "webcontentsbeginframesubscriptiononlydirty-callback",
      "url": "https://electronjs.org/docs/api/web-contents#webcontentsbeginframesubscriptiononlydirty-callback",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:beginFrameSubscription",
        "api:webcontentsbeginframesubscriptiononlydirty-callback",
        "api:webContents.beginFrameSubscription([onlyDirty ,]callback)",
        "doc:beginFrameSubscription",
        "doc:webcontentsbeginframesubscriptiononlydirty-callback",
        "doc:webContents.beginFrameSubscription([onlyDirty ,]callback)"
      ]
    },
    {
      "objectID": "api-web-contents#webcontentsendframesubscription",
      "name": "endFrameSubscription",
      "signature": "()",
      "description": "End subscribing for frame presentation events.",
      "parameters": [],
      "returns": null,
      "additionalTags": [],
      "apiType": "instanceMethod",
      "fullSignature": "webContents.endFrameSubscription()",
      "tldr": "End subscribing for frame presentation events.",
      "slug": "webcontentsendframesubscription",
      "url": "https://electronjs.org/docs/api/web-contents#webcontentsendframesubscription",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:endFrameSubscription",
        "api:webcontentsendframesubscription",
        "api:webContents.endFrameSubscription()",
        "doc:endFrameSubscription",
        "doc:webcontentsendframesubscription",
        "doc:webContents.endFrameSubscription()"
      ]
    },
    {
      "objectID": "api-web-contents#webcontentsstartdragitem",
      "name": "startDrag",
      "signature": "(item)",
      "description": "Sets the `item` as dragging item for current drag-drop operation, `file` is the absolute path of the file to be dragged, and `icon` is the image showing under the cursor when dragging.",
      "parameters": [
        {
          "name": "item",
          "description": "",
          "required": true,
          "collection": false,
          "type": "Object",
          "properties": [
            {
              "name": "file",
              "description": "The path(s) to the file(s) being dragged.",
              "required": true,
              "additionalTags": [],
              "collection": false,
              "type": [
                {
                  "collection": true,
                  "type": "String",
                  "possibleValues": null
                },
                {
                  "collection": false,
                  "type": "String",
                  "possibleValues": null
                }
              ]
            },
            {
              "name": "icon",
              "description": "The image must be non-empty on macOS.",
              "required": true,
              "additionalTags": [],
              "collection": false,
              "type": "NativeImage"
            }
          ]
        }
      ],
      "returns": null,
      "additionalTags": [],
      "apiType": "instanceMethod",
      "fullSignature": "webContents.startDrag(item)",
      "tldr": "Sets the `item` as dragging item for current drag-drop operation, `file` is the absolute path of the file to be dragged, and `icon` is the image showing under the cursor when dragging.",
      "slug": "webcontentsstartdragitem",
      "url": "https://electronjs.org/docs/api/web-contents#webcontentsstartdragitem",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:startDrag",
        "api:webcontentsstartdragitem",
        "api:webContents.startDrag(item)",
        "doc:startDrag",
        "doc:webcontentsstartdragitem",
        "doc:webContents.startDrag(item)"
      ]
    },
    {
      "objectID": "api-web-contents#webcontentssavepagefullpath-savetype",
      "name": "savePage",
      "signature": "(fullPath, saveType)",
      "description": "resolves if the page is saved.",
      "parameters": [
        {
          "name": "fullPath",
          "description": "The full file path.",
          "required": true,
          "collection": false,
          "type": "String",
          "possibleValues": null
        },
        {
          "name": "saveType",
          "description": "Specify the save type.",
          "required": true,
          "collection": false,
          "type": "String",
          "possibleValues": [
            {
              "value": "HTMLOnly",
              "description": "Save only the HTML of the page."
            },
            {
              "value": "HTMLComplete",
              "description": "Save complete-html page."
            },
            {
              "value": "MHTML",
              "description": "Save complete-html page as MHTML."
            }
          ]
        }
      ],
      "returns": {
        "collection": false,
        "type": "Promise",
        "innerTypes": [
          {
            "collection": false,
            "type": "void"
          }
        ]
      },
      "additionalTags": [],
      "apiType": "instanceMethod",
      "fullSignature": "webContents.savePage(fullPath, saveType)",
      "tldr": "resolves if the page is saved.",
      "slug": "webcontentssavepagefullpath-savetype",
      "url": "https://electronjs.org/docs/api/web-contents#webcontentssavepagefullpath-savetype",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:savePage",
        "api:webcontentssavepagefullpath-savetype",
        "api:webContents.savePage(fullPath, saveType)",
        "doc:savePage",
        "doc:webcontentssavepagefullpath-savetype",
        "doc:webContents.savePage(fullPath, saveType)"
      ]
    },
    {
      "objectID": "api-web-contents#webcontentsshowdefinitionforselection",
      "name": "showDefinitionForSelection",
      "signature": "()",
      "description": "Shows pop-up dictionary that searches the selected word on the page.",
      "parameters": [],
      "returns": null,
      "additionalTags": [
        "os_macos"
      ],
      "apiType": "instanceMethod",
      "fullSignature": "webContents.showDefinitionForSelection()",
      "tldr": "Shows pop-up dictionary that searches the selected word on the page.",
      "slug": "webcontentsshowdefinitionforselection",
      "url": "https://electronjs.org/docs/api/web-contents#webcontentsshowdefinitionforselection",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:showDefinitionForSelection",
        "api:webcontentsshowdefinitionforselection",
        "api:webContents.showDefinitionForSelection()",
        "doc:showDefinitionForSelection",
        "doc:webcontentsshowdefinitionforselection",
        "doc:webContents.showDefinitionForSelection()"
      ]
    },
    {
      "objectID": "api-web-contents#webcontentsisoffscreen",
      "name": "isOffscreen",
      "signature": "()",
      "description": "Indicates whether *offscreen rendering* is enabled.",
      "parameters": [],
      "returns": {
        "collection": false,
        "type": "Boolean"
      },
      "additionalTags": [],
      "apiType": "instanceMethod",
      "fullSignature": "webContents.isOffscreen()",
      "tldr": "Indicates whether *offscreen rendering* is enabled.",
      "slug": "webcontentsisoffscreen",
      "url": "https://electronjs.org/docs/api/web-contents#webcontentsisoffscreen",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:isOffscreen",
        "api:webcontentsisoffscreen",
        "api:webContents.isOffscreen()",
        "doc:isOffscreen",
        "doc:webcontentsisoffscreen",
        "doc:webContents.isOffscreen()"
      ]
    },
    {
      "objectID": "api-web-contents#webcontentsstartpainting",
      "name": "startPainting",
      "signature": "()",
      "description": "If *offscreen rendering* is enabled and not painting, start painting.",
      "parameters": [],
      "returns": null,
      "additionalTags": [],
      "apiType": "instanceMethod",
      "fullSignature": "webContents.startPainting()",
      "tldr": "If *offscreen rendering* is enabled and not painting, start painting.",
      "slug": "webcontentsstartpainting",
      "url": "https://electronjs.org/docs/api/web-contents#webcontentsstartpainting",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:startPainting",
        "api:webcontentsstartpainting",
        "api:webContents.startPainting()",
        "doc:startPainting",
        "doc:webcontentsstartpainting",
        "doc:webContents.startPainting()"
      ]
    },
    {
      "objectID": "api-web-contents#webcontentsstoppainting",
      "name": "stopPainting",
      "signature": "()",
      "description": "If *offscreen rendering* is enabled and painting, stop painting.",
      "parameters": [],
      "returns": null,
      "additionalTags": [],
      "apiType": "instanceMethod",
      "fullSignature": "webContents.stopPainting()",
      "tldr": "If *offscreen rendering* is enabled and painting, stop painting.",
      "slug": "webcontentsstoppainting",
      "url": "https://electronjs.org/docs/api/web-contents#webcontentsstoppainting",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:stopPainting",
        "api:webcontentsstoppainting",
        "api:webContents.stopPainting()",
        "doc:stopPainting",
        "doc:webcontentsstoppainting",
        "doc:webContents.stopPainting()"
      ]
    },
    {
      "objectID": "api-web-contents#webcontentsispainting",
      "name": "isPainting",
      "signature": "()",
      "description": "If *offscreen rendering* is enabled returns whether it is currently painting.",
      "parameters": [],
      "returns": {
        "collection": false,
        "type": "Boolean"
      },
      "additionalTags": [],
      "apiType": "instanceMethod",
      "fullSignature": "webContents.isPainting()",
      "tldr": "If *offscreen rendering* is enabled returns whether it is currently painting.",
      "slug": "webcontentsispainting",
      "url": "https://electronjs.org/docs/api/web-contents#webcontentsispainting",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:isPainting",
        "api:webcontentsispainting",
        "api:webContents.isPainting()",
        "doc:isPainting",
        "doc:webcontentsispainting",
        "doc:webContents.isPainting()"
      ]
    },
    {
      "objectID": "api-web-contents#webcontentssetframeratefps",
      "name": "setFrameRate",
      "signature": "(fps)",
      "description": "If *offscreen rendering* is enabled sets the frame rate to the specified number. Only values between 1 and 60 are accepted.\n\n**Deprecated**",
      "parameters": [
        {
          "name": "fps",
          "description": "",
          "required": true,
          "collection": false,
          "type": "Integer"
        }
      ],
      "returns": null,
      "additionalTags": [],
      "apiType": "instanceMethod",
      "fullSignature": "webContents.setFrameRate(fps)",
      "tldr": "If *offscreen rendering* is enabled sets the frame rate to the specified number.",
      "slug": "webcontentssetframeratefps",
      "url": "https://electronjs.org/docs/api/web-contents#webcontentssetframeratefps",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:setFrameRate",
        "api:webcontentssetframeratefps",
        "api:webContents.setFrameRate(fps)",
        "doc:setFrameRate",
        "doc:webcontentssetframeratefps",
        "doc:webContents.setFrameRate(fps)"
      ]
    },
    {
      "objectID": "api-web-contents#webcontentsgetframerate",
      "name": "getFrameRate",
      "signature": "()",
      "description": "If *offscreen rendering* is enabled returns the current frame rate.\n\n**Deprecated**",
      "parameters": [],
      "returns": {
        "collection": false,
        "type": "Integer"
      },
      "additionalTags": [],
      "apiType": "instanceMethod",
      "fullSignature": "webContents.getFrameRate()",
      "tldr": "If *offscreen rendering* is enabled returns the current frame rate.\n\n**Deprecated**.",
      "slug": "webcontentsgetframerate",
      "url": "https://electronjs.org/docs/api/web-contents#webcontentsgetframerate",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:getFrameRate",
        "api:webcontentsgetframerate",
        "api:webContents.getFrameRate()",
        "doc:getFrameRate",
        "doc:webcontentsgetframerate",
        "doc:webContents.getFrameRate()"
      ]
    },
    {
      "objectID": "api-web-contents#webcontentsinvalidate",
      "name": "invalidate",
      "signature": "()",
      "description": "Schedules a full repaint of the window this web contents is in.\n\nIf *offscreen rendering* is enabled invalidates the frame and generates a new one through the `'paint'` event.",
      "parameters": [],
      "returns": null,
      "additionalTags": [],
      "apiType": "instanceMethod",
      "fullSignature": "webContents.invalidate()",
      "tldr": "Schedules a full repaint of the window this web contents is in.\n\nIf *offscreen rendering* is enabled invalidates the frame and generates a new one through the `'paint'` event.",
      "slug": "webcontentsinvalidate",
      "url": "https://electronjs.org/docs/api/web-contents#webcontentsinvalidate",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:invalidate",
        "api:webcontentsinvalidate",
        "api:webContents.invalidate()",
        "doc:invalidate",
        "doc:webcontentsinvalidate",
        "doc:webContents.invalidate()"
      ]
    },
    {
      "objectID": "api-web-contents#webcontentsgetwebrtciphandlingpolicy",
      "name": "getWebRTCIPHandlingPolicy",
      "signature": "()",
      "description": "Returns the WebRTC IP Handling Policy.",
      "parameters": [],
      "returns": {
        "collection": false,
        "type": "String",
        "possibleValues": null
      },
      "additionalTags": [],
      "apiType": "instanceMethod",
      "fullSignature": "webContents.getWebRTCIPHandlingPolicy()",
      "tldr": "Returns the WebRTC IP Handling Policy.",
      "slug": "webcontentsgetwebrtciphandlingpolicy",
      "url": "https://electronjs.org/docs/api/web-contents#webcontentsgetwebrtciphandlingpolicy",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:getWebRTCIPHandlingPolicy",
        "api:webcontentsgetwebrtciphandlingpolicy",
        "api:webContents.getWebRTCIPHandlingPolicy()",
        "doc:getWebRTCIPHandlingPolicy",
        "doc:webcontentsgetwebrtciphandlingpolicy",
        "doc:webContents.getWebRTCIPHandlingPolicy()"
      ]
    },
    {
      "objectID": "api-web-contents#webcontentssetwebrtciphandlingpolicypolicy",
      "name": "setWebRTCIPHandlingPolicy",
      "signature": "(policy)",
      "description": "Setting the WebRTC IP handling policy allows you to control which IPs are exposed via WebRTC. See BrowserLeaks for more details.",
      "parameters": [
        {
          "name": "policy",
          "description": "Specify the WebRTC IP Handling Policy.",
          "required": true,
          "collection": false,
          "type": "String",
          "possibleValues": [
            {
              "value": "default",
              "description": "Exposes user's public and local IPs. This is the default behavior. When this policy is used, WebRTC has the right to enumerate all interfaces and bind them to discover public interfaces."
            },
            {
              "value": "default_public_interface_only",
              "description": "Exposes user's public IP, but does not expose user's local IP. When this policy is used, WebRTC should only use the default route used by http. This doesn't expose any local addresses."
            },
            {
              "value": "default_public_and_private_interfaces",
              "description": "Exposes user's public and local IPs. When this policy is used, WebRTC should only use the default route used by http. This also exposes the associated default private address. Default route is the route chosen by the OS on a multi-homed endpoint."
            },
            {
              "value": "disable_non_proxied_udp",
              "description": "Does not expose public or local IPs. When this policy is used, WebRTC should only use TCP to contact peers or servers unless the proxy server supports UDP."
            }
          ]
        }
      ],
      "returns": null,
      "additionalTags": [],
      "apiType": "instanceMethod",
      "fullSignature": "webContents.setWebRTCIPHandlingPolicy(policy)",
      "tldr": "Setting the WebRTC IP handling policy allows you to control which IPs are exposed via WebRTC.",
      "slug": "webcontentssetwebrtciphandlingpolicypolicy",
      "url": "https://electronjs.org/docs/api/web-contents#webcontentssetwebrtciphandlingpolicypolicy",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:setWebRTCIPHandlingPolicy",
        "api:webcontentssetwebrtciphandlingpolicypolicy",
        "api:webContents.setWebRTCIPHandlingPolicy(policy)",
        "doc:setWebRTCIPHandlingPolicy",
        "doc:webcontentssetwebrtciphandlingpolicypolicy",
        "doc:webContents.setWebRTCIPHandlingPolicy(policy)"
      ]
    },
    {
      "objectID": "api-web-contents#webcontentsgetosprocessid",
      "name": "getOSProcessId",
      "signature": "()",
      "description": "The operating system `pid` of the associated renderer process.",
      "parameters": [],
      "returns": {
        "collection": false,
        "type": "Integer"
      },
      "additionalTags": [],
      "apiType": "instanceMethod",
      "fullSignature": "webContents.getOSProcessId()",
      "tldr": "The operating system `pid` of the associated renderer process.",
      "slug": "webcontentsgetosprocessid",
      "url": "https://electronjs.org/docs/api/web-contents#webcontentsgetosprocessid",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:getOSProcessId",
        "api:webcontentsgetosprocessid",
        "api:webContents.getOSProcessId()",
        "doc:getOSProcessId",
        "doc:webcontentsgetosprocessid",
        "doc:webContents.getOSProcessId()"
      ]
    },
    {
      "objectID": "api-web-contents#webcontentsgetprocessid",
      "name": "getProcessId",
      "signature": "()",
      "description": "The Chromium internal `pid` of the associated renderer. Can be compared to the `frameProcessId` passed by frame specific navigation events (e.g. `did-frame-navigate`)",
      "parameters": [],
      "returns": {
        "collection": false,
        "type": "Integer"
      },
      "additionalTags": [],
      "apiType": "instanceMethod",
      "fullSignature": "webContents.getProcessId()",
      "tldr": "The Chromium internal `pid` of the associated renderer.",
      "slug": "webcontentsgetprocessid",
      "url": "https://electronjs.org/docs/api/web-contents#webcontentsgetprocessid",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:getProcessId",
        "api:webcontentsgetprocessid",
        "api:webContents.getProcessId()",
        "doc:getProcessId",
        "doc:webcontentsgetprocessid",
        "doc:webContents.getProcessId()"
      ]
    },
    {
      "objectID": "api-web-contents#webcontentstakeheapsnapshotfilepath",
      "name": "takeHeapSnapshot",
      "signature": "(filePath)",
      "description": "Indicates whether the snapshot has been created successfully.\n\nTakes a V8 heap snapshot and saves it to `filePath`.",
      "parameters": [
        {
          "name": "filePath",
          "description": "Path to the output file.",
          "required": true,
          "collection": false,
          "type": "String",
          "possibleValues": null
        }
      ],
      "returns": {
        "collection": false,
        "type": "Promise",
        "innerTypes": [
          {
            "collection": false,
            "type": "void"
          }
        ]
      },
      "additionalTags": [],
      "apiType": "instanceMethod",
      "fullSignature": "webContents.takeHeapSnapshot(filePath)",
      "tldr": "Indicates whether the snapshot has been created successfully.\n\nTakes a V8 heap snapshot and saves it to `filePath`.",
      "slug": "webcontentstakeheapsnapshotfilepath",
      "url": "https://electronjs.org/docs/api/web-contents#webcontentstakeheapsnapshotfilepath",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:takeHeapSnapshot",
        "api:webcontentstakeheapsnapshotfilepath",
        "api:webContents.takeHeapSnapshot(filePath)",
        "doc:takeHeapSnapshot",
        "doc:webcontentstakeheapsnapshotfilepath",
        "doc:webContents.takeHeapSnapshot(filePath)"
      ]
    },
    {
      "objectID": "api-web-contents#webcontentssetbackgroundthrottlingallowed",
      "name": "setBackgroundThrottling",
      "signature": "(allowed)",
      "description": "Controls whether or not this WebContents will throttle animations and timers when the page becomes backgrounded. This also affects the Page Visibility API.",
      "parameters": [
        {
          "name": "allowed",
          "description": "",
          "required": true,
          "collection": false,
          "type": "Boolean"
        }
      ],
      "returns": null,
      "additionalTags": [],
      "apiType": "instanceMethod",
      "fullSignature": "webContents.setBackgroundThrottling(allowed)",
      "tldr": "Controls whether or not this WebContents will throttle animations and timers when the page becomes backgrounded.",
      "slug": "webcontentssetbackgroundthrottlingallowed",
      "url": "https://electronjs.org/docs/api/web-contents#webcontentssetbackgroundthrottlingallowed",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:setBackgroundThrottling",
        "api:webcontentssetbackgroundthrottlingallowed",
        "api:webContents.setBackgroundThrottling(allowed)",
        "doc:setBackgroundThrottling",
        "doc:webcontentssetbackgroundthrottlingallowed",
        "doc:webContents.setBackgroundThrottling(allowed)"
      ]
    },
    {
      "objectID": "api-web-contents#webcontentsgettype",
      "name": "getType",
      "signature": "()",
      "description": "the type of the webContent. Can be `backgroundPage`, `window`, `browserView`, `remote`, `webview` or `offscreen`.",
      "parameters": [],
      "returns": {
        "collection": false,
        "type": "String",
        "possibleValues": [
          {
            "value": "backgroundPage",
            "description": ""
          },
          {
            "value": "window",
            "description": ""
          },
          {
            "value": "browserView",
            "description": ""
          },
          {
            "value": "remote",
            "description": ""
          },
          {
            "value": "webview",
            "description": ""
          },
          {
            "value": "offscreen",
            "description": ""
          }
        ]
      },
      "additionalTags": [],
      "apiType": "instanceMethod",
      "fullSignature": "webContents.getType()",
      "tldr": "the type of the webContent.",
      "slug": "webcontentsgettype",
      "url": "https://electronjs.org/docs/api/web-contents#webcontentsgettype",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:getType",
        "api:webcontentsgettype",
        "api:webContents.getType()",
        "doc:getType",
        "doc:webcontentsgettype",
        "doc:webContents.getType()"
      ]
    },
    {
      "objectID": "api-web-contents#event-did-finish-load",
      "name": "did-finish-load",
      "description": "Emitted when the navigation is done, i.e. the spinner of the tab has stopped spinning, and the `onload` event was dispatched.",
      "parameters": [],
      "additionalTags": [],
      "apiType": "event",
      "fullSignature": "webContents.on('did-finish-load')",
      "url": "https://electronjs.org/docs/api/web-contents#event-did-finish-load",
      "slug": "webcontentsondid-finish-load",
      "tldr": "Emitted when the navigation is done, i.e.",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:did-finish-load",
        "api:webcontentsondid-finish-load",
        "api:webContents.on('did-finish-load')",
        "doc:did-finish-load",
        "doc:webcontentsondid-finish-load",
        "doc:webContents.on('did-finish-load')"
      ]
    },
    {
      "objectID": "api-web-contents#event-did-fail-load",
      "name": "did-fail-load",
      "description": "This event is like `did-finish-load` but emitted when the load failed. The full list of error codes and their meaning is available here.",
      "parameters": [
        {
          "name": "event",
          "description": "",
          "collection": false,
          "type": "Event",
          "required": true
        },
        {
          "name": "errorCode",
          "description": "",
          "collection": false,
          "type": "Integer",
          "required": true
        },
        {
          "name": "errorDescription",
          "description": "",
          "collection": false,
          "type": "String",
          "possibleValues": null,
          "required": true
        },
        {
          "name": "validatedURL",
          "description": "",
          "collection": false,
          "type": "String",
          "possibleValues": null,
          "required": true
        },
        {
          "name": "isMainFrame",
          "description": "",
          "collection": false,
          "type": "Boolean",
          "required": true
        },
        {
          "name": "frameProcessId",
          "description": "",
          "collection": false,
          "type": "Integer",
          "required": true
        },
        {
          "name": "frameRoutingId",
          "description": "",
          "collection": false,
          "type": "Integer",
          "required": true
        }
      ],
      "additionalTags": [],
      "apiType": "event",
      "fullSignature": "webContents.on('did-fail-load')",
      "url": "https://electronjs.org/docs/api/web-contents#event-did-fail-load",
      "slug": "webcontentsondid-fail-load",
      "tldr": "This event is like `did-finish-load` but emitted when the load failed.",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:did-fail-load",
        "api:webcontentsondid-fail-load",
        "api:webContents.on('did-fail-load')",
        "doc:did-fail-load",
        "doc:webcontentsondid-fail-load",
        "doc:webContents.on('did-fail-load')"
      ]
    },
    {
      "objectID": "api-web-contents#event-did-fail-provisional-load",
      "name": "did-fail-provisional-load",
      "description": "This event is like `did-fail-load` but emitted when the load was cancelled (e.g. `window.stop()` was invoked).",
      "parameters": [
        {
          "name": "event",
          "description": "",
          "collection": false,
          "type": "Event",
          "required": true
        },
        {
          "name": "errorCode",
          "description": "",
          "collection": false,
          "type": "Integer",
          "required": true
        },
        {
          "name": "errorDescription",
          "description": "",
          "collection": false,
          "type": "String",
          "possibleValues": null,
          "required": true
        },
        {
          "name": "validatedURL",
          "description": "",
          "collection": false,
          "type": "String",
          "possibleValues": null,
          "required": true
        },
        {
          "name": "isMainFrame",
          "description": "",
          "collection": false,
          "type": "Boolean",
          "required": true
        },
        {
          "name": "frameProcessId",
          "description": "",
          "collection": false,
          "type": "Integer",
          "required": true
        },
        {
          "name": "frameRoutingId",
          "description": "",
          "collection": false,
          "type": "Integer",
          "required": true
        }
      ],
      "additionalTags": [],
      "apiType": "event",
      "fullSignature": "webContents.on('did-fail-provisional-load')",
      "url": "https://electronjs.org/docs/api/web-contents#event-did-fail-provisional-load",
      "slug": "webcontentsondid-fail-provisional-load",
      "tldr": "This event is like `did-fail-load` but emitted when the load was cancelled (e.g.",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:did-fail-provisional-load",
        "api:webcontentsondid-fail-provisional-load",
        "api:webContents.on('did-fail-provisional-load')",
        "doc:did-fail-provisional-load",
        "doc:webcontentsondid-fail-provisional-load",
        "doc:webContents.on('did-fail-provisional-load')"
      ]
    },
    {
      "objectID": "api-web-contents#event-did-frame-finish-load",
      "name": "did-frame-finish-load",
      "description": "Emitted when a frame has done navigation.",
      "parameters": [
        {
          "name": "event",
          "description": "",
          "collection": false,
          "type": "Event",
          "required": true
        },
        {
          "name": "isMainFrame",
          "description": "",
          "collection": false,
          "type": "Boolean",
          "required": true
        },
        {
          "name": "frameProcessId",
          "description": "",
          "collection": false,
          "type": "Integer",
          "required": true
        },
        {
          "name": "frameRoutingId",
          "description": "",
          "collection": false,
          "type": "Integer",
          "required": true
        }
      ],
      "additionalTags": [],
      "apiType": "event",
      "fullSignature": "webContents.on('did-frame-finish-load')",
      "url": "https://electronjs.org/docs/api/web-contents#event-did-frame-finish-load",
      "slug": "webcontentsondid-frame-finish-load",
      "tldr": "Emitted when a frame has done navigation.",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:did-frame-finish-load",
        "api:webcontentsondid-frame-finish-load",
        "api:webContents.on('did-frame-finish-load')",
        "doc:did-frame-finish-load",
        "doc:webcontentsondid-frame-finish-load",
        "doc:webContents.on('did-frame-finish-load')"
      ]
    },
    {
      "objectID": "api-web-contents#event-did-start-loading",
      "name": "did-start-loading",
      "description": "Corresponds to the points in time when the spinner of the tab started spinning.",
      "parameters": [],
      "additionalTags": [],
      "apiType": "event",
      "fullSignature": "webContents.on('did-start-loading')",
      "url": "https://electronjs.org/docs/api/web-contents#event-did-start-loading",
      "slug": "webcontentsondid-start-loading",
      "tldr": "Corresponds to the points in time when the spinner of the tab started spinning.",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:did-start-loading",
        "api:webcontentsondid-start-loading",
        "api:webContents.on('did-start-loading')",
        "doc:did-start-loading",
        "doc:webcontentsondid-start-loading",
        "doc:webContents.on('did-start-loading')"
      ]
    },
    {
      "objectID": "api-web-contents#event-did-stop-loading",
      "name": "did-stop-loading",
      "description": "Corresponds to the points in time when the spinner of the tab stopped spinning.",
      "parameters": [],
      "additionalTags": [],
      "apiType": "event",
      "fullSignature": "webContents.on('did-stop-loading')",
      "url": "https://electronjs.org/docs/api/web-contents#event-did-stop-loading",
      "slug": "webcontentsondid-stop-loading",
      "tldr": "Corresponds to the points in time when the spinner of the tab stopped spinning.",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:did-stop-loading",
        "api:webcontentsondid-stop-loading",
        "api:webContents.on('did-stop-loading')",
        "doc:did-stop-loading",
        "doc:webcontentsondid-stop-loading",
        "doc:webContents.on('did-stop-loading')"
      ]
    },
    {
      "objectID": "api-web-contents#event-dom-ready",
      "name": "dom-ready",
      "description": "Emitted when the document in the given frame is loaded.",
      "parameters": [
        {
          "name": "event",
          "description": "",
          "collection": false,
          "type": "Event",
          "required": true
        }
      ],
      "additionalTags": [],
      "apiType": "event",
      "fullSignature": "webContents.on('dom-ready')",
      "url": "https://electronjs.org/docs/api/web-contents#event-dom-ready",
      "slug": "webcontentsondom-ready",
      "tldr": "Emitted when the document in the given frame is loaded.",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:dom-ready",
        "api:webcontentsondom-ready",
        "api:webContents.on('dom-ready')",
        "doc:dom-ready",
        "doc:webcontentsondom-ready",
        "doc:webContents.on('dom-ready')"
      ]
    },
    {
      "objectID": "api-web-contents#event-page-title-updated",
      "name": "page-title-updated",
      "description": "Fired when page title is set during navigation. `explicitSet` is false when title is synthesized from file url.",
      "parameters": [
        {
          "name": "event",
          "description": "",
          "collection": false,
          "type": "Event",
          "required": true
        },
        {
          "name": "title",
          "description": "",
          "collection": false,
          "type": "String",
          "possibleValues": null,
          "required": true
        },
        {
          "name": "explicitSet",
          "description": "",
          "collection": false,
          "type": "Boolean",
          "required": true
        }
      ],
      "additionalTags": [],
      "apiType": "event",
      "fullSignature": "webContents.on('page-title-updated')",
      "url": "https://electronjs.org/docs/api/web-contents#event-page-title-updated",
      "slug": "webcontentsonpage-title-updated",
      "tldr": "Fired when page title is set during navigation.",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:page-title-updated",
        "api:webcontentsonpage-title-updated",
        "api:webContents.on('page-title-updated')",
        "doc:page-title-updated",
        "doc:webcontentsonpage-title-updated",
        "doc:webContents.on('page-title-updated')"
      ]
    },
    {
      "objectID": "api-web-contents#event-page-favicon-updated",
      "name": "page-favicon-updated",
      "description": "Emitted when page receives favicon urls.",
      "parameters": [
        {
          "name": "event",
          "description": "",
          "collection": false,
          "type": "Event",
          "required": true
        },
        {
          "name": "favicons",
          "description": "Array of URLs.",
          "collection": true,
          "type": "String",
          "possibleValues": null,
          "required": true
        }
      ],
      "additionalTags": [],
      "apiType": "event",
      "fullSignature": "webContents.on('page-favicon-updated')",
      "url": "https://electronjs.org/docs/api/web-contents#event-page-favicon-updated",
      "slug": "webcontentsonpage-favicon-updated",
      "tldr": "Emitted when page receives favicon urls.",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:page-favicon-updated",
        "api:webcontentsonpage-favicon-updated",
        "api:webContents.on('page-favicon-updated')",
        "doc:page-favicon-updated",
        "doc:webcontentsonpage-favicon-updated",
        "doc:webContents.on('page-favicon-updated')"
      ]
    },
    {
      "objectID": "api-web-contents#event-new-window",
      "name": "new-window",
      "description": "Emitted when the page requests to open a new window for a `url`. It could be requested by `window.open` or an external link like `<a target='_blank'>`.\n\nBy default a new `BrowserWindow` will be created for the `url`.\n\nCalling `event.preventDefault()` will prevent Electron from automatically creating a new `BrowserWindow`. If you call `event.preventDefault()` and manually create a new `BrowserWindow` then you must set `event.newGuest` to reference the new `BrowserWindow` instance, failing to do so may result in unexpected behavior. For example:",
      "parameters": [
        {
          "name": "event",
          "description": "",
          "collection": false,
          "type": "Event",
          "required": true
        },
        {
          "name": "url",
          "description": "",
          "collection": false,
          "type": "String",
          "possibleValues": null,
          "required": true
        },
        {
          "name": "frameName",
          "description": "",
          "collection": false,
          "type": "String",
          "possibleValues": null,
          "required": true
        },
        {
          "name": "disposition",
          "description": "Can be `default`, `foreground-tab`, `background-tab`, `new-window`, `save-to-disk` and `other`.",
          "collection": false,
          "type": "String",
          "possibleValues": [
            {
              "value": "default",
              "description": ""
            },
            {
              "value": "foreground-tab",
              "description": ""
            },
            {
              "value": "background-tab",
              "description": ""
            },
            {
              "value": "new-window",
              "description": ""
            },
            {
              "value": "save-to-disk",
              "description": ""
            },
            {
              "value": "other",
              "description": ""
            }
          ],
          "required": true
        },
        {
          "name": "options",
          "description": "The options which will be used for creating the new `BrowserWindow`.",
          "collection": false,
          "type": "BrowserWindowConstructorOptions",
          "required": true
        },
        {
          "name": "additionalFeatures",
          "description": "The non-standard features (features not handled by Chromium or Electron) given to `window.open()`.",
          "collection": true,
          "type": "String",
          "possibleValues": null,
          "required": true
        },
        {
          "name": "referrer",
          "description": "The referrer that will be passed to the new window. May or may not result in the `Referer` header being sent, depending on the referrer policy.",
          "collection": false,
          "type": "Referrer",
          "required": true
        }
      ],
      "additionalTags": [],
      "apiType": "event",
      "fullSignature": "webContents.on('new-window')",
      "url": "https://electronjs.org/docs/api/web-contents#event-new-window",
      "slug": "webcontentsonnew-window",
      "tldr": "Emitted when the page requests to open a new window for a `url`.",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:new-window",
        "api:webcontentsonnew-window",
        "api:webContents.on('new-window')",
        "doc:new-window",
        "doc:webcontentsonnew-window",
        "doc:webContents.on('new-window')"
      ]
    },
    {
      "objectID": "api-web-contents#event-will-navigate",
      "name": "will-navigate",
      "description": "Emitted when a user or the page wants to start navigation. It can happen when the `window.location` object is changed or a user clicks a link in the page.\n\nThis event will not emit when the navigation is started programmatically with APIs like `webContents.loadURL` and `webContents.back`.\n\nIt is also not emitted for in-page navigations, such as clicking anchor links or updating the `window.location.hash`. Use `did-navigate-in-page` event for this purpose.\n\nCalling `event.preventDefault()` will prevent the navigation.",
      "parameters": [
        {
          "name": "event",
          "description": "",
          "collection": false,
          "type": "Event",
          "required": true
        },
        {
          "name": "url",
          "description": "",
          "collection": false,
          "type": "String",
          "possibleValues": null,
          "required": true
        }
      ],
      "additionalTags": [],
      "apiType": "event",
      "fullSignature": "webContents.on('will-navigate')",
      "url": "https://electronjs.org/docs/api/web-contents#event-will-navigate",
      "slug": "webcontentsonwill-navigate",
      "tldr": "Emitted when a user or the page wants to start navigation.",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:will-navigate",
        "api:webcontentsonwill-navigate",
        "api:webContents.on('will-navigate')",
        "doc:will-navigate",
        "doc:webcontentsonwill-navigate",
        "doc:webContents.on('will-navigate')"
      ]
    },
    {
      "objectID": "api-web-contents#event-did-start-navigation",
      "name": "did-start-navigation",
      "description": "Emitted when any frame (including main) starts navigating. `isInplace` will be `true` for in-page navigations.",
      "parameters": [
        {
          "name": "event",
          "description": "",
          "collection": false,
          "type": "Event",
          "required": true
        },
        {
          "name": "url",
          "description": "",
          "collection": false,
          "type": "String",
          "possibleValues": null,
          "required": true
        },
        {
          "name": "isInPlace",
          "description": "",
          "collection": false,
          "type": "Boolean",
          "required": true
        },
        {
          "name": "isMainFrame",
          "description": "",
          "collection": false,
          "type": "Boolean",
          "required": true
        },
        {
          "name": "frameProcessId",
          "description": "",
          "collection": false,
          "type": "Integer",
          "required": true
        },
        {
          "name": "frameRoutingId",
          "description": "",
          "collection": false,
          "type": "Integer",
          "required": true
        }
      ],
      "additionalTags": [],
      "apiType": "event",
      "fullSignature": "webContents.on('did-start-navigation')",
      "url": "https://electronjs.org/docs/api/web-contents#event-did-start-navigation",
      "slug": "webcontentsondid-start-navigation",
      "tldr": "Emitted when any frame (including main) starts navigating.",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:did-start-navigation",
        "api:webcontentsondid-start-navigation",
        "api:webContents.on('did-start-navigation')",
        "doc:did-start-navigation",
        "doc:webcontentsondid-start-navigation",
        "doc:webContents.on('did-start-navigation')"
      ]
    },
    {
      "objectID": "api-web-contents#event-will-redirect",
      "name": "will-redirect",
      "description": "Emitted as a server side redirect occurs during navigation.  For example a 302 redirect.\n\nThis event will be emitted after `did-start-navigation` and always before the `did-redirect-navigation` event for the same navigation.\n\nCalling `event.preventDefault()` will prevent the navigation (not just the redirect).",
      "parameters": [
        {
          "name": "event",
          "description": "",
          "collection": false,
          "type": "Event",
          "required": true
        },
        {
          "name": "url",
          "description": "",
          "collection": false,
          "type": "String",
          "possibleValues": null,
          "required": true
        },
        {
          "name": "isInPlace",
          "description": "",
          "collection": false,
          "type": "Boolean",
          "required": true
        },
        {
          "name": "isMainFrame",
          "description": "",
          "collection": false,
          "type": "Boolean",
          "required": true
        },
        {
          "name": "frameProcessId",
          "description": "",
          "collection": false,
          "type": "Integer",
          "required": true
        },
        {
          "name": "frameRoutingId",
          "description": "",
          "collection": false,
          "type": "Integer",
          "required": true
        }
      ],
      "additionalTags": [],
      "apiType": "event",
      "fullSignature": "webContents.on('will-redirect')",
      "url": "https://electronjs.org/docs/api/web-contents#event-will-redirect",
      "slug": "webcontentsonwill-redirect",
      "tldr": "Emitted as a server side redirect occurs during navigation.",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:will-redirect",
        "api:webcontentsonwill-redirect",
        "api:webContents.on('will-redirect')",
        "doc:will-redirect",
        "doc:webcontentsonwill-redirect",
        "doc:webContents.on('will-redirect')"
      ]
    },
    {
      "objectID": "api-web-contents#event-did-redirect-navigation",
      "name": "did-redirect-navigation",
      "description": "Emitted after a server side redirect occurs during navigation.  For example a 302 redirect.\n\nThis event can not be prevented, if you want to prevent redirects you should checkout out the `will-redirect` event above.",
      "parameters": [
        {
          "name": "event",
          "description": "",
          "collection": false,
          "type": "Event",
          "required": true
        },
        {
          "name": "url",
          "description": "",
          "collection": false,
          "type": "String",
          "possibleValues": null,
          "required": true
        },
        {
          "name": "isInPlace",
          "description": "",
          "collection": false,
          "type": "Boolean",
          "required": true
        },
        {
          "name": "isMainFrame",
          "description": "",
          "collection": false,
          "type": "Boolean",
          "required": true
        },
        {
          "name": "frameProcessId",
          "description": "",
          "collection": false,
          "type": "Integer",
          "required": true
        },
        {
          "name": "frameRoutingId",
          "description": "",
          "collection": false,
          "type": "Integer",
          "required": true
        }
      ],
      "additionalTags": [],
      "apiType": "event",
      "fullSignature": "webContents.on('did-redirect-navigation')",
      "url": "https://electronjs.org/docs/api/web-contents#event-did-redirect-navigation",
      "slug": "webcontentsondid-redirect-navigation",
      "tldr": "Emitted after a server side redirect occurs during navigation.",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:did-redirect-navigation",
        "api:webcontentsondid-redirect-navigation",
        "api:webContents.on('did-redirect-navigation')",
        "doc:did-redirect-navigation",
        "doc:webcontentsondid-redirect-navigation",
        "doc:webContents.on('did-redirect-navigation')"
      ]
    },
    {
      "objectID": "api-web-contents#event-did-navigate",
      "name": "did-navigate",
      "description": "Emitted when a main frame navigation is done.\n\nThis event is not emitted for in-page navigations, such as clicking anchor links or updating the `window.location.hash`. Use `did-navigate-in-page` event for this purpose.",
      "parameters": [
        {
          "name": "event",
          "description": "",
          "collection": false,
          "type": "Event",
          "required": true
        },
        {
          "name": "url",
          "description": "",
          "collection": false,
          "type": "String",
          "possibleValues": null,
          "required": true
        },
        {
          "name": "httpResponseCode",
          "description": "-1 for non HTTP navigations",
          "collection": false,
          "type": "Integer",
          "required": true
        },
        {
          "name": "httpStatusText",
          "description": "empty for non HTTP navigations",
          "collection": false,
          "type": "String",
          "possibleValues": null,
          "required": true
        }
      ],
      "additionalTags": [],
      "apiType": "event",
      "fullSignature": "webContents.on('did-navigate')",
      "url": "https://electronjs.org/docs/api/web-contents#event-did-navigate",
      "slug": "webcontentsondid-navigate",
      "tldr": "Emitted when a main frame navigation is done.\n\nThis event is not emitted for in-page navigations, such as clicking anchor links or updating the `window.location.hash`.",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:did-navigate",
        "api:webcontentsondid-navigate",
        "api:webContents.on('did-navigate')",
        "doc:did-navigate",
        "doc:webcontentsondid-navigate",
        "doc:webContents.on('did-navigate')"
      ]
    },
    {
      "objectID": "api-web-contents#event-did-frame-navigate",
      "name": "did-frame-navigate",
      "description": "Emitted when any frame navigation is done.\n\nThis event is not emitted for in-page navigations, such as clicking anchor links or updating the `window.location.hash`. Use `did-navigate-in-page` event for this purpose.",
      "parameters": [
        {
          "name": "event",
          "description": "",
          "collection": false,
          "type": "Event",
          "required": true
        },
        {
          "name": "url",
          "description": "",
          "collection": false,
          "type": "String",
          "possibleValues": null,
          "required": true
        },
        {
          "name": "httpResponseCode",
          "description": "-1 for non HTTP navigations",
          "collection": false,
          "type": "Integer",
          "required": true
        },
        {
          "name": "httpStatusText",
          "description": "empty for non HTTP navigations,",
          "collection": false,
          "type": "String",
          "possibleValues": null,
          "required": true
        },
        {
          "name": "isMainFrame",
          "description": "",
          "collection": false,
          "type": "Boolean",
          "required": true
        },
        {
          "name": "frameProcessId",
          "description": "",
          "collection": false,
          "type": "Integer",
          "required": true
        },
        {
          "name": "frameRoutingId",
          "description": "",
          "collection": false,
          "type": "Integer",
          "required": true
        }
      ],
      "additionalTags": [],
      "apiType": "event",
      "fullSignature": "webContents.on('did-frame-navigate')",
      "url": "https://electronjs.org/docs/api/web-contents#event-did-frame-navigate",
      "slug": "webcontentsondid-frame-navigate",
      "tldr": "Emitted when any frame navigation is done.\n\nThis event is not emitted for in-page navigations, such as clicking anchor links or updating the `window.location.hash`.",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:did-frame-navigate",
        "api:webcontentsondid-frame-navigate",
        "api:webContents.on('did-frame-navigate')",
        "doc:did-frame-navigate",
        "doc:webcontentsondid-frame-navigate",
        "doc:webContents.on('did-frame-navigate')"
      ]
    },
    {
      "objectID": "api-web-contents#event-did-navigate-in-page",
      "name": "did-navigate-in-page",
      "description": "Emitted when an in-page navigation happened in any frame.\n\nWhen in-page navigation happens, the page URL changes but does not cause navigation outside of the page. Examples of this occurring are when anchor links are clicked or when the DOM `hashchange` event is triggered.",
      "parameters": [
        {
          "name": "event",
          "description": "",
          "collection": false,
          "type": "Event",
          "required": true
        },
        {
          "name": "url",
          "description": "",
          "collection": false,
          "type": "String",
          "possibleValues": null,
          "required": true
        },
        {
          "name": "isMainFrame",
          "description": "",
          "collection": false,
          "type": "Boolean",
          "required": true
        },
        {
          "name": "frameProcessId",
          "description": "",
          "collection": false,
          "type": "Integer",
          "required": true
        },
        {
          "name": "frameRoutingId",
          "description": "",
          "collection": false,
          "type": "Integer",
          "required": true
        }
      ],
      "additionalTags": [],
      "apiType": "event",
      "fullSignature": "webContents.on('did-navigate-in-page')",
      "url": "https://electronjs.org/docs/api/web-contents#event-did-navigate-in-page",
      "slug": "webcontentsondid-navigate-in-page",
      "tldr": "Emitted when an in-page navigation happened in any frame.\n\nWhen in-page navigation happens, the page URL changes but does not cause navigation outside of the page.",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:did-navigate-in-page",
        "api:webcontentsondid-navigate-in-page",
        "api:webContents.on('did-navigate-in-page')",
        "doc:did-navigate-in-page",
        "doc:webcontentsondid-navigate-in-page",
        "doc:webContents.on('did-navigate-in-page')"
      ]
    },
    {
      "objectID": "api-web-contents#event-will-prevent-unload",
      "name": "will-prevent-unload",
      "description": "Emitted when a `beforeunload` event handler is attempting to cancel a page unload.\n\nCalling `event.preventDefault()` will ignore the `beforeunload` event handler and allow the page to be unloaded.",
      "parameters": [
        {
          "name": "event",
          "description": "",
          "collection": false,
          "type": "Event",
          "required": true
        }
      ],
      "additionalTags": [],
      "apiType": "event",
      "fullSignature": "webContents.on('will-prevent-unload')",
      "url": "https://electronjs.org/docs/api/web-contents#event-will-prevent-unload",
      "slug": "webcontentsonwill-prevent-unload",
      "tldr": "Emitted when a `beforeunload` event handler is attempting to cancel a page unload.\n\nCalling `event.preventDefault()` will ignore the `beforeunload` event handler and allow the page to be unloaded.",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:will-prevent-unload",
        "api:webcontentsonwill-prevent-unload",
        "api:webContents.on('will-prevent-unload')",
        "doc:will-prevent-unload",
        "doc:webcontentsonwill-prevent-unload",
        "doc:webContents.on('will-prevent-unload')"
      ]
    },
    {
      "objectID": "api-web-contents#event-crashed",
      "name": "crashed",
      "description": "Emitted when the renderer process crashes or is killed.",
      "parameters": [
        {
          "name": "event",
          "description": "",
          "collection": false,
          "type": "Event",
          "required": true
        },
        {
          "name": "killed",
          "description": "",
          "collection": false,
          "type": "Boolean",
          "required": true
        }
      ],
      "additionalTags": [],
      "apiType": "event",
      "fullSignature": "webContents.on('crashed')",
      "url": "https://electronjs.org/docs/api/web-contents#event-crashed",
      "slug": "webcontentsoncrashed",
      "tldr": "Emitted when the renderer process crashes or is killed.",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:crashed",
        "api:webcontentsoncrashed",
        "api:webContents.on('crashed')",
        "doc:crashed",
        "doc:webcontentsoncrashed",
        "doc:webContents.on('crashed')"
      ]
    },
    {
      "objectID": "api-web-contents#event-unresponsive",
      "name": "unresponsive",
      "description": "Emitted when the web page becomes unresponsive.",
      "parameters": [],
      "additionalTags": [],
      "apiType": "event",
      "fullSignature": "webContents.on('unresponsive')",
      "url": "https://electronjs.org/docs/api/web-contents#event-unresponsive",
      "slug": "webcontentsonunresponsive",
      "tldr": "Emitted when the web page becomes unresponsive.",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:unresponsive",
        "api:webcontentsonunresponsive",
        "api:webContents.on('unresponsive')",
        "doc:unresponsive",
        "doc:webcontentsonunresponsive",
        "doc:webContents.on('unresponsive')"
      ]
    },
    {
      "objectID": "api-web-contents#event-responsive",
      "name": "responsive",
      "description": "Emitted when the unresponsive web page becomes responsive again.",
      "parameters": [],
      "additionalTags": [],
      "apiType": "event",
      "fullSignature": "webContents.on('responsive')",
      "url": "https://electronjs.org/docs/api/web-contents#event-responsive",
      "slug": "webcontentsonresponsive",
      "tldr": "Emitted when the unresponsive web page becomes responsive again.",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:responsive",
        "api:webcontentsonresponsive",
        "api:webContents.on('responsive')",
        "doc:responsive",
        "doc:webcontentsonresponsive",
        "doc:webContents.on('responsive')"
      ]
    },
    {
      "objectID": "api-web-contents#event-plugin-crashed",
      "name": "plugin-crashed",
      "description": "Emitted when a plugin process has crashed.",
      "parameters": [
        {
          "name": "event",
          "description": "",
          "collection": false,
          "type": "Event",
          "required": true
        },
        {
          "name": "name",
          "description": "",
          "collection": false,
          "type": "String",
          "possibleValues": null,
          "required": true
        },
        {
          "name": "version",
          "description": "",
          "collection": false,
          "type": "String",
          "possibleValues": null,
          "required": true
        }
      ],
      "additionalTags": [],
      "apiType": "event",
      "fullSignature": "webContents.on('plugin-crashed')",
      "url": "https://electronjs.org/docs/api/web-contents#event-plugin-crashed",
      "slug": "webcontentsonplugin-crashed",
      "tldr": "Emitted when a plugin process has crashed.",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:plugin-crashed",
        "api:webcontentsonplugin-crashed",
        "api:webContents.on('plugin-crashed')",
        "doc:plugin-crashed",
        "doc:webcontentsonplugin-crashed",
        "doc:webContents.on('plugin-crashed')"
      ]
    },
    {
      "objectID": "api-web-contents#event-destroyed",
      "name": "destroyed",
      "description": "Emitted when `webContents` is destroyed.",
      "parameters": [],
      "additionalTags": [],
      "apiType": "event",
      "fullSignature": "webContents.on('destroyed')",
      "url": "https://electronjs.org/docs/api/web-contents#event-destroyed",
      "slug": "webcontentsondestroyed",
      "tldr": "Emitted when `webContents` is destroyed.",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:destroyed",
        "api:webcontentsondestroyed",
        "api:webContents.on('destroyed')",
        "doc:destroyed",
        "doc:webcontentsondestroyed",
        "doc:webContents.on('destroyed')"
      ]
    },
    {
      "objectID": "api-web-contents#event-before-input-event",
      "name": "before-input-event",
      "description": "Emitted before dispatching the `keydown` and `keyup` events in the page. Calling `event.preventDefault` will prevent the page `keydown`/`keyup` events and the menu shortcuts.\n\nTo only prevent the menu shortcuts, use `setIgnoreMenuShortcuts`:",
      "parameters": [
        {
          "name": "event",
          "description": "",
          "collection": false,
          "type": "Event",
          "required": true
        },
        {
          "name": "input",
          "description": "Input properties.",
          "collection": false,
          "type": "Object",
          "properties": [
            {
              "name": "type",
              "description": "Either `keyUp` or `keyDown`.",
              "required": true,
              "additionalTags": [],
              "collection": false,
              "type": "String",
              "possibleValues": null
            },
            {
              "name": "key",
              "description": "Equivalent to KeyboardEvent.key.",
              "required": true,
              "additionalTags": [],
              "collection": false,
              "type": "String",
              "possibleValues": null
            },
            {
              "name": "code",
              "description": "Equivalent to KeyboardEvent.code.",
              "required": true,
              "additionalTags": [],
              "collection": false,
              "type": "String",
              "possibleValues": null
            },
            {
              "name": "isAutoRepeat",
              "description": "Equivalent to KeyboardEvent.repeat.",
              "required": true,
              "additionalTags": [],
              "collection": false,
              "type": "Boolean"
            },
            {
              "name": "shift",
              "description": "Equivalent to KeyboardEvent.shiftKey.",
              "required": true,
              "additionalTags": [],
              "collection": false,
              "type": "Boolean"
            },
            {
              "name": "control",
              "description": "Equivalent to KeyboardEvent.controlKey.",
              "required": true,
              "additionalTags": [],
              "collection": false,
              "type": "Boolean"
            },
            {
              "name": "alt",
              "description": "Equivalent to KeyboardEvent.altKey.",
              "required": true,
              "additionalTags": [],
              "collection": false,
              "type": "Boolean"
            },
            {
              "name": "meta",
              "description": "Equivalent to KeyboardEvent.metaKey.",
              "required": true,
              "additionalTags": [],
              "collection": false,
              "type": "Boolean"
            }
          ],
          "required": true
        }
      ],
      "additionalTags": [],
      "apiType": "event",
      "fullSignature": "webContents.on('before-input-event')",
      "url": "https://electronjs.org/docs/api/web-contents#event-before-input-event",
      "slug": "webcontentsonbefore-input-event",
      "tldr": "Emitted before dispatching the `keydown` and `keyup` events in the page.",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:before-input-event",
        "api:webcontentsonbefore-input-event",
        "api:webContents.on('before-input-event')",
        "doc:before-input-event",
        "doc:webcontentsonbefore-input-event",
        "doc:webContents.on('before-input-event')"
      ]
    },
    {
      "objectID": "api-web-contents#event-enter-html-full-screen",
      "name": "enter-html-full-screen",
      "description": "Emitted when the window enters a full-screen state triggered by HTML API.",
      "parameters": [],
      "additionalTags": [],
      "apiType": "event",
      "fullSignature": "webContents.on('enter-html-full-screen')",
      "url": "https://electronjs.org/docs/api/web-contents#event-enter-html-full-screen",
      "slug": "webcontentsonenter-html-full-screen",
      "tldr": "Emitted when the window enters a full-screen state triggered by HTML API.",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:enter-html-full-screen",
        "api:webcontentsonenter-html-full-screen",
        "api:webContents.on('enter-html-full-screen')",
        "doc:enter-html-full-screen",
        "doc:webcontentsonenter-html-full-screen",
        "doc:webContents.on('enter-html-full-screen')"
      ]
    },
    {
      "objectID": "api-web-contents#event-leave-html-full-screen",
      "name": "leave-html-full-screen",
      "description": "Emitted when the window leaves a full-screen state triggered by HTML API.",
      "parameters": [],
      "additionalTags": [],
      "apiType": "event",
      "fullSignature": "webContents.on('leave-html-full-screen')",
      "url": "https://electronjs.org/docs/api/web-contents#event-leave-html-full-screen",
      "slug": "webcontentsonleave-html-full-screen",
      "tldr": "Emitted when the window leaves a full-screen state triggered by HTML API.",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:leave-html-full-screen",
        "api:webcontentsonleave-html-full-screen",
        "api:webContents.on('leave-html-full-screen')",
        "doc:leave-html-full-screen",
        "doc:webcontentsonleave-html-full-screen",
        "doc:webContents.on('leave-html-full-screen')"
      ]
    },
    {
      "objectID": "api-web-contents#event-zoom-changed",
      "name": "zoom-changed",
      "description": "Emitted when the user is requesting to change the zoom level using the mouse wheel.",
      "parameters": [
        {
          "name": "event",
          "description": "",
          "collection": false,
          "type": "Event",
          "required": true
        },
        {
          "name": "zoomDirection",
          "description": "Can be `in` or `out`.",
          "collection": false,
          "type": "String",
          "possibleValues": [
            {
              "value": "in",
              "description": ""
            },
            {
              "value": "out",
              "description": ""
            }
          ],
          "required": true
        }
      ],
      "additionalTags": [],
      "apiType": "event",
      "fullSignature": "webContents.on('zoom-changed')",
      "url": "https://electronjs.org/docs/api/web-contents#event-zoom-changed",
      "slug": "webcontentsonzoom-changed",
      "tldr": "Emitted when the user is requesting to change the zoom level using the mouse wheel.",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:zoom-changed",
        "api:webcontentsonzoom-changed",
        "api:webContents.on('zoom-changed')",
        "doc:zoom-changed",
        "doc:webcontentsonzoom-changed",
        "doc:webContents.on('zoom-changed')"
      ]
    },
    {
      "objectID": "api-web-contents#event-devtools-opened",
      "name": "devtools-opened",
      "description": "Emitted when DevTools is opened.",
      "parameters": [],
      "additionalTags": [],
      "apiType": "event",
      "fullSignature": "webContents.on('devtools-opened')",
      "url": "https://electronjs.org/docs/api/web-contents#event-devtools-opened",
      "slug": "webcontentsondevtools-opened",
      "tldr": "Emitted when DevTools is opened.",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:devtools-opened",
        "api:webcontentsondevtools-opened",
        "api:webContents.on('devtools-opened')",
        "doc:devtools-opened",
        "doc:webcontentsondevtools-opened",
        "doc:webContents.on('devtools-opened')"
      ]
    },
    {
      "objectID": "api-web-contents#event-devtools-closed",
      "name": "devtools-closed",
      "description": "Emitted when DevTools is closed.",
      "parameters": [],
      "additionalTags": [],
      "apiType": "event",
      "fullSignature": "webContents.on('devtools-closed')",
      "url": "https://electronjs.org/docs/api/web-contents#event-devtools-closed",
      "slug": "webcontentsondevtools-closed",
      "tldr": "Emitted when DevTools is closed.",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:devtools-closed",
        "api:webcontentsondevtools-closed",
        "api:webContents.on('devtools-closed')",
        "doc:devtools-closed",
        "doc:webcontentsondevtools-closed",
        "doc:webContents.on('devtools-closed')"
      ]
    },
    {
      "objectID": "api-web-contents#event-devtools-focused",
      "name": "devtools-focused",
      "description": "Emitted when DevTools is focused / opened.",
      "parameters": [],
      "additionalTags": [],
      "apiType": "event",
      "fullSignature": "webContents.on('devtools-focused')",
      "url": "https://electronjs.org/docs/api/web-contents#event-devtools-focused",
      "slug": "webcontentsondevtools-focused",
      "tldr": "Emitted when DevTools is focused / opened.",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:devtools-focused",
        "api:webcontentsondevtools-focused",
        "api:webContents.on('devtools-focused')",
        "doc:devtools-focused",
        "doc:webcontentsondevtools-focused",
        "doc:webContents.on('devtools-focused')"
      ]
    },
    {
      "objectID": "api-web-contents#event-certificate-error",
      "name": "certificate-error",
      "description": "Emitted when failed to verify the `certificate` for `url`.\n\nThe usage is the same with the `certificate-error` event of `app`.",
      "parameters": [
        {
          "name": "event",
          "description": "",
          "collection": false,
          "type": "Event",
          "required": true
        },
        {
          "name": "url",
          "description": "",
          "collection": false,
          "type": "String",
          "possibleValues": null,
          "required": true
        },
        {
          "name": "error",
          "description": "The error code.",
          "collection": false,
          "type": "String",
          "possibleValues": null,
          "required": true
        },
        {
          "name": "certificate",
          "description": "",
          "collection": false,
          "type": "Certificate",
          "required": true
        },
        {
          "name": "callback",
          "description": "",
          "collection": false,
          "type": "Function",
          "parameters": [
            {
              "name": "isTrusted",
              "description": "Indicates whether the certificate can be considered trusted.",
              "required": true,
              "collection": false,
              "type": "Boolean"
            }
          ],
          "returns": null,
          "required": true
        }
      ],
      "additionalTags": [],
      "apiType": "event",
      "fullSignature": "webContents.on('certificate-error')",
      "url": "https://electronjs.org/docs/api/web-contents#event-certificate-error",
      "slug": "webcontentsoncertificate-error",
      "tldr": "Emitted when failed to verify the `certificate` for `url`.\n\nThe usage is the same with the `certificate-error` event of `app`.",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:certificate-error",
        "api:webcontentsoncertificate-error",
        "api:webContents.on('certificate-error')",
        "doc:certificate-error",
        "doc:webcontentsoncertificate-error",
        "doc:webContents.on('certificate-error')"
      ]
    },
    {
      "objectID": "api-web-contents#event-select-client-certificate",
      "name": "select-client-certificate",
      "description": "Emitted when a client certificate is requested.\n\nThe usage is the same with the `select-client-certificate` event of `app`.",
      "parameters": [
        {
          "name": "event",
          "description": "",
          "collection": false,
          "type": "Event",
          "required": true
        },
        {
          "name": "url",
          "description": "",
          "collection": false,
          "type": "URL",
          "required": true
        },
        {
          "name": "certificateList",
          "description": "",
          "collection": true,
          "type": "Certificate",
          "required": true
        },
        {
          "name": "callback",
          "description": "",
          "collection": false,
          "type": "Function",
          "parameters": [
            {
              "name": "certificate",
              "description": "Must be a certificate from the given list.",
              "required": true,
              "collection": false,
              "type": "Certificate"
            }
          ],
          "returns": null,
          "required": true
        }
      ],
      "additionalTags": [],
      "apiType": "event",
      "fullSignature": "webContents.on('select-client-certificate')",
      "url": "https://electronjs.org/docs/api/web-contents#event-select-client-certificate",
      "slug": "webcontentsonselect-client-certificate",
      "tldr": "Emitted when a client certificate is requested.\n\nThe usage is the same with the `select-client-certificate` event of `app`.",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:select-client-certificate",
        "api:webcontentsonselect-client-certificate",
        "api:webContents.on('select-client-certificate')",
        "doc:select-client-certificate",
        "doc:webcontentsonselect-client-certificate",
        "doc:webContents.on('select-client-certificate')"
      ]
    },
    {
      "objectID": "api-web-contents#event-login",
      "name": "login",
      "description": "Emitted when `webContents` wants to do basic auth.\n\nThe usage is the same with the `login` event of `app`.",
      "parameters": [
        {
          "name": "event",
          "description": "",
          "collection": false,
          "type": "Event",
          "required": true
        },
        {
          "name": "request",
          "description": "",
          "collection": false,
          "type": "Object",
          "properties": [
            {
              "name": "method",
              "description": "",
              "required": true,
              "additionalTags": [],
              "collection": false,
              "type": "String",
              "possibleValues": null
            },
            {
              "name": "url",
              "description": "",
              "required": true,
              "additionalTags": [],
              "collection": false,
              "type": "URL"
            },
            {
              "name": "referrer",
              "description": "",
              "required": true,
              "additionalTags": [],
              "collection": false,
              "type": "URL"
            }
          ],
          "required": true
        },
        {
          "name": "authInfo",
          "description": "",
          "collection": false,
          "type": "Object",
          "properties": [
            {
              "name": "isProxy",
              "description": "",
              "required": true,
              "additionalTags": [],
              "collection": false,
              "type": "Boolean"
            },
            {
              "name": "scheme",
              "description": "",
              "required": true,
              "additionalTags": [],
              "collection": false,
              "type": "String",
              "possibleValues": null
            },
            {
              "name": "host",
              "description": "",
              "required": true,
              "additionalTags": [],
              "collection": false,
              "type": "String",
              "possibleValues": null
            },
            {
              "name": "port",
              "description": "",
              "required": true,
              "additionalTags": [],
              "collection": false,
              "type": "Integer"
            },
            {
              "name": "realm",
              "description": "",
              "required": true,
              "additionalTags": [],
              "collection": false,
              "type": "String",
              "possibleValues": null
            }
          ],
          "required": true
        },
        {
          "name": "callback",
          "description": "",
          "collection": false,
          "type": "Function",
          "parameters": [
            {
              "name": "username",
              "description": "",
              "required": true,
              "collection": false,
              "type": "String",
              "possibleValues": null
            },
            {
              "name": "password",
              "description": "",
              "required": true,
              "collection": false,
              "type": "String",
              "possibleValues": null
            }
          ],
          "returns": null,
          "required": true
        }
      ],
      "additionalTags": [],
      "apiType": "event",
      "fullSignature": "webContents.on('login')",
      "url": "https://electronjs.org/docs/api/web-contents#event-login",
      "slug": "webcontentsonlogin",
      "tldr": "Emitted when `webContents` wants to do basic auth.\n\nThe usage is the same with the `login` event of `app`.",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:login",
        "api:webcontentsonlogin",
        "api:webContents.on('login')",
        "doc:login",
        "doc:webcontentsonlogin",
        "doc:webContents.on('login')"
      ]
    },
    {
      "objectID": "api-web-contents#event-found-in-page",
      "name": "found-in-page",
      "description": "Emitted when a result is available for [`webContents.findInPage`] request.",
      "parameters": [
        {
          "name": "event",
          "description": "",
          "collection": false,
          "type": "Event",
          "required": true
        },
        {
          "name": "result",
          "description": "",
          "collection": false,
          "type": "Object",
          "properties": [
            {
              "name": "requestId",
              "description": "",
              "required": true,
              "additionalTags": [],
              "collection": false,
              "type": "Integer"
            },
            {
              "name": "activeMatchOrdinal",
              "description": "Position of the active match.",
              "required": true,
              "additionalTags": [],
              "collection": false,
              "type": "Integer"
            },
            {
              "name": "matches",
              "description": "Number of Matches.",
              "required": true,
              "additionalTags": [],
              "collection": false,
              "type": "Integer"
            },
            {
              "name": "selectionArea",
              "description": "Coordinates of first match region.",
              "required": true,
              "additionalTags": [],
              "collection": false,
              "type": "Rectangle"
            },
            {
              "name": "finalUpdate",
              "description": "",
              "required": true,
              "additionalTags": [],
              "collection": false,
              "type": "Boolean"
            }
          ],
          "required": true
        }
      ],
      "additionalTags": [],
      "apiType": "event",
      "fullSignature": "webContents.on('found-in-page')",
      "url": "https://electronjs.org/docs/api/web-contents#event-found-in-page",
      "slug": "webcontentsonfound-in-page",
      "tldr": "Emitted when a result is available for [`webContents.findInPage`] request.",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:found-in-page",
        "api:webcontentsonfound-in-page",
        "api:webContents.on('found-in-page')",
        "doc:found-in-page",
        "doc:webcontentsonfound-in-page",
        "doc:webContents.on('found-in-page')"
      ]
    },
    {
      "objectID": "api-web-contents#event-media-started-playing",
      "name": "media-started-playing",
      "description": "Emitted when media starts playing.",
      "parameters": [],
      "additionalTags": [],
      "apiType": "event",
      "fullSignature": "webContents.on('media-started-playing')",
      "url": "https://electronjs.org/docs/api/web-contents#event-media-started-playing",
      "slug": "webcontentsonmedia-started-playing",
      "tldr": "Emitted when media starts playing.",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:media-started-playing",
        "api:webcontentsonmedia-started-playing",
        "api:webContents.on('media-started-playing')",
        "doc:media-started-playing",
        "doc:webcontentsonmedia-started-playing",
        "doc:webContents.on('media-started-playing')"
      ]
    },
    {
      "objectID": "api-web-contents#event-media-paused",
      "name": "media-paused",
      "description": "Emitted when media is paused or done playing.",
      "parameters": [],
      "additionalTags": [],
      "apiType": "event",
      "fullSignature": "webContents.on('media-paused')",
      "url": "https://electronjs.org/docs/api/web-contents#event-media-paused",
      "slug": "webcontentsonmedia-paused",
      "tldr": "Emitted when media is paused or done playing.",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:media-paused",
        "api:webcontentsonmedia-paused",
        "api:webContents.on('media-paused')",
        "doc:media-paused",
        "doc:webcontentsonmedia-paused",
        "doc:webContents.on('media-paused')"
      ]
    },
    {
      "objectID": "api-web-contents#event-did-change-theme-color",
      "name": "did-change-theme-color",
      "description": "Emitted when a page's theme color changes. This is usually due to encountering a meta tag:",
      "parameters": [
        {
          "name": "event",
          "description": "",
          "collection": false,
          "type": "Event",
          "required": true
        },
        {
          "name": "color",
          "description": "Theme color is in format of '#rrggbb'. It is `null` when no theme color is set.",
          "collection": false,
          "type": [
            {
              "collection": false,
              "type": "String",
              "possibleValues": null
            },
            {
              "type": "null",
              "collection": false
            }
          ],
          "required": true
        }
      ],
      "additionalTags": [],
      "apiType": "event",
      "fullSignature": "webContents.on('did-change-theme-color')",
      "url": "https://electronjs.org/docs/api/web-contents#event-did-change-theme-color",
      "slug": "webcontentsondid-change-theme-color",
      "tldr": "Emitted when a page's theme color changes.",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:did-change-theme-color",
        "api:webcontentsondid-change-theme-color",
        "api:webContents.on('did-change-theme-color')",
        "doc:did-change-theme-color",
        "doc:webcontentsondid-change-theme-color",
        "doc:webContents.on('did-change-theme-color')"
      ]
    },
    {
      "objectID": "api-web-contents#event-update-target-url",
      "name": "update-target-url",
      "description": "Emitted when mouse moves over a link or the keyboard moves the focus to a link.",
      "parameters": [
        {
          "name": "event",
          "description": "",
          "collection": false,
          "type": "Event",
          "required": true
        },
        {
          "name": "url",
          "description": "",
          "collection": false,
          "type": "String",
          "possibleValues": null,
          "required": true
        }
      ],
      "additionalTags": [],
      "apiType": "event",
      "fullSignature": "webContents.on('update-target-url')",
      "url": "https://electronjs.org/docs/api/web-contents#event-update-target-url",
      "slug": "webcontentsonupdate-target-url",
      "tldr": "Emitted when mouse moves over a link or the keyboard moves the focus to a link.",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:update-target-url",
        "api:webcontentsonupdate-target-url",
        "api:webContents.on('update-target-url')",
        "doc:update-target-url",
        "doc:webcontentsonupdate-target-url",
        "doc:webContents.on('update-target-url')"
      ]
    },
    {
      "objectID": "api-web-contents#event-cursor-changed",
      "name": "cursor-changed",
      "description": "Emitted when the cursor's type changes. The `type` parameter can be `default`, `crosshair`, `pointer`, `text`, `wait`, `help`, `e-resize`, `n-resize`, `ne-resize`, `nw-resize`, `s-resize`, `se-resize`, `sw-resize`, `w-resize`, `ns-resize`, `ew-resize`, `nesw-resize`, `nwse-resize`, `col-resize`, `row-resize`, `m-panning`, `e-panning`, `n-panning`, `ne-panning`, `nw-panning`, `s-panning`, `se-panning`, `sw-panning`, `w-panning`, `move`, `vertical-text`, `cell`, `context-menu`, `alias`, `progress`, `nodrop`, `copy`, `none`, `not-allowed`, `zoom-in`, `zoom-out`, `grab`, `grabbing` or `custom`.\n\nIf the `type` parameter is `custom`, the `image` parameter will hold the custom cursor image in a `NativeImage`, and `scale`, `size` and `hotspot` will hold additional information about the custom cursor.",
      "parameters": [
        {
          "name": "event",
          "description": "",
          "collection": false,
          "type": "Event",
          "required": true
        },
        {
          "name": "type",
          "description": "",
          "collection": false,
          "type": "String",
          "possibleValues": null,
          "required": true
        },
        {
          "name": "image",
          "description": "",
          "collection": false,
          "type": "NativeImage",
          "required": true
        },
        {
          "name": "scale",
          "description": "scaling factor for the custom cursor.",
          "collection": false,
          "type": "Float",
          "required": true
        },
        {
          "name": "size",
          "description": "the size of the `image`.",
          "collection": false,
          "type": "Size",
          "required": true
        },
        {
          "name": "hotspot",
          "description": "coordinates of the custom cursor's hotspot.",
          "collection": false,
          "type": "Point",
          "required": true
        }
      ],
      "additionalTags": [],
      "apiType": "event",
      "fullSignature": "webContents.on('cursor-changed')",
      "url": "https://electronjs.org/docs/api/web-contents#event-cursor-changed",
      "slug": "webcontentsoncursor-changed",
      "tldr": "Emitted when the cursor's type changes.",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:cursor-changed",
        "api:webcontentsoncursor-changed",
        "api:webContents.on('cursor-changed')",
        "doc:cursor-changed",
        "doc:webcontentsoncursor-changed",
        "doc:webContents.on('cursor-changed')"
      ]
    },
    {
      "objectID": "api-web-contents#event-context-menu",
      "name": "context-menu",
      "description": "Emitted when there is a new context menu that needs to be handled.",
      "parameters": [
        {
          "name": "event",
          "description": "",
          "collection": false,
          "type": "Event",
          "required": true
        },
        {
          "name": "params",
          "description": "",
          "collection": false,
          "type": "Object",
          "properties": [
            {
              "name": "x",
              "description": "x coordinate.",
              "required": true,
              "additionalTags": [],
              "collection": false,
              "type": "Integer"
            },
            {
              "name": "y",
              "description": "y coordinate.",
              "required": true,
              "additionalTags": [],
              "collection": false,
              "type": "Integer"
            },
            {
              "name": "linkURL",
              "description": "URL of the link that encloses the node the context menu was invoked on.",
              "required": true,
              "additionalTags": [],
              "collection": false,
              "type": "String",
              "possibleValues": null
            },
            {
              "name": "linkText",
              "description": "Text associated with the link. May be an empty string if the contents of the link are an image.",
              "required": true,
              "additionalTags": [],
              "collection": false,
              "type": "String",
              "possibleValues": null
            },
            {
              "name": "pageURL",
              "description": "URL of the top level page that the context menu was invoked on.",
              "required": true,
              "additionalTags": [],
              "collection": false,
              "type": "String",
              "possibleValues": null
            },
            {
              "name": "frameURL",
              "description": "URL of the subframe that the context menu was invoked on.",
              "required": true,
              "additionalTags": [],
              "collection": false,
              "type": "String",
              "possibleValues": null
            },
            {
              "name": "srcURL",
              "description": "Source URL for the element that the context menu was invoked on. Elements with source URLs are images, audio and video.",
              "required": true,
              "additionalTags": [],
              "collection": false,
              "type": "String",
              "possibleValues": null
            },
            {
              "name": "mediaType",
              "description": "Type of the node the context menu was invoked on. Can be `none`, `image`, `audio`, `video`, `canvas`, `file` or `plugin`.",
              "required": true,
              "additionalTags": [],
              "collection": false,
              "type": "String",
              "possibleValues": [
                {
                  "value": "none",
                  "description": ""
                },
                {
                  "value": "image",
                  "description": ""
                },
                {
                  "value": "audio",
                  "description": ""
                },
                {
                  "value": "video",
                  "description": ""
                },
                {
                  "value": "canvas",
                  "description": ""
                },
                {
                  "value": "file",
                  "description": ""
                },
                {
                  "value": "plugin",
                  "description": ""
                }
              ]
            },
            {
              "name": "hasImageContents",
              "description": "Whether the context menu was invoked on an image which has non-empty contents.",
              "required": true,
              "additionalTags": [],
              "collection": false,
              "type": "Boolean"
            },
            {
              "name": "isEditable",
              "description": "Whether the context is editable.",
              "required": true,
              "additionalTags": [],
              "collection": false,
              "type": "Boolean"
            },
            {
              "name": "selectionText",
              "description": "Text of the selection that the context menu was invoked on.",
              "required": true,
              "additionalTags": [],
              "collection": false,
              "type": "String",
              "possibleValues": null
            },
            {
              "name": "titleText",
              "description": "Title or alt text of the selection that the context was invoked on.",
              "required": true,
              "additionalTags": [],
              "collection": false,
              "type": "String",
              "possibleValues": null
            },
            {
              "name": "misspelledWord",
              "description": "The misspelled word under the cursor, if any.",
              "required": true,
              "additionalTags": [],
              "collection": false,
              "type": "String",
              "possibleValues": null
            },
            {
              "name": "frameCharset",
              "description": "The character encoding of the frame on which the menu was invoked.",
              "required": true,
              "additionalTags": [],
              "collection": false,
              "type": "String",
              "possibleValues": null
            },
            {
              "name": "inputFieldType",
              "description": "If the context menu was invoked on an input field, the type of that field. Possible values are `none`, `plainText`, `password`, `other`.",
              "required": true,
              "additionalTags": [],
              "collection": false,
              "type": "String",
              "possibleValues": null
            },
            {
              "name": "menuSourceType",
              "description": "Input source that invoked the context menu. Can be `none`, `mouse`, `keyboard`, `touch` or `touchMenu`.",
              "required": true,
              "additionalTags": [],
              "collection": false,
              "type": "String",
              "possibleValues": [
                {
                  "value": "none",
                  "description": ""
                },
                {
                  "value": "mouse",
                  "description": ""
                },
                {
                  "value": "keyboard",
                  "description": ""
                },
                {
                  "value": "touch",
                  "description": ""
                },
                {
                  "value": "touchMenu",
                  "description": ""
                }
              ]
            },
            {
              "name": "mediaFlags",
              "description": "The flags for the media element the context menu was invoked on.",
              "required": true,
              "additionalTags": [],
              "collection": false,
              "type": "Object",
              "properties": [
                {
                  "name": "inError",
                  "description": "Whether the media element has crashed.",
                  "required": true,
                  "additionalTags": [],
                  "collection": false,
                  "type": "Boolean"
                },
                {
                  "name": "isPaused",
                  "description": "Whether the media element is paused.",
                  "required": true,
                  "additionalTags": [],
                  "collection": false,
                  "type": "Boolean"
                },
                {
                  "name": "isMuted",
                  "description": "Whether the media element is muted.",
                  "required": true,
                  "additionalTags": [],
                  "collection": false,
                  "type": "Boolean"
                },
                {
                  "name": "hasAudio",
                  "description": "Whether the media element has audio.",
                  "required": true,
                  "additionalTags": [],
                  "collection": false,
                  "type": "Boolean"
                },
                {
                  "name": "isLooping",
                  "description": "Whether the media element is looping.",
                  "required": true,
                  "additionalTags": [],
                  "collection": false,
                  "type": "Boolean"
                },
                {
                  "name": "isControlsVisible",
                  "description": "Whether the media element's controls are visible.",
                  "required": true,
                  "additionalTags": [],
                  "collection": false,
                  "type": "Boolean"
                },
                {
                  "name": "canToggleControls",
                  "description": "Whether the media element's controls are toggleable.",
                  "required": true,
                  "additionalTags": [],
                  "collection": false,
                  "type": "Boolean"
                },
                {
                  "name": "canRotate",
                  "description": "Whether the media element can be rotated.",
                  "required": true,
                  "additionalTags": [],
                  "collection": false,
                  "type": "Boolean"
                }
              ]
            },
            {
              "name": "editFlags",
              "description": "These flags indicate whether the renderer believes it is able to perform the corresponding action.",
              "required": true,
              "additionalTags": [],
              "collection": false,
              "type": "Object",
              "properties": [
                {
                  "name": "canUndo",
                  "description": "Whether the renderer believes it can undo.",
                  "required": true,
                  "additionalTags": [],
                  "collection": false,
                  "type": "Boolean"
                },
                {
                  "name": "canRedo",
                  "description": "Whether the renderer believes it can redo.",
                  "required": true,
                  "additionalTags": [],
                  "collection": false,
                  "type": "Boolean"
                },
                {
                  "name": "canCut",
                  "description": "Whether the renderer believes it can cut.",
                  "required": true,
                  "additionalTags": [],
                  "collection": false,
                  "type": "Boolean"
                },
                {
                  "name": "canCopy",
                  "description": "Whether the renderer believes it can copy",
                  "required": true,
                  "additionalTags": [],
                  "collection": false,
                  "type": "Boolean"
                },
                {
                  "name": "canPaste",
                  "description": "Whether the renderer believes it can paste.",
                  "required": true,
                  "additionalTags": [],
                  "collection": false,
                  "type": "Boolean"
                },
                {
                  "name": "canDelete",
                  "description": "Whether the renderer believes it can delete.",
                  "required": true,
                  "additionalTags": [],
                  "collection": false,
                  "type": "Boolean"
                },
                {
                  "name": "canSelectAll",
                  "description": "Whether the renderer believes it can select all.",
                  "required": true,
                  "additionalTags": [],
                  "collection": false,
                  "type": "Boolean"
                }
              ]
            }
          ],
          "required": true
        }
      ],
      "additionalTags": [],
      "apiType": "event",
      "fullSignature": "webContents.on('context-menu')",
      "url": "https://electronjs.org/docs/api/web-contents#event-context-menu",
      "slug": "webcontentsoncontext-menu",
      "tldr": "Emitted when there is a new context menu that needs to be handled.",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:context-menu",
        "api:webcontentsoncontext-menu",
        "api:webContents.on('context-menu')",
        "doc:context-menu",
        "doc:webcontentsoncontext-menu",
        "doc:webContents.on('context-menu')"
      ]
    },
    {
      "objectID": "api-web-contents#event-select-bluetooth-device",
      "name": "select-bluetooth-device",
      "description": "Emitted when bluetooth device needs to be selected on call to `navigator.bluetooth.requestDevice`. To use `navigator.bluetooth` api `webBluetooth` should be enabled. If `event.preventDefault` is not called, first available device will be selected. `callback` should be called with `deviceId` to be selected, passing empty string to `callback` will cancel the request.",
      "parameters": [
        {
          "name": "event",
          "description": "",
          "collection": false,
          "type": "Event",
          "required": true
        },
        {
          "name": "devices",
          "description": "",
          "collection": true,
          "type": "BluetoothDevice",
          "required": true
        },
        {
          "name": "callback",
          "description": "",
          "collection": false,
          "type": "Function",
          "parameters": [
            {
              "name": "deviceId",
              "description": "",
              "required": true,
              "collection": false,
              "type": "String",
              "possibleValues": null
            }
          ],
          "returns": null,
          "required": true
        }
      ],
      "additionalTags": [],
      "apiType": "event",
      "fullSignature": "webContents.on('select-bluetooth-device')",
      "url": "https://electronjs.org/docs/api/web-contents#event-select-bluetooth-device",
      "slug": "webcontentsonselect-bluetooth-device",
      "tldr": "Emitted when bluetooth device needs to be selected on call to `navigator.bluetooth.requestDevice`.",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:select-bluetooth-device",
        "api:webcontentsonselect-bluetooth-device",
        "api:webContents.on('select-bluetooth-device')",
        "doc:select-bluetooth-device",
        "doc:webcontentsonselect-bluetooth-device",
        "doc:webContents.on('select-bluetooth-device')"
      ]
    },
    {
      "objectID": "api-web-contents#event-paint",
      "name": "paint",
      "description": "Emitted when a new frame is generated. Only the dirty area is passed in the buffer.",
      "parameters": [
        {
          "name": "event",
          "description": "",
          "collection": false,
          "type": "Event",
          "required": true
        },
        {
          "name": "dirtyRect",
          "description": "",
          "collection": false,
          "type": "Rectangle",
          "required": true
        },
        {
          "name": "image",
          "description": "The image data of the whole frame.",
          "collection": false,
          "type": "NativeImage",
          "required": true
        }
      ],
      "additionalTags": [],
      "apiType": "event",
      "fullSignature": "webContents.on('paint')",
      "url": "https://electronjs.org/docs/api/web-contents#event-paint",
      "slug": "webcontentsonpaint",
      "tldr": "Emitted when a new frame is generated.",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:paint",
        "api:webcontentsonpaint",
        "api:webContents.on('paint')",
        "doc:paint",
        "doc:webcontentsonpaint",
        "doc:webContents.on('paint')"
      ]
    },
    {
      "objectID": "api-web-contents#event-devtools-reload-page",
      "name": "devtools-reload-page",
      "description": "Emitted when the devtools window instructs the webContents to reload",
      "parameters": [],
      "additionalTags": [],
      "apiType": "event",
      "fullSignature": "webContents.on('devtools-reload-page')",
      "url": "https://electronjs.org/docs/api/web-contents#event-devtools-reload-page",
      "slug": "webcontentsondevtools-reload-page",
      "tldr": "Emitted when the devtools window instructs the webContents to reload.",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:devtools-reload-page",
        "api:webcontentsondevtools-reload-page",
        "api:webContents.on('devtools-reload-page')",
        "doc:devtools-reload-page",
        "doc:webcontentsondevtools-reload-page",
        "doc:webContents.on('devtools-reload-page')"
      ]
    },
    {
      "objectID": "api-web-contents#event-will-attach-webview",
      "name": "will-attach-webview",
      "description": "Emitted when a `<webview>`'s web contents is being attached to this web contents. Calling `event.preventDefault()` will destroy the guest page.\n\nThis event can be used to configure `webPreferences` for the `webContents` of a `<webview>` before it's loaded, and provides the ability to set settings that can't be set via `<webview>` attributes.\n\n**Note:** The specified `preload` script option will be appear as `preloadURL` (not `preload`) in the `webPreferences` object emitted with this event.",
      "parameters": [
        {
          "name": "event",
          "description": "",
          "collection": false,
          "type": "Event",
          "required": true
        },
        {
          "name": "webPreferences",
          "description": "The web preferences that will be used by the guest page. This object can be modified to adjust the preferences for the guest page.",
          "collection": false,
          "type": "WebPreferences",
          "required": true
        },
        {
          "name": "params",
          "description": "The other `<webview>` parameters such as the `src` URL. This object can be modified to adjust the parameters of the guest page.",
          "collection": false,
          "type": "Record",
          "innerTypes": [
            {
              "collection": false,
              "type": "string"
            },
            {
              "collection": false,
              "type": "string"
            }
          ],
          "required": true
        }
      ],
      "additionalTags": [],
      "apiType": "event",
      "fullSignature": "webContents.on('will-attach-webview')",
      "url": "https://electronjs.org/docs/api/web-contents#event-will-attach-webview",
      "slug": "webcontentsonwill-attach-webview",
      "tldr": "Emitted when a `<webview>`'s web contents is being attached to this web contents.",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:will-attach-webview",
        "api:webcontentsonwill-attach-webview",
        "api:webContents.on('will-attach-webview')",
        "doc:will-attach-webview",
        "doc:webcontentsonwill-attach-webview",
        "doc:webContents.on('will-attach-webview')"
      ]
    },
    {
      "objectID": "api-web-contents#event-did-attach-webview",
      "name": "did-attach-webview",
      "description": "Emitted when a `<webview>` has been attached to this web contents.",
      "parameters": [
        {
          "name": "event",
          "description": "",
          "collection": false,
          "type": "Event",
          "required": true
        },
        {
          "name": "webContents",
          "description": "The guest web contents that is used by the `<webview>`.",
          "collection": false,
          "type": "WebContents",
          "required": true
        }
      ],
      "additionalTags": [],
      "apiType": "event",
      "fullSignature": "webContents.on('did-attach-webview')",
      "url": "https://electronjs.org/docs/api/web-contents#event-did-attach-webview",
      "slug": "webcontentsondid-attach-webview",
      "tldr": "Emitted when a `<webview>` has been attached to this web contents.",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:did-attach-webview",
        "api:webcontentsondid-attach-webview",
        "api:webContents.on('did-attach-webview')",
        "doc:did-attach-webview",
        "doc:webcontentsondid-attach-webview",
        "doc:webContents.on('did-attach-webview')"
      ]
    },
    {
      "objectID": "api-web-contents#event-console-message",
      "name": "console-message",
      "description": "Emitted when the associated window logs a console message. Will not be emitted for windows with *offscreen rendering* enabled.",
      "parameters": [
        {
          "name": "event",
          "description": "",
          "collection": false,
          "type": "Event",
          "required": true
        },
        {
          "name": "level",
          "description": "",
          "collection": false,
          "type": "Integer",
          "required": true
        },
        {
          "name": "message",
          "description": "",
          "collection": false,
          "type": "String",
          "possibleValues": null,
          "required": true
        },
        {
          "name": "line",
          "description": "",
          "collection": false,
          "type": "Integer",
          "required": true
        },
        {
          "name": "sourceId",
          "description": "",
          "collection": false,
          "type": "String",
          "possibleValues": null,
          "required": true
        }
      ],
      "additionalTags": [],
      "apiType": "event",
      "fullSignature": "webContents.on('console-message')",
      "url": "https://electronjs.org/docs/api/web-contents#event-console-message",
      "slug": "webcontentsonconsole-message",
      "tldr": "Emitted when the associated window logs a console message.",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:console-message",
        "api:webcontentsonconsole-message",
        "api:webContents.on('console-message')",
        "doc:console-message",
        "doc:webcontentsonconsole-message",
        "doc:webContents.on('console-message')"
      ]
    },
    {
      "objectID": "api-web-contents#event-preload-error",
      "name": "preload-error",
      "description": "Emitted when the preload script `preloadPath` throws an unhandled exception `error`.",
      "parameters": [
        {
          "name": "event",
          "description": "",
          "collection": false,
          "type": "Event",
          "required": true
        },
        {
          "name": "preloadPath",
          "description": "",
          "collection": false,
          "type": "String",
          "possibleValues": null,
          "required": true
        },
        {
          "name": "error",
          "description": "",
          "collection": false,
          "type": "Error",
          "required": true
        }
      ],
      "additionalTags": [],
      "apiType": "event",
      "fullSignature": "webContents.on('preload-error')",
      "url": "https://electronjs.org/docs/api/web-contents#event-preload-error",
      "slug": "webcontentsonpreload-error",
      "tldr": "Emitted when the preload script `preloadPath` throws an unhandled exception `error`.",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:preload-error",
        "api:webcontentsonpreload-error",
        "api:webContents.on('preload-error')",
        "doc:preload-error",
        "doc:webcontentsonpreload-error",
        "doc:webContents.on('preload-error')"
      ]
    },
    {
      "objectID": "api-web-contents#event-ipc-message",
      "name": "ipc-message",
      "description": "Emitted when the renderer process sends an asynchronous message via `ipcRenderer.send()`.",
      "parameters": [
        {
          "name": "event",
          "description": "",
          "collection": false,
          "type": "Event",
          "required": true
        },
        {
          "name": "channel",
          "description": "",
          "collection": false,
          "type": "String",
          "possibleValues": null,
          "required": true
        },
        {
          "name": "...args",
          "description": "",
          "collection": true,
          "type": "any",
          "required": true
        }
      ],
      "additionalTags": [],
      "apiType": "event",
      "fullSignature": "webContents.on('ipc-message')",
      "url": "https://electronjs.org/docs/api/web-contents#event-ipc-message",
      "slug": "webcontentsonipc-message",
      "tldr": "Emitted when the renderer process sends an asynchronous message via `ipcRenderer.send()`.",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:ipc-message",
        "api:webcontentsonipc-message",
        "api:webContents.on('ipc-message')",
        "doc:ipc-message",
        "doc:webcontentsonipc-message",
        "doc:webContents.on('ipc-message')"
      ]
    },
    {
      "objectID": "api-web-contents#event-ipc-message-sync",
      "name": "ipc-message-sync",
      "description": "Emitted when the renderer process sends a synchronous message via `ipcRenderer.sendSync()`.",
      "parameters": [
        {
          "name": "event",
          "description": "",
          "collection": false,
          "type": "Event",
          "required": true
        },
        {
          "name": "channel",
          "description": "",
          "collection": false,
          "type": "String",
          "possibleValues": null,
          "required": true
        },
        {
          "name": "...args",
          "description": "",
          "collection": true,
          "type": "any",
          "required": true
        }
      ],
      "additionalTags": [],
      "apiType": "event",
      "fullSignature": "webContents.on('ipc-message-sync')",
      "url": "https://electronjs.org/docs/api/web-contents#event-ipc-message-sync",
      "slug": "webcontentsonipc-message-sync",
      "tldr": "Emitted when the renderer process sends a synchronous message via `ipcRenderer.sendSync()`.",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:ipc-message-sync",
        "api:webcontentsonipc-message-sync",
        "api:webContents.on('ipc-message-sync')",
        "doc:ipc-message-sync",
        "doc:webcontentsonipc-message-sync",
        "doc:webContents.on('ipc-message-sync')"
      ]
    },
    {
      "objectID": "api-web-contents#event-desktop-capturer-get-sources",
      "name": "desktop-capturer-get-sources",
      "description": "Emitted when `desktopCapturer.getSources()` is called in the renderer process. Calling `event.preventDefault()` will make it return empty sources.",
      "parameters": [
        {
          "name": "event",
          "description": "",
          "collection": false,
          "type": "Event",
          "required": true
        }
      ],
      "additionalTags": [],
      "apiType": "event",
      "fullSignature": "webContents.on('desktop-capturer-get-sources')",
      "url": "https://electronjs.org/docs/api/web-contents#event-desktop-capturer-get-sources",
      "slug": "webcontentsondesktop-capturer-get-sources",
      "tldr": "Emitted when `desktopCapturer.getSources()` is called in the renderer process.",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:desktop-capturer-get-sources",
        "api:webcontentsondesktop-capturer-get-sources",
        "api:webContents.on('desktop-capturer-get-sources')",
        "doc:desktop-capturer-get-sources",
        "doc:webcontentsondesktop-capturer-get-sources",
        "doc:webContents.on('desktop-capturer-get-sources')"
      ]
    },
    {
      "objectID": "api-web-contents#event-remote-require",
      "name": "remote-require",
      "description": "Emitted when `remote.require()` is called in the renderer process. Calling `event.preventDefault()` will prevent the module from being returned. Custom value can be returned by setting `event.returnValue`.",
      "parameters": [
        {
          "name": "event",
          "description": "",
          "collection": false,
          "type": "IpcMainEvent",
          "required": true
        },
        {
          "name": "moduleName",
          "description": "",
          "collection": false,
          "type": "String",
          "possibleValues": null,
          "required": true
        }
      ],
      "additionalTags": [],
      "apiType": "event",
      "fullSignature": "webContents.on('remote-require')",
      "url": "https://electronjs.org/docs/api/web-contents#event-remote-require",
      "slug": "webcontentsonremote-require",
      "tldr": "Emitted when `remote.require()` is called in the renderer process.",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:remote-require",
        "api:webcontentsonremote-require",
        "api:webContents.on('remote-require')",
        "doc:remote-require",
        "doc:webcontentsonremote-require",
        "doc:webContents.on('remote-require')"
      ]
    },
    {
      "objectID": "api-web-contents#event-remote-get-global",
      "name": "remote-get-global",
      "description": "Emitted when `remote.getGlobal()` is called in the renderer process. Calling `event.preventDefault()` will prevent the global from being returned. Custom value can be returned by setting `event.returnValue`.",
      "parameters": [
        {
          "name": "event",
          "description": "",
          "collection": false,
          "type": "IpcMainEvent",
          "required": true
        },
        {
          "name": "globalName",
          "description": "",
          "collection": false,
          "type": "String",
          "possibleValues": null,
          "required": true
        }
      ],
      "additionalTags": [],
      "apiType": "event",
      "fullSignature": "webContents.on('remote-get-global')",
      "url": "https://electronjs.org/docs/api/web-contents#event-remote-get-global",
      "slug": "webcontentsonremote-get-global",
      "tldr": "Emitted when `remote.getGlobal()` is called in the renderer process.",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:remote-get-global",
        "api:webcontentsonremote-get-global",
        "api:webContents.on('remote-get-global')",
        "doc:remote-get-global",
        "doc:webcontentsonremote-get-global",
        "doc:webContents.on('remote-get-global')"
      ]
    },
    {
      "objectID": "api-web-contents#event-remote-get-builtin",
      "name": "remote-get-builtin",
      "description": "Emitted when `remote.getBuiltin()` is called in the renderer process. Calling `event.preventDefault()` will prevent the module from being returned. Custom value can be returned by setting `event.returnValue`.",
      "parameters": [
        {
          "name": "event",
          "description": "",
          "collection": false,
          "type": "IpcMainEvent",
          "required": true
        },
        {
          "name": "moduleName",
          "description": "",
          "collection": false,
          "type": "String",
          "possibleValues": null,
          "required": true
        }
      ],
      "additionalTags": [],
      "apiType": "event",
      "fullSignature": "webContents.on('remote-get-builtin')",
      "url": "https://electronjs.org/docs/api/web-contents#event-remote-get-builtin",
      "slug": "webcontentsonremote-get-builtin",
      "tldr": "Emitted when `remote.getBuiltin()` is called in the renderer process.",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:remote-get-builtin",
        "api:webcontentsonremote-get-builtin",
        "api:webContents.on('remote-get-builtin')",
        "doc:remote-get-builtin",
        "doc:webcontentsonremote-get-builtin",
        "doc:webContents.on('remote-get-builtin')"
      ]
    },
    {
      "objectID": "api-web-contents#event-remote-get-current-window",
      "name": "remote-get-current-window",
      "description": "Emitted when `remote.getCurrentWindow()` is called in the renderer process. Calling `event.preventDefault()` will prevent the object from being returned. Custom value can be returned by setting `event.returnValue`.",
      "parameters": [
        {
          "name": "event",
          "description": "",
          "collection": false,
          "type": "IpcMainEvent",
          "required": true
        }
      ],
      "additionalTags": [],
      "apiType": "event",
      "fullSignature": "webContents.on('remote-get-current-window')",
      "url": "https://electronjs.org/docs/api/web-contents#event-remote-get-current-window",
      "slug": "webcontentsonremote-get-current-window",
      "tldr": "Emitted when `remote.getCurrentWindow()` is called in the renderer process.",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:remote-get-current-window",
        "api:webcontentsonremote-get-current-window",
        "api:webContents.on('remote-get-current-window')",
        "doc:remote-get-current-window",
        "doc:webcontentsonremote-get-current-window",
        "doc:webContents.on('remote-get-current-window')"
      ]
    },
    {
      "objectID": "api-web-contents#event-remote-get-current-web-contents",
      "name": "remote-get-current-web-contents",
      "description": "Emitted when `remote.getCurrentWebContents()` is called in the renderer process. Calling `event.preventDefault()` will prevent the object from being returned. Custom value can be returned by setting `event.returnValue`.",
      "parameters": [
        {
          "name": "event",
          "description": "",
          "collection": false,
          "type": "IpcMainEvent",
          "required": true
        }
      ],
      "additionalTags": [],
      "apiType": "event",
      "fullSignature": "webContents.on('remote-get-current-web-contents')",
      "url": "https://electronjs.org/docs/api/web-contents#event-remote-get-current-web-contents",
      "slug": "webcontentsonremote-get-current-web-contents",
      "tldr": "Emitted when `remote.getCurrentWebContents()` is called in the renderer process.",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:remote-get-current-web-contents",
        "api:webcontentsonremote-get-current-web-contents",
        "api:webContents.on('remote-get-current-web-contents')",
        "doc:remote-get-current-web-contents",
        "doc:webcontentsonremote-get-current-web-contents",
        "doc:webContents.on('remote-get-current-web-contents')"
      ]
    },
    {
      "objectID": "api-web-contents#event-remote-get-guest-web-contents",
      "name": "remote-get-guest-web-contents",
      "description": "Emitted when `<webview>.getWebContents()` is called in the renderer process. Calling `event.preventDefault()` will prevent the object from being returned. Custom value can be returned by setting `event.returnValue`.",
      "parameters": [
        {
          "name": "event",
          "description": "",
          "collection": false,
          "type": "IpcMainEvent",
          "required": true
        },
        {
          "name": "guestWebContents",
          "description": "",
          "collection": false,
          "type": "WebContents",
          "required": true
        }
      ],
      "additionalTags": [],
      "apiType": "event",
      "fullSignature": "webContents.on('remote-get-guest-web-contents')",
      "url": "https://electronjs.org/docs/api/web-contents#event-remote-get-guest-web-contents",
      "slug": "webcontentsonremote-get-guest-web-contents",
      "tldr": "Emitted when `<webview>.getWebContents()` is called in the renderer process.",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:remote-get-guest-web-contents",
        "api:webcontentsonremote-get-guest-web-contents",
        "api:webContents.on('remote-get-guest-web-contents')",
        "doc:remote-get-guest-web-contents",
        "doc:webcontentsonremote-get-guest-web-contents",
        "doc:webContents.on('remote-get-guest-web-contents')"
      ]
    },
    {
      "objectID": "api-web-frame#webframetop",
      "name": "top",
      "description": "A `WebFrame | null` representing top frame in frame hierarchy to which `webFrame` belongs, the property would be `null` if top frame is not in the current renderer process.",
      "required": true,
      "additionalTags": [
        "availability_readonly"
      ],
      "collection": false,
      "type": [
        {
          "collection": false,
          "type": "WebFrame"
        },
        {
          "type": "null",
          "collection": false
        }
      ],
      "apiType": "properties",
      "fullSignature": "webFrame.top",
      "tldr": "A `WebFrame | null` representing top frame in frame hierarchy to which `webFrame` belongs, the property would be `null` if top frame is not in the current renderer process.",
      "slug": "webframetop",
      "url": "https://electronjs.org/docs/api/web-frame#webframetop",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:top",
        "api:webframetop",
        "api:webFrame.top",
        "doc:top",
        "doc:webframetop",
        "doc:webFrame.top"
      ]
    },
    {
      "objectID": "api-web-frame#webframeopener",
      "name": "opener",
      "description": "A `WebFrame | null` representing the frame which opened `webFrame`, the property would be `null` if there's no opener or opener is not in the current renderer process.",
      "required": true,
      "additionalTags": [
        "availability_readonly"
      ],
      "collection": false,
      "type": [
        {
          "collection": false,
          "type": "WebFrame"
        },
        {
          "type": "null",
          "collection": false
        }
      ],
      "apiType": "properties",
      "fullSignature": "webFrame.opener",
      "tldr": "A `WebFrame | null` representing the frame which opened `webFrame`, the property would be `null` if there's no opener or opener is not in the current renderer process.",
      "slug": "webframeopener",
      "url": "https://electronjs.org/docs/api/web-frame#webframeopener",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:opener",
        "api:webframeopener",
        "api:webFrame.opener",
        "doc:opener",
        "doc:webframeopener",
        "doc:webFrame.opener"
      ]
    },
    {
      "objectID": "api-web-frame#webframeparent",
      "name": "parent",
      "description": "A `WebFrame | null` representing parent frame of `webFrame`, the property would be `null` if `webFrame` is top or parent is not in the current renderer process.",
      "required": true,
      "additionalTags": [
        "availability_readonly"
      ],
      "collection": false,
      "type": [
        {
          "collection": false,
          "type": "WebFrame"
        },
        {
          "type": "null",
          "collection": false
        }
      ],
      "apiType": "properties",
      "fullSignature": "webFrame.parent",
      "tldr": "A `WebFrame | null` representing parent frame of `webFrame`, the property would be `null` if `webFrame` is top or parent is not in the current renderer process.",
      "slug": "webframeparent",
      "url": "https://electronjs.org/docs/api/web-frame#webframeparent",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:parent",
        "api:webframeparent",
        "api:webFrame.parent",
        "doc:parent",
        "doc:webframeparent",
        "doc:webFrame.parent"
      ]
    },
    {
      "objectID": "api-web-frame#webframefirstchild",
      "name": "firstChild",
      "description": "A `WebFrame | null` representing the first child frame of `webFrame`, the property would be `null` if `webFrame` has no children or if first child is not in the current renderer process.",
      "required": true,
      "additionalTags": [
        "availability_readonly"
      ],
      "collection": false,
      "type": [
        {
          "collection": false,
          "type": "WebFrame"
        },
        {
          "type": "null",
          "collection": false
        }
      ],
      "apiType": "properties",
      "fullSignature": "webFrame.firstChild",
      "tldr": "A `WebFrame | null` representing the first child frame of `webFrame`, the property would be `null` if `webFrame` has no children or if first child is not in the current renderer process.",
      "slug": "webframefirstchild",
      "url": "https://electronjs.org/docs/api/web-frame#webframefirstchild",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:firstChild",
        "api:webframefirstchild",
        "api:webFrame.firstChild",
        "doc:firstChild",
        "doc:webframefirstchild",
        "doc:webFrame.firstChild"
      ]
    },
    {
      "objectID": "api-web-frame#webframenextsibling",
      "name": "nextSibling",
      "description": "A `WebFrame | null` representing next sibling frame, the property would be `null` if `webFrame` is the last frame in its parent or if the next sibling is not in the current renderer process.",
      "required": true,
      "additionalTags": [
        "availability_readonly"
      ],
      "collection": false,
      "type": [
        {
          "collection": false,
          "type": "WebFrame"
        },
        {
          "type": "null",
          "collection": false
        }
      ],
      "apiType": "properties",
      "fullSignature": "webFrame.nextSibling",
      "tldr": "A `WebFrame | null` representing next sibling frame, the property would be `null` if `webFrame` is the last frame in its parent or if the next sibling is not in the current renderer process.",
      "slug": "webframenextsibling",
      "url": "https://electronjs.org/docs/api/web-frame#webframenextsibling",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:nextSibling",
        "api:webframenextsibling",
        "api:webFrame.nextSibling",
        "doc:nextSibling",
        "doc:webframenextsibling",
        "doc:webFrame.nextSibling"
      ]
    },
    {
      "objectID": "api-web-frame#webframeroutingid",
      "name": "routingId",
      "description": "An `Integer` representing the unique frame id in the current renderer process. Distinct WebFrame instances that refer to the same underlying frame will have the same `routingId`.",
      "required": true,
      "additionalTags": [
        "availability_readonly"
      ],
      "collection": false,
      "type": "Integer",
      "apiType": "properties",
      "fullSignature": "webFrame.routingId",
      "tldr": "An `Integer` representing the unique frame id in the current renderer process.",
      "slug": "webframeroutingid",
      "url": "https://electronjs.org/docs/api/web-frame#webframeroutingid",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:routingId",
        "api:webframeroutingid",
        "api:webFrame.routingId",
        "doc:routingId",
        "doc:webframeroutingid",
        "doc:webFrame.routingId"
      ]
    },
    {
      "objectID": "api-web-frame#webframesetzoomfactorfactor",
      "name": "setZoomFactor",
      "signature": "(factor)",
      "description": "Changes the zoom factor to the specified factor. Zoom factor is zoom percent divided by 100, so 300% = 3.0.",
      "parameters": [
        {
          "name": "factor",
          "description": "Zoom factor.",
          "required": true,
          "collection": false,
          "type": "Number"
        }
      ],
      "returns": null,
      "additionalTags": [],
      "apiType": "methods",
      "fullSignature": "webFrame.setZoomFactor(factor)",
      "tldr": "Changes the zoom factor to the specified factor.",
      "slug": "webframesetzoomfactorfactor",
      "url": "https://electronjs.org/docs/api/web-frame#webframesetzoomfactorfactor",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:setZoomFactor",
        "api:webframesetzoomfactorfactor",
        "api:webFrame.setZoomFactor(factor)",
        "doc:setZoomFactor",
        "doc:webframesetzoomfactorfactor",
        "doc:webFrame.setZoomFactor(factor)"
      ]
    },
    {
      "objectID": "api-web-frame#webframegetzoomfactor",
      "name": "getZoomFactor",
      "signature": "()",
      "description": "The current zoom factor.",
      "parameters": [],
      "returns": {
        "collection": false,
        "type": "Number"
      },
      "additionalTags": [],
      "apiType": "methods",
      "fullSignature": "webFrame.getZoomFactor()",
      "tldr": "The current zoom factor.",
      "slug": "webframegetzoomfactor",
      "url": "https://electronjs.org/docs/api/web-frame#webframegetzoomfactor",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:getZoomFactor",
        "api:webframegetzoomfactor",
        "api:webFrame.getZoomFactor()",
        "doc:getZoomFactor",
        "doc:webframegetzoomfactor",
        "doc:webFrame.getZoomFactor()"
      ]
    },
    {
      "objectID": "api-web-frame#webframesetzoomlevellevel",
      "name": "setZoomLevel",
      "signature": "(level)",
      "description": "Changes the zoom level to the specified level. The original size is 0 and each increment above or below represents zooming 20% larger or smaller to default limits of 300% and 50% of original size, respectively.",
      "parameters": [
        {
          "name": "level",
          "description": "Zoom level.",
          "required": true,
          "collection": false,
          "type": "Number"
        }
      ],
      "returns": null,
      "additionalTags": [],
      "apiType": "methods",
      "fullSignature": "webFrame.setZoomLevel(level)",
      "tldr": "Changes the zoom level to the specified level.",
      "slug": "webframesetzoomlevellevel",
      "url": "https://electronjs.org/docs/api/web-frame#webframesetzoomlevellevel",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:setZoomLevel",
        "api:webframesetzoomlevellevel",
        "api:webFrame.setZoomLevel(level)",
        "doc:setZoomLevel",
        "doc:webframesetzoomlevellevel",
        "doc:webFrame.setZoomLevel(level)"
      ]
    },
    {
      "objectID": "api-web-frame#webframegetzoomlevel",
      "name": "getZoomLevel",
      "signature": "()",
      "description": "The current zoom level.",
      "parameters": [],
      "returns": {
        "collection": false,
        "type": "Number"
      },
      "additionalTags": [],
      "apiType": "methods",
      "fullSignature": "webFrame.getZoomLevel()",
      "tldr": "The current zoom level.",
      "slug": "webframegetzoomlevel",
      "url": "https://electronjs.org/docs/api/web-frame#webframegetzoomlevel",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:getZoomLevel",
        "api:webframegetzoomlevel",
        "api:webFrame.getZoomLevel()",
        "doc:getZoomLevel",
        "doc:webframegetzoomlevel",
        "doc:webFrame.getZoomLevel()"
      ]
    },
    {
      "objectID": "api-web-frame#webframesetvisualzoomlevellimitsminimumlevel-maximumlevel",
      "name": "setVisualZoomLevelLimits",
      "signature": "(minimumLevel, maximumLevel)",
      "description": "Sets the maximum and minimum pinch-to-zoom level.\n\n> **NOTE**: Visual zoom is disabled by default in Electron. To re-enable it, call:",
      "parameters": [
        {
          "name": "minimumLevel",
          "description": "",
          "required": true,
          "collection": false,
          "type": "Number"
        },
        {
          "name": "maximumLevel",
          "description": "",
          "required": true,
          "collection": false,
          "type": "Number"
        }
      ],
      "returns": null,
      "additionalTags": [],
      "apiType": "methods",
      "fullSignature": "webFrame.setVisualZoomLevelLimits(minimumLevel, maximumLevel)",
      "tldr": "Sets the maximum and minimum pinch-to-zoom level.\n\n> **NOTE**: Visual zoom is disabled by default in Electron.",
      "slug": "webframesetvisualzoomlevellimitsminimumlevel-maximumlevel",
      "url": "https://electronjs.org/docs/api/web-frame#webframesetvisualzoomlevellimitsminimumlevel-maximumlevel",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:setVisualZoomLevelLimits",
        "api:webframesetvisualzoomlevellimitsminimumlevel-maximumlevel",
        "api:webFrame.setVisualZoomLevelLimits(minimumLevel, maximumLevel)",
        "doc:setVisualZoomLevelLimits",
        "doc:webframesetvisualzoomlevellimitsminimumlevel-maximumlevel",
        "doc:webFrame.setVisualZoomLevelLimits(minimumLevel, maximumLevel)"
      ]
    },
    {
      "objectID": "api-web-frame#webframesetlayoutzoomlevellimitsminimumlevel-maximumlevel",
      "name": "setLayoutZoomLevelLimits",
      "signature": "(minimumLevel, maximumLevel)",
      "description": "Sets the maximum and minimum layout-based (i.e. non-visual) zoom level.",
      "parameters": [
        {
          "name": "minimumLevel",
          "description": "",
          "required": true,
          "collection": false,
          "type": "Number"
        },
        {
          "name": "maximumLevel",
          "description": "",
          "required": true,
          "collection": false,
          "type": "Number"
        }
      ],
      "returns": null,
      "additionalTags": [],
      "apiType": "methods",
      "fullSignature": "webFrame.setLayoutZoomLevelLimits(minimumLevel, maximumLevel)",
      "tldr": "Sets the maximum and minimum layout-based (i.e.",
      "slug": "webframesetlayoutzoomlevellimitsminimumlevel-maximumlevel",
      "url": "https://electronjs.org/docs/api/web-frame#webframesetlayoutzoomlevellimitsminimumlevel-maximumlevel",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:setLayoutZoomLevelLimits",
        "api:webframesetlayoutzoomlevellimitsminimumlevel-maximumlevel",
        "api:webFrame.setLayoutZoomLevelLimits(minimumLevel, maximumLevel)",
        "doc:setLayoutZoomLevelLimits",
        "doc:webframesetlayoutzoomlevellimitsminimumlevel-maximumlevel",
        "doc:webFrame.setLayoutZoomLevelLimits(minimumLevel, maximumLevel)"
      ]
    },
    {
      "objectID": "api-web-frame#webframesetspellcheckproviderlanguage-provider",
      "name": "setSpellCheckProvider",
      "signature": "(language, provider)",
      "description": "Sets a provider for spell checking in input fields and text areas.\n\nThe `provider` must be an object that has a `spellCheck` method that accepts an array of individual words for spellchecking. The `spellCheck` function runs asynchronously and calls the `callback` function with an array of misspelt words when complete.\n\nAn example of using node-spellchecker as provider:",
      "parameters": [
        {
          "name": "language",
          "description": "",
          "required": true,
          "collection": false,
          "type": "String",
          "possibleValues": null
        },
        {
          "name": "provider",
          "description": "",
          "required": true,
          "collection": false,
          "type": "Object",
          "properties": [
            {
              "name": "spellCheck",
              "description": "",
              "required": true,
              "additionalTags": [],
              "collection": false,
              "type": "Function",
              "parameters": [
                {
                  "name": "words",
                  "description": "",
                  "required": true,
                  "collection": true,
                  "type": "String",
                  "possibleValues": null
                },
                {
                  "name": "callback",
                  "description": "",
                  "required": true,
                  "collection": false,
                  "type": "Function",
                  "parameters": [
                    {
                      "name": "misspeltWords",
                      "description": "",
                      "required": true,
                      "collection": true,
                      "type": "String",
                      "possibleValues": null
                    }
                  ],
                  "returns": null
                }
              ],
              "returns": null
            }
          ]
        }
      ],
      "returns": null,
      "additionalTags": [],
      "apiType": "methods",
      "fullSignature": "webFrame.setSpellCheckProvider(language, provider)",
      "tldr": "Sets a provider for spell checking in input fields and text areas.\n\nThe `provider` must be an object that has a `spellCheck` method that accepts an array of individual words for spellchecking.",
      "slug": "webframesetspellcheckproviderlanguage-provider",
      "url": "https://electronjs.org/docs/api/web-frame#webframesetspellcheckproviderlanguage-provider",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:setSpellCheckProvider",
        "api:webframesetspellcheckproviderlanguage-provider",
        "api:webFrame.setSpellCheckProvider(language, provider)",
        "doc:setSpellCheckProvider",
        "doc:webframesetspellcheckproviderlanguage-provider",
        "doc:webFrame.setSpellCheckProvider(language, provider)"
      ]
    },
    {
      "objectID": "api-web-frame#webframeinsertcsscss",
      "name": "insertCSS",
      "signature": "(css)",
      "description": "A key for the inserted CSS that can later be used to remove the CSS via `webFrame.removeInsertedCSS(key)`.\n\nInjects CSS into the current web page and returns a unique key for the inserted stylesheet.",
      "parameters": [
        {
          "name": "css",
          "description": "CSS source code.",
          "required": true,
          "collection": false,
          "type": "String",
          "possibleValues": null
        }
      ],
      "returns": {
        "collection": false,
        "type": "String",
        "possibleValues": null
      },
      "additionalTags": [],
      "apiType": "methods",
      "fullSignature": "webFrame.insertCSS(css)",
      "tldr": "A key for the inserted CSS that can later be used to remove the CSS via `webFrame.removeInsertedCSS(key)`.\n\nInjects CSS into the current web page and returns a unique key for the inserted stylesheet.",
      "slug": "webframeinsertcsscss",
      "url": "https://electronjs.org/docs/api/web-frame#webframeinsertcsscss",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:insertCSS",
        "api:webframeinsertcsscss",
        "api:webFrame.insertCSS(css)",
        "doc:insertCSS",
        "doc:webframeinsertcsscss",
        "doc:webFrame.insertCSS(css)"
      ]
    },
    {
      "objectID": "api-web-frame#webframeremoveinsertedcsskey",
      "name": "removeInsertedCSS",
      "signature": "(key)",
      "description": "Removes the inserted CSS from the current web page. The stylesheet is identified by its key, which is returned from `webFrame.insertCSS(css)`.",
      "parameters": [
        {
          "name": "key",
          "description": "",
          "required": true,
          "collection": false,
          "type": "String",
          "possibleValues": null
        }
      ],
      "returns": null,
      "additionalTags": [],
      "apiType": "methods",
      "fullSignature": "webFrame.removeInsertedCSS(key)",
      "tldr": "Removes the inserted CSS from the current web page.",
      "slug": "webframeremoveinsertedcsskey",
      "url": "https://electronjs.org/docs/api/web-frame#webframeremoveinsertedcsskey",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:removeInsertedCSS",
        "api:webframeremoveinsertedcsskey",
        "api:webFrame.removeInsertedCSS(key)",
        "doc:removeInsertedCSS",
        "doc:webframeremoveinsertedcsskey",
        "doc:webFrame.removeInsertedCSS(key)"
      ]
    },
    {
      "objectID": "api-web-frame#webframeinserttexttext",
      "name": "insertText",
      "signature": "(text)",
      "description": "Inserts `text` to the focused element.",
      "parameters": [
        {
          "name": "text",
          "description": "",
          "required": true,
          "collection": false,
          "type": "String",
          "possibleValues": null
        }
      ],
      "returns": null,
      "additionalTags": [],
      "apiType": "methods",
      "fullSignature": "webFrame.insertText(text)",
      "tldr": "Inserts `text` to the focused element.",
      "slug": "webframeinserttexttext",
      "url": "https://electronjs.org/docs/api/web-frame#webframeinserttexttext",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:insertText",
        "api:webframeinserttexttext",
        "api:webFrame.insertText(text)",
        "doc:insertText",
        "doc:webframeinserttexttext",
        "doc:webFrame.insertText(text)"
      ]
    },
    {
      "objectID": "api-web-frame#webframeexecutejavascriptcode-usergesture",
      "name": "executeJavaScript",
      "signature": "(code[, userGesture])",
      "description": "A promise that resolves with the result of the executed code or is rejected if the result of the code is a rejected promise.\n\nEvaluates `code` in page.\n\nIn the browser window some HTML APIs like `requestFullScreen` can only be invoked by a gesture from the user. Setting `userGesture` to `true` will remove this limitation.",
      "parameters": [
        {
          "name": "code",
          "description": "",
          "required": true,
          "collection": false,
          "type": "String",
          "possibleValues": null
        },
        {
          "name": "userGesture",
          "description": "Default is `false`.",
          "required": false,
          "collection": false,
          "type": "Boolean"
        }
      ],
      "returns": {
        "collection": false,
        "type": "Promise",
        "innerTypes": [
          {
            "collection": false,
            "type": "any"
          }
        ]
      },
      "additionalTags": [],
      "apiType": "methods",
      "fullSignature": "webFrame.executeJavaScript(code[, userGesture])",
      "tldr": "A promise that resolves with the result of the executed code or is rejected if the result of the code is a rejected promise.\n\nEvaluates `code` in page.\n\nIn the browser window some HTML APIs like `requestFullScreen` can only be invoked by a gesture from the user.",
      "slug": "webframeexecutejavascriptcode-usergesture",
      "url": "https://electronjs.org/docs/api/web-frame#webframeexecutejavascriptcode-usergesture",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:executeJavaScript",
        "api:webframeexecutejavascriptcode-usergesture",
        "api:webFrame.executeJavaScript(code[, userGesture])",
        "doc:executeJavaScript",
        "doc:webframeexecutejavascriptcode-usergesture",
        "doc:webFrame.executeJavaScript(code[, userGesture])"
      ]
    },
    {
      "objectID": "api-web-frame#webframeexecutejavascriptinisolatedworldworldid-scripts-usergesture",
      "name": "executeJavaScriptInIsolatedWorld",
      "signature": "(worldId, scripts[, userGesture])",
      "description": "A promise that resolves with the result of the executed code or is rejected if the result of the code is a rejected promise.\n\nWorks like `executeJavaScript` but evaluates `scripts` in an isolated context.",
      "parameters": [
        {
          "name": "worldId",
          "description": "The ID of the world to run the javascript in, `0` is the default world, `999` is the world used by Electrons `contextIsolation` feature.  You can provide any integer here.",
          "required": true,
          "collection": false,
          "type": "Integer"
        },
        {
          "name": "scripts",
          "description": "",
          "required": true,
          "collection": true,
          "type": "WebSource"
        },
        {
          "name": "userGesture",
          "description": "Default is `false`.",
          "required": false,
          "collection": false,
          "type": "Boolean"
        }
      ],
      "returns": {
        "collection": false,
        "type": "Promise",
        "innerTypes": [
          {
            "collection": false,
            "type": "any"
          }
        ]
      },
      "additionalTags": [],
      "apiType": "methods",
      "fullSignature": "webFrame.executeJavaScriptInIsolatedWorld(worldId, scripts[, userGesture])",
      "tldr": "A promise that resolves with the result of the executed code or is rejected if the result of the code is a rejected promise.\n\nWorks like `executeJavaScript` but evaluates `scripts` in an isolated context.",
      "slug": "webframeexecutejavascriptinisolatedworldworldid-scripts-usergesture",
      "url": "https://electronjs.org/docs/api/web-frame#webframeexecutejavascriptinisolatedworldworldid-scripts-usergesture",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:executeJavaScriptInIsolatedWorld",
        "api:webframeexecutejavascriptinisolatedworldworldid-scripts-usergesture",
        "api:webFrame.executeJavaScriptInIsolatedWorld(worldId, scripts[, userGesture])",
        "doc:executeJavaScriptInIsolatedWorld",
        "doc:webframeexecutejavascriptinisolatedworldworldid-scripts-usergesture",
        "doc:webFrame.executeJavaScriptInIsolatedWorld(worldId, scripts[, userGesture])"
      ]
    },
    {
      "objectID": "api-web-frame#webframesetisolatedworldinfoworldid-info",
      "name": "setIsolatedWorldInfo",
      "signature": "(worldId, info)",
      "description": "Set the security origin, content security policy and name of the isolated world. Note: If the `csp` is specified, then the `securityOrigin` also has to be specified.",
      "parameters": [
        {
          "name": "worldId",
          "description": "The ID of the world to run the javascript in, `0` is the default world, `999` is the world used by Electrons `contextIsolation` feature. Chrome extensions reserve the range of IDs in `[1 << 20, 1 << 29)`. You can provide any integer here.",
          "required": true,
          "collection": false,
          "type": "Integer"
        },
        {
          "name": "info",
          "description": "",
          "required": true,
          "collection": false,
          "type": "Object",
          "properties": [
            {
              "name": "securityOrigin",
              "description": "Security origin for the isolated world.",
              "required": false,
              "additionalTags": [],
              "collection": false,
              "type": "String",
              "possibleValues": null
            },
            {
              "name": "csp",
              "description": "Content Security Policy for the isolated world.",
              "required": false,
              "additionalTags": [],
              "collection": false,
              "type": "String",
              "possibleValues": null
            },
            {
              "name": "name",
              "description": "Name for isolated world. Useful in devtools.",
              "required": false,
              "additionalTags": [],
              "collection": false,
              "type": "String",
              "possibleValues": null
            }
          ]
        }
      ],
      "returns": null,
      "additionalTags": [],
      "apiType": "methods",
      "fullSignature": "webFrame.setIsolatedWorldInfo(worldId, info)",
      "tldr": "Set the security origin, content security policy and name of the isolated world.",
      "slug": "webframesetisolatedworldinfoworldid-info",
      "url": "https://electronjs.org/docs/api/web-frame#webframesetisolatedworldinfoworldid-info",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:setIsolatedWorldInfo",
        "api:webframesetisolatedworldinfoworldid-info",
        "api:webFrame.setIsolatedWorldInfo(worldId, info)",
        "doc:setIsolatedWorldInfo",
        "doc:webframesetisolatedworldinfoworldid-info",
        "doc:webFrame.setIsolatedWorldInfo(worldId, info)"
      ]
    },
    {
      "objectID": "api-web-frame#webframegetresourceusage",
      "name": "getResourceUsage",
      "signature": "()",
      "description": "* `images` MemoryUsageDetails\n* `scripts` MemoryUsageDetails\n* `cssStyleSheets` MemoryUsageDetails\n* `xslStyleSheets` MemoryUsageDetails\n* `fonts` MemoryUsageDetails\n* `other` MemoryUsageDetails\n\nReturns an object describing usage information of Blink's internal memory caches.\n\nThis will generate:",
      "parameters": [],
      "returns": {
        "collection": false,
        "type": "Object",
        "properties": [
          {
            "name": "images",
            "description": "",
            "required": true,
            "additionalTags": [],
            "collection": false,
            "type": "MemoryUsageDetails"
          },
          {
            "name": "scripts",
            "description": "",
            "required": true,
            "additionalTags": [],
            "collection": false,
            "type": "MemoryUsageDetails"
          },
          {
            "name": "cssStyleSheets",
            "description": "",
            "required": true,
            "additionalTags": [],
            "collection": false,
            "type": "MemoryUsageDetails"
          },
          {
            "name": "xslStyleSheets",
            "description": "",
            "required": true,
            "additionalTags": [],
            "collection": false,
            "type": "MemoryUsageDetails"
          },
          {
            "name": "fonts",
            "description": "",
            "required": true,
            "additionalTags": [],
            "collection": false,
            "type": "MemoryUsageDetails"
          },
          {
            "name": "other",
            "description": "",
            "required": true,
            "additionalTags": [],
            "collection": false,
            "type": "MemoryUsageDetails"
          }
        ]
      },
      "additionalTags": [],
      "apiType": "methods",
      "fullSignature": "webFrame.getResourceUsage()",
      "tldr": "* `images` MemoryUsageDetails\n* `scripts` MemoryUsageDetails\n* `cssStyleSheets` MemoryUsageDetails\n* `xslStyleSheets` MemoryUsageDetails\n* `fonts` MemoryUsageDetails\n* `other` MemoryUsageDetails\n\nReturns an object describing usage information of Blink's internal memory caches.\n\nThis will generate:.",
      "slug": "webframegetresourceusage",
      "url": "https://electronjs.org/docs/api/web-frame#webframegetresourceusage",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:getResourceUsage",
        "api:webframegetresourceusage",
        "api:webFrame.getResourceUsage()",
        "doc:getResourceUsage",
        "doc:webframegetresourceusage",
        "doc:webFrame.getResourceUsage()"
      ]
    },
    {
      "objectID": "api-web-frame#webframeclearcache",
      "name": "clearCache",
      "signature": "()",
      "description": "Attempts to free memory that is no longer being used (like images from a previous navigation).\n\nNote that blindly calling this method probably makes Electron slower since it will have to refill these emptied caches, you should only call it if an event in your app has occurred that makes you think your page is actually using less memory (i.e. you have navigated from a super heavy page to a mostly empty one, and intend to stay there).",
      "parameters": [],
      "returns": null,
      "additionalTags": [],
      "apiType": "methods",
      "fullSignature": "webFrame.clearCache()",
      "tldr": "Attempts to free memory that is no longer being used (like images from a previous navigation).\n\nNote that blindly calling this method probably makes Electron slower since it will have to refill these emptied caches, you should only call it if an event in your app has occurred that makes you think your page is actually using less memory (i.e.",
      "slug": "webframeclearcache",
      "url": "https://electronjs.org/docs/api/web-frame#webframeclearcache",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:clearCache",
        "api:webframeclearcache",
        "api:webFrame.clearCache()",
        "doc:clearCache",
        "doc:webframeclearcache",
        "doc:webFrame.clearCache()"
      ]
    },
    {
      "objectID": "api-web-frame#webframegetframeforselectorselector",
      "name": "getFrameForSelector",
      "signature": "(selector)",
      "description": "The frame element in `webFrame's` document selected by `selector`, `null` would be returned if `selector` does not select a frame or if the frame is not in the current renderer process.",
      "parameters": [
        {
          "name": "selector",
          "description": "CSS selector for a frame element.",
          "required": true,
          "collection": false,
          "type": "String",
          "possibleValues": null
        }
      ],
      "returns": {
        "collection": false,
        "type": "WebFrame"
      },
      "additionalTags": [],
      "apiType": "methods",
      "fullSignature": "webFrame.getFrameForSelector(selector)",
      "tldr": "The frame element in `webFrame's` document selected by `selector`, `null` would be returned if `selector` does not select a frame or if the frame is not in the current renderer process.",
      "slug": "webframegetframeforselectorselector",
      "url": "https://electronjs.org/docs/api/web-frame#webframegetframeforselectorselector",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:getFrameForSelector",
        "api:webframegetframeforselectorselector",
        "api:webFrame.getFrameForSelector(selector)",
        "doc:getFrameForSelector",
        "doc:webframegetframeforselectorselector",
        "doc:webFrame.getFrameForSelector(selector)"
      ]
    },
    {
      "objectID": "api-web-frame#webframefindframebynamename",
      "name": "findFrameByName",
      "signature": "(name)",
      "description": "A child of `webFrame` with the supplied `name`, `null` would be returned if there's no such frame or if the frame is not in the current renderer process.",
      "parameters": [
        {
          "name": "name",
          "description": "",
          "required": true,
          "collection": false,
          "type": "String",
          "possibleValues": null
        }
      ],
      "returns": {
        "collection": false,
        "type": "WebFrame"
      },
      "additionalTags": [],
      "apiType": "methods",
      "fullSignature": "webFrame.findFrameByName(name)",
      "tldr": "A child of `webFrame` with the supplied `name`, `null` would be returned if there's no such frame or if the frame is not in the current renderer process.",
      "slug": "webframefindframebynamename",
      "url": "https://electronjs.org/docs/api/web-frame#webframefindframebynamename",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:findFrameByName",
        "api:webframefindframebynamename",
        "api:webFrame.findFrameByName(name)",
        "doc:findFrameByName",
        "doc:webframefindframebynamename",
        "doc:webFrame.findFrameByName(name)"
      ]
    },
    {
      "objectID": "api-web-frame#webframefindframebyroutingidroutingid",
      "name": "findFrameByRoutingId",
      "signature": "(routingId)",
      "description": "that has the supplied `routingId`, `null` if not found.",
      "parameters": [
        {
          "name": "routingId",
          "description": "An `Integer` representing the unique frame id in the current renderer process. Routing IDs can be retrieved from `WebFrame` instances (`webFrame.routingId`) and are also passed by frame specific `WebContents` navigation events (e.g. `did-frame-navigate`)",
          "required": true,
          "collection": false,
          "type": "Integer"
        }
      ],
      "returns": {
        "collection": false,
        "type": "WebFrame"
      },
      "additionalTags": [],
      "apiType": "methods",
      "fullSignature": "webFrame.findFrameByRoutingId(routingId)",
      "tldr": "that has the supplied `routingId`, `null` if not found.",
      "slug": "webframefindframebyroutingidroutingid",
      "url": "https://electronjs.org/docs/api/web-frame#webframefindframebyroutingidroutingid",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:findFrameByRoutingId",
        "api:webframefindframebyroutingidroutingid",
        "api:webFrame.findFrameByRoutingId(routingId)",
        "doc:findFrameByRoutingId",
        "doc:webframefindframebyroutingidroutingid",
        "doc:webFrame.findFrameByRoutingId(routingId)"
      ]
    },
    {
      "objectID": "api-web-request#webrequestonbeforerequestfilter-listener",
      "name": "onBeforeRequest",
      "signature": "([filter, ]listener)",
      "description": "The `listener` will be called with `listener(details, callback)` when a request is about to occur.\n\nThe `uploadData` is an array of `UploadData` objects.\n\nThe `callback` has to be called with an `response` object.\n\nSome examples of valid `urls`:",
      "parameters": [
        {
          "name": "filter",
          "description": "",
          "required": false,
          "collection": false,
          "type": "Object",
          "properties": [
            {
              "name": "urls",
              "description": "Array of URL patterns that will be used to filter out the requests that do not match the URL patterns.",
              "required": true,
              "additionalTags": [],
              "collection": true,
              "type": "String",
              "possibleValues": null
            }
          ]
        },
        {
          "name": "listener",
          "description": "",
          "required": true,
          "collection": false,
          "type": [
            {
              "collection": false,
              "type": "Function",
              "parameters": [
                {
                  "name": "details",
                  "description": "",
                  "required": true,
                  "collection": false,
                  "type": "Object",
                  "properties": [
                    {
                      "name": "id",
                      "description": "",
                      "required": true,
                      "additionalTags": [],
                      "collection": false,
                      "type": "Integer"
                    },
                    {
                      "name": "url",
                      "description": "",
                      "required": true,
                      "additionalTags": [],
                      "collection": false,
                      "type": "String",
                      "possibleValues": null
                    },
                    {
                      "name": "method",
                      "description": "",
                      "required": true,
                      "additionalTags": [],
                      "collection": false,
                      "type": "String",
                      "possibleValues": null
                    },
                    {
                      "name": "webContentsId",
                      "description": "",
                      "required": false,
                      "additionalTags": [],
                      "collection": false,
                      "type": "Integer"
                    },
                    {
                      "name": "resourceType",
                      "description": "",
                      "required": true,
                      "additionalTags": [],
                      "collection": false,
                      "type": "String",
                      "possibleValues": null
                    },
                    {
                      "name": "referrer",
                      "description": "",
                      "required": true,
                      "additionalTags": [],
                      "collection": false,
                      "type": "String",
                      "possibleValues": null
                    },
                    {
                      "name": "timestamp",
                      "description": "",
                      "required": true,
                      "additionalTags": [],
                      "collection": false,
                      "type": "Double"
                    },
                    {
                      "name": "uploadData",
                      "description": "",
                      "required": true,
                      "additionalTags": [],
                      "collection": true,
                      "type": "UploadData"
                    }
                  ]
                },
                {
                  "name": "callback",
                  "description": "",
                  "required": true,
                  "collection": false,
                  "type": "Function",
                  "parameters": [
                    {
                      "name": "response",
                      "description": "",
                      "required": true,
                      "collection": false,
                      "type": "Object",
                      "properties": [
                        {
                          "name": "cancel",
                          "description": "",
                          "required": false,
                          "additionalTags": [],
                          "collection": false,
                          "type": "Boolean"
                        },
                        {
                          "name": "redirectURL",
                          "description": "The original request is prevented from being sent or completed and is instead redirected to the given URL.",
                          "required": false,
                          "additionalTags": [],
                          "collection": false,
                          "type": "String",
                          "possibleValues": null
                        }
                      ]
                    }
                  ],
                  "returns": null
                }
              ],
              "returns": null
            },
            {
              "type": "null",
              "collection": false
            }
          ]
        }
      ],
      "returns": null,
      "additionalTags": [],
      "apiType": "instanceMethod",
      "fullSignature": "webRequest.onBeforeRequest([filter, ]listener)",
      "tldr": "The `listener` will be called with `listener(details, callback)` when a request is about to occur.\n\nThe `uploadData` is an array of `UploadData` objects.\n\nThe `callback` has to be called with an `response` object.\n\nSome examples of valid `urls`:.",
      "slug": "webrequestonbeforerequestfilter-listener",
      "url": "https://electronjs.org/docs/api/web-request#webrequestonbeforerequestfilter-listener",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:onBeforeRequest",
        "api:webrequestonbeforerequestfilter-listener",
        "api:webRequest.onBeforeRequest([filter, ]listener)",
        "doc:onBeforeRequest",
        "doc:webrequestonbeforerequestfilter-listener",
        "doc:webRequest.onBeforeRequest([filter, ]listener)"
      ]
    },
    {
      "objectID": "api-web-request#webrequestonbeforesendheadersfilter-listener",
      "name": "onBeforeSendHeaders",
      "signature": "([filter, ]listener)",
      "description": "The `listener` will be called with `listener(details, callback)` before sending an HTTP request, once the request headers are available. This may occur after a TCP connection is made to the server, but before any http data is sent.\n\nThe `callback` has to be called with a `response` object.",
      "parameters": [
        {
          "name": "filter",
          "description": "",
          "required": false,
          "collection": false,
          "type": "Object",
          "properties": [
            {
              "name": "urls",
              "description": "Array of URL patterns that will be used to filter out the requests that do not match the URL patterns.",
              "required": true,
              "additionalTags": [],
              "collection": true,
              "type": "String",
              "possibleValues": null
            }
          ]
        },
        {
          "name": "listener",
          "description": "",
          "required": true,
          "collection": false,
          "type": [
            {
              "collection": false,
              "type": "Function",
              "parameters": [
                {
                  "name": "details",
                  "description": "",
                  "required": true,
                  "collection": false,
                  "type": "Object",
                  "properties": [
                    {
                      "name": "id",
                      "description": "",
                      "required": true,
                      "additionalTags": [],
                      "collection": false,
                      "type": "Integer"
                    },
                    {
                      "name": "url",
                      "description": "",
                      "required": true,
                      "additionalTags": [],
                      "collection": false,
                      "type": "String",
                      "possibleValues": null
                    },
                    {
                      "name": "method",
                      "description": "",
                      "required": true,
                      "additionalTags": [],
                      "collection": false,
                      "type": "String",
                      "possibleValues": null
                    },
                    {
                      "name": "webContentsId",
                      "description": "",
                      "required": false,
                      "additionalTags": [],
                      "collection": false,
                      "type": "Integer"
                    },
                    {
                      "name": "resourceType",
                      "description": "",
                      "required": true,
                      "additionalTags": [],
                      "collection": false,
                      "type": "String",
                      "possibleValues": null
                    },
                    {
                      "name": "referrer",
                      "description": "",
                      "required": true,
                      "additionalTags": [],
                      "collection": false,
                      "type": "String",
                      "possibleValues": null
                    },
                    {
                      "name": "timestamp",
                      "description": "",
                      "required": true,
                      "additionalTags": [],
                      "collection": false,
                      "type": "Double"
                    },
                    {
                      "name": "requestHeaders",
                      "description": "",
                      "required": true,
                      "additionalTags": [],
                      "collection": false,
                      "type": "Record",
                      "innerTypes": [
                        {
                          "collection": false,
                          "type": "string"
                        },
                        {
                          "collection": false,
                          "type": "string"
                        }
                      ]
                    }
                  ]
                },
                {
                  "name": "callback",
                  "description": "",
                  "required": true,
                  "collection": false,
                  "type": "Function",
                  "parameters": [
                    {
                      "name": "response",
                      "description": "",
                      "required": true,
                      "collection": false,
                      "type": "Object",
                      "properties": [
                        {
                          "name": "cancel",
                          "description": "",
                          "required": false,
                          "additionalTags": [],
                          "collection": false,
                          "type": "Boolean"
                        },
                        {
                          "name": "requestHeaders",
                          "description": "When provided, request will be made with these headers.",
                          "required": false,
                          "additionalTags": [],
                          "collection": false,
                          "type": "Record",
                          "innerTypes": [
                            {
                              "collection": false,
                              "type": "string"
                            },
                            {
                              "collection": false,
                              "type": [
                                {
                                  "collection": false,
                                  "type": "string"
                                },
                                {
                                  "collection": true,
                                  "type": "string"
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ],
                  "returns": null
                }
              ],
              "returns": null
            },
            {
              "type": "null",
              "collection": false
            }
          ]
        }
      ],
      "returns": null,
      "additionalTags": [],
      "apiType": "instanceMethod",
      "fullSignature": "webRequest.onBeforeSendHeaders([filter, ]listener)",
      "tldr": "The `listener` will be called with `listener(details, callback)` before sending an HTTP request, once the request headers are available.",
      "slug": "webrequestonbeforesendheadersfilter-listener",
      "url": "https://electronjs.org/docs/api/web-request#webrequestonbeforesendheadersfilter-listener",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:onBeforeSendHeaders",
        "api:webrequestonbeforesendheadersfilter-listener",
        "api:webRequest.onBeforeSendHeaders([filter, ]listener)",
        "doc:onBeforeSendHeaders",
        "doc:webrequestonbeforesendheadersfilter-listener",
        "doc:webRequest.onBeforeSendHeaders([filter, ]listener)"
      ]
    },
    {
      "objectID": "api-web-request#webrequestonsendheadersfilter-listener",
      "name": "onSendHeaders",
      "signature": "([filter, ]listener)",
      "description": "The `listener` will be called with `listener(details)` just before a request is going to be sent to the server, modifications of previous `onBeforeSendHeaders` response are visible by the time this listener is fired.",
      "parameters": [
        {
          "name": "filter",
          "description": "",
          "required": false,
          "collection": false,
          "type": "Object",
          "properties": [
            {
              "name": "urls",
              "description": "Array of URL patterns that will be used to filter out the requests that do not match the URL patterns.",
              "required": true,
              "additionalTags": [],
              "collection": true,
              "type": "String",
              "possibleValues": null
            }
          ]
        },
        {
          "name": "listener",
          "description": "",
          "required": true,
          "collection": false,
          "type": [
            {
              "collection": false,
              "type": "Function",
              "parameters": [
                {
                  "name": "details",
                  "description": "",
                  "required": true,
                  "collection": false,
                  "type": "Object",
                  "properties": [
                    {
                      "name": "id",
                      "description": "",
                      "required": true,
                      "additionalTags": [],
                      "collection": false,
                      "type": "Integer"
                    },
                    {
                      "name": "url",
                      "description": "",
                      "required": true,
                      "additionalTags": [],
                      "collection": false,
                      "type": "String",
                      "possibleValues": null
                    },
                    {
                      "name": "method",
                      "description": "",
                      "required": true,
                      "additionalTags": [],
                      "collection": false,
                      "type": "String",
                      "possibleValues": null
                    },
                    {
                      "name": "webContentsId",
                      "description": "",
                      "required": false,
                      "additionalTags": [],
                      "collection": false,
                      "type": "Integer"
                    },
                    {
                      "name": "resourceType",
                      "description": "",
                      "required": true,
                      "additionalTags": [],
                      "collection": false,
                      "type": "String",
                      "possibleValues": null
                    },
                    {
                      "name": "referrer",
                      "description": "",
                      "required": true,
                      "additionalTags": [],
                      "collection": false,
                      "type": "String",
                      "possibleValues": null
                    },
                    {
                      "name": "timestamp",
                      "description": "",
                      "required": true,
                      "additionalTags": [],
                      "collection": false,
                      "type": "Double"
                    },
                    {
                      "name": "requestHeaders",
                      "description": "",
                      "required": true,
                      "additionalTags": [],
                      "collection": false,
                      "type": "Record",
                      "innerTypes": [
                        {
                          "collection": false,
                          "type": "string"
                        },
                        {
                          "collection": false,
                          "type": "string"
                        }
                      ]
                    }
                  ]
                }
              ],
              "returns": null
            },
            {
              "type": "null",
              "collection": false
            }
          ]
        }
      ],
      "returns": null,
      "additionalTags": [],
      "apiType": "instanceMethod",
      "fullSignature": "webRequest.onSendHeaders([filter, ]listener)",
      "tldr": "The `listener` will be called with `listener(details)` just before a request is going to be sent to the server, modifications of previous `onBeforeSendHeaders` response are visible by the time this listener is fired.",
      "slug": "webrequestonsendheadersfilter-listener",
      "url": "https://electronjs.org/docs/api/web-request#webrequestonsendheadersfilter-listener",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:onSendHeaders",
        "api:webrequestonsendheadersfilter-listener",
        "api:webRequest.onSendHeaders([filter, ]listener)",
        "doc:onSendHeaders",
        "doc:webrequestonsendheadersfilter-listener",
        "doc:webRequest.onSendHeaders([filter, ]listener)"
      ]
    },
    {
      "objectID": "api-web-request#webrequestonheadersreceivedfilter-listener",
      "name": "onHeadersReceived",
      "signature": "([filter, ]listener)",
      "description": "The `listener` will be called with `listener(details, callback)` when HTTP response headers of a request have been received.\n\nThe `callback` has to be called with a `response` object.",
      "parameters": [
        {
          "name": "filter",
          "description": "",
          "required": false,
          "collection": false,
          "type": "Object",
          "properties": [
            {
              "name": "urls",
              "description": "Array of URL patterns that will be used to filter out the requests that do not match the URL patterns.",
              "required": true,
              "additionalTags": [],
              "collection": true,
              "type": "String",
              "possibleValues": null
            }
          ]
        },
        {
          "name": "listener",
          "description": "",
          "required": true,
          "collection": false,
          "type": [
            {
              "collection": false,
              "type": "Function",
              "parameters": [
                {
                  "name": "details",
                  "description": "",
                  "required": true,
                  "collection": false,
                  "type": "Object",
                  "properties": [
                    {
                      "name": "id",
                      "description": "",
                      "required": true,
                      "additionalTags": [],
                      "collection": false,
                      "type": "Integer"
                    },
                    {
                      "name": "url",
                      "description": "",
                      "required": true,
                      "additionalTags": [],
                      "collection": false,
                      "type": "String",
                      "possibleValues": null
                    },
                    {
                      "name": "method",
                      "description": "",
                      "required": true,
                      "additionalTags": [],
                      "collection": false,
                      "type": "String",
                      "possibleValues": null
                    },
                    {
                      "name": "webContentsId",
                      "description": "",
                      "required": false,
                      "additionalTags": [],
                      "collection": false,
                      "type": "Integer"
                    },
                    {
                      "name": "resourceType",
                      "description": "",
                      "required": true,
                      "additionalTags": [],
                      "collection": false,
                      "type": "String",
                      "possibleValues": null
                    },
                    {
                      "name": "referrer",
                      "description": "",
                      "required": true,
                      "additionalTags": [],
                      "collection": false,
                      "type": "String",
                      "possibleValues": null
                    },
                    {
                      "name": "timestamp",
                      "description": "",
                      "required": true,
                      "additionalTags": [],
                      "collection": false,
                      "type": "Double"
                    },
                    {
                      "name": "statusLine",
                      "description": "",
                      "required": true,
                      "additionalTags": [],
                      "collection": false,
                      "type": "String",
                      "possibleValues": null
                    },
                    {
                      "name": "statusCode",
                      "description": "",
                      "required": true,
                      "additionalTags": [],
                      "collection": false,
                      "type": "Integer"
                    },
                    {
                      "name": "responseHeaders",
                      "description": "",
                      "required": false,
                      "additionalTags": [],
                      "collection": false,
                      "type": "Record",
                      "innerTypes": [
                        {
                          "collection": false,
                          "type": "string"
                        },
                        {
                          "collection": false,
                          "type": "string"
                        }
                      ]
                    }
                  ]
                },
                {
                  "name": "callback",
                  "description": "",
                  "required": true,
                  "collection": false,
                  "type": "Function",
                  "parameters": [
                    {
                      "name": "response",
                      "description": "",
                      "required": true,
                      "collection": false,
                      "type": "Object",
                      "properties": [
                        {
                          "name": "cancel",
                          "description": "",
                          "required": false,
                          "additionalTags": [],
                          "collection": false,
                          "type": "Boolean"
                        },
                        {
                          "name": "responseHeaders",
                          "description": "When provided, the server is assumed to have responded with these headers.",
                          "required": false,
                          "additionalTags": [],
                          "collection": false,
                          "type": "Record",
                          "innerTypes": [
                            {
                              "collection": false,
                              "type": "string"
                            },
                            {
                              "collection": false,
                              "type": [
                                {
                                  "collection": false,
                                  "type": "string"
                                },
                                {
                                  "collection": true,
                                  "type": "string"
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "name": "statusLine",
                          "description": "Should be provided when overriding `responseHeaders` to change header status otherwise original response header's status will be used.",
                          "required": false,
                          "additionalTags": [],
                          "collection": false,
                          "type": "String",
                          "possibleValues": null
                        }
                      ]
                    }
                  ],
                  "returns": null
                }
              ],
              "returns": null
            },
            {
              "type": "null",
              "collection": false
            }
          ]
        }
      ],
      "returns": null,
      "additionalTags": [],
      "apiType": "instanceMethod",
      "fullSignature": "webRequest.onHeadersReceived([filter, ]listener)",
      "tldr": "The `listener` will be called with `listener(details, callback)` when HTTP response headers of a request have been received.\n\nThe `callback` has to be called with a `response` object.",
      "slug": "webrequestonheadersreceivedfilter-listener",
      "url": "https://electronjs.org/docs/api/web-request#webrequestonheadersreceivedfilter-listener",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:onHeadersReceived",
        "api:webrequestonheadersreceivedfilter-listener",
        "api:webRequest.onHeadersReceived([filter, ]listener)",
        "doc:onHeadersReceived",
        "doc:webrequestonheadersreceivedfilter-listener",
        "doc:webRequest.onHeadersReceived([filter, ]listener)"
      ]
    },
    {
      "objectID": "api-web-request#webrequestonresponsestartedfilter-listener",
      "name": "onResponseStarted",
      "signature": "([filter, ]listener)",
      "description": "The `listener` will be called with `listener(details)` when first byte of the response body is received. For HTTP requests, this means that the status line and response headers are available.",
      "parameters": [
        {
          "name": "filter",
          "description": "",
          "required": false,
          "collection": false,
          "type": "Object",
          "properties": [
            {
              "name": "urls",
              "description": "Array of URL patterns that will be used to filter out the requests that do not match the URL patterns.",
              "required": true,
              "additionalTags": [],
              "collection": true,
              "type": "String",
              "possibleValues": null
            }
          ]
        },
        {
          "name": "listener",
          "description": "",
          "required": true,
          "collection": false,
          "type": [
            {
              "collection": false,
              "type": "Function",
              "parameters": [
                {
                  "name": "details",
                  "description": "",
                  "required": true,
                  "collection": false,
                  "type": "Object",
                  "properties": [
                    {
                      "name": "id",
                      "description": "",
                      "required": true,
                      "additionalTags": [],
                      "collection": false,
                      "type": "Integer"
                    },
                    {
                      "name": "url",
                      "description": "",
                      "required": true,
                      "additionalTags": [],
                      "collection": false,
                      "type": "String",
                      "possibleValues": null
                    },
                    {
                      "name": "method",
                      "description": "",
                      "required": true,
                      "additionalTags": [],
                      "collection": false,
                      "type": "String",
                      "possibleValues": null
                    },
                    {
                      "name": "webContentsId",
                      "description": "",
                      "required": false,
                      "additionalTags": [],
                      "collection": false,
                      "type": "Integer"
                    },
                    {
                      "name": "resourceType",
                      "description": "",
                      "required": true,
                      "additionalTags": [],
                      "collection": false,
                      "type": "String",
                      "possibleValues": null
                    },
                    {
                      "name": "referrer",
                      "description": "",
                      "required": true,
                      "additionalTags": [],
                      "collection": false,
                      "type": "String",
                      "possibleValues": null
                    },
                    {
                      "name": "timestamp",
                      "description": "",
                      "required": true,
                      "additionalTags": [],
                      "collection": false,
                      "type": "Double"
                    },
                    {
                      "name": "responseHeaders",
                      "description": "",
                      "required": false,
                      "additionalTags": [],
                      "collection": false,
                      "type": "Record",
                      "innerTypes": [
                        {
                          "collection": false,
                          "type": "string"
                        },
                        {
                          "collection": false,
                          "type": "string"
                        }
                      ]
                    },
                    {
                      "name": "fromCache",
                      "description": "Indicates whether the response was fetched from disk cache.",
                      "required": true,
                      "additionalTags": [],
                      "collection": false,
                      "type": "Boolean"
                    },
                    {
                      "name": "statusCode",
                      "description": "",
                      "required": true,
                      "additionalTags": [],
                      "collection": false,
                      "type": "Integer"
                    },
                    {
                      "name": "statusLine",
                      "description": "",
                      "required": true,
                      "additionalTags": [],
                      "collection": false,
                      "type": "String",
                      "possibleValues": null
                    }
                  ]
                }
              ],
              "returns": null
            },
            {
              "type": "null",
              "collection": false
            }
          ]
        }
      ],
      "returns": null,
      "additionalTags": [],
      "apiType": "instanceMethod",
      "fullSignature": "webRequest.onResponseStarted([filter, ]listener)",
      "tldr": "The `listener` will be called with `listener(details)` when first byte of the response body is received.",
      "slug": "webrequestonresponsestartedfilter-listener",
      "url": "https://electronjs.org/docs/api/web-request#webrequestonresponsestartedfilter-listener",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:onResponseStarted",
        "api:webrequestonresponsestartedfilter-listener",
        "api:webRequest.onResponseStarted([filter, ]listener)",
        "doc:onResponseStarted",
        "doc:webrequestonresponsestartedfilter-listener",
        "doc:webRequest.onResponseStarted([filter, ]listener)"
      ]
    },
    {
      "objectID": "api-web-request#webrequestonbeforeredirectfilter-listener",
      "name": "onBeforeRedirect",
      "signature": "([filter, ]listener)",
      "description": "The `listener` will be called with `listener(details)` when a server initiated redirect is about to occur.",
      "parameters": [
        {
          "name": "filter",
          "description": "",
          "required": false,
          "collection": false,
          "type": "Object",
          "properties": [
            {
              "name": "urls",
              "description": "Array of URL patterns that will be used to filter out the requests that do not match the URL patterns.",
              "required": true,
              "additionalTags": [],
              "collection": true,
              "type": "String",
              "possibleValues": null
            }
          ]
        },
        {
          "name": "listener",
          "description": "",
          "required": true,
          "collection": false,
          "type": [
            {
              "collection": false,
              "type": "Function",
              "parameters": [
                {
                  "name": "details",
                  "description": "",
                  "required": true,
                  "collection": false,
                  "type": "Object",
                  "properties": [
                    {
                      "name": "id",
                      "description": "",
                      "required": true,
                      "additionalTags": [],
                      "collection": false,
                      "type": "Integer"
                    },
                    {
                      "name": "url",
                      "description": "",
                      "required": true,
                      "additionalTags": [],
                      "collection": false,
                      "type": "String",
                      "possibleValues": null
                    },
                    {
                      "name": "method",
                      "description": "",
                      "required": true,
                      "additionalTags": [],
                      "collection": false,
                      "type": "String",
                      "possibleValues": null
                    },
                    {
                      "name": "webContentsId",
                      "description": "",
                      "required": false,
                      "additionalTags": [],
                      "collection": false,
                      "type": "Integer"
                    },
                    {
                      "name": "resourceType",
                      "description": "",
                      "required": true,
                      "additionalTags": [],
                      "collection": false,
                      "type": "String",
                      "possibleValues": null
                    },
                    {
                      "name": "referrer",
                      "description": "",
                      "required": true,
                      "additionalTags": [],
                      "collection": false,
                      "type": "String",
                      "possibleValues": null
                    },
                    {
                      "name": "timestamp",
                      "description": "",
                      "required": true,
                      "additionalTags": [],
                      "collection": false,
                      "type": "Double"
                    },
                    {
                      "name": "redirectURL",
                      "description": "",
                      "required": true,
                      "additionalTags": [],
                      "collection": false,
                      "type": "String",
                      "possibleValues": null
                    },
                    {
                      "name": "statusCode",
                      "description": "",
                      "required": true,
                      "additionalTags": [],
                      "collection": false,
                      "type": "Integer"
                    },
                    {
                      "name": "statusLine",
                      "description": "",
                      "required": true,
                      "additionalTags": [],
                      "collection": false,
                      "type": "String",
                      "possibleValues": null
                    },
                    {
                      "name": "ip",
                      "description": "The server IP address that the request was actually sent to.",
                      "required": false,
                      "additionalTags": [],
                      "collection": false,
                      "type": "String",
                      "possibleValues": null
                    },
                    {
                      "name": "fromCache",
                      "description": "",
                      "required": true,
                      "additionalTags": [],
                      "collection": false,
                      "type": "Boolean"
                    },
                    {
                      "name": "responseHeaders",
                      "description": "",
                      "required": false,
                      "additionalTags": [],
                      "collection": false,
                      "type": "Record",
                      "innerTypes": [
                        {
                          "collection": false,
                          "type": "string"
                        },
                        {
                          "collection": false,
                          "type": "string"
                        }
                      ]
                    }
                  ]
                }
              ],
              "returns": null
            },
            {
              "type": "null",
              "collection": false
            }
          ]
        }
      ],
      "returns": null,
      "additionalTags": [],
      "apiType": "instanceMethod",
      "fullSignature": "webRequest.onBeforeRedirect([filter, ]listener)",
      "tldr": "The `listener` will be called with `listener(details)` when a server initiated redirect is about to occur.",
      "slug": "webrequestonbeforeredirectfilter-listener",
      "url": "https://electronjs.org/docs/api/web-request#webrequestonbeforeredirectfilter-listener",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:onBeforeRedirect",
        "api:webrequestonbeforeredirectfilter-listener",
        "api:webRequest.onBeforeRedirect([filter, ]listener)",
        "doc:onBeforeRedirect",
        "doc:webrequestonbeforeredirectfilter-listener",
        "doc:webRequest.onBeforeRedirect([filter, ]listener)"
      ]
    },
    {
      "objectID": "api-web-request#webrequestoncompletedfilter-listener",
      "name": "onCompleted",
      "signature": "([filter, ]listener)",
      "description": "The `listener` will be called with `listener(details)` when a request is completed.",
      "parameters": [
        {
          "name": "filter",
          "description": "",
          "required": false,
          "collection": false,
          "type": "Object",
          "properties": [
            {
              "name": "urls",
              "description": "Array of URL patterns that will be used to filter out the requests that do not match the URL patterns.",
              "required": true,
              "additionalTags": [],
              "collection": true,
              "type": "String",
              "possibleValues": null
            }
          ]
        },
        {
          "name": "listener",
          "description": "",
          "required": true,
          "collection": false,
          "type": [
            {
              "collection": false,
              "type": "Function",
              "parameters": [
                {
                  "name": "details",
                  "description": "",
                  "required": true,
                  "collection": false,
                  "type": "Object",
                  "properties": [
                    {
                      "name": "id",
                      "description": "",
                      "required": true,
                      "additionalTags": [],
                      "collection": false,
                      "type": "Integer"
                    },
                    {
                      "name": "url",
                      "description": "",
                      "required": true,
                      "additionalTags": [],
                      "collection": false,
                      "type": "String",
                      "possibleValues": null
                    },
                    {
                      "name": "method",
                      "description": "",
                      "required": true,
                      "additionalTags": [],
                      "collection": false,
                      "type": "String",
                      "possibleValues": null
                    },
                    {
                      "name": "webContentsId",
                      "description": "",
                      "required": false,
                      "additionalTags": [],
                      "collection": false,
                      "type": "Integer"
                    },
                    {
                      "name": "resourceType",
                      "description": "",
                      "required": true,
                      "additionalTags": [],
                      "collection": false,
                      "type": "String",
                      "possibleValues": null
                    },
                    {
                      "name": "referrer",
                      "description": "",
                      "required": true,
                      "additionalTags": [],
                      "collection": false,
                      "type": "String",
                      "possibleValues": null
                    },
                    {
                      "name": "timestamp",
                      "description": "",
                      "required": true,
                      "additionalTags": [],
                      "collection": false,
                      "type": "Double"
                    },
                    {
                      "name": "responseHeaders",
                      "description": "",
                      "required": false,
                      "additionalTags": [],
                      "collection": false,
                      "type": "Record",
                      "innerTypes": [
                        {
                          "collection": false,
                          "type": "string"
                        },
                        {
                          "collection": false,
                          "type": "string"
                        }
                      ]
                    },
                    {
                      "name": "fromCache",
                      "description": "",
                      "required": true,
                      "additionalTags": [],
                      "collection": false,
                      "type": "Boolean"
                    },
                    {
                      "name": "statusCode",
                      "description": "",
                      "required": true,
                      "additionalTags": [],
                      "collection": false,
                      "type": "Integer"
                    },
                    {
                      "name": "statusLine",
                      "description": "",
                      "required": true,
                      "additionalTags": [],
                      "collection": false,
                      "type": "String",
                      "possibleValues": null
                    }
                  ]
                }
              ],
              "returns": null
            },
            {
              "type": "null",
              "collection": false
            }
          ]
        }
      ],
      "returns": null,
      "additionalTags": [],
      "apiType": "instanceMethod",
      "fullSignature": "webRequest.onCompleted([filter, ]listener)",
      "tldr": "The `listener` will be called with `listener(details)` when a request is completed.",
      "slug": "webrequestoncompletedfilter-listener",
      "url": "https://electronjs.org/docs/api/web-request#webrequestoncompletedfilter-listener",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:onCompleted",
        "api:webrequestoncompletedfilter-listener",
        "api:webRequest.onCompleted([filter, ]listener)",
        "doc:onCompleted",
        "doc:webrequestoncompletedfilter-listener",
        "doc:webRequest.onCompleted([filter, ]listener)"
      ]
    },
    {
      "objectID": "api-web-request#webrequestonerroroccurredfilter-listener",
      "name": "onErrorOccurred",
      "signature": "([filter, ]listener)",
      "description": "The `listener` will be called with `listener(details)` when an error occurs.",
      "parameters": [
        {
          "name": "filter",
          "description": "",
          "required": false,
          "collection": false,
          "type": "Object",
          "properties": [
            {
              "name": "urls",
              "description": "Array of URL patterns that will be used to filter out the requests that do not match the URL patterns.",
              "required": true,
              "additionalTags": [],
              "collection": true,
              "type": "String",
              "possibleValues": null
            }
          ]
        },
        {
          "name": "listener",
          "description": "",
          "required": true,
          "collection": false,
          "type": [
            {
              "collection": false,
              "type": "Function",
              "parameters": [
                {
                  "name": "details",
                  "description": "",
                  "required": true,
                  "collection": false,
                  "type": "Object",
                  "properties": [
                    {
                      "name": "id",
                      "description": "",
                      "required": true,
                      "additionalTags": [],
                      "collection": false,
                      "type": "Integer"
                    },
                    {
                      "name": "url",
                      "description": "",
                      "required": true,
                      "additionalTags": [],
                      "collection": false,
                      "type": "String",
                      "possibleValues": null
                    },
                    {
                      "name": "method",
                      "description": "",
                      "required": true,
                      "additionalTags": [],
                      "collection": false,
                      "type": "String",
                      "possibleValues": null
                    },
                    {
                      "name": "webContentsId",
                      "description": "",
                      "required": false,
                      "additionalTags": [],
                      "collection": false,
                      "type": "Integer"
                    },
                    {
                      "name": "resourceType",
                      "description": "",
                      "required": true,
                      "additionalTags": [],
                      "collection": false,
                      "type": "String",
                      "possibleValues": null
                    },
                    {
                      "name": "referrer",
                      "description": "",
                      "required": true,
                      "additionalTags": [],
                      "collection": false,
                      "type": "String",
                      "possibleValues": null
                    },
                    {
                      "name": "timestamp",
                      "description": "",
                      "required": true,
                      "additionalTags": [],
                      "collection": false,
                      "type": "Double"
                    },
                    {
                      "name": "fromCache",
                      "description": "",
                      "required": true,
                      "additionalTags": [],
                      "collection": false,
                      "type": "Boolean"
                    },
                    {
                      "name": "error",
                      "description": "The error description.",
                      "required": true,
                      "additionalTags": [],
                      "collection": false,
                      "type": "String",
                      "possibleValues": null
                    }
                  ]
                }
              ],
              "returns": null
            },
            {
              "type": "null",
              "collection": false
            }
          ]
        }
      ],
      "returns": null,
      "additionalTags": [],
      "apiType": "instanceMethod",
      "fullSignature": "webRequest.onErrorOccurred([filter, ]listener)",
      "tldr": "The `listener` will be called with `listener(details)` when an error occurs.",
      "slug": "webrequestonerroroccurredfilter-listener",
      "url": "https://electronjs.org/docs/api/web-request#webrequestonerroroccurredfilter-listener",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:onErrorOccurred",
        "api:webrequestonerroroccurredfilter-listener",
        "api:webRequest.onErrorOccurred([filter, ]listener)",
        "doc:onErrorOccurred",
        "doc:webrequestonerroroccurredfilter-listener",
        "doc:webRequest.onErrorOccurred([filter, ]listener)"
      ]
    },
    {
      "objectID": "api-webview-tag#webviewtagsrc",
      "name": "src",
      "description": "A `String` representing the visible URL. Writing to this attribute initiates top-level navigation.\n\nAssigning `src` its own value will reload the current page.\n\nThe `src` attribute can also accept data URLs, such as `data:text/plain,Hello, world!`.",
      "required": true,
      "additionalTags": [],
      "collection": false,
      "type": "String",
      "possibleValues": null,
      "apiType": "properties",
      "fullSignature": "webviewTag.src",
      "tldr": "A `String` representing the visible URL.",
      "slug": "webviewtagsrc",
      "url": "https://electronjs.org/docs/api/webview-tag#webviewtagsrc",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:src",
        "api:webviewtagsrc",
        "api:webviewTag.src",
        "doc:src",
        "doc:webviewtagsrc",
        "doc:webviewTag.src"
      ]
    },
    {
      "objectID": "api-webview-tag#webviewtagnodeintegration",
      "name": "nodeintegration",
      "description": "A `Boolean`. When this attribute is present the guest page in `webview` will have node integration and can use node APIs like `require` and `process` to access low level system resources. Node integration is disabled by default in the guest page.",
      "required": true,
      "additionalTags": [],
      "collection": false,
      "type": "Boolean",
      "apiType": "properties",
      "fullSignature": "webviewTag.nodeintegration",
      "tldr": "A `Boolean`.",
      "slug": "webviewtagnodeintegration",
      "url": "https://electronjs.org/docs/api/webview-tag#webviewtagnodeintegration",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:nodeintegration",
        "api:webviewtagnodeintegration",
        "api:webviewTag.nodeintegration",
        "doc:nodeintegration",
        "doc:webviewtagnodeintegration",
        "doc:webviewTag.nodeintegration"
      ]
    },
    {
      "objectID": "api-webview-tag#webviewtagnodeintegrationinsubframes",
      "name": "nodeintegrationinsubframes",
      "description": "A `Boolean` for the experimental option for enabling NodeJS support in sub-frames such as iframes inside the `webview`. All your preloads will load for every iframe, you can use `process.isMainFrame` to determine if you are in the main frame or not. This option is disabled by default in the guest page.",
      "required": true,
      "additionalTags": [],
      "collection": false,
      "type": "Boolean",
      "apiType": "properties",
      "fullSignature": "webviewTag.nodeintegrationinsubframes",
      "tldr": "A `Boolean` for the experimental option for enabling NodeJS support in sub-frames such as iframes inside the `webview`.",
      "slug": "webviewtagnodeintegrationinsubframes",
      "url": "https://electronjs.org/docs/api/webview-tag#webviewtagnodeintegrationinsubframes",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:nodeintegrationinsubframes",
        "api:webviewtagnodeintegrationinsubframes",
        "api:webviewTag.nodeintegrationinsubframes",
        "doc:nodeintegrationinsubframes",
        "doc:webviewtagnodeintegrationinsubframes",
        "doc:webviewTag.nodeintegrationinsubframes"
      ]
    },
    {
      "objectID": "api-webview-tag#webviewtagenableremotemodule",
      "name": "enableremotemodule",
      "description": "A `Boolean`. When this attribute is `false` the guest page in `webview` will not have access to the `remote` module. The remote module is available by default.",
      "required": true,
      "additionalTags": [],
      "collection": false,
      "type": "Boolean",
      "apiType": "properties",
      "fullSignature": "webviewTag.enableremotemodule",
      "tldr": "A `Boolean`.",
      "slug": "webviewtagenableremotemodule",
      "url": "https://electronjs.org/docs/api/webview-tag#webviewtagenableremotemodule",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:enableremotemodule",
        "api:webviewtagenableremotemodule",
        "api:webviewTag.enableremotemodule",
        "doc:enableremotemodule",
        "doc:webviewtagenableremotemodule",
        "doc:webviewTag.enableremotemodule"
      ]
    },
    {
      "objectID": "api-webview-tag#webviewtagplugins",
      "name": "plugins",
      "description": "A `Boolean`. When this attribute is present the guest page in `webview` will be able to use browser plugins. Plugins are disabled by default.",
      "required": true,
      "additionalTags": [],
      "collection": false,
      "type": "Boolean",
      "apiType": "properties",
      "fullSignature": "webviewTag.plugins",
      "tldr": "A `Boolean`.",
      "slug": "webviewtagplugins",
      "url": "https://electronjs.org/docs/api/webview-tag#webviewtagplugins",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:plugins",
        "api:webviewtagplugins",
        "api:webviewTag.plugins",
        "doc:plugins",
        "doc:webviewtagplugins",
        "doc:webviewTag.plugins"
      ]
    },
    {
      "objectID": "api-webview-tag#webviewtagpreload",
      "name": "preload",
      "description": "A `String` that specifies a script that will be loaded before other scripts run in the guest page. The protocol of script's URL must be either `file:` or `asar:`, because it will be loaded by `require` in guest page under the hood.\n\nWhen the guest page doesn't have node integration this script will still have access to all Node APIs, but global objects injected by Node will be deleted after this script has finished executing.\n\n**Note:** This option will appear as `preloadURL` (not `preload`) in the `webPreferences` specified to the `will-attach-webview` event.",
      "required": true,
      "additionalTags": [],
      "collection": false,
      "type": "String",
      "possibleValues": null,
      "apiType": "properties",
      "fullSignature": "webviewTag.preload",
      "tldr": "A `String` that specifies a script that will be loaded before other scripts run in the guest page.",
      "slug": "webviewtagpreload",
      "url": "https://electronjs.org/docs/api/webview-tag#webviewtagpreload",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:preload",
        "api:webviewtagpreload",
        "api:webviewTag.preload",
        "doc:preload",
        "doc:webviewtagpreload",
        "doc:webviewTag.preload"
      ]
    },
    {
      "objectID": "api-webview-tag#webviewtaghttpreferrer",
      "name": "httpreferrer",
      "description": "A `String` that sets the referrer URL for the guest page.",
      "required": true,
      "additionalTags": [],
      "collection": false,
      "type": "String",
      "possibleValues": null,
      "apiType": "properties",
      "fullSignature": "webviewTag.httpreferrer",
      "tldr": "A `String` that sets the referrer URL for the guest page.",
      "slug": "webviewtaghttpreferrer",
      "url": "https://electronjs.org/docs/api/webview-tag#webviewtaghttpreferrer",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:httpreferrer",
        "api:webviewtaghttpreferrer",
        "api:webviewTag.httpreferrer",
        "doc:httpreferrer",
        "doc:webviewtaghttpreferrer",
        "doc:webviewTag.httpreferrer"
      ]
    },
    {
      "objectID": "api-webview-tag#webviewtaguseragent",
      "name": "useragent",
      "description": "A `String` that sets the user agent for the guest page before the page is navigated to. Once the page is loaded, use the `setUserAgent` method to change the user agent.",
      "required": true,
      "additionalTags": [],
      "collection": false,
      "type": "String",
      "possibleValues": null,
      "apiType": "properties",
      "fullSignature": "webviewTag.useragent",
      "tldr": "A `String` that sets the user agent for the guest page before the page is navigated to.",
      "slug": "webviewtaguseragent",
      "url": "https://electronjs.org/docs/api/webview-tag#webviewtaguseragent",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:useragent",
        "api:webviewtaguseragent",
        "api:webviewTag.useragent",
        "doc:useragent",
        "doc:webviewtaguseragent",
        "doc:webviewTag.useragent"
      ]
    },
    {
      "objectID": "api-webview-tag#webviewtagdisablewebsecurity",
      "name": "disablewebsecurity",
      "description": "A `Boolean`. When this attribute is present the guest page will have web security disabled. Web security is enabled by default.",
      "required": true,
      "additionalTags": [],
      "collection": false,
      "type": "Boolean",
      "apiType": "properties",
      "fullSignature": "webviewTag.disablewebsecurity",
      "tldr": "A `Boolean`.",
      "slug": "webviewtagdisablewebsecurity",
      "url": "https://electronjs.org/docs/api/webview-tag#webviewtagdisablewebsecurity",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:disablewebsecurity",
        "api:webviewtagdisablewebsecurity",
        "api:webviewTag.disablewebsecurity",
        "doc:disablewebsecurity",
        "doc:webviewtagdisablewebsecurity",
        "doc:webviewTag.disablewebsecurity"
      ]
    },
    {
      "objectID": "api-webview-tag#webviewtagpartition",
      "name": "partition",
      "description": "A `String` that sets the session used by the page. If `partition` starts with `persist:`, the page will use a persistent session available to all pages in the app with the same `partition`. if there is no `persist:` prefix, the page will use an in-memory session. By assigning the same `partition`, multiple pages can share the same session. If the `partition` is unset then default session of the app will be used.\n\nThis value can only be modified before the first navigation, since the session of an active renderer process cannot change. Subsequent attempts to modify the value will fail with a DOM exception.",
      "required": true,
      "additionalTags": [],
      "collection": false,
      "type": "String",
      "possibleValues": null,
      "apiType": "properties",
      "fullSignature": "webviewTag.partition",
      "tldr": "A `String` that sets the session used by the page.",
      "slug": "webviewtagpartition",
      "url": "https://electronjs.org/docs/api/webview-tag#webviewtagpartition",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:partition",
        "api:webviewtagpartition",
        "api:webviewTag.partition",
        "doc:partition",
        "doc:webviewtagpartition",
        "doc:webviewTag.partition"
      ]
    },
    {
      "objectID": "api-webview-tag#webviewtagallowpopups",
      "name": "allowpopups",
      "description": "A `Boolean`. When this attribute is present the guest page will be allowed to open new windows. Popups are disabled by default.",
      "required": true,
      "additionalTags": [],
      "collection": false,
      "type": "Boolean",
      "apiType": "properties",
      "fullSignature": "webviewTag.allowpopups",
      "tldr": "A `Boolean`.",
      "slug": "webviewtagallowpopups",
      "url": "https://electronjs.org/docs/api/webview-tag#webviewtagallowpopups",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:allowpopups",
        "api:webviewtagallowpopups",
        "api:webviewTag.allowpopups",
        "doc:allowpopups",
        "doc:webviewtagallowpopups",
        "doc:webviewTag.allowpopups"
      ]
    },
    {
      "objectID": "api-webview-tag#webviewtagwebpreferences",
      "name": "webpreferences",
      "description": "A `String` which is a comma separated list of strings which specifies the web preferences to be set on the webview. The full list of supported preference strings can be found in BrowserWindow.\n\nThe string follows the same format as the features string in `window.open`. A name by itself is given a `true` boolean value. A preference can be set to another value by including an `=`, followed by the value. Special values `yes` and `1` are interpreted as `true`, while `no` and `0` are interpreted as `false`.",
      "required": true,
      "additionalTags": [],
      "collection": false,
      "type": "String",
      "possibleValues": null,
      "apiType": "properties",
      "fullSignature": "webviewTag.webpreferences",
      "tldr": "A `String` which is a comma separated list of strings which specifies the web preferences to be set on the webview.",
      "slug": "webviewtagwebpreferences",
      "url": "https://electronjs.org/docs/api/webview-tag#webviewtagwebpreferences",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:webpreferences",
        "api:webviewtagwebpreferences",
        "api:webviewTag.webpreferences",
        "doc:webpreferences",
        "doc:webviewtagwebpreferences",
        "doc:webviewTag.webpreferences"
      ]
    },
    {
      "objectID": "api-webview-tag#webviewtagenableblinkfeatures",
      "name": "enableblinkfeatures",
      "description": "A `String` which is a list of strings which specifies the blink features to be enabled separated by `,`. The full list of supported feature strings can be found in the RuntimeEnabledFeatures.json5 file.",
      "required": true,
      "additionalTags": [],
      "collection": false,
      "type": "String",
      "possibleValues": null,
      "apiType": "properties",
      "fullSignature": "webviewTag.enableblinkfeatures",
      "tldr": "A `String` which is a list of strings which specifies the blink features to be enabled separated by `,`.",
      "slug": "webviewtagenableblinkfeatures",
      "url": "https://electronjs.org/docs/api/webview-tag#webviewtagenableblinkfeatures",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:enableblinkfeatures",
        "api:webviewtagenableblinkfeatures",
        "api:webviewTag.enableblinkfeatures",
        "doc:enableblinkfeatures",
        "doc:webviewtagenableblinkfeatures",
        "doc:webviewTag.enableblinkfeatures"
      ]
    },
    {
      "objectID": "api-webview-tag#webviewtagdisableblinkfeatures",
      "name": "disableblinkfeatures",
      "description": "A `String` which is a list of strings which specifies the blink features to be disabled separated by `,`. The full list of supported feature strings can be found in the RuntimeEnabledFeatures.json5 file.",
      "required": true,
      "additionalTags": [],
      "collection": false,
      "type": "String",
      "possibleValues": null,
      "apiType": "properties",
      "fullSignature": "webviewTag.disableblinkfeatures",
      "tldr": "A `String` which is a list of strings which specifies the blink features to be disabled separated by `,`.",
      "slug": "webviewtagdisableblinkfeatures",
      "url": "https://electronjs.org/docs/api/webview-tag#webviewtagdisableblinkfeatures",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:disableblinkfeatures",
        "api:webviewtagdisableblinkfeatures",
        "api:webviewTag.disableblinkfeatures",
        "doc:disableblinkfeatures",
        "doc:webviewtagdisableblinkfeatures",
        "doc:webviewTag.disableblinkfeatures"
      ]
    },
    {
      "objectID": "api-webview-tag#webviewtagloadurlurl-options",
      "name": "loadURL",
      "signature": "(url[, options])",
      "description": "The promise will resolve when the page has finished loading (see `did-finish-load`), and rejects if the page fails to load (see `did-fail-load`).\n\nLoads the `url` in the webview, the `url` must contain the protocol prefix, e.g. the `http://` or `file://`.",
      "parameters": [
        {
          "name": "url",
          "description": "",
          "required": true,
          "collection": false,
          "type": "URL"
        },
        {
          "name": "options",
          "description": "",
          "required": false,
          "collection": false,
          "type": "Object",
          "properties": [
            {
              "name": "httpReferrer",
              "description": "An HTTP Referrer url.",
              "required": false,
              "additionalTags": [],
              "collection": false,
              "type": [
                {
                  "collection": false,
                  "type": "String",
                  "possibleValues": null
                },
                {
                  "collection": false,
                  "type": "Referrer"
                }
              ]
            },
            {
              "name": "userAgent",
              "description": "A user agent originating the request.",
              "required": false,
              "additionalTags": [],
              "collection": false,
              "type": "String",
              "possibleValues": null
            },
            {
              "name": "extraHeaders",
              "description": "Extra headers separated by \"\\n\"",
              "required": false,
              "additionalTags": [],
              "collection": false,
              "type": "String",
              "possibleValues": null
            },
            {
              "name": "postData",
              "description": "",
              "required": false,
              "additionalTags": [],
              "collection": false,
              "type": [
                {
                  "collection": true,
                  "type": "UploadRawData"
                },
                {
                  "collection": true,
                  "type": "UploadFile"
                },
                {
                  "collection": true,
                  "type": "UploadBlob"
                }
              ]
            },
            {
              "name": "baseURLForDataURL",
              "description": "Base url (with trailing path separator) for files to be loaded by the data url. This is needed only if the specified `url` is a data url and needs to load other files.",
              "required": false,
              "additionalTags": [],
              "collection": false,
              "type": "String",
              "possibleValues": null
            }
          ]
        }
      ],
      "returns": {
        "collection": false,
        "type": "Promise",
        "innerTypes": [
          {
            "collection": false,
            "type": "void"
          }
        ]
      },
      "additionalTags": [],
      "apiType": "methods",
      "fullSignature": "webviewTag.loadURL(url[, options])",
      "tldr": "The promise will resolve when the page has finished loading (see `did-finish-load`), and rejects if the page fails to load (see `did-fail-load`).\n\nLoads the `url` in the webview, the `url` must contain the protocol prefix, e.g.",
      "slug": "webviewtagloadurlurl-options",
      "url": "https://electronjs.org/docs/api/webview-tag#webviewtagloadurlurl-options",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:loadURL",
        "api:webviewtagloadurlurl-options",
        "api:webviewTag.loadURL(url[, options])",
        "doc:loadURL",
        "doc:webviewtagloadurlurl-options",
        "doc:webviewTag.loadURL(url[, options])"
      ]
    },
    {
      "objectID": "api-webview-tag#webviewtagdownloadurlurl",
      "name": "downloadURL",
      "signature": "(url)",
      "description": "Initiates a download of the resource at `url` without navigating.",
      "parameters": [
        {
          "name": "url",
          "description": "",
          "required": true,
          "collection": false,
          "type": "String",
          "possibleValues": null
        }
      ],
      "returns": null,
      "additionalTags": [],
      "apiType": "methods",
      "fullSignature": "webviewTag.downloadURL(url)",
      "tldr": "Initiates a download of the resource at `url` without navigating.",
      "slug": "webviewtagdownloadurlurl",
      "url": "https://electronjs.org/docs/api/webview-tag#webviewtagdownloadurlurl",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:downloadURL",
        "api:webviewtagdownloadurlurl",
        "api:webviewTag.downloadURL(url)",
        "doc:downloadURL",
        "doc:webviewtagdownloadurlurl",
        "doc:webviewTag.downloadURL(url)"
      ]
    },
    {
      "objectID": "api-webview-tag#webviewtaggeturl",
      "name": "getURL",
      "signature": "()",
      "description": "The URL of guest page.",
      "parameters": [],
      "returns": {
        "collection": false,
        "type": "String",
        "possibleValues": null
      },
      "additionalTags": [],
      "apiType": "methods",
      "fullSignature": "webviewTag.getURL()",
      "tldr": "The URL of guest page.",
      "slug": "webviewtaggeturl",
      "url": "https://electronjs.org/docs/api/webview-tag#webviewtaggeturl",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:getURL",
        "api:webviewtaggeturl",
        "api:webviewTag.getURL()",
        "doc:getURL",
        "doc:webviewtaggeturl",
        "doc:webviewTag.getURL()"
      ]
    },
    {
      "objectID": "api-webview-tag#webviewtaggettitle",
      "name": "getTitle",
      "signature": "()",
      "description": "The title of guest page.",
      "parameters": [],
      "returns": {
        "collection": false,
        "type": "String",
        "possibleValues": null
      },
      "additionalTags": [],
      "apiType": "methods",
      "fullSignature": "webviewTag.getTitle()",
      "tldr": "The title of guest page.",
      "slug": "webviewtaggettitle",
      "url": "https://electronjs.org/docs/api/webview-tag#webviewtaggettitle",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:getTitle",
        "api:webviewtaggettitle",
        "api:webviewTag.getTitle()",
        "doc:getTitle",
        "doc:webviewtaggettitle",
        "doc:webviewTag.getTitle()"
      ]
    },
    {
      "objectID": "api-webview-tag#webviewtagisloading",
      "name": "isLoading",
      "signature": "()",
      "description": "Whether guest page is still loading resources.",
      "parameters": [],
      "returns": {
        "collection": false,
        "type": "Boolean"
      },
      "additionalTags": [],
      "apiType": "methods",
      "fullSignature": "webviewTag.isLoading()",
      "tldr": "Whether guest page is still loading resources.",
      "slug": "webviewtagisloading",
      "url": "https://electronjs.org/docs/api/webview-tag#webviewtagisloading",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:isLoading",
        "api:webviewtagisloading",
        "api:webviewTag.isLoading()",
        "doc:isLoading",
        "doc:webviewtagisloading",
        "doc:webviewTag.isLoading()"
      ]
    },
    {
      "objectID": "api-webview-tag#webviewtagisloadingmainframe",
      "name": "isLoadingMainFrame",
      "signature": "()",
      "description": "Whether the main frame (and not just iframes or frames within it) is still loading.",
      "parameters": [],
      "returns": {
        "collection": false,
        "type": "Boolean"
      },
      "additionalTags": [],
      "apiType": "methods",
      "fullSignature": "webviewTag.isLoadingMainFrame()",
      "tldr": "Whether the main frame (and not just iframes or frames within it) is still loading.",
      "slug": "webviewtagisloadingmainframe",
      "url": "https://electronjs.org/docs/api/webview-tag#webviewtagisloadingmainframe",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:isLoadingMainFrame",
        "api:webviewtagisloadingmainframe",
        "api:webviewTag.isLoadingMainFrame()",
        "doc:isLoadingMainFrame",
        "doc:webviewtagisloadingmainframe",
        "doc:webviewTag.isLoadingMainFrame()"
      ]
    },
    {
      "objectID": "api-webview-tag#webviewtagiswaitingforresponse",
      "name": "isWaitingForResponse",
      "signature": "()",
      "description": "Whether the guest page is waiting for a first-response for the main resource of the page.",
      "parameters": [],
      "returns": {
        "collection": false,
        "type": "Boolean"
      },
      "additionalTags": [],
      "apiType": "methods",
      "fullSignature": "webviewTag.isWaitingForResponse()",
      "tldr": "Whether the guest page is waiting for a first-response for the main resource of the page.",
      "slug": "webviewtagiswaitingforresponse",
      "url": "https://electronjs.org/docs/api/webview-tag#webviewtagiswaitingforresponse",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:isWaitingForResponse",
        "api:webviewtagiswaitingforresponse",
        "api:webviewTag.isWaitingForResponse()",
        "doc:isWaitingForResponse",
        "doc:webviewtagiswaitingforresponse",
        "doc:webviewTag.isWaitingForResponse()"
      ]
    },
    {
      "objectID": "api-webview-tag#webviewtagstop",
      "name": "stop",
      "signature": "()",
      "description": "Stops any pending navigation.",
      "parameters": [],
      "returns": null,
      "additionalTags": [],
      "apiType": "methods",
      "fullSignature": "webviewTag.stop()",
      "tldr": "Stops any pending navigation.",
      "slug": "webviewtagstop",
      "url": "https://electronjs.org/docs/api/webview-tag#webviewtagstop",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:stop",
        "api:webviewtagstop",
        "api:webviewTag.stop()",
        "doc:stop",
        "doc:webviewtagstop",
        "doc:webviewTag.stop()"
      ]
    },
    {
      "objectID": "api-webview-tag#webviewtagreload",
      "name": "reload",
      "signature": "()",
      "description": "Reloads the guest page.",
      "parameters": [],
      "returns": null,
      "additionalTags": [],
      "apiType": "methods",
      "fullSignature": "webviewTag.reload()",
      "tldr": "Reloads the guest page.",
      "slug": "webviewtagreload",
      "url": "https://electronjs.org/docs/api/webview-tag#webviewtagreload",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:reload",
        "api:webviewtagreload",
        "api:webviewTag.reload()",
        "doc:reload",
        "doc:webviewtagreload",
        "doc:webviewTag.reload()"
      ]
    },
    {
      "objectID": "api-webview-tag#webviewtagreloadignoringcache",
      "name": "reloadIgnoringCache",
      "signature": "()",
      "description": "Reloads the guest page and ignores cache.",
      "parameters": [],
      "returns": null,
      "additionalTags": [],
      "apiType": "methods",
      "fullSignature": "webviewTag.reloadIgnoringCache()",
      "tldr": "Reloads the guest page and ignores cache.",
      "slug": "webviewtagreloadignoringcache",
      "url": "https://electronjs.org/docs/api/webview-tag#webviewtagreloadignoringcache",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:reloadIgnoringCache",
        "api:webviewtagreloadignoringcache",
        "api:webviewTag.reloadIgnoringCache()",
        "doc:reloadIgnoringCache",
        "doc:webviewtagreloadignoringcache",
        "doc:webviewTag.reloadIgnoringCache()"
      ]
    },
    {
      "objectID": "api-webview-tag#webviewtagcangoback",
      "name": "canGoBack",
      "signature": "()",
      "description": "Whether the guest page can go back.",
      "parameters": [],
      "returns": {
        "collection": false,
        "type": "Boolean"
      },
      "additionalTags": [],
      "apiType": "methods",
      "fullSignature": "webviewTag.canGoBack()",
      "tldr": "Whether the guest page can go back.",
      "slug": "webviewtagcangoback",
      "url": "https://electronjs.org/docs/api/webview-tag#webviewtagcangoback",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:canGoBack",
        "api:webviewtagcangoback",
        "api:webviewTag.canGoBack()",
        "doc:canGoBack",
        "doc:webviewtagcangoback",
        "doc:webviewTag.canGoBack()"
      ]
    },
    {
      "objectID": "api-webview-tag#webviewtagcangoforward",
      "name": "canGoForward",
      "signature": "()",
      "description": "Whether the guest page can go forward.",
      "parameters": [],
      "returns": {
        "collection": false,
        "type": "Boolean"
      },
      "additionalTags": [],
      "apiType": "methods",
      "fullSignature": "webviewTag.canGoForward()",
      "tldr": "Whether the guest page can go forward.",
      "slug": "webviewtagcangoforward",
      "url": "https://electronjs.org/docs/api/webview-tag#webviewtagcangoforward",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:canGoForward",
        "api:webviewtagcangoforward",
        "api:webviewTag.canGoForward()",
        "doc:canGoForward",
        "doc:webviewtagcangoforward",
        "doc:webviewTag.canGoForward()"
      ]
    },
    {
      "objectID": "api-webview-tag#webviewtagcangotooffsetoffset",
      "name": "canGoToOffset",
      "signature": "(offset)",
      "description": "Whether the guest page can go to `offset`.",
      "parameters": [
        {
          "name": "offset",
          "description": "",
          "required": true,
          "collection": false,
          "type": "Integer"
        }
      ],
      "returns": {
        "collection": false,
        "type": "Boolean"
      },
      "additionalTags": [],
      "apiType": "methods",
      "fullSignature": "webviewTag.canGoToOffset(offset)",
      "tldr": "Whether the guest page can go to `offset`.",
      "slug": "webviewtagcangotooffsetoffset",
      "url": "https://electronjs.org/docs/api/webview-tag#webviewtagcangotooffsetoffset",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:canGoToOffset",
        "api:webviewtagcangotooffsetoffset",
        "api:webviewTag.canGoToOffset(offset)",
        "doc:canGoToOffset",
        "doc:webviewtagcangotooffsetoffset",
        "doc:webviewTag.canGoToOffset(offset)"
      ]
    },
    {
      "objectID": "api-webview-tag#webviewtagclearhistory",
      "name": "clearHistory",
      "signature": "()",
      "description": "Clears the navigation history.",
      "parameters": [],
      "returns": null,
      "additionalTags": [],
      "apiType": "methods",
      "fullSignature": "webviewTag.clearHistory()",
      "tldr": "Clears the navigation history.",
      "slug": "webviewtagclearhistory",
      "url": "https://electronjs.org/docs/api/webview-tag#webviewtagclearhistory",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:clearHistory",
        "api:webviewtagclearhistory",
        "api:webviewTag.clearHistory()",
        "doc:clearHistory",
        "doc:webviewtagclearhistory",
        "doc:webviewTag.clearHistory()"
      ]
    },
    {
      "objectID": "api-webview-tag#webviewtaggoback",
      "name": "goBack",
      "signature": "()",
      "description": "Makes the guest page go back.",
      "parameters": [],
      "returns": null,
      "additionalTags": [],
      "apiType": "methods",
      "fullSignature": "webviewTag.goBack()",
      "tldr": "Makes the guest page go back.",
      "slug": "webviewtaggoback",
      "url": "https://electronjs.org/docs/api/webview-tag#webviewtaggoback",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:goBack",
        "api:webviewtaggoback",
        "api:webviewTag.goBack()",
        "doc:goBack",
        "doc:webviewtaggoback",
        "doc:webviewTag.goBack()"
      ]
    },
    {
      "objectID": "api-webview-tag#webviewtaggoforward",
      "name": "goForward",
      "signature": "()",
      "description": "Makes the guest page go forward.",
      "parameters": [],
      "returns": null,
      "additionalTags": [],
      "apiType": "methods",
      "fullSignature": "webviewTag.goForward()",
      "tldr": "Makes the guest page go forward.",
      "slug": "webviewtaggoforward",
      "url": "https://electronjs.org/docs/api/webview-tag#webviewtaggoforward",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:goForward",
        "api:webviewtaggoforward",
        "api:webviewTag.goForward()",
        "doc:goForward",
        "doc:webviewtaggoforward",
        "doc:webviewTag.goForward()"
      ]
    },
    {
      "objectID": "api-webview-tag#webviewtaggotoindexindex",
      "name": "goToIndex",
      "signature": "(index)",
      "description": "Navigates to the specified absolute index.",
      "parameters": [
        {
          "name": "index",
          "description": "",
          "required": true,
          "collection": false,
          "type": "Integer"
        }
      ],
      "returns": null,
      "additionalTags": [],
      "apiType": "methods",
      "fullSignature": "webviewTag.goToIndex(index)",
      "tldr": "Navigates to the specified absolute index.",
      "slug": "webviewtaggotoindexindex",
      "url": "https://electronjs.org/docs/api/webview-tag#webviewtaggotoindexindex",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:goToIndex",
        "api:webviewtaggotoindexindex",
        "api:webviewTag.goToIndex(index)",
        "doc:goToIndex",
        "doc:webviewtaggotoindexindex",
        "doc:webviewTag.goToIndex(index)"
      ]
    },
    {
      "objectID": "api-webview-tag#webviewtaggotooffsetoffset",
      "name": "goToOffset",
      "signature": "(offset)",
      "description": "Navigates to the specified offset from the \"current entry\".",
      "parameters": [
        {
          "name": "offset",
          "description": "",
          "required": true,
          "collection": false,
          "type": "Integer"
        }
      ],
      "returns": null,
      "additionalTags": [],
      "apiType": "methods",
      "fullSignature": "webviewTag.goToOffset(offset)",
      "tldr": "Navigates to the specified offset from the \"current entry\".",
      "slug": "webviewtaggotooffsetoffset",
      "url": "https://electronjs.org/docs/api/webview-tag#webviewtaggotooffsetoffset",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:goToOffset",
        "api:webviewtaggotooffsetoffset",
        "api:webviewTag.goToOffset(offset)",
        "doc:goToOffset",
        "doc:webviewtaggotooffsetoffset",
        "doc:webviewTag.goToOffset(offset)"
      ]
    },
    {
      "objectID": "api-webview-tag#webviewtagiscrashed",
      "name": "isCrashed",
      "signature": "()",
      "description": "Whether the renderer process has crashed.",
      "parameters": [],
      "returns": {
        "collection": false,
        "type": "Boolean"
      },
      "additionalTags": [],
      "apiType": "methods",
      "fullSignature": "webviewTag.isCrashed()",
      "tldr": "Whether the renderer process has crashed.",
      "slug": "webviewtagiscrashed",
      "url": "https://electronjs.org/docs/api/webview-tag#webviewtagiscrashed",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:isCrashed",
        "api:webviewtagiscrashed",
        "api:webviewTag.isCrashed()",
        "doc:isCrashed",
        "doc:webviewtagiscrashed",
        "doc:webviewTag.isCrashed()"
      ]
    },
    {
      "objectID": "api-webview-tag#webviewtagsetuseragentuseragent",
      "name": "setUserAgent",
      "signature": "(userAgent)",
      "description": "Overrides the user agent for the guest page.",
      "parameters": [
        {
          "name": "userAgent",
          "description": "",
          "required": true,
          "collection": false,
          "type": "String",
          "possibleValues": null
        }
      ],
      "returns": null,
      "additionalTags": [],
      "apiType": "methods",
      "fullSignature": "webviewTag.setUserAgent(userAgent)",
      "tldr": "Overrides the user agent for the guest page.",
      "slug": "webviewtagsetuseragentuseragent",
      "url": "https://electronjs.org/docs/api/webview-tag#webviewtagsetuseragentuseragent",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:setUserAgent",
        "api:webviewtagsetuseragentuseragent",
        "api:webviewTag.setUserAgent(userAgent)",
        "doc:setUserAgent",
        "doc:webviewtagsetuseragentuseragent",
        "doc:webviewTag.setUserAgent(userAgent)"
      ]
    },
    {
      "objectID": "api-webview-tag#webviewtaggetuseragent",
      "name": "getUserAgent",
      "signature": "()",
      "description": "The user agent for guest page.",
      "parameters": [],
      "returns": {
        "collection": false,
        "type": "String",
        "possibleValues": null
      },
      "additionalTags": [],
      "apiType": "methods",
      "fullSignature": "webviewTag.getUserAgent()",
      "tldr": "The user agent for guest page.",
      "slug": "webviewtaggetuseragent",
      "url": "https://electronjs.org/docs/api/webview-tag#webviewtaggetuseragent",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:getUserAgent",
        "api:webviewtaggetuseragent",
        "api:webviewTag.getUserAgent()",
        "doc:getUserAgent",
        "doc:webviewtaggetuseragent",
        "doc:webviewTag.getUserAgent()"
      ]
    },
    {
      "objectID": "api-webview-tag#webviewtaginsertcsscss",
      "name": "insertCSS",
      "signature": "(css)",
      "description": "A promise that resolves with a key for the inserted CSS that can later be used to remove the CSS via `<webview>.removeInsertedCSS(key)`.\n\nInjects CSS into the current web page and returns a unique key for the inserted stylesheet.",
      "parameters": [
        {
          "name": "css",
          "description": "",
          "required": true,
          "collection": false,
          "type": "String",
          "possibleValues": null
        }
      ],
      "returns": {
        "collection": false,
        "type": "Promise",
        "innerTypes": [
          {
            "collection": false,
            "type": "String",
            "possibleValues": null
          }
        ]
      },
      "additionalTags": [],
      "apiType": "methods",
      "fullSignature": "webviewTag.insertCSS(css)",
      "tldr": "A promise that resolves with a key for the inserted CSS that can later be used to remove the CSS via `<webview>.removeInsertedCSS(key)`.\n\nInjects CSS into the current web page and returns a unique key for the inserted stylesheet.",
      "slug": "webviewtaginsertcsscss",
      "url": "https://electronjs.org/docs/api/webview-tag#webviewtaginsertcsscss",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:insertCSS",
        "api:webviewtaginsertcsscss",
        "api:webviewTag.insertCSS(css)",
        "doc:insertCSS",
        "doc:webviewtaginsertcsscss",
        "doc:webviewTag.insertCSS(css)"
      ]
    },
    {
      "objectID": "api-webview-tag#webviewtagremoveinsertedcsskey",
      "name": "removeInsertedCSS",
      "signature": "(key)",
      "description": "Resolves if the removal was successful.\n\nRemoves the inserted CSS from the current web page. The stylesheet is identified by its key, which is returned from `<webview>.insertCSS(css)`.",
      "parameters": [
        {
          "name": "key",
          "description": "",
          "required": true,
          "collection": false,
          "type": "String",
          "possibleValues": null
        }
      ],
      "returns": {
        "collection": false,
        "type": "Promise",
        "innerTypes": [
          {
            "collection": false,
            "type": "void"
          }
        ]
      },
      "additionalTags": [],
      "apiType": "methods",
      "fullSignature": "webviewTag.removeInsertedCSS(key)",
      "tldr": "Resolves if the removal was successful.\n\nRemoves the inserted CSS from the current web page.",
      "slug": "webviewtagremoveinsertedcsskey",
      "url": "https://electronjs.org/docs/api/webview-tag#webviewtagremoveinsertedcsskey",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:removeInsertedCSS",
        "api:webviewtagremoveinsertedcsskey",
        "api:webviewTag.removeInsertedCSS(key)",
        "doc:removeInsertedCSS",
        "doc:webviewtagremoveinsertedcsskey",
        "doc:webviewTag.removeInsertedCSS(key)"
      ]
    },
    {
      "objectID": "api-webview-tag#webviewtagexecutejavascriptcode-usergesture",
      "name": "executeJavaScript",
      "signature": "(code[, userGesture])",
      "description": "A promise that resolves with the result of the executed code or is rejected if the result of the code is a rejected promise.\n\nEvaluates `code` in page. If `userGesture` is set, it will create the user gesture context in the page. HTML APIs like `requestFullScreen`, which require user action, can take advantage of this option for automation.",
      "parameters": [
        {
          "name": "code",
          "description": "",
          "required": true,
          "collection": false,
          "type": "String",
          "possibleValues": null
        },
        {
          "name": "userGesture",
          "description": "Default `false`.",
          "required": false,
          "collection": false,
          "type": "Boolean"
        }
      ],
      "returns": {
        "collection": false,
        "type": "Promise",
        "innerTypes": [
          {
            "collection": false,
            "type": "any"
          }
        ]
      },
      "additionalTags": [],
      "apiType": "methods",
      "fullSignature": "webviewTag.executeJavaScript(code[, userGesture])",
      "tldr": "A promise that resolves with the result of the executed code or is rejected if the result of the code is a rejected promise.\n\nEvaluates `code` in page.",
      "slug": "webviewtagexecutejavascriptcode-usergesture",
      "url": "https://electronjs.org/docs/api/webview-tag#webviewtagexecutejavascriptcode-usergesture",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:executeJavaScript",
        "api:webviewtagexecutejavascriptcode-usergesture",
        "api:webviewTag.executeJavaScript(code[, userGesture])",
        "doc:executeJavaScript",
        "doc:webviewtagexecutejavascriptcode-usergesture",
        "doc:webviewTag.executeJavaScript(code[, userGesture])"
      ]
    },
    {
      "objectID": "api-webview-tag#webviewtagopendevtools",
      "name": "openDevTools",
      "signature": "()",
      "description": "Opens a DevTools window for guest page.",
      "parameters": [],
      "returns": null,
      "additionalTags": [],
      "apiType": "methods",
      "fullSignature": "webviewTag.openDevTools()",
      "tldr": "Opens a DevTools window for guest page.",
      "slug": "webviewtagopendevtools",
      "url": "https://electronjs.org/docs/api/webview-tag#webviewtagopendevtools",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:openDevTools",
        "api:webviewtagopendevtools",
        "api:webviewTag.openDevTools()",
        "doc:openDevTools",
        "doc:webviewtagopendevtools",
        "doc:webviewTag.openDevTools()"
      ]
    },
    {
      "objectID": "api-webview-tag#webviewtagclosedevtools",
      "name": "closeDevTools",
      "signature": "()",
      "description": "Closes the DevTools window of guest page.",
      "parameters": [],
      "returns": null,
      "additionalTags": [],
      "apiType": "methods",
      "fullSignature": "webviewTag.closeDevTools()",
      "tldr": "Closes the DevTools window of guest page.",
      "slug": "webviewtagclosedevtools",
      "url": "https://electronjs.org/docs/api/webview-tag#webviewtagclosedevtools",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:closeDevTools",
        "api:webviewtagclosedevtools",
        "api:webviewTag.closeDevTools()",
        "doc:closeDevTools",
        "doc:webviewtagclosedevtools",
        "doc:webviewTag.closeDevTools()"
      ]
    },
    {
      "objectID": "api-webview-tag#webviewtagisdevtoolsopened",
      "name": "isDevToolsOpened",
      "signature": "()",
      "description": "Whether guest page has a DevTools window attached.",
      "parameters": [],
      "returns": {
        "collection": false,
        "type": "Boolean"
      },
      "additionalTags": [],
      "apiType": "methods",
      "fullSignature": "webviewTag.isDevToolsOpened()",
      "tldr": "Whether guest page has a DevTools window attached.",
      "slug": "webviewtagisdevtoolsopened",
      "url": "https://electronjs.org/docs/api/webview-tag#webviewtagisdevtoolsopened",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:isDevToolsOpened",
        "api:webviewtagisdevtoolsopened",
        "api:webviewTag.isDevToolsOpened()",
        "doc:isDevToolsOpened",
        "doc:webviewtagisdevtoolsopened",
        "doc:webviewTag.isDevToolsOpened()"
      ]
    },
    {
      "objectID": "api-webview-tag#webviewtagisdevtoolsfocused",
      "name": "isDevToolsFocused",
      "signature": "()",
      "description": "Whether DevTools window of guest page is focused.",
      "parameters": [],
      "returns": {
        "collection": false,
        "type": "Boolean"
      },
      "additionalTags": [],
      "apiType": "methods",
      "fullSignature": "webviewTag.isDevToolsFocused()",
      "tldr": "Whether DevTools window of guest page is focused.",
      "slug": "webviewtagisdevtoolsfocused",
      "url": "https://electronjs.org/docs/api/webview-tag#webviewtagisdevtoolsfocused",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:isDevToolsFocused",
        "api:webviewtagisdevtoolsfocused",
        "api:webviewTag.isDevToolsFocused()",
        "doc:isDevToolsFocused",
        "doc:webviewtagisdevtoolsfocused",
        "doc:webviewTag.isDevToolsFocused()"
      ]
    },
    {
      "objectID": "api-webview-tag#webviewtaginspectelementx-y",
      "name": "inspectElement",
      "signature": "(x, y)",
      "description": "Starts inspecting element at position (`x`, `y`) of guest page.",
      "parameters": [
        {
          "name": "x",
          "description": "",
          "required": true,
          "collection": false,
          "type": "Integer"
        },
        {
          "name": "y",
          "description": "",
          "required": true,
          "collection": false,
          "type": "Integer"
        }
      ],
      "returns": null,
      "additionalTags": [],
      "apiType": "methods",
      "fullSignature": "webviewTag.inspectElement(x, y)",
      "tldr": "Starts inspecting element at position (`x`, `y`) of guest page.",
      "slug": "webviewtaginspectelementx-y",
      "url": "https://electronjs.org/docs/api/webview-tag#webviewtaginspectelementx-y",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:inspectElement",
        "api:webviewtaginspectelementx-y",
        "api:webviewTag.inspectElement(x, y)",
        "doc:inspectElement",
        "doc:webviewtaginspectelementx-y",
        "doc:webviewTag.inspectElement(x, y)"
      ]
    },
    {
      "objectID": "api-webview-tag#webviewtaginspectsharedworker",
      "name": "inspectSharedWorker",
      "signature": "()",
      "description": "Opens the DevTools for the shared worker context present in the guest page.",
      "parameters": [],
      "returns": null,
      "additionalTags": [],
      "apiType": "methods",
      "fullSignature": "webviewTag.inspectSharedWorker()",
      "tldr": "Opens the DevTools for the shared worker context present in the guest page.",
      "slug": "webviewtaginspectsharedworker",
      "url": "https://electronjs.org/docs/api/webview-tag#webviewtaginspectsharedworker",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:inspectSharedWorker",
        "api:webviewtaginspectsharedworker",
        "api:webviewTag.inspectSharedWorker()",
        "doc:inspectSharedWorker",
        "doc:webviewtaginspectsharedworker",
        "doc:webviewTag.inspectSharedWorker()"
      ]
    },
    {
      "objectID": "api-webview-tag#webviewtaginspectserviceworker",
      "name": "inspectServiceWorker",
      "signature": "()",
      "description": "Opens the DevTools for the service worker context present in the guest page.",
      "parameters": [],
      "returns": null,
      "additionalTags": [],
      "apiType": "methods",
      "fullSignature": "webviewTag.inspectServiceWorker()",
      "tldr": "Opens the DevTools for the service worker context present in the guest page.",
      "slug": "webviewtaginspectserviceworker",
      "url": "https://electronjs.org/docs/api/webview-tag#webviewtaginspectserviceworker",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:inspectServiceWorker",
        "api:webviewtaginspectserviceworker",
        "api:webviewTag.inspectServiceWorker()",
        "doc:inspectServiceWorker",
        "doc:webviewtaginspectserviceworker",
        "doc:webviewTag.inspectServiceWorker()"
      ]
    },
    {
      "objectID": "api-webview-tag#webviewtagsetaudiomutedmuted",
      "name": "setAudioMuted",
      "signature": "(muted)",
      "description": "Set guest page muted.",
      "parameters": [
        {
          "name": "muted",
          "description": "",
          "required": true,
          "collection": false,
          "type": "Boolean"
        }
      ],
      "returns": null,
      "additionalTags": [],
      "apiType": "methods",
      "fullSignature": "webviewTag.setAudioMuted(muted)",
      "tldr": "Set guest page muted.",
      "slug": "webviewtagsetaudiomutedmuted",
      "url": "https://electronjs.org/docs/api/webview-tag#webviewtagsetaudiomutedmuted",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:setAudioMuted",
        "api:webviewtagsetaudiomutedmuted",
        "api:webviewTag.setAudioMuted(muted)",
        "doc:setAudioMuted",
        "doc:webviewtagsetaudiomutedmuted",
        "doc:webviewTag.setAudioMuted(muted)"
      ]
    },
    {
      "objectID": "api-webview-tag#webviewtagisaudiomuted",
      "name": "isAudioMuted",
      "signature": "()",
      "description": "Whether guest page has been muted.",
      "parameters": [],
      "returns": {
        "collection": false,
        "type": "Boolean"
      },
      "additionalTags": [],
      "apiType": "methods",
      "fullSignature": "webviewTag.isAudioMuted()",
      "tldr": "Whether guest page has been muted.",
      "slug": "webviewtagisaudiomuted",
      "url": "https://electronjs.org/docs/api/webview-tag#webviewtagisaudiomuted",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:isAudioMuted",
        "api:webviewtagisaudiomuted",
        "api:webviewTag.isAudioMuted()",
        "doc:isAudioMuted",
        "doc:webviewtagisaudiomuted",
        "doc:webviewTag.isAudioMuted()"
      ]
    },
    {
      "objectID": "api-webview-tag#webviewtagiscurrentlyaudible",
      "name": "isCurrentlyAudible",
      "signature": "()",
      "description": "Whether audio is currently playing.",
      "parameters": [],
      "returns": {
        "collection": false,
        "type": "Boolean"
      },
      "additionalTags": [],
      "apiType": "methods",
      "fullSignature": "webviewTag.isCurrentlyAudible()",
      "tldr": "Whether audio is currently playing.",
      "slug": "webviewtagiscurrentlyaudible",
      "url": "https://electronjs.org/docs/api/webview-tag#webviewtagiscurrentlyaudible",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:isCurrentlyAudible",
        "api:webviewtagiscurrentlyaudible",
        "api:webviewTag.isCurrentlyAudible()",
        "doc:isCurrentlyAudible",
        "doc:webviewtagiscurrentlyaudible",
        "doc:webviewTag.isCurrentlyAudible()"
      ]
    },
    {
      "objectID": "api-webview-tag#webviewtagundo",
      "name": "undo",
      "signature": "()",
      "description": "Executes editing command `undo` in page.",
      "parameters": [],
      "returns": null,
      "additionalTags": [],
      "apiType": "methods",
      "fullSignature": "webviewTag.undo()",
      "tldr": "Executes editing command `undo` in page.",
      "slug": "webviewtagundo",
      "url": "https://electronjs.org/docs/api/webview-tag#webviewtagundo",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:undo",
        "api:webviewtagundo",
        "api:webviewTag.undo()",
        "doc:undo",
        "doc:webviewtagundo",
        "doc:webviewTag.undo()"
      ]
    },
    {
      "objectID": "api-webview-tag#webviewtagredo",
      "name": "redo",
      "signature": "()",
      "description": "Executes editing command `redo` in page.",
      "parameters": [],
      "returns": null,
      "additionalTags": [],
      "apiType": "methods",
      "fullSignature": "webviewTag.redo()",
      "tldr": "Executes editing command `redo` in page.",
      "slug": "webviewtagredo",
      "url": "https://electronjs.org/docs/api/webview-tag#webviewtagredo",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:redo",
        "api:webviewtagredo",
        "api:webviewTag.redo()",
        "doc:redo",
        "doc:webviewtagredo",
        "doc:webviewTag.redo()"
      ]
    },
    {
      "objectID": "api-webview-tag#webviewtagcut",
      "name": "cut",
      "signature": "()",
      "description": "Executes editing command `cut` in page.",
      "parameters": [],
      "returns": null,
      "additionalTags": [],
      "apiType": "methods",
      "fullSignature": "webviewTag.cut()",
      "tldr": "Executes editing command `cut` in page.",
      "slug": "webviewtagcut",
      "url": "https://electronjs.org/docs/api/webview-tag#webviewtagcut",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:cut",
        "api:webviewtagcut",
        "api:webviewTag.cut()",
        "doc:cut",
        "doc:webviewtagcut",
        "doc:webviewTag.cut()"
      ]
    },
    {
      "objectID": "api-webview-tag#webviewtagcopy",
      "name": "copy",
      "signature": "()",
      "description": "Executes editing command `copy` in page.",
      "parameters": [],
      "returns": null,
      "additionalTags": [],
      "apiType": "methods",
      "fullSignature": "webviewTag.copy()",
      "tldr": "Executes editing command `copy` in page.",
      "slug": "webviewtagcopy",
      "url": "https://electronjs.org/docs/api/webview-tag#webviewtagcopy",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:copy",
        "api:webviewtagcopy",
        "api:webviewTag.copy()",
        "doc:copy",
        "doc:webviewtagcopy",
        "doc:webviewTag.copy()"
      ]
    },
    {
      "objectID": "api-webview-tag#webviewtagpaste",
      "name": "paste",
      "signature": "()",
      "description": "Executes editing command `paste` in page.",
      "parameters": [],
      "returns": null,
      "additionalTags": [],
      "apiType": "methods",
      "fullSignature": "webviewTag.paste()",
      "tldr": "Executes editing command `paste` in page.",
      "slug": "webviewtagpaste",
      "url": "https://electronjs.org/docs/api/webview-tag#webviewtagpaste",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:paste",
        "api:webviewtagpaste",
        "api:webviewTag.paste()",
        "doc:paste",
        "doc:webviewtagpaste",
        "doc:webviewTag.paste()"
      ]
    },
    {
      "objectID": "api-webview-tag#webviewtagpasteandmatchstyle",
      "name": "pasteAndMatchStyle",
      "signature": "()",
      "description": "Executes editing command `pasteAndMatchStyle` in page.",
      "parameters": [],
      "returns": null,
      "additionalTags": [],
      "apiType": "methods",
      "fullSignature": "webviewTag.pasteAndMatchStyle()",
      "tldr": "Executes editing command `pasteAndMatchStyle` in page.",
      "slug": "webviewtagpasteandmatchstyle",
      "url": "https://electronjs.org/docs/api/webview-tag#webviewtagpasteandmatchstyle",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:pasteAndMatchStyle",
        "api:webviewtagpasteandmatchstyle",
        "api:webviewTag.pasteAndMatchStyle()",
        "doc:pasteAndMatchStyle",
        "doc:webviewtagpasteandmatchstyle",
        "doc:webviewTag.pasteAndMatchStyle()"
      ]
    },
    {
      "objectID": "api-webview-tag#webviewtagdelete",
      "name": "delete",
      "signature": "()",
      "description": "Executes editing command `delete` in page.",
      "parameters": [],
      "returns": null,
      "additionalTags": [],
      "apiType": "methods",
      "fullSignature": "webviewTag.delete()",
      "tldr": "Executes editing command `delete` in page.",
      "slug": "webviewtagdelete",
      "url": "https://electronjs.org/docs/api/webview-tag#webviewtagdelete",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:delete",
        "api:webviewtagdelete",
        "api:webviewTag.delete()",
        "doc:delete",
        "doc:webviewtagdelete",
        "doc:webviewTag.delete()"
      ]
    },
    {
      "objectID": "api-webview-tag#webviewtagselectall",
      "name": "selectAll",
      "signature": "()",
      "description": "Executes editing command `selectAll` in page.",
      "parameters": [],
      "returns": null,
      "additionalTags": [],
      "apiType": "methods",
      "fullSignature": "webviewTag.selectAll()",
      "tldr": "Executes editing command `selectAll` in page.",
      "slug": "webviewtagselectall",
      "url": "https://electronjs.org/docs/api/webview-tag#webviewtagselectall",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:selectAll",
        "api:webviewtagselectall",
        "api:webviewTag.selectAll()",
        "doc:selectAll",
        "doc:webviewtagselectall",
        "doc:webviewTag.selectAll()"
      ]
    },
    {
      "objectID": "api-webview-tag#webviewtagunselect",
      "name": "unselect",
      "signature": "()",
      "description": "Executes editing command `unselect` in page.",
      "parameters": [],
      "returns": null,
      "additionalTags": [],
      "apiType": "methods",
      "fullSignature": "webviewTag.unselect()",
      "tldr": "Executes editing command `unselect` in page.",
      "slug": "webviewtagunselect",
      "url": "https://electronjs.org/docs/api/webview-tag#webviewtagunselect",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:unselect",
        "api:webviewtagunselect",
        "api:webviewTag.unselect()",
        "doc:unselect",
        "doc:webviewtagunselect",
        "doc:webviewTag.unselect()"
      ]
    },
    {
      "objectID": "api-webview-tag#webviewtagreplacetext",
      "name": "replace",
      "signature": "(text)",
      "description": "Executes editing command `replace` in page.",
      "parameters": [
        {
          "name": "text",
          "description": "",
          "required": true,
          "collection": false,
          "type": "String",
          "possibleValues": null
        }
      ],
      "returns": null,
      "additionalTags": [],
      "apiType": "methods",
      "fullSignature": "webviewTag.replace(text)",
      "tldr": "Executes editing command `replace` in page.",
      "slug": "webviewtagreplacetext",
      "url": "https://electronjs.org/docs/api/webview-tag#webviewtagreplacetext",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:replace",
        "api:webviewtagreplacetext",
        "api:webviewTag.replace(text)",
        "doc:replace",
        "doc:webviewtagreplacetext",
        "doc:webviewTag.replace(text)"
      ]
    },
    {
      "objectID": "api-webview-tag#webviewtagreplacemisspellingtext",
      "name": "replaceMisspelling",
      "signature": "(text)",
      "description": "Executes editing command `replaceMisspelling` in page.",
      "parameters": [
        {
          "name": "text",
          "description": "",
          "required": true,
          "collection": false,
          "type": "String",
          "possibleValues": null
        }
      ],
      "returns": null,
      "additionalTags": [],
      "apiType": "methods",
      "fullSignature": "webviewTag.replaceMisspelling(text)",
      "tldr": "Executes editing command `replaceMisspelling` in page.",
      "slug": "webviewtagreplacemisspellingtext",
      "url": "https://electronjs.org/docs/api/webview-tag#webviewtagreplacemisspellingtext",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:replaceMisspelling",
        "api:webviewtagreplacemisspellingtext",
        "api:webviewTag.replaceMisspelling(text)",
        "doc:replaceMisspelling",
        "doc:webviewtagreplacemisspellingtext",
        "doc:webviewTag.replaceMisspelling(text)"
      ]
    },
    {
      "objectID": "api-webview-tag#webviewtaginserttexttext",
      "name": "insertText",
      "signature": "(text)",
      "description": "Inserts `text` to the focused element.",
      "parameters": [
        {
          "name": "text",
          "description": "",
          "required": true,
          "collection": false,
          "type": "String",
          "possibleValues": null
        }
      ],
      "returns": {
        "collection": false,
        "type": "Promise",
        "innerTypes": [
          {
            "collection": false,
            "type": "void"
          }
        ]
      },
      "additionalTags": [],
      "apiType": "methods",
      "fullSignature": "webviewTag.insertText(text)",
      "tldr": "Inserts `text` to the focused element.",
      "slug": "webviewtaginserttexttext",
      "url": "https://electronjs.org/docs/api/webview-tag#webviewtaginserttexttext",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:insertText",
        "api:webviewtaginserttexttext",
        "api:webviewTag.insertText(text)",
        "doc:insertText",
        "doc:webviewtaginserttexttext",
        "doc:webviewTag.insertText(text)"
      ]
    },
    {
      "objectID": "api-webview-tag#webviewtagfindinpagetext-options",
      "name": "findInPage",
      "signature": "(text[, options])",
      "description": "The request id used for the request.\n\nStarts a request to find all matches for the `text` in the web page. The result of the request can be obtained by subscribing to `found-in-page` event.",
      "parameters": [
        {
          "name": "text",
          "description": "Content to be searched, must not be empty.",
          "required": true,
          "collection": false,
          "type": "String",
          "possibleValues": null
        },
        {
          "name": "options",
          "description": "",
          "required": false,
          "collection": false,
          "type": "Object",
          "properties": [
            {
              "name": "forward",
              "description": "Whether to search forward or backward, defaults to `true`.",
              "required": false,
              "additionalTags": [],
              "collection": false,
              "type": "Boolean"
            },
            {
              "name": "findNext",
              "description": "Whether the operation is first request or a follow up, defaults to `false`.",
              "required": false,
              "additionalTags": [],
              "collection": false,
              "type": "Boolean"
            },
            {
              "name": "matchCase",
              "description": "Whether search should be case-sensitive, defaults to `false`.",
              "required": false,
              "additionalTags": [],
              "collection": false,
              "type": "Boolean"
            },
            {
              "name": "wordStart",
              "description": "Whether to look only at the start of words. defaults to `false`.",
              "required": false,
              "additionalTags": [],
              "collection": false,
              "type": "Boolean"
            },
            {
              "name": "medialCapitalAsWordStart",
              "description": "When combined with `wordStart`, accepts a match in the middle of a word if the match begins with an uppercase letter followed by a lowercase or non-letter. Accepts several other intra-word matches, defaults to `false`.",
              "required": false,
              "additionalTags": [],
              "collection": false,
              "type": "Boolean"
            }
          ]
        }
      ],
      "returns": {
        "collection": false,
        "type": "Integer"
      },
      "additionalTags": [],
      "apiType": "methods",
      "fullSignature": "webviewTag.findInPage(text[, options])",
      "tldr": "The request id used for the request.\n\nStarts a request to find all matches for the `text` in the web page.",
      "slug": "webviewtagfindinpagetext-options",
      "url": "https://electronjs.org/docs/api/webview-tag#webviewtagfindinpagetext-options",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:findInPage",
        "api:webviewtagfindinpagetext-options",
        "api:webviewTag.findInPage(text[, options])",
        "doc:findInPage",
        "doc:webviewtagfindinpagetext-options",
        "doc:webviewTag.findInPage(text[, options])"
      ]
    },
    {
      "objectID": "api-webview-tag#webviewtagstopfindinpageaction",
      "name": "stopFindInPage",
      "signature": "(action)",
      "description": "Stops any `findInPage` request for the `webview` with the provided `action`.",
      "parameters": [
        {
          "name": "action",
          "description": "Specifies the action to take place when ending `<webview>.findInPage` request.",
          "required": true,
          "collection": false,
          "type": "String",
          "possibleValues": [
            {
              "value": "clearSelection",
              "description": "Clear the selection."
            },
            {
              "value": "keepSelection",
              "description": "Translate the selection into a normal selection."
            },
            {
              "value": "activateSelection",
              "description": "Focus and click the selection node."
            }
          ]
        }
      ],
      "returns": null,
      "additionalTags": [],
      "apiType": "methods",
      "fullSignature": "webviewTag.stopFindInPage(action)",
      "tldr": "Stops any `findInPage` request for the `webview` with the provided `action`.",
      "slug": "webviewtagstopfindinpageaction",
      "url": "https://electronjs.org/docs/api/webview-tag#webviewtagstopfindinpageaction",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:stopFindInPage",
        "api:webviewtagstopfindinpageaction",
        "api:webviewTag.stopFindInPage(action)",
        "doc:stopFindInPage",
        "doc:webviewtagstopfindinpageaction",
        "doc:webviewTag.stopFindInPage(action)"
      ]
    },
    {
      "objectID": "api-webview-tag#webviewtagprintoptions",
      "name": "print",
      "signature": "([options])",
      "description": "Prints `webview`'s web page. Same as `webContents.print([options])`.",
      "parameters": [
        {
          "name": "options",
          "description": "",
          "required": false,
          "collection": false,
          "type": "Object",
          "properties": [
            {
              "name": "silent",
              "description": "Don't ask user for print settings. Default is `false`.",
              "required": false,
              "additionalTags": [],
              "collection": false,
              "type": "Boolean"
            },
            {
              "name": "printBackground",
              "description": "Also prints the background color and image of the web page. Default is `false`.",
              "required": false,
              "additionalTags": [],
              "collection": false,
              "type": "Boolean"
            },
            {
              "name": "deviceName",
              "description": "Set the printer device name to use. Default is `''`.",
              "required": false,
              "additionalTags": [],
              "collection": false,
              "type": "String",
              "possibleValues": null
            }
          ]
        }
      ],
      "returns": {
        "collection": false,
        "type": "Promise",
        "innerTypes": [
          {
            "collection": false,
            "type": "void"
          }
        ]
      },
      "additionalTags": [],
      "apiType": "methods",
      "fullSignature": "webviewTag.print([options])",
      "tldr": "Prints `webview`'s web page.",
      "slug": "webviewtagprintoptions",
      "url": "https://electronjs.org/docs/api/webview-tag#webviewtagprintoptions",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:print",
        "api:webviewtagprintoptions",
        "api:webviewTag.print([options])",
        "doc:print",
        "doc:webviewtagprintoptions",
        "doc:webviewTag.print([options])"
      ]
    },
    {
      "objectID": "api-webview-tag#webviewtagprinttopdfoptions",
      "name": "printToPDF",
      "signature": "(options)",
      "description": "Resolves with the generated PDF data.\n\nPrints `webview`'s web page as PDF, Same as `webContents.printToPDF(options)`.",
      "parameters": [
        {
          "name": "options",
          "description": "",
          "required": true,
          "collection": false,
          "type": "Object",
          "properties": [
            {
              "name": "marginsType",
              "description": "Specifies the type of margins to use. Uses 0 for default margin, 1 for no margin, and 2 for minimum margin.",
              "required": false,
              "additionalTags": [],
              "collection": false,
              "type": "Integer"
            },
            {
              "name": "pageSize",
              "description": "Specify page size of the generated PDF. Can be `A3`, `A4`, `A5`, `Legal`, `Letter`, `Tabloid` or an Object containing `height` and `width` in microns.",
              "required": false,
              "additionalTags": [],
              "collection": false,
              "type": [
                {
                  "collection": false,
                  "type": "String",
                  "possibleValues": null
                },
                {
                  "collection": false,
                  "type": "Size"
                }
              ]
            },
            {
              "name": "printBackground",
              "description": "Whether to print CSS backgrounds.",
              "required": false,
              "additionalTags": [],
              "collection": false,
              "type": "Boolean"
            },
            {
              "name": "printSelectionOnly",
              "description": "Whether to print selection only.",
              "required": false,
              "additionalTags": [],
              "collection": false,
              "type": "Boolean"
            },
            {
              "name": "landscape",
              "description": "`true` for landscape, `false` for portrait.",
              "required": false,
              "additionalTags": [],
              "collection": false,
              "type": "Boolean"
            }
          ]
        }
      ],
      "returns": {
        "collection": false,
        "type": "Promise",
        "innerTypes": [
          {
            "collection": false,
            "type": "Buffer"
          }
        ]
      },
      "additionalTags": [],
      "apiType": "methods",
      "fullSignature": "webviewTag.printToPDF(options)",
      "tldr": "Resolves with the generated PDF data.\n\nPrints `webview`'s web page as PDF, Same as `webContents.printToPDF(options)`.",
      "slug": "webviewtagprinttopdfoptions",
      "url": "https://electronjs.org/docs/api/webview-tag#webviewtagprinttopdfoptions",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:printToPDF",
        "api:webviewtagprinttopdfoptions",
        "api:webviewTag.printToPDF(options)",
        "doc:printToPDF",
        "doc:webviewtagprinttopdfoptions",
        "doc:webviewTag.printToPDF(options)"
      ]
    },
    {
      "objectID": "api-webview-tag#webviewtagcapturepagerect",
      "name": "capturePage",
      "signature": "([rect])",
      "description": "Resolves with a NativeImage\n\nCaptures a snapshot of the page within `rect`. Omitting `rect` will capture the whole visible page.",
      "parameters": [
        {
          "name": "rect",
          "description": "The area of the page to be captured.",
          "required": false,
          "collection": false,
          "type": "Rectangle"
        }
      ],
      "returns": {
        "collection": false,
        "type": "Promise",
        "innerTypes": [
          {
            "collection": false,
            "type": "NativeImage"
          }
        ]
      },
      "additionalTags": [],
      "apiType": "methods",
      "fullSignature": "webviewTag.capturePage([rect])",
      "tldr": "Resolves with a NativeImage\n\nCaptures a snapshot of the page within `rect`.",
      "slug": "webviewtagcapturepagerect",
      "url": "https://electronjs.org/docs/api/webview-tag#webviewtagcapturepagerect",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:capturePage",
        "api:webviewtagcapturepagerect",
        "api:webviewTag.capturePage([rect])",
        "doc:capturePage",
        "doc:webviewtagcapturepagerect",
        "doc:webviewTag.capturePage([rect])"
      ]
    },
    {
      "objectID": "api-webview-tag#webviewtagsendchannel-args",
      "name": "send",
      "signature": "(channel, ...args)",
      "description": "Send an asynchronous message to renderer process via `channel`, you can also send arbitrary arguments. The renderer process can handle the message by listening to the `channel` event with the `ipcRenderer` module.\n\nSee webContents.send for examples.",
      "parameters": [
        {
          "name": "channel",
          "description": "",
          "required": true,
          "collection": false,
          "type": "String",
          "possibleValues": null
        },
        {
          "name": "...args",
          "description": "",
          "required": true,
          "collection": true,
          "type": "any"
        }
      ],
      "returns": {
        "collection": false,
        "type": "Promise",
        "innerTypes": [
          {
            "collection": false,
            "type": "void"
          }
        ]
      },
      "additionalTags": [],
      "apiType": "methods",
      "fullSignature": "webviewTag.send(channel, ...args)",
      "tldr": "Send an asynchronous message to renderer process via `channel`, you can also send arbitrary arguments.",
      "slug": "webviewtagsendchannel-args",
      "url": "https://electronjs.org/docs/api/webview-tag#webviewtagsendchannel-args",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:send",
        "api:webviewtagsendchannel-args",
        "api:webviewTag.send(channel, ...args)",
        "doc:send",
        "doc:webviewtagsendchannel-args",
        "doc:webviewTag.send(channel, ...args)"
      ]
    },
    {
      "objectID": "api-webview-tag#webviewtagsendinputeventevent",
      "name": "sendInputEvent",
      "signature": "(event)",
      "description": "Sends an input `event` to the page.\n\nSee webContents.sendInputEvent for detailed description of `event` object.",
      "parameters": [
        {
          "name": "event",
          "description": "",
          "required": true,
          "collection": false,
          "type": [
            {
              "collection": false,
              "type": "MouseInputEvent"
            },
            {
              "collection": false,
              "type": "MouseWheelInputEvent"
            },
            {
              "collection": false,
              "type": "KeyboardInputEvent"
            }
          ]
        }
      ],
      "returns": {
        "collection": false,
        "type": "Promise",
        "innerTypes": [
          {
            "collection": false,
            "type": "void"
          }
        ]
      },
      "additionalTags": [],
      "apiType": "methods",
      "fullSignature": "webviewTag.sendInputEvent(event)",
      "tldr": "Sends an input `event` to the page.\n\nSee webContents.sendInputEvent for detailed description of `event` object.",
      "slug": "webviewtagsendinputeventevent",
      "url": "https://electronjs.org/docs/api/webview-tag#webviewtagsendinputeventevent",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:sendInputEvent",
        "api:webviewtagsendinputeventevent",
        "api:webviewTag.sendInputEvent(event)",
        "doc:sendInputEvent",
        "doc:webviewtagsendinputeventevent",
        "doc:webviewTag.sendInputEvent(event)"
      ]
    },
    {
      "objectID": "api-webview-tag#webviewtagsetzoomfactorfactor",
      "name": "setZoomFactor",
      "signature": "(factor)",
      "description": "Changes the zoom factor to the specified factor. Zoom factor is zoom percent divided by 100, so 300% = 3.0.",
      "parameters": [
        {
          "name": "factor",
          "description": "Zoom factor.",
          "required": true,
          "collection": false,
          "type": "Number"
        }
      ],
      "returns": null,
      "additionalTags": [],
      "apiType": "methods",
      "fullSignature": "webviewTag.setZoomFactor(factor)",
      "tldr": "Changes the zoom factor to the specified factor.",
      "slug": "webviewtagsetzoomfactorfactor",
      "url": "https://electronjs.org/docs/api/webview-tag#webviewtagsetzoomfactorfactor",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:setZoomFactor",
        "api:webviewtagsetzoomfactorfactor",
        "api:webviewTag.setZoomFactor(factor)",
        "doc:setZoomFactor",
        "doc:webviewtagsetzoomfactorfactor",
        "doc:webviewTag.setZoomFactor(factor)"
      ]
    },
    {
      "objectID": "api-webview-tag#webviewtagsetzoomlevellevel",
      "name": "setZoomLevel",
      "signature": "(level)",
      "description": "Changes the zoom level to the specified level. The original size is 0 and each increment above or below represents zooming 20% larger or smaller to default limits of 300% and 50% of original size, respectively. The formula for this is `scale := 1.2 ^ level`.",
      "parameters": [
        {
          "name": "level",
          "description": "Zoom level.",
          "required": true,
          "collection": false,
          "type": "Number"
        }
      ],
      "returns": null,
      "additionalTags": [],
      "apiType": "methods",
      "fullSignature": "webviewTag.setZoomLevel(level)",
      "tldr": "Changes the zoom level to the specified level.",
      "slug": "webviewtagsetzoomlevellevel",
      "url": "https://electronjs.org/docs/api/webview-tag#webviewtagsetzoomlevellevel",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:setZoomLevel",
        "api:webviewtagsetzoomlevellevel",
        "api:webviewTag.setZoomLevel(level)",
        "doc:setZoomLevel",
        "doc:webviewtagsetzoomlevellevel",
        "doc:webviewTag.setZoomLevel(level)"
      ]
    },
    {
      "objectID": "api-webview-tag#webviewtaggetzoomfactor",
      "name": "getZoomFactor",
      "signature": "()",
      "description": "the current zoom factor.",
      "parameters": [],
      "returns": {
        "collection": false,
        "type": "Number"
      },
      "additionalTags": [],
      "apiType": "methods",
      "fullSignature": "webviewTag.getZoomFactor()",
      "tldr": "the current zoom factor.",
      "slug": "webviewtaggetzoomfactor",
      "url": "https://electronjs.org/docs/api/webview-tag#webviewtaggetzoomfactor",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:getZoomFactor",
        "api:webviewtaggetzoomfactor",
        "api:webviewTag.getZoomFactor()",
        "doc:getZoomFactor",
        "doc:webviewtaggetzoomfactor",
        "doc:webviewTag.getZoomFactor()"
      ]
    },
    {
      "objectID": "api-webview-tag#webviewtaggetzoomlevel",
      "name": "getZoomLevel",
      "signature": "()",
      "description": "the current zoom level.",
      "parameters": [],
      "returns": {
        "collection": false,
        "type": "Number"
      },
      "additionalTags": [],
      "apiType": "methods",
      "fullSignature": "webviewTag.getZoomLevel()",
      "tldr": "the current zoom level.",
      "slug": "webviewtaggetzoomlevel",
      "url": "https://electronjs.org/docs/api/webview-tag#webviewtaggetzoomlevel",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:getZoomLevel",
        "api:webviewtaggetzoomlevel",
        "api:webviewTag.getZoomLevel()",
        "doc:getZoomLevel",
        "doc:webviewtaggetzoomlevel",
        "doc:webviewTag.getZoomLevel()"
      ]
    },
    {
      "objectID": "api-webview-tag#webviewtagsetvisualzoomlevellimitsminimumlevel-maximumlevel",
      "name": "setVisualZoomLevelLimits",
      "signature": "(minimumLevel, maximumLevel)",
      "description": "Sets the maximum and minimum pinch-to-zoom level.",
      "parameters": [
        {
          "name": "minimumLevel",
          "description": "",
          "required": true,
          "collection": false,
          "type": "Number"
        },
        {
          "name": "maximumLevel",
          "description": "",
          "required": true,
          "collection": false,
          "type": "Number"
        }
      ],
      "returns": {
        "collection": false,
        "type": "Promise",
        "innerTypes": [
          {
            "collection": false,
            "type": "void"
          }
        ]
      },
      "additionalTags": [],
      "apiType": "methods",
      "fullSignature": "webviewTag.setVisualZoomLevelLimits(minimumLevel, maximumLevel)",
      "tldr": "Sets the maximum and minimum pinch-to-zoom level.",
      "slug": "webviewtagsetvisualzoomlevellimitsminimumlevel-maximumlevel",
      "url": "https://electronjs.org/docs/api/webview-tag#webviewtagsetvisualzoomlevellimitsminimumlevel-maximumlevel",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:setVisualZoomLevelLimits",
        "api:webviewtagsetvisualzoomlevellimitsminimumlevel-maximumlevel",
        "api:webviewTag.setVisualZoomLevelLimits(minimumLevel, maximumLevel)",
        "doc:setVisualZoomLevelLimits",
        "doc:webviewtagsetvisualzoomlevellimitsminimumlevel-maximumlevel",
        "doc:webviewTag.setVisualZoomLevelLimits(minimumLevel, maximumLevel)"
      ]
    },
    {
      "objectID": "api-webview-tag#webviewtagsetlayoutzoomlevellimitsminimumlevel-maximumlevel",
      "name": "setLayoutZoomLevelLimits",
      "signature": "(minimumLevel, maximumLevel)",
      "description": "Sets the maximum and minimum layout-based (i.e. non-visual) zoom level.",
      "parameters": [
        {
          "name": "minimumLevel",
          "description": "",
          "required": true,
          "collection": false,
          "type": "Number"
        },
        {
          "name": "maximumLevel",
          "description": "",
          "required": true,
          "collection": false,
          "type": "Number"
        }
      ],
      "returns": {
        "collection": false,
        "type": "Promise",
        "innerTypes": [
          {
            "collection": false,
            "type": "void"
          }
        ]
      },
      "additionalTags": [],
      "apiType": "methods",
      "fullSignature": "webviewTag.setLayoutZoomLevelLimits(minimumLevel, maximumLevel)",
      "tldr": "Sets the maximum and minimum layout-based (i.e.",
      "slug": "webviewtagsetlayoutzoomlevellimitsminimumlevel-maximumlevel",
      "url": "https://electronjs.org/docs/api/webview-tag#webviewtagsetlayoutzoomlevellimitsminimumlevel-maximumlevel",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:setLayoutZoomLevelLimits",
        "api:webviewtagsetlayoutzoomlevellimitsminimumlevel-maximumlevel",
        "api:webviewTag.setLayoutZoomLevelLimits(minimumLevel, maximumLevel)",
        "doc:setLayoutZoomLevelLimits",
        "doc:webviewtagsetlayoutzoomlevellimitsminimumlevel-maximumlevel",
        "doc:webviewTag.setLayoutZoomLevelLimits(minimumLevel, maximumLevel)"
      ]
    },
    {
      "objectID": "api-webview-tag#webviewtagshowdefinitionforselection",
      "name": "showDefinitionForSelection",
      "signature": "()",
      "description": "Shows pop-up dictionary that searches the selected word on the page.",
      "parameters": [],
      "returns": null,
      "additionalTags": [
        "os_macos"
      ],
      "apiType": "methods",
      "fullSignature": "webviewTag.showDefinitionForSelection()",
      "tldr": "Shows pop-up dictionary that searches the selected word on the page.",
      "slug": "webviewtagshowdefinitionforselection",
      "url": "https://electronjs.org/docs/api/webview-tag#webviewtagshowdefinitionforselection",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:showDefinitionForSelection",
        "api:webviewtagshowdefinitionforselection",
        "api:webviewTag.showDefinitionForSelection()",
        "doc:showDefinitionForSelection",
        "doc:webviewtagshowdefinitionforselection",
        "doc:webviewTag.showDefinitionForSelection()"
      ]
    },
    {
      "objectID": "api-webview-tag#webviewtaggetwebcontents",
      "name": "getWebContents",
      "signature": "()",
      "description": "The web contents associated with this `webview`.\n\nIt depends on the `remote` module, it is therefore not available when this module is disabled.",
      "parameters": [],
      "returns": {
        "collection": false,
        "type": "WebContents"
      },
      "additionalTags": [],
      "apiType": "methods",
      "fullSignature": "webviewTag.getWebContents()",
      "tldr": "The web contents associated with this `webview`.\n\nIt depends on the `remote` module, it is therefore not available when this module is disabled.",
      "slug": "webviewtaggetwebcontents",
      "url": "https://electronjs.org/docs/api/webview-tag#webviewtaggetwebcontents",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:getWebContents",
        "api:webviewtaggetwebcontents",
        "api:webviewTag.getWebContents()",
        "doc:getWebContents",
        "doc:webviewtaggetwebcontents",
        "doc:webviewTag.getWebContents()"
      ]
    },
    {
      "objectID": "api-webview-tag#webviewtaggetwebcontentsid",
      "name": "getWebContentsId",
      "signature": "()",
      "description": "The WebContents ID of this `webview`.",
      "parameters": [],
      "returns": {
        "collection": false,
        "type": "Number"
      },
      "additionalTags": [],
      "apiType": "methods",
      "fullSignature": "webviewTag.getWebContentsId()",
      "tldr": "The WebContents ID of this `webview`.",
      "slug": "webviewtaggetwebcontentsid",
      "url": "https://electronjs.org/docs/api/webview-tag#webviewtaggetwebcontentsid",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:getWebContentsId",
        "api:webviewtaggetwebcontentsid",
        "api:webviewTag.getWebContentsId()",
        "doc:getWebContentsId",
        "doc:webviewtaggetwebcontentsid",
        "doc:webviewTag.getWebContentsId()"
      ]
    },
    {
      "objectID": "api-webview-tag#event-load-commit",
      "name": "load-commit",
      "description": "Fired when a load has committed. This includes navigation within the current document as well as subframe document-level loads, but does not include asynchronous resource loads.",
      "parameters": [
        {
          "name": "url",
          "description": "",
          "collection": false,
          "type": "String",
          "possibleValues": null,
          "required": true
        },
        {
          "name": "isMainFrame",
          "description": "",
          "collection": false,
          "type": "Boolean",
          "required": true
        }
      ],
      "additionalTags": [],
      "apiType": "event",
      "fullSignature": "webviewTag.on('load-commit')",
      "url": "https://electronjs.org/docs/api/webview-tag#event-load-commit",
      "slug": "webviewtagonload-commit",
      "tldr": "Fired when a load has committed.",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:load-commit",
        "api:webviewtagonload-commit",
        "api:webviewTag.on('load-commit')",
        "doc:load-commit",
        "doc:webviewtagonload-commit",
        "doc:webviewTag.on('load-commit')"
      ]
    },
    {
      "objectID": "api-webview-tag#event-did-finish-load",
      "name": "did-finish-load",
      "description": "Fired when the navigation is done, i.e. the spinner of the tab will stop spinning, and the `onload` event is dispatched.",
      "parameters": [],
      "additionalTags": [],
      "apiType": "event",
      "fullSignature": "webviewTag.on('did-finish-load')",
      "url": "https://electronjs.org/docs/api/webview-tag#event-did-finish-load",
      "slug": "webviewtagondid-finish-load",
      "tldr": "Fired when the navigation is done, i.e.",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:did-finish-load",
        "api:webviewtagondid-finish-load",
        "api:webviewTag.on('did-finish-load')",
        "doc:did-finish-load",
        "doc:webviewtagondid-finish-load",
        "doc:webviewTag.on('did-finish-load')"
      ]
    },
    {
      "objectID": "api-webview-tag#event-did-fail-load",
      "name": "did-fail-load",
      "description": "This event is like `did-finish-load`, but fired when the load failed or was cancelled, e.g. `window.stop()` is invoked.",
      "parameters": [
        {
          "name": "errorCode",
          "description": "",
          "collection": false,
          "type": "Integer",
          "required": true
        },
        {
          "name": "errorDescription",
          "description": "",
          "collection": false,
          "type": "String",
          "possibleValues": null,
          "required": true
        },
        {
          "name": "validatedURL",
          "description": "",
          "collection": false,
          "type": "String",
          "possibleValues": null,
          "required": true
        },
        {
          "name": "isMainFrame",
          "description": "",
          "collection": false,
          "type": "Boolean",
          "required": true
        }
      ],
      "additionalTags": [],
      "apiType": "event",
      "fullSignature": "webviewTag.on('did-fail-load')",
      "url": "https://electronjs.org/docs/api/webview-tag#event-did-fail-load",
      "slug": "webviewtagondid-fail-load",
      "tldr": "This event is like `did-finish-load`, but fired when the load failed or was cancelled, e.g.",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:did-fail-load",
        "api:webviewtagondid-fail-load",
        "api:webviewTag.on('did-fail-load')",
        "doc:did-fail-load",
        "doc:webviewtagondid-fail-load",
        "doc:webviewTag.on('did-fail-load')"
      ]
    },
    {
      "objectID": "api-webview-tag#event-did-frame-finish-load",
      "name": "did-frame-finish-load",
      "description": "Fired when a frame has done navigation.",
      "parameters": [
        {
          "name": "isMainFrame",
          "description": "",
          "collection": false,
          "type": "Boolean",
          "required": true
        }
      ],
      "additionalTags": [],
      "apiType": "event",
      "fullSignature": "webviewTag.on('did-frame-finish-load')",
      "url": "https://electronjs.org/docs/api/webview-tag#event-did-frame-finish-load",
      "slug": "webviewtagondid-frame-finish-load",
      "tldr": "Fired when a frame has done navigation.",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:did-frame-finish-load",
        "api:webviewtagondid-frame-finish-load",
        "api:webviewTag.on('did-frame-finish-load')",
        "doc:did-frame-finish-load",
        "doc:webviewtagondid-frame-finish-load",
        "doc:webviewTag.on('did-frame-finish-load')"
      ]
    },
    {
      "objectID": "api-webview-tag#event-did-start-loading",
      "name": "did-start-loading",
      "description": "Corresponds to the points in time when the spinner of the tab starts spinning.",
      "parameters": [],
      "additionalTags": [],
      "apiType": "event",
      "fullSignature": "webviewTag.on('did-start-loading')",
      "url": "https://electronjs.org/docs/api/webview-tag#event-did-start-loading",
      "slug": "webviewtagondid-start-loading",
      "tldr": "Corresponds to the points in time when the spinner of the tab starts spinning.",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:did-start-loading",
        "api:webviewtagondid-start-loading",
        "api:webviewTag.on('did-start-loading')",
        "doc:did-start-loading",
        "doc:webviewtagondid-start-loading",
        "doc:webviewTag.on('did-start-loading')"
      ]
    },
    {
      "objectID": "api-webview-tag#event-did-stop-loading",
      "name": "did-stop-loading",
      "description": "Corresponds to the points in time when the spinner of the tab stops spinning.",
      "parameters": [],
      "additionalTags": [],
      "apiType": "event",
      "fullSignature": "webviewTag.on('did-stop-loading')",
      "url": "https://electronjs.org/docs/api/webview-tag#event-did-stop-loading",
      "slug": "webviewtagondid-stop-loading",
      "tldr": "Corresponds to the points in time when the spinner of the tab stops spinning.",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:did-stop-loading",
        "api:webviewtagondid-stop-loading",
        "api:webviewTag.on('did-stop-loading')",
        "doc:did-stop-loading",
        "doc:webviewtagondid-stop-loading",
        "doc:webviewTag.on('did-stop-loading')"
      ]
    },
    {
      "objectID": "api-webview-tag#event-dom-ready",
      "name": "dom-ready",
      "description": "Fired when document in the given frame is loaded.",
      "parameters": [],
      "additionalTags": [],
      "apiType": "event",
      "fullSignature": "webviewTag.on('dom-ready')",
      "url": "https://electronjs.org/docs/api/webview-tag#event-dom-ready",
      "slug": "webviewtagondom-ready",
      "tldr": "Fired when document in the given frame is loaded.",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:dom-ready",
        "api:webviewtagondom-ready",
        "api:webviewTag.on('dom-ready')",
        "doc:dom-ready",
        "doc:webviewtagondom-ready",
        "doc:webviewTag.on('dom-ready')"
      ]
    },
    {
      "objectID": "api-webview-tag#event-page-title-updated",
      "name": "page-title-updated",
      "description": "Fired when page title is set during navigation. `explicitSet` is false when title is synthesized from file url.",
      "parameters": [
        {
          "name": "title",
          "description": "",
          "collection": false,
          "type": "String",
          "possibleValues": null,
          "required": true
        },
        {
          "name": "explicitSet",
          "description": "",
          "collection": false,
          "type": "Boolean",
          "required": true
        }
      ],
      "additionalTags": [],
      "apiType": "event",
      "fullSignature": "webviewTag.on('page-title-updated')",
      "url": "https://electronjs.org/docs/api/webview-tag#event-page-title-updated",
      "slug": "webviewtagonpage-title-updated",
      "tldr": "Fired when page title is set during navigation.",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:page-title-updated",
        "api:webviewtagonpage-title-updated",
        "api:webviewTag.on('page-title-updated')",
        "doc:page-title-updated",
        "doc:webviewtagonpage-title-updated",
        "doc:webviewTag.on('page-title-updated')"
      ]
    },
    {
      "objectID": "api-webview-tag#event-page-favicon-updated",
      "name": "page-favicon-updated",
      "description": "Fired when page receives favicon urls.",
      "parameters": [
        {
          "name": "favicons",
          "description": "Array of URLs.",
          "collection": true,
          "type": "String",
          "possibleValues": null,
          "required": true
        }
      ],
      "additionalTags": [],
      "apiType": "event",
      "fullSignature": "webviewTag.on('page-favicon-updated')",
      "url": "https://electronjs.org/docs/api/webview-tag#event-page-favicon-updated",
      "slug": "webviewtagonpage-favicon-updated",
      "tldr": "Fired when page receives favicon urls.",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:page-favicon-updated",
        "api:webviewtagonpage-favicon-updated",
        "api:webviewTag.on('page-favicon-updated')",
        "doc:page-favicon-updated",
        "doc:webviewtagonpage-favicon-updated",
        "doc:webviewTag.on('page-favicon-updated')"
      ]
    },
    {
      "objectID": "api-webview-tag#event-enter-html-full-screen",
      "name": "enter-html-full-screen",
      "description": "Fired when page enters fullscreen triggered by HTML API.",
      "parameters": [],
      "additionalTags": [],
      "apiType": "event",
      "fullSignature": "webviewTag.on('enter-html-full-screen')",
      "url": "https://electronjs.org/docs/api/webview-tag#event-enter-html-full-screen",
      "slug": "webviewtagonenter-html-full-screen",
      "tldr": "Fired when page enters fullscreen triggered by HTML API.",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:enter-html-full-screen",
        "api:webviewtagonenter-html-full-screen",
        "api:webviewTag.on('enter-html-full-screen')",
        "doc:enter-html-full-screen",
        "doc:webviewtagonenter-html-full-screen",
        "doc:webviewTag.on('enter-html-full-screen')"
      ]
    },
    {
      "objectID": "api-webview-tag#event-leave-html-full-screen",
      "name": "leave-html-full-screen",
      "description": "Fired when page leaves fullscreen triggered by HTML API.",
      "parameters": [],
      "additionalTags": [],
      "apiType": "event",
      "fullSignature": "webviewTag.on('leave-html-full-screen')",
      "url": "https://electronjs.org/docs/api/webview-tag#event-leave-html-full-screen",
      "slug": "webviewtagonleave-html-full-screen",
      "tldr": "Fired when page leaves fullscreen triggered by HTML API.",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:leave-html-full-screen",
        "api:webviewtagonleave-html-full-screen",
        "api:webviewTag.on('leave-html-full-screen')",
        "doc:leave-html-full-screen",
        "doc:webviewtagonleave-html-full-screen",
        "doc:webviewTag.on('leave-html-full-screen')"
      ]
    },
    {
      "objectID": "api-webview-tag#event-console-message",
      "name": "console-message",
      "description": "Fired when the guest window logs a console message.\n\nThe following example code forwards all log messages to the embedder's console without regard for log level or other properties.",
      "parameters": [
        {
          "name": "level",
          "description": "",
          "collection": false,
          "type": "Integer",
          "required": true
        },
        {
          "name": "message",
          "description": "",
          "collection": false,
          "type": "String",
          "possibleValues": null,
          "required": true
        },
        {
          "name": "line",
          "description": "",
          "collection": false,
          "type": "Integer",
          "required": true
        },
        {
          "name": "sourceId",
          "description": "",
          "collection": false,
          "type": "String",
          "possibleValues": null,
          "required": true
        }
      ],
      "additionalTags": [],
      "apiType": "event",
      "fullSignature": "webviewTag.on('console-message')",
      "url": "https://electronjs.org/docs/api/webview-tag#event-console-message",
      "slug": "webviewtagonconsole-message",
      "tldr": "Fired when the guest window logs a console message.\n\nThe following example code forwards all log messages to the embedder's console without regard for log level or other properties.",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:console-message",
        "api:webviewtagonconsole-message",
        "api:webviewTag.on('console-message')",
        "doc:console-message",
        "doc:webviewtagonconsole-message",
        "doc:webviewTag.on('console-message')"
      ]
    },
    {
      "objectID": "api-webview-tag#event-found-in-page",
      "name": "found-in-page",
      "description": "Fired when a result is available for `webview.findInPage` request.",
      "parameters": [
        {
          "name": "result",
          "description": "",
          "collection": false,
          "type": "Object",
          "properties": [
            {
              "name": "requestId",
              "description": "",
              "required": true,
              "additionalTags": [],
              "collection": false,
              "type": "Integer"
            },
            {
              "name": "activeMatchOrdinal",
              "description": "Position of the active match.",
              "required": true,
              "additionalTags": [],
              "collection": false,
              "type": "Integer"
            },
            {
              "name": "matches",
              "description": "Number of Matches.",
              "required": true,
              "additionalTags": [],
              "collection": false,
              "type": "Integer"
            },
            {
              "name": "selectionArea",
              "description": "Coordinates of first match region.",
              "required": true,
              "additionalTags": [],
              "collection": false,
              "type": "Rectangle"
            },
            {
              "name": "finalUpdate",
              "description": "",
              "required": true,
              "additionalTags": [],
              "collection": false,
              "type": "Boolean"
            }
          ],
          "required": true
        }
      ],
      "additionalTags": [],
      "apiType": "event",
      "fullSignature": "webviewTag.on('found-in-page')",
      "url": "https://electronjs.org/docs/api/webview-tag#event-found-in-page",
      "slug": "webviewtagonfound-in-page",
      "tldr": "Fired when a result is available for `webview.findInPage` request.",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:found-in-page",
        "api:webviewtagonfound-in-page",
        "api:webviewTag.on('found-in-page')",
        "doc:found-in-page",
        "doc:webviewtagonfound-in-page",
        "doc:webviewTag.on('found-in-page')"
      ]
    },
    {
      "objectID": "api-webview-tag#event-new-window",
      "name": "new-window",
      "description": "Fired when the guest page attempts to open a new browser window.\n\nThe following example code opens the new url in system's default browser.",
      "parameters": [
        {
          "name": "url",
          "description": "",
          "collection": false,
          "type": "String",
          "possibleValues": null,
          "required": true
        },
        {
          "name": "frameName",
          "description": "",
          "collection": false,
          "type": "String",
          "possibleValues": null,
          "required": true
        },
        {
          "name": "disposition",
          "description": "Can be `default`, `foreground-tab`, `background-tab`, `new-window`, `save-to-disk` and `other`.",
          "collection": false,
          "type": "String",
          "possibleValues": [
            {
              "value": "default",
              "description": ""
            },
            {
              "value": "foreground-tab",
              "description": ""
            },
            {
              "value": "background-tab",
              "description": ""
            },
            {
              "value": "new-window",
              "description": ""
            },
            {
              "value": "save-to-disk",
              "description": ""
            },
            {
              "value": "other",
              "description": ""
            }
          ],
          "required": true
        },
        {
          "name": "options",
          "description": "The options which should be used for creating the new `BrowserWindow`.",
          "collection": false,
          "type": "BrowserWindowConstructorOptions",
          "required": true
        }
      ],
      "additionalTags": [],
      "apiType": "event",
      "fullSignature": "webviewTag.on('new-window')",
      "url": "https://electronjs.org/docs/api/webview-tag#event-new-window",
      "slug": "webviewtagonnew-window",
      "tldr": "Fired when the guest page attempts to open a new browser window.\n\nThe following example code opens the new url in system's default browser.",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:new-window",
        "api:webviewtagonnew-window",
        "api:webviewTag.on('new-window')",
        "doc:new-window",
        "doc:webviewtagonnew-window",
        "doc:webviewTag.on('new-window')"
      ]
    },
    {
      "objectID": "api-webview-tag#event-will-navigate",
      "name": "will-navigate",
      "description": "Emitted when a user or the page wants to start navigation. It can happen when the `window.location` object is changed or a user clicks a link in the page.\n\nThis event will not emit when the navigation is started programmatically with APIs like `<webview>.loadURL` and `<webview>.back`.\n\nIt is also not emitted during in-page navigation, such as clicking anchor links or updating the `window.location.hash`. Use `did-navigate-in-page` event for this purpose.\n\nCalling `event.preventDefault()` does __NOT__ have any effect.",
      "parameters": [
        {
          "name": "url",
          "description": "",
          "collection": false,
          "type": "String",
          "possibleValues": null,
          "required": true
        }
      ],
      "additionalTags": [],
      "apiType": "event",
      "fullSignature": "webviewTag.on('will-navigate')",
      "url": "https://electronjs.org/docs/api/webview-tag#event-will-navigate",
      "slug": "webviewtagonwill-navigate",
      "tldr": "Emitted when a user or the page wants to start navigation.",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:will-navigate",
        "api:webviewtagonwill-navigate",
        "api:webviewTag.on('will-navigate')",
        "doc:will-navigate",
        "doc:webviewtagonwill-navigate",
        "doc:webviewTag.on('will-navigate')"
      ]
    },
    {
      "objectID": "api-webview-tag#event-did-navigate",
      "name": "did-navigate",
      "description": "Emitted when a navigation is done.\n\nThis event is not emitted for in-page navigations, such as clicking anchor links or updating the `window.location.hash`. Use `did-navigate-in-page` event for this purpose.",
      "parameters": [
        {
          "name": "url",
          "description": "",
          "collection": false,
          "type": "String",
          "possibleValues": null,
          "required": true
        }
      ],
      "additionalTags": [],
      "apiType": "event",
      "fullSignature": "webviewTag.on('did-navigate')",
      "url": "https://electronjs.org/docs/api/webview-tag#event-did-navigate",
      "slug": "webviewtagondid-navigate",
      "tldr": "Emitted when a navigation is done.\n\nThis event is not emitted for in-page navigations, such as clicking anchor links or updating the `window.location.hash`.",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:did-navigate",
        "api:webviewtagondid-navigate",
        "api:webviewTag.on('did-navigate')",
        "doc:did-navigate",
        "doc:webviewtagondid-navigate",
        "doc:webviewTag.on('did-navigate')"
      ]
    },
    {
      "objectID": "api-webview-tag#event-did-navigate-in-page",
      "name": "did-navigate-in-page",
      "description": "Emitted when an in-page navigation happened.\n\nWhen in-page navigation happens, the page URL changes but does not cause navigation outside of the page. Examples of this occurring are when anchor links are clicked or when the DOM `hashchange` event is triggered.",
      "parameters": [
        {
          "name": "isMainFrame",
          "description": "",
          "collection": false,
          "type": "Boolean",
          "required": true
        },
        {
          "name": "url",
          "description": "",
          "collection": false,
          "type": "String",
          "possibleValues": null,
          "required": true
        }
      ],
      "additionalTags": [],
      "apiType": "event",
      "fullSignature": "webviewTag.on('did-navigate-in-page')",
      "url": "https://electronjs.org/docs/api/webview-tag#event-did-navigate-in-page",
      "slug": "webviewtagondid-navigate-in-page",
      "tldr": "Emitted when an in-page navigation happened.\n\nWhen in-page navigation happens, the page URL changes but does not cause navigation outside of the page.",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:did-navigate-in-page",
        "api:webviewtagondid-navigate-in-page",
        "api:webviewTag.on('did-navigate-in-page')",
        "doc:did-navigate-in-page",
        "doc:webviewtagondid-navigate-in-page",
        "doc:webviewTag.on('did-navigate-in-page')"
      ]
    },
    {
      "objectID": "api-webview-tag#event-close",
      "name": "close",
      "description": "Fired when the guest page attempts to close itself.\n\nThe following example code navigates the `webview` to `about:blank` when the guest attempts to close itself.",
      "parameters": [],
      "additionalTags": [],
      "apiType": "event",
      "fullSignature": "webviewTag.on('close')",
      "url": "https://electronjs.org/docs/api/webview-tag#event-close",
      "slug": "webviewtagonclose",
      "tldr": "Fired when the guest page attempts to close itself.\n\nThe following example code navigates the `webview` to `about:blank` when the guest attempts to close itself.",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:close",
        "api:webviewtagonclose",
        "api:webviewTag.on('close')",
        "doc:close",
        "doc:webviewtagonclose",
        "doc:webviewTag.on('close')"
      ]
    },
    {
      "objectID": "api-webview-tag#event-ipc-message",
      "name": "ipc-message",
      "description": "Fired when the guest page has sent an asynchronous message to embedder page.\n\nWith `sendToHost` method and `ipc-message` event you can communicate between guest page and embedder page:",
      "parameters": [
        {
          "name": "channel",
          "description": "",
          "collection": false,
          "type": "String",
          "possibleValues": null,
          "required": true
        },
        {
          "name": "args",
          "description": "",
          "collection": true,
          "type": "any",
          "required": true
        }
      ],
      "additionalTags": [],
      "apiType": "event",
      "fullSignature": "webviewTag.on('ipc-message')",
      "url": "https://electronjs.org/docs/api/webview-tag#event-ipc-message",
      "slug": "webviewtagonipc-message",
      "tldr": "Fired when the guest page has sent an asynchronous message to embedder page.\n\nWith `sendToHost` method and `ipc-message` event you can communicate between guest page and embedder page:.",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:ipc-message",
        "api:webviewtagonipc-message",
        "api:webviewTag.on('ipc-message')",
        "doc:ipc-message",
        "doc:webviewtagonipc-message",
        "doc:webviewTag.on('ipc-message')"
      ]
    },
    {
      "objectID": "api-webview-tag#event-crashed",
      "name": "crashed",
      "description": "Fired when the renderer process is crashed.",
      "parameters": [],
      "additionalTags": [],
      "apiType": "event",
      "fullSignature": "webviewTag.on('crashed')",
      "url": "https://electronjs.org/docs/api/webview-tag#event-crashed",
      "slug": "webviewtagoncrashed",
      "tldr": "Fired when the renderer process is crashed.",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:crashed",
        "api:webviewtagoncrashed",
        "api:webviewTag.on('crashed')",
        "doc:crashed",
        "doc:webviewtagoncrashed",
        "doc:webviewTag.on('crashed')"
      ]
    },
    {
      "objectID": "api-webview-tag#event-plugin-crashed",
      "name": "plugin-crashed",
      "description": "Fired when a plugin process is crashed.",
      "parameters": [
        {
          "name": "name",
          "description": "",
          "collection": false,
          "type": "String",
          "possibleValues": null,
          "required": true
        },
        {
          "name": "version",
          "description": "",
          "collection": false,
          "type": "String",
          "possibleValues": null,
          "required": true
        }
      ],
      "additionalTags": [],
      "apiType": "event",
      "fullSignature": "webviewTag.on('plugin-crashed')",
      "url": "https://electronjs.org/docs/api/webview-tag#event-plugin-crashed",
      "slug": "webviewtagonplugin-crashed",
      "tldr": "Fired when a plugin process is crashed.",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:plugin-crashed",
        "api:webviewtagonplugin-crashed",
        "api:webviewTag.on('plugin-crashed')",
        "doc:plugin-crashed",
        "doc:webviewtagonplugin-crashed",
        "doc:webviewTag.on('plugin-crashed')"
      ]
    },
    {
      "objectID": "api-webview-tag#event-destroyed",
      "name": "destroyed",
      "description": "Fired when the WebContents is destroyed.",
      "parameters": [],
      "additionalTags": [],
      "apiType": "event",
      "fullSignature": "webviewTag.on('destroyed')",
      "url": "https://electronjs.org/docs/api/webview-tag#event-destroyed",
      "slug": "webviewtagondestroyed",
      "tldr": "Fired when the WebContents is destroyed.",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:destroyed",
        "api:webviewtagondestroyed",
        "api:webviewTag.on('destroyed')",
        "doc:destroyed",
        "doc:webviewtagondestroyed",
        "doc:webviewTag.on('destroyed')"
      ]
    },
    {
      "objectID": "api-webview-tag#event-media-started-playing",
      "name": "media-started-playing",
      "description": "Emitted when media starts playing.",
      "parameters": [],
      "additionalTags": [],
      "apiType": "event",
      "fullSignature": "webviewTag.on('media-started-playing')",
      "url": "https://electronjs.org/docs/api/webview-tag#event-media-started-playing",
      "slug": "webviewtagonmedia-started-playing",
      "tldr": "Emitted when media starts playing.",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:media-started-playing",
        "api:webviewtagonmedia-started-playing",
        "api:webviewTag.on('media-started-playing')",
        "doc:media-started-playing",
        "doc:webviewtagonmedia-started-playing",
        "doc:webviewTag.on('media-started-playing')"
      ]
    },
    {
      "objectID": "api-webview-tag#event-media-paused",
      "name": "media-paused",
      "description": "Emitted when media is paused or done playing.",
      "parameters": [],
      "additionalTags": [],
      "apiType": "event",
      "fullSignature": "webviewTag.on('media-paused')",
      "url": "https://electronjs.org/docs/api/webview-tag#event-media-paused",
      "slug": "webviewtagonmedia-paused",
      "tldr": "Emitted when media is paused or done playing.",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:media-paused",
        "api:webviewtagonmedia-paused",
        "api:webviewTag.on('media-paused')",
        "doc:media-paused",
        "doc:webviewtagonmedia-paused",
        "doc:webviewTag.on('media-paused')"
      ]
    },
    {
      "objectID": "api-webview-tag#event-did-change-theme-color",
      "name": "did-change-theme-color",
      "description": "Emitted when a page's theme color changes. This is usually due to encountering a meta tag:",
      "parameters": [
        {
          "name": "themeColor",
          "description": "",
          "collection": false,
          "type": "String",
          "possibleValues": null,
          "required": true
        }
      ],
      "additionalTags": [],
      "apiType": "event",
      "fullSignature": "webviewTag.on('did-change-theme-color')",
      "url": "https://electronjs.org/docs/api/webview-tag#event-did-change-theme-color",
      "slug": "webviewtagondid-change-theme-color",
      "tldr": "Emitted when a page's theme color changes.",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:did-change-theme-color",
        "api:webviewtagondid-change-theme-color",
        "api:webviewTag.on('did-change-theme-color')",
        "doc:did-change-theme-color",
        "doc:webviewtagondid-change-theme-color",
        "doc:webviewTag.on('did-change-theme-color')"
      ]
    },
    {
      "objectID": "api-webview-tag#event-update-target-url",
      "name": "update-target-url",
      "description": "Emitted when mouse moves over a link or the keyboard moves the focus to a link.",
      "parameters": [
        {
          "name": "url",
          "description": "",
          "collection": false,
          "type": "String",
          "possibleValues": null,
          "required": true
        }
      ],
      "additionalTags": [],
      "apiType": "event",
      "fullSignature": "webviewTag.on('update-target-url')",
      "url": "https://electronjs.org/docs/api/webview-tag#event-update-target-url",
      "slug": "webviewtagonupdate-target-url",
      "tldr": "Emitted when mouse moves over a link or the keyboard moves the focus to a link.",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:update-target-url",
        "api:webviewtagonupdate-target-url",
        "api:webviewTag.on('update-target-url')",
        "doc:update-target-url",
        "doc:webviewtagonupdate-target-url",
        "doc:webviewTag.on('update-target-url')"
      ]
    },
    {
      "objectID": "api-webview-tag#event-devtools-opened",
      "name": "devtools-opened",
      "description": "Emitted when DevTools is opened.",
      "parameters": [],
      "additionalTags": [],
      "apiType": "event",
      "fullSignature": "webviewTag.on('devtools-opened')",
      "url": "https://electronjs.org/docs/api/webview-tag#event-devtools-opened",
      "slug": "webviewtagondevtools-opened",
      "tldr": "Emitted when DevTools is opened.",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:devtools-opened",
        "api:webviewtagondevtools-opened",
        "api:webviewTag.on('devtools-opened')",
        "doc:devtools-opened",
        "doc:webviewtagondevtools-opened",
        "doc:webviewTag.on('devtools-opened')"
      ]
    },
    {
      "objectID": "api-webview-tag#event-devtools-closed",
      "name": "devtools-closed",
      "description": "Emitted when DevTools is closed.",
      "parameters": [],
      "additionalTags": [],
      "apiType": "event",
      "fullSignature": "webviewTag.on('devtools-closed')",
      "url": "https://electronjs.org/docs/api/webview-tag#event-devtools-closed",
      "slug": "webviewtagondevtools-closed",
      "tldr": "Emitted when DevTools is closed.",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:devtools-closed",
        "api:webviewtagondevtools-closed",
        "api:webviewTag.on('devtools-closed')",
        "doc:devtools-closed",
        "doc:webviewtagondevtools-closed",
        "doc:webviewTag.on('devtools-closed')"
      ]
    },
    {
      "objectID": "api-webview-tag#event-devtools-focused",
      "name": "devtools-focused",
      "description": "Emitted when DevTools is focused / opened.",
      "parameters": [],
      "additionalTags": [],
      "apiType": "event",
      "fullSignature": "webviewTag.on('devtools-focused')",
      "url": "https://electronjs.org/docs/api/webview-tag#event-devtools-focused",
      "slug": "webviewtagondevtools-focused",
      "tldr": "Emitted when DevTools is focused / opened.",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:devtools-focused",
        "api:webviewtagondevtools-focused",
        "api:webviewTag.on('devtools-focused')",
        "doc:devtools-focused",
        "doc:webviewtagondevtools-focused",
        "doc:webviewTag.on('devtools-focused')"
      ]
    },
    {
      "objectID": "api-bluetooth-device#bluetoothdevicedevicename",
      "name": "deviceName",
      "description": "",
      "required": true,
      "additionalTags": [],
      "collection": false,
      "type": "String",
      "possibleValues": null,
      "apiType": "properties",
      "fullSignature": "BluetoothDevice.deviceName",
      "tldr": null,
      "slug": "bluetoothdevicedevicename",
      "url": "https://electronjs.org/docs/api/bluetooth-device#bluetoothdevicedevicename",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:deviceName",
        "api:bluetoothdevicedevicename",
        "api:BluetoothDevice.deviceName",
        "doc:deviceName",
        "doc:bluetoothdevicedevicename",
        "doc:BluetoothDevice.deviceName"
      ]
    },
    {
      "objectID": "api-bluetooth-device#bluetoothdevicedeviceid",
      "name": "deviceId",
      "description": "",
      "required": true,
      "additionalTags": [],
      "collection": false,
      "type": "String",
      "possibleValues": null,
      "apiType": "properties",
      "fullSignature": "BluetoothDevice.deviceId",
      "tldr": null,
      "slug": "bluetoothdevicedeviceid",
      "url": "https://electronjs.org/docs/api/bluetooth-device#bluetoothdevicedeviceid",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:deviceId",
        "api:bluetoothdevicedeviceid",
        "api:BluetoothDevice.deviceId",
        "doc:deviceId",
        "doc:bluetoothdevicedeviceid",
        "doc:BluetoothDevice.deviceId"
      ]
    },
    {
      "objectID": "api-certificate-principal#certificateprincipalcommonname",
      "name": "commonName",
      "description": "Common Name.",
      "required": true,
      "additionalTags": [],
      "collection": false,
      "type": "String",
      "possibleValues": null,
      "apiType": "properties",
      "fullSignature": "CertificatePrincipal.commonName",
      "tldr": "Common Name.",
      "slug": "certificateprincipalcommonname",
      "url": "https://electronjs.org/docs/api/certificate-principal#certificateprincipalcommonname",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:commonName",
        "api:certificateprincipalcommonname",
        "api:CertificatePrincipal.commonName",
        "doc:commonName",
        "doc:certificateprincipalcommonname",
        "doc:CertificatePrincipal.commonName"
      ]
    },
    {
      "objectID": "api-certificate-principal#certificateprincipalorganizations",
      "name": "organizations",
      "description": "Organization names.",
      "required": true,
      "additionalTags": [],
      "collection": true,
      "type": "String",
      "possibleValues": null,
      "apiType": "properties",
      "fullSignature": "CertificatePrincipal.organizations",
      "tldr": "Organization names.",
      "slug": "certificateprincipalorganizations",
      "url": "https://electronjs.org/docs/api/certificate-principal#certificateprincipalorganizations",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:organizations",
        "api:certificateprincipalorganizations",
        "api:CertificatePrincipal.organizations",
        "doc:organizations",
        "doc:certificateprincipalorganizations",
        "doc:CertificatePrincipal.organizations"
      ]
    },
    {
      "objectID": "api-certificate-principal#certificateprincipalorganizationunits",
      "name": "organizationUnits",
      "description": "Organization Unit names.",
      "required": true,
      "additionalTags": [],
      "collection": true,
      "type": "String",
      "possibleValues": null,
      "apiType": "properties",
      "fullSignature": "CertificatePrincipal.organizationUnits",
      "tldr": "Organization Unit names.",
      "slug": "certificateprincipalorganizationunits",
      "url": "https://electronjs.org/docs/api/certificate-principal#certificateprincipalorganizationunits",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:organizationUnits",
        "api:certificateprincipalorganizationunits",
        "api:CertificatePrincipal.organizationUnits",
        "doc:organizationUnits",
        "doc:certificateprincipalorganizationunits",
        "doc:CertificatePrincipal.organizationUnits"
      ]
    },
    {
      "objectID": "api-certificate-principal#certificateprincipallocality",
      "name": "locality",
      "description": "Locality.",
      "required": true,
      "additionalTags": [],
      "collection": false,
      "type": "String",
      "possibleValues": null,
      "apiType": "properties",
      "fullSignature": "CertificatePrincipal.locality",
      "tldr": "Locality.",
      "slug": "certificateprincipallocality",
      "url": "https://electronjs.org/docs/api/certificate-principal#certificateprincipallocality",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:locality",
        "api:certificateprincipallocality",
        "api:CertificatePrincipal.locality",
        "doc:locality",
        "doc:certificateprincipallocality",
        "doc:CertificatePrincipal.locality"
      ]
    },
    {
      "objectID": "api-certificate-principal#certificateprincipalstate",
      "name": "state",
      "description": "State or province.",
      "required": true,
      "additionalTags": [],
      "collection": false,
      "type": "String",
      "possibleValues": null,
      "apiType": "properties",
      "fullSignature": "CertificatePrincipal.state",
      "tldr": "State or province.",
      "slug": "certificateprincipalstate",
      "url": "https://electronjs.org/docs/api/certificate-principal#certificateprincipalstate",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:state",
        "api:certificateprincipalstate",
        "api:CertificatePrincipal.state",
        "doc:state",
        "doc:certificateprincipalstate",
        "doc:CertificatePrincipal.state"
      ]
    },
    {
      "objectID": "api-certificate-principal#certificateprincipalcountry",
      "name": "country",
      "description": "Country or region.",
      "required": true,
      "additionalTags": [],
      "collection": false,
      "type": "String",
      "possibleValues": null,
      "apiType": "properties",
      "fullSignature": "CertificatePrincipal.country",
      "tldr": "Country or region.",
      "slug": "certificateprincipalcountry",
      "url": "https://electronjs.org/docs/api/certificate-principal#certificateprincipalcountry",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:country",
        "api:certificateprincipalcountry",
        "api:CertificatePrincipal.country",
        "doc:country",
        "doc:certificateprincipalcountry",
        "doc:CertificatePrincipal.country"
      ]
    },
    {
      "objectID": "api-certificate#certificatedata",
      "name": "data",
      "description": "PEM encoded data",
      "required": true,
      "additionalTags": [],
      "collection": false,
      "type": "String",
      "possibleValues": null,
      "apiType": "properties",
      "fullSignature": "Certificate.data",
      "tldr": "PEM encoded data.",
      "slug": "certificatedata",
      "url": "https://electronjs.org/docs/api/certificate#certificatedata",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:data",
        "api:certificatedata",
        "api:Certificate.data",
        "doc:data",
        "doc:certificatedata",
        "doc:Certificate.data"
      ]
    },
    {
      "objectID": "api-certificate#certificateissuer",
      "name": "issuer",
      "description": "Issuer principal",
      "required": true,
      "additionalTags": [],
      "collection": false,
      "type": "CertificatePrincipal",
      "apiType": "properties",
      "fullSignature": "Certificate.issuer",
      "tldr": "Issuer principal.",
      "slug": "certificateissuer",
      "url": "https://electronjs.org/docs/api/certificate#certificateissuer",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:issuer",
        "api:certificateissuer",
        "api:Certificate.issuer",
        "doc:issuer",
        "doc:certificateissuer",
        "doc:Certificate.issuer"
      ]
    },
    {
      "objectID": "api-certificate#certificateissuername",
      "name": "issuerName",
      "description": "Issuer's Common Name",
      "required": true,
      "additionalTags": [],
      "collection": false,
      "type": "String",
      "possibleValues": null,
      "apiType": "properties",
      "fullSignature": "Certificate.issuerName",
      "tldr": "Issuer's Common Name.",
      "slug": "certificateissuername",
      "url": "https://electronjs.org/docs/api/certificate#certificateissuername",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:issuerName",
        "api:certificateissuername",
        "api:Certificate.issuerName",
        "doc:issuerName",
        "doc:certificateissuername",
        "doc:Certificate.issuerName"
      ]
    },
    {
      "objectID": "api-certificate#certificateissuercert",
      "name": "issuerCert",
      "description": "Issuer certificate (if not self-signed)",
      "required": true,
      "additionalTags": [],
      "collection": false,
      "type": "Certificate",
      "apiType": "properties",
      "fullSignature": "Certificate.issuerCert",
      "tldr": "Issuer certificate (if not self-signed).",
      "slug": "certificateissuercert",
      "url": "https://electronjs.org/docs/api/certificate#certificateissuercert",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:issuerCert",
        "api:certificateissuercert",
        "api:Certificate.issuerCert",
        "doc:issuerCert",
        "doc:certificateissuercert",
        "doc:Certificate.issuerCert"
      ]
    },
    {
      "objectID": "api-certificate#certificatesubject",
      "name": "subject",
      "description": "Subject principal",
      "required": true,
      "additionalTags": [],
      "collection": false,
      "type": "CertificatePrincipal",
      "apiType": "properties",
      "fullSignature": "Certificate.subject",
      "tldr": "Subject principal.",
      "slug": "certificatesubject",
      "url": "https://electronjs.org/docs/api/certificate#certificatesubject",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:subject",
        "api:certificatesubject",
        "api:Certificate.subject",
        "doc:subject",
        "doc:certificatesubject",
        "doc:Certificate.subject"
      ]
    },
    {
      "objectID": "api-certificate#certificatesubjectname",
      "name": "subjectName",
      "description": "Subject's Common Name",
      "required": true,
      "additionalTags": [],
      "collection": false,
      "type": "String",
      "possibleValues": null,
      "apiType": "properties",
      "fullSignature": "Certificate.subjectName",
      "tldr": "Subject's Common Name.",
      "slug": "certificatesubjectname",
      "url": "https://electronjs.org/docs/api/certificate#certificatesubjectname",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:subjectName",
        "api:certificatesubjectname",
        "api:Certificate.subjectName",
        "doc:subjectName",
        "doc:certificatesubjectname",
        "doc:Certificate.subjectName"
      ]
    },
    {
      "objectID": "api-certificate#certificateserialnumber",
      "name": "serialNumber",
      "description": "Hex value represented string",
      "required": true,
      "additionalTags": [],
      "collection": false,
      "type": "String",
      "possibleValues": null,
      "apiType": "properties",
      "fullSignature": "Certificate.serialNumber",
      "tldr": "Hex value represented string.",
      "slug": "certificateserialnumber",
      "url": "https://electronjs.org/docs/api/certificate#certificateserialnumber",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:serialNumber",
        "api:certificateserialnumber",
        "api:Certificate.serialNumber",
        "doc:serialNumber",
        "doc:certificateserialnumber",
        "doc:Certificate.serialNumber"
      ]
    },
    {
      "objectID": "api-certificate#certificatevalidstart",
      "name": "validStart",
      "description": "Start date of the certificate being valid in seconds",
      "required": true,
      "additionalTags": [],
      "collection": false,
      "type": "Number",
      "apiType": "properties",
      "fullSignature": "Certificate.validStart",
      "tldr": "Start date of the certificate being valid in seconds.",
      "slug": "certificatevalidstart",
      "url": "https://electronjs.org/docs/api/certificate#certificatevalidstart",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:validStart",
        "api:certificatevalidstart",
        "api:Certificate.validStart",
        "doc:validStart",
        "doc:certificatevalidstart",
        "doc:Certificate.validStart"
      ]
    },
    {
      "objectID": "api-certificate#certificatevalidexpiry",
      "name": "validExpiry",
      "description": "End date of the certificate being valid in seconds",
      "required": true,
      "additionalTags": [],
      "collection": false,
      "type": "Number",
      "apiType": "properties",
      "fullSignature": "Certificate.validExpiry",
      "tldr": "End date of the certificate being valid in seconds.",
      "slug": "certificatevalidexpiry",
      "url": "https://electronjs.org/docs/api/certificate#certificatevalidexpiry",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:validExpiry",
        "api:certificatevalidexpiry",
        "api:Certificate.validExpiry",
        "doc:validExpiry",
        "doc:certificatevalidexpiry",
        "doc:Certificate.validExpiry"
      ]
    },
    {
      "objectID": "api-certificate#certificatefingerprint",
      "name": "fingerprint",
      "description": "Fingerprint of the certificate",
      "required": true,
      "additionalTags": [],
      "collection": false,
      "type": "String",
      "possibleValues": null,
      "apiType": "properties",
      "fullSignature": "Certificate.fingerprint",
      "tldr": "Fingerprint of the certificate.",
      "slug": "certificatefingerprint",
      "url": "https://electronjs.org/docs/api/certificate#certificatefingerprint",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:fingerprint",
        "api:certificatefingerprint",
        "api:Certificate.fingerprint",
        "doc:fingerprint",
        "doc:certificatefingerprint",
        "doc:Certificate.fingerprint"
      ]
    },
    {
      "objectID": "api-cookie#cookiename",
      "name": "name",
      "description": "The name of the cookie.",
      "required": true,
      "additionalTags": [],
      "collection": false,
      "type": "String",
      "possibleValues": null,
      "apiType": "properties",
      "fullSignature": "Cookie.name",
      "tldr": "The name of the cookie.",
      "slug": "cookiename",
      "url": "https://electronjs.org/docs/api/cookie#cookiename",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:name",
        "api:cookiename",
        "api:Cookie.name",
        "doc:name",
        "doc:cookiename",
        "doc:Cookie.name"
      ]
    },
    {
      "objectID": "api-cookie#cookievalue",
      "name": "value",
      "description": "The value of the cookie.",
      "required": true,
      "additionalTags": [],
      "collection": false,
      "type": "String",
      "possibleValues": null,
      "apiType": "properties",
      "fullSignature": "Cookie.value",
      "tldr": "The value of the cookie.",
      "slug": "cookievalue",
      "url": "https://electronjs.org/docs/api/cookie#cookievalue",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:value",
        "api:cookievalue",
        "api:Cookie.value",
        "doc:value",
        "doc:cookievalue",
        "doc:Cookie.value"
      ]
    },
    {
      "objectID": "api-cookie#cookiedomain",
      "name": "domain",
      "description": "The domain of the cookie; this will be normalized with a preceding dot so that it's also valid for subdomains.",
      "required": false,
      "additionalTags": [],
      "collection": false,
      "type": "String",
      "possibleValues": null,
      "apiType": "properties",
      "fullSignature": "Cookie.domain",
      "tldr": "The domain of the cookie; this will be normalized with a preceding dot so that it's also valid for subdomains.",
      "slug": "cookiedomain",
      "url": "https://electronjs.org/docs/api/cookie#cookiedomain",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:domain",
        "api:cookiedomain",
        "api:Cookie.domain",
        "doc:domain",
        "doc:cookiedomain",
        "doc:Cookie.domain"
      ]
    },
    {
      "objectID": "api-cookie#cookiehostonly",
      "name": "hostOnly",
      "description": "Whether the cookie is a host-only cookie; this will only be `true` if no domain was passed.",
      "required": false,
      "additionalTags": [],
      "collection": false,
      "type": "Boolean",
      "apiType": "properties",
      "fullSignature": "Cookie.hostOnly",
      "tldr": "Whether the cookie is a host-only cookie; this will only be `true` if no domain was passed.",
      "slug": "cookiehostonly",
      "url": "https://electronjs.org/docs/api/cookie#cookiehostonly",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:hostOnly",
        "api:cookiehostonly",
        "api:Cookie.hostOnly",
        "doc:hostOnly",
        "doc:cookiehostonly",
        "doc:Cookie.hostOnly"
      ]
    },
    {
      "objectID": "api-cookie#cookiepath",
      "name": "path",
      "description": "The path of the cookie.",
      "required": false,
      "additionalTags": [],
      "collection": false,
      "type": "String",
      "possibleValues": null,
      "apiType": "properties",
      "fullSignature": "Cookie.path",
      "tldr": "The path of the cookie.",
      "slug": "cookiepath",
      "url": "https://electronjs.org/docs/api/cookie#cookiepath",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:path",
        "api:cookiepath",
        "api:Cookie.path",
        "doc:path",
        "doc:cookiepath",
        "doc:Cookie.path"
      ]
    },
    {
      "objectID": "api-cookie#cookiesecure",
      "name": "secure",
      "description": "Whether the cookie is marked as secure.",
      "required": false,
      "additionalTags": [],
      "collection": false,
      "type": "Boolean",
      "apiType": "properties",
      "fullSignature": "Cookie.secure",
      "tldr": "Whether the cookie is marked as secure.",
      "slug": "cookiesecure",
      "url": "https://electronjs.org/docs/api/cookie#cookiesecure",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:secure",
        "api:cookiesecure",
        "api:Cookie.secure",
        "doc:secure",
        "doc:cookiesecure",
        "doc:Cookie.secure"
      ]
    },
    {
      "objectID": "api-cookie#cookiehttponly",
      "name": "httpOnly",
      "description": "Whether the cookie is marked as HTTP only.",
      "required": false,
      "additionalTags": [],
      "collection": false,
      "type": "Boolean",
      "apiType": "properties",
      "fullSignature": "Cookie.httpOnly",
      "tldr": "Whether the cookie is marked as HTTP only.",
      "slug": "cookiehttponly",
      "url": "https://electronjs.org/docs/api/cookie#cookiehttponly",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:httpOnly",
        "api:cookiehttponly",
        "api:Cookie.httpOnly",
        "doc:httpOnly",
        "doc:cookiehttponly",
        "doc:Cookie.httpOnly"
      ]
    },
    {
      "objectID": "api-cookie#cookiesession",
      "name": "session",
      "description": "Whether the cookie is a session cookie or a persistent cookie with an expiration date.",
      "required": false,
      "additionalTags": [],
      "collection": false,
      "type": "Boolean",
      "apiType": "properties",
      "fullSignature": "Cookie.session",
      "tldr": "Whether the cookie is a session cookie or a persistent cookie with an expiration date.",
      "slug": "cookiesession",
      "url": "https://electronjs.org/docs/api/cookie#cookiesession",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:session",
        "api:cookiesession",
        "api:Cookie.session",
        "doc:session",
        "doc:cookiesession",
        "doc:Cookie.session"
      ]
    },
    {
      "objectID": "api-cookie#cookieexpirationdate",
      "name": "expirationDate",
      "description": "The expiration date of the cookie as the number of seconds since the UNIX epoch. Not provided for session cookies.",
      "required": false,
      "additionalTags": [],
      "collection": false,
      "type": "Double",
      "apiType": "properties",
      "fullSignature": "Cookie.expirationDate",
      "tldr": "The expiration date of the cookie as the number of seconds since the UNIX epoch.",
      "slug": "cookieexpirationdate",
      "url": "https://electronjs.org/docs/api/cookie#cookieexpirationdate",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:expirationDate",
        "api:cookieexpirationdate",
        "api:Cookie.expirationDate",
        "doc:expirationDate",
        "doc:cookieexpirationdate",
        "doc:Cookie.expirationDate"
      ]
    },
    {
      "objectID": "api-cpu-usage#cpuusagepercentcpuusage",
      "name": "percentCPUUsage",
      "description": "Percentage of CPU used since the last call to getCPUUsage. First call returns 0.",
      "required": true,
      "additionalTags": [],
      "collection": false,
      "type": "Number",
      "apiType": "properties",
      "fullSignature": "CPUUsage.percentCPUUsage",
      "tldr": "Percentage of CPU used since the last call to getCPUUsage.",
      "slug": "cpuusagepercentcpuusage",
      "url": "https://electronjs.org/docs/api/cpu-usage#cpuusagepercentcpuusage",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:percentCPUUsage",
        "api:cpuusagepercentcpuusage",
        "api:CPUUsage.percentCPUUsage",
        "doc:percentCPUUsage",
        "doc:cpuusagepercentcpuusage",
        "doc:CPUUsage.percentCPUUsage"
      ]
    },
    {
      "objectID": "api-cpu-usage#cpuusageidlewakeupspersecond",
      "name": "idleWakeupsPerSecond",
      "description": "The number of average idle CPU wakeups per second since the last call to getCPUUsage. First call returns 0. Will always return 0 on Windows.",
      "required": true,
      "additionalTags": [],
      "collection": false,
      "type": "Number",
      "apiType": "properties",
      "fullSignature": "CPUUsage.idleWakeupsPerSecond",
      "tldr": "The number of average idle CPU wakeups per second since the last call to getCPUUsage.",
      "slug": "cpuusageidlewakeupspersecond",
      "url": "https://electronjs.org/docs/api/cpu-usage#cpuusageidlewakeupspersecond",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:idleWakeupsPerSecond",
        "api:cpuusageidlewakeupspersecond",
        "api:CPUUsage.idleWakeupsPerSecond",
        "doc:idleWakeupsPerSecond",
        "doc:cpuusageidlewakeupspersecond",
        "doc:CPUUsage.idleWakeupsPerSecond"
      ]
    },
    {
      "objectID": "api-crash-report#crashreportdate",
      "name": "date",
      "description": "",
      "required": true,
      "additionalTags": [],
      "collection": false,
      "type": "Date",
      "apiType": "properties",
      "fullSignature": "CrashReport.date",
      "tldr": null,
      "slug": "crashreportdate",
      "url": "https://electronjs.org/docs/api/crash-report#crashreportdate",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:date",
        "api:crashreportdate",
        "api:CrashReport.date",
        "doc:date",
        "doc:crashreportdate",
        "doc:CrashReport.date"
      ]
    },
    {
      "objectID": "api-crash-report#crashreportid",
      "name": "id",
      "description": "",
      "required": true,
      "additionalTags": [],
      "collection": false,
      "type": "String",
      "possibleValues": null,
      "apiType": "properties",
      "fullSignature": "CrashReport.id",
      "tldr": null,
      "slug": "crashreportid",
      "url": "https://electronjs.org/docs/api/crash-report#crashreportid",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:id",
        "api:crashreportid",
        "api:CrashReport.id",
        "doc:id",
        "doc:crashreportid",
        "doc:CrashReport.id"
      ]
    },
    {
      "objectID": "api-custom-scheme#customschemescheme",
      "name": "scheme",
      "description": "Custom schemes to be registered with options.",
      "required": true,
      "additionalTags": [],
      "collection": false,
      "type": "String",
      "possibleValues": null,
      "apiType": "properties",
      "fullSignature": "CustomScheme.scheme",
      "tldr": "Custom schemes to be registered with options.",
      "slug": "customschemescheme",
      "url": "https://electronjs.org/docs/api/custom-scheme#customschemescheme",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:scheme",
        "api:customschemescheme",
        "api:CustomScheme.scheme",
        "doc:scheme",
        "doc:customschemescheme",
        "doc:CustomScheme.scheme"
      ]
    },
    {
      "objectID": "api-custom-scheme#customschemeprivileges",
      "name": "privileges",
      "description": "",
      "required": false,
      "additionalTags": [],
      "collection": false,
      "type": "Object",
      "properties": [
        {
          "name": "standard",
          "description": "Default false.",
          "required": false,
          "additionalTags": [],
          "collection": false,
          "type": "Boolean"
        },
        {
          "name": "secure",
          "description": "Default false.",
          "required": false,
          "additionalTags": [],
          "collection": false,
          "type": "Boolean"
        },
        {
          "name": "bypassCSP",
          "description": "Default false.",
          "required": false,
          "additionalTags": [],
          "collection": false,
          "type": "Boolean"
        },
        {
          "name": "allowServiceWorkers",
          "description": "Default false.",
          "required": false,
          "additionalTags": [],
          "collection": false,
          "type": "Boolean"
        },
        {
          "name": "supportFetchAPI",
          "description": "Default false.",
          "required": false,
          "additionalTags": [],
          "collection": false,
          "type": "Boolean"
        },
        {
          "name": "corsEnabled",
          "description": "Default false.",
          "required": false,
          "additionalTags": [],
          "collection": false,
          "type": "Boolean"
        }
      ],
      "apiType": "properties",
      "fullSignature": "CustomScheme.privileges",
      "tldr": null,
      "slug": "customschemeprivileges",
      "url": "https://electronjs.org/docs/api/custom-scheme#customschemeprivileges",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:privileges",
        "api:customschemeprivileges",
        "api:CustomScheme.privileges",
        "doc:privileges",
        "doc:customschemeprivileges",
        "doc:CustomScheme.privileges"
      ]
    },
    {
      "objectID": "api-desktop-capturer-source#desktopcapturersourceid",
      "name": "id",
      "description": "The identifier of a window or screen that can be used as a `chromeMediaSourceId` constraint when calling [`navigator.webkitGetUserMedia`]. The format of the identifier will be `window:XX` or `screen:XX`, where `XX` is a random generated number.",
      "required": true,
      "additionalTags": [],
      "collection": false,
      "type": "String",
      "possibleValues": null,
      "apiType": "properties",
      "fullSignature": "DesktopCapturerSource.id",
      "tldr": "The identifier of a window or screen that can be used as a `chromeMediaSourceId` constraint when calling [`navigator.webkitGetUserMedia`].",
      "slug": "desktopcapturersourceid",
      "url": "https://electronjs.org/docs/api/desktop-capturer-source#desktopcapturersourceid",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:id",
        "api:desktopcapturersourceid",
        "api:DesktopCapturerSource.id",
        "doc:id",
        "doc:desktopcapturersourceid",
        "doc:DesktopCapturerSource.id"
      ]
    },
    {
      "objectID": "api-desktop-capturer-source#desktopcapturersourcename",
      "name": "name",
      "description": "A screen source will be named either `Entire Screen` or `Screen <index>`, while the name of a window source will match the window title.",
      "required": true,
      "additionalTags": [],
      "collection": false,
      "type": "String",
      "possibleValues": null,
      "apiType": "properties",
      "fullSignature": "DesktopCapturerSource.name",
      "tldr": "A screen source will be named either `Entire Screen` or `Screen <index>`, while the name of a window source will match the window title.",
      "slug": "desktopcapturersourcename",
      "url": "https://electronjs.org/docs/api/desktop-capturer-source#desktopcapturersourcename",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:name",
        "api:desktopcapturersourcename",
        "api:DesktopCapturerSource.name",
        "doc:name",
        "doc:desktopcapturersourcename",
        "doc:DesktopCapturerSource.name"
      ]
    },
    {
      "objectID": "api-desktop-capturer-source#desktopcapturersourcethumbnail",
      "name": "thumbnail",
      "description": "A thumbnail image. **Note:** There is no guarantee that the size of the thumbnail is the same as the `thumbnailSize` specified in the `options` passed to `desktopCapturer.getSources`. The actual size depends on the scale of the screen or window.",
      "required": true,
      "additionalTags": [],
      "collection": false,
      "type": "NativeImage",
      "apiType": "properties",
      "fullSignature": "DesktopCapturerSource.thumbnail",
      "tldr": "A thumbnail image.",
      "slug": "desktopcapturersourcethumbnail",
      "url": "https://electronjs.org/docs/api/desktop-capturer-source#desktopcapturersourcethumbnail",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:thumbnail",
        "api:desktopcapturersourcethumbnail",
        "api:DesktopCapturerSource.thumbnail",
        "doc:thumbnail",
        "doc:desktopcapturersourcethumbnail",
        "doc:DesktopCapturerSource.thumbnail"
      ]
    },
    {
      "objectID": "api-desktop-capturer-source#desktopcapturersourcedisplay_id",
      "name": "display_id",
      "description": "A unique identifier that will correspond to the `id` of the matching Display returned by the Screen API. On some platforms, this is equivalent to the `XX` portion of the `id` field above and on others it will differ. It will be an empty string if not available.",
      "required": true,
      "additionalTags": [],
      "collection": false,
      "type": "String",
      "possibleValues": null,
      "apiType": "properties",
      "fullSignature": "DesktopCapturerSource.display_id",
      "tldr": "A unique identifier that will correspond to the `id` of the matching Display returned by the Screen API.",
      "slug": "desktopcapturersourcedisplay_id",
      "url": "https://electronjs.org/docs/api/desktop-capturer-source#desktopcapturersourcedisplay_id",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:display_id",
        "api:desktopcapturersourcedisplay_id",
        "api:DesktopCapturerSource.display_id",
        "doc:display_id",
        "doc:desktopcapturersourcedisplay_id",
        "doc:DesktopCapturerSource.display_id"
      ]
    },
    {
      "objectID": "api-desktop-capturer-source#desktopcapturersourceappicon",
      "name": "appIcon",
      "description": "An icon image of the application that owns the window or null if the source has a type screen. The size of the icon is not known in advance and depends on what the the application provides.",
      "required": true,
      "additionalTags": [],
      "collection": false,
      "type": "NativeImage",
      "apiType": "properties",
      "fullSignature": "DesktopCapturerSource.appIcon",
      "tldr": "An icon image of the application that owns the window or null if the source has a type screen.",
      "slug": "desktopcapturersourceappicon",
      "url": "https://electronjs.org/docs/api/desktop-capturer-source#desktopcapturersourceappicon",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:appIcon",
        "api:desktopcapturersourceappicon",
        "api:DesktopCapturerSource.appIcon",
        "doc:appIcon",
        "doc:desktopcapturersourceappicon",
        "doc:DesktopCapturerSource.appIcon"
      ]
    },
    {
      "objectID": "api-display#displayid",
      "name": "id",
      "description": "Unique identifier associated with the display.",
      "required": true,
      "additionalTags": [],
      "collection": false,
      "type": "Number",
      "apiType": "properties",
      "fullSignature": "Display.id",
      "tldr": "Unique identifier associated with the display.",
      "slug": "displayid",
      "url": "https://electronjs.org/docs/api/display#displayid",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:id",
        "api:displayid",
        "api:Display.id",
        "doc:id",
        "doc:displayid",
        "doc:Display.id"
      ]
    },
    {
      "objectID": "api-display#displayrotation",
      "name": "rotation",
      "description": "Can be 0, 90, 180, 270, represents screen rotation in clock-wise degrees.",
      "required": true,
      "additionalTags": [],
      "collection": false,
      "type": "Number",
      "apiType": "properties",
      "fullSignature": "Display.rotation",
      "tldr": "Can be 0, 90, 180, 270, represents screen rotation in clock-wise degrees.",
      "slug": "displayrotation",
      "url": "https://electronjs.org/docs/api/display#displayrotation",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:rotation",
        "api:displayrotation",
        "api:Display.rotation",
        "doc:rotation",
        "doc:displayrotation",
        "doc:Display.rotation"
      ]
    },
    {
      "objectID": "api-display#displayscalefactor",
      "name": "scaleFactor",
      "description": "Output device's pixel scale factor.",
      "required": true,
      "additionalTags": [],
      "collection": false,
      "type": "Number",
      "apiType": "properties",
      "fullSignature": "Display.scaleFactor",
      "tldr": "Output device's pixel scale factor.",
      "slug": "displayscalefactor",
      "url": "https://electronjs.org/docs/api/display#displayscalefactor",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:scaleFactor",
        "api:displayscalefactor",
        "api:Display.scaleFactor",
        "doc:scaleFactor",
        "doc:displayscalefactor",
        "doc:Display.scaleFactor"
      ]
    },
    {
      "objectID": "api-display#displaytouchsupport",
      "name": "touchSupport",
      "description": "Can be `available`, `unavailable`, `unknown`.",
      "required": true,
      "additionalTags": [],
      "collection": false,
      "type": "String",
      "possibleValues": [
        {
          "value": "available",
          "description": ""
        },
        {
          "value": "unavailable",
          "description": ""
        },
        {
          "value": "unknown",
          "description": ""
        }
      ],
      "apiType": "properties",
      "fullSignature": "Display.touchSupport",
      "tldr": "Can be `available`, `unavailable`, `unknown`.",
      "slug": "displaytouchsupport",
      "url": "https://electronjs.org/docs/api/display#displaytouchsupport",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:touchSupport",
        "api:displaytouchsupport",
        "api:Display.touchSupport",
        "doc:touchSupport",
        "doc:displaytouchsupport",
        "doc:Display.touchSupport"
      ]
    },
    {
      "objectID": "api-display#displaymonochrome",
      "name": "monochrome",
      "description": "Whether or not the display is a monochrome display.",
      "required": true,
      "additionalTags": [],
      "collection": false,
      "type": "Boolean",
      "apiType": "properties",
      "fullSignature": "Display.monochrome",
      "tldr": "Whether or not the display is a monochrome display.",
      "slug": "displaymonochrome",
      "url": "https://electronjs.org/docs/api/display#displaymonochrome",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:monochrome",
        "api:displaymonochrome",
        "api:Display.monochrome",
        "doc:monochrome",
        "doc:displaymonochrome",
        "doc:Display.monochrome"
      ]
    },
    {
      "objectID": "api-display#displayaccelerometersupport",
      "name": "accelerometerSupport",
      "description": "Can be `available`, `unavailable`, `unknown`.",
      "required": true,
      "additionalTags": [],
      "collection": false,
      "type": "String",
      "possibleValues": [
        {
          "value": "available",
          "description": ""
        },
        {
          "value": "unavailable",
          "description": ""
        },
        {
          "value": "unknown",
          "description": ""
        }
      ],
      "apiType": "properties",
      "fullSignature": "Display.accelerometerSupport",
      "tldr": "Can be `available`, `unavailable`, `unknown`.",
      "slug": "displayaccelerometersupport",
      "url": "https://electronjs.org/docs/api/display#displayaccelerometersupport",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:accelerometerSupport",
        "api:displayaccelerometersupport",
        "api:Display.accelerometerSupport",
        "doc:accelerometerSupport",
        "doc:displayaccelerometersupport",
        "doc:Display.accelerometerSupport"
      ]
    },
    {
      "objectID": "api-display#displaycolorspace",
      "name": "colorSpace",
      "description": " represent a color space (three-dimensional object which contains all realizable color combinations) for the purpose of color conversions",
      "required": true,
      "additionalTags": [],
      "collection": false,
      "type": "String",
      "possibleValues": null,
      "apiType": "properties",
      "fullSignature": "Display.colorSpace",
      "tldr": " represent a color space (three-dimensional object which contains all realizable color combinations) for the purpose of color conversions.",
      "slug": "displaycolorspace",
      "url": "https://electronjs.org/docs/api/display#displaycolorspace",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:colorSpace",
        "api:displaycolorspace",
        "api:Display.colorSpace",
        "doc:colorSpace",
        "doc:displaycolorspace",
        "doc:Display.colorSpace"
      ]
    },
    {
      "objectID": "api-display#displaycolordepth",
      "name": "colorDepth",
      "description": "The number of bits per pixel.",
      "required": true,
      "additionalTags": [],
      "collection": false,
      "type": "Number",
      "apiType": "properties",
      "fullSignature": "Display.colorDepth",
      "tldr": "The number of bits per pixel.",
      "slug": "displaycolordepth",
      "url": "https://electronjs.org/docs/api/display#displaycolordepth",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:colorDepth",
        "api:displaycolordepth",
        "api:Display.colorDepth",
        "doc:colorDepth",
        "doc:displaycolordepth",
        "doc:Display.colorDepth"
      ]
    },
    {
      "objectID": "api-display#displaydepthpercomponent",
      "name": "depthPerComponent",
      "description": "The number of bits per color component.",
      "required": true,
      "additionalTags": [],
      "collection": false,
      "type": "Number",
      "apiType": "properties",
      "fullSignature": "Display.depthPerComponent",
      "tldr": "The number of bits per color component.",
      "slug": "displaydepthpercomponent",
      "url": "https://electronjs.org/docs/api/display#displaydepthpercomponent",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:depthPerComponent",
        "api:displaydepthpercomponent",
        "api:Display.depthPerComponent",
        "doc:depthPerComponent",
        "doc:displaydepthpercomponent",
        "doc:Display.depthPerComponent"
      ]
    },
    {
      "objectID": "api-display#displaybounds",
      "name": "bounds",
      "description": "",
      "required": true,
      "additionalTags": [],
      "collection": false,
      "type": "Rectangle",
      "apiType": "properties",
      "fullSignature": "Display.bounds",
      "tldr": null,
      "slug": "displaybounds",
      "url": "https://electronjs.org/docs/api/display#displaybounds",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:bounds",
        "api:displaybounds",
        "api:Display.bounds",
        "doc:bounds",
        "doc:displaybounds",
        "doc:Display.bounds"
      ]
    },
    {
      "objectID": "api-display#displaysize",
      "name": "size",
      "description": "",
      "required": true,
      "additionalTags": [],
      "collection": false,
      "type": "Size",
      "apiType": "properties",
      "fullSignature": "Display.size",
      "tldr": null,
      "slug": "displaysize",
      "url": "https://electronjs.org/docs/api/display#displaysize",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:size",
        "api:displaysize",
        "api:Display.size",
        "doc:size",
        "doc:displaysize",
        "doc:Display.size"
      ]
    },
    {
      "objectID": "api-display#displayworkarea",
      "name": "workArea",
      "description": "",
      "required": true,
      "additionalTags": [],
      "collection": false,
      "type": "Rectangle",
      "apiType": "properties",
      "fullSignature": "Display.workArea",
      "tldr": null,
      "slug": "displayworkarea",
      "url": "https://electronjs.org/docs/api/display#displayworkarea",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:workArea",
        "api:displayworkarea",
        "api:Display.workArea",
        "doc:workArea",
        "doc:displayworkarea",
        "doc:Display.workArea"
      ]
    },
    {
      "objectID": "api-display#displayworkareasize",
      "name": "workAreaSize",
      "description": "",
      "required": true,
      "additionalTags": [],
      "collection": false,
      "type": "Size",
      "apiType": "properties",
      "fullSignature": "Display.workAreaSize",
      "tldr": null,
      "slug": "displayworkareasize",
      "url": "https://electronjs.org/docs/api/display#displayworkareasize",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:workAreaSize",
        "api:displayworkareasize",
        "api:Display.workAreaSize",
        "doc:workAreaSize",
        "doc:displayworkareasize",
        "doc:Display.workAreaSize"
      ]
    },
    {
      "objectID": "api-display#displayinternal",
      "name": "internal",
      "description": "`true` for an internal display and `false` for an external display",
      "required": true,
      "additionalTags": [],
      "collection": false,
      "type": "Boolean",
      "apiType": "properties",
      "fullSignature": "Display.internal",
      "tldr": "`true` for an internal display and `false` for an external display.",
      "slug": "displayinternal",
      "url": "https://electronjs.org/docs/api/display#displayinternal",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:internal",
        "api:displayinternal",
        "api:Display.internal",
        "doc:internal",
        "doc:displayinternal",
        "doc:Display.internal"
      ]
    },
    {
      "objectID": "api-event#eventpreventdefault",
      "name": "preventDefault",
      "description": "",
      "required": true,
      "additionalTags": [],
      "collection": false,
      "type": "VoidFunction",
      "apiType": "properties",
      "fullSignature": "Event.preventDefault",
      "tldr": null,
      "slug": "eventpreventdefault",
      "url": "https://electronjs.org/docs/api/event#eventpreventdefault",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:preventDefault",
        "api:eventpreventdefault",
        "api:Event.preventDefault",
        "doc:preventDefault",
        "doc:eventpreventdefault",
        "doc:Event.preventDefault"
      ]
    },
    {
      "objectID": "api-extension-info#extensioninfoname",
      "name": "name",
      "description": "",
      "required": true,
      "additionalTags": [],
      "collection": false,
      "type": "String",
      "possibleValues": null,
      "apiType": "properties",
      "fullSignature": "ExtensionInfo.name",
      "tldr": null,
      "slug": "extensioninfoname",
      "url": "https://electronjs.org/docs/api/extension-info#extensioninfoname",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:name",
        "api:extensioninfoname",
        "api:ExtensionInfo.name",
        "doc:name",
        "doc:extensioninfoname",
        "doc:ExtensionInfo.name"
      ]
    },
    {
      "objectID": "api-extension-info#extensioninfoversion",
      "name": "version",
      "description": "",
      "required": true,
      "additionalTags": [],
      "collection": false,
      "type": "String",
      "possibleValues": null,
      "apiType": "properties",
      "fullSignature": "ExtensionInfo.version",
      "tldr": null,
      "slug": "extensioninfoversion",
      "url": "https://electronjs.org/docs/api/extension-info#extensioninfoversion",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:version",
        "api:extensioninfoversion",
        "api:ExtensionInfo.version",
        "doc:version",
        "doc:extensioninfoversion",
        "doc:ExtensionInfo.version"
      ]
    },
    {
      "objectID": "api-file-filter#filefiltername",
      "name": "name",
      "description": "",
      "required": true,
      "additionalTags": [],
      "collection": false,
      "type": "String",
      "possibleValues": null,
      "apiType": "properties",
      "fullSignature": "FileFilter.name",
      "tldr": null,
      "slug": "filefiltername",
      "url": "https://electronjs.org/docs/api/file-filter#filefiltername",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:name",
        "api:filefiltername",
        "api:FileFilter.name",
        "doc:name",
        "doc:filefiltername",
        "doc:FileFilter.name"
      ]
    },
    {
      "objectID": "api-file-filter#filefilterextensions",
      "name": "extensions",
      "description": "",
      "required": true,
      "additionalTags": [],
      "collection": true,
      "type": "String",
      "possibleValues": null,
      "apiType": "properties",
      "fullSignature": "FileFilter.extensions",
      "tldr": null,
      "slug": "filefilterextensions",
      "url": "https://electronjs.org/docs/api/file-filter#filefilterextensions",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:extensions",
        "api:filefilterextensions",
        "api:FileFilter.extensions",
        "doc:extensions",
        "doc:filefilterextensions",
        "doc:FileFilter.extensions"
      ]
    },
    {
      "objectID": "api-file-path-with-headers#filepathwithheaderspath",
      "name": "path",
      "description": "The path to the file to send.",
      "required": true,
      "additionalTags": [],
      "collection": false,
      "type": "String",
      "possibleValues": null,
      "apiType": "properties",
      "fullSignature": "FilePathWithHeaders.path",
      "tldr": "The path to the file to send.",
      "slug": "filepathwithheaderspath",
      "url": "https://electronjs.org/docs/api/file-path-with-headers#filepathwithheaderspath",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:path",
        "api:filepathwithheaderspath",
        "api:FilePathWithHeaders.path",
        "doc:path",
        "doc:filepathwithheaderspath",
        "doc:FilePathWithHeaders.path"
      ]
    },
    {
      "objectID": "api-file-path-with-headers#filepathwithheadersheaders",
      "name": "headers",
      "description": "Additional headers to be sent.",
      "required": false,
      "additionalTags": [],
      "collection": false,
      "type": "Record",
      "innerTypes": [
        {
          "collection": false,
          "type": "string"
        },
        {
          "collection": false,
          "type": "string"
        }
      ],
      "apiType": "properties",
      "fullSignature": "FilePathWithHeaders.headers",
      "tldr": "Additional headers to be sent.",
      "slug": "filepathwithheadersheaders",
      "url": "https://electronjs.org/docs/api/file-path-with-headers#filepathwithheadersheaders",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:headers",
        "api:filepathwithheadersheaders",
        "api:FilePathWithHeaders.headers",
        "doc:headers",
        "doc:filepathwithheadersheaders",
        "doc:FilePathWithHeaders.headers"
      ]
    },
    {
      "objectID": "api-gpu-feature-status#gpufeaturestatus2d_canvas",
      "name": "2d_canvas",
      "description": "Canvas.",
      "required": true,
      "additionalTags": [],
      "collection": false,
      "type": "String",
      "possibleValues": null,
      "apiType": "properties",
      "fullSignature": "GPUFeatureStatus.2d_canvas",
      "tldr": "Canvas.",
      "slug": "gpufeaturestatus2d_canvas",
      "url": "https://electronjs.org/docs/api/gpu-feature-status#gpufeaturestatus2d_canvas",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:2d_canvas",
        "api:gpufeaturestatus2d_canvas",
        "api:GPUFeatureStatus.2d_canvas",
        "doc:2d_canvas",
        "doc:gpufeaturestatus2d_canvas",
        "doc:GPUFeatureStatus.2d_canvas"
      ]
    },
    {
      "objectID": "api-gpu-feature-status#gpufeaturestatusflash_3d",
      "name": "flash_3d",
      "description": "Flash.",
      "required": true,
      "additionalTags": [],
      "collection": false,
      "type": "String",
      "possibleValues": null,
      "apiType": "properties",
      "fullSignature": "GPUFeatureStatus.flash_3d",
      "tldr": "Flash.",
      "slug": "gpufeaturestatusflash_3d",
      "url": "https://electronjs.org/docs/api/gpu-feature-status#gpufeaturestatusflash_3d",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:flash_3d",
        "api:gpufeaturestatusflash_3d",
        "api:GPUFeatureStatus.flash_3d",
        "doc:flash_3d",
        "doc:gpufeaturestatusflash_3d",
        "doc:GPUFeatureStatus.flash_3d"
      ]
    },
    {
      "objectID": "api-gpu-feature-status#gpufeaturestatusflash_stage3d",
      "name": "flash_stage3d",
      "description": "Flash Stage3D.",
      "required": true,
      "additionalTags": [],
      "collection": false,
      "type": "String",
      "possibleValues": null,
      "apiType": "properties",
      "fullSignature": "GPUFeatureStatus.flash_stage3d",
      "tldr": "Flash Stage3D.",
      "slug": "gpufeaturestatusflash_stage3d",
      "url": "https://electronjs.org/docs/api/gpu-feature-status#gpufeaturestatusflash_stage3d",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:flash_stage3d",
        "api:gpufeaturestatusflash_stage3d",
        "api:GPUFeatureStatus.flash_stage3d",
        "doc:flash_stage3d",
        "doc:gpufeaturestatusflash_stage3d",
        "doc:GPUFeatureStatus.flash_stage3d"
      ]
    },
    {
      "objectID": "api-gpu-feature-status#gpufeaturestatusflash_stage3d_baseline",
      "name": "flash_stage3d_baseline",
      "description": "Flash Stage3D Baseline profile.",
      "required": true,
      "additionalTags": [],
      "collection": false,
      "type": "String",
      "possibleValues": null,
      "apiType": "properties",
      "fullSignature": "GPUFeatureStatus.flash_stage3d_baseline",
      "tldr": "Flash Stage3D Baseline profile.",
      "slug": "gpufeaturestatusflash_stage3d_baseline",
      "url": "https://electronjs.org/docs/api/gpu-feature-status#gpufeaturestatusflash_stage3d_baseline",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:flash_stage3d_baseline",
        "api:gpufeaturestatusflash_stage3d_baseline",
        "api:GPUFeatureStatus.flash_stage3d_baseline",
        "doc:flash_stage3d_baseline",
        "doc:gpufeaturestatusflash_stage3d_baseline",
        "doc:GPUFeatureStatus.flash_stage3d_baseline"
      ]
    },
    {
      "objectID": "api-gpu-feature-status#gpufeaturestatusgpu_compositing",
      "name": "gpu_compositing",
      "description": "Compositing.",
      "required": true,
      "additionalTags": [],
      "collection": false,
      "type": "String",
      "possibleValues": null,
      "apiType": "properties",
      "fullSignature": "GPUFeatureStatus.gpu_compositing",
      "tldr": "Compositing.",
      "slug": "gpufeaturestatusgpu_compositing",
      "url": "https://electronjs.org/docs/api/gpu-feature-status#gpufeaturestatusgpu_compositing",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:gpu_compositing",
        "api:gpufeaturestatusgpu_compositing",
        "api:GPUFeatureStatus.gpu_compositing",
        "doc:gpu_compositing",
        "doc:gpufeaturestatusgpu_compositing",
        "doc:GPUFeatureStatus.gpu_compositing"
      ]
    },
    {
      "objectID": "api-gpu-feature-status#gpufeaturestatusmultiple_raster_threads",
      "name": "multiple_raster_threads",
      "description": "Multiple Raster Threads.",
      "required": true,
      "additionalTags": [],
      "collection": false,
      "type": "String",
      "possibleValues": null,
      "apiType": "properties",
      "fullSignature": "GPUFeatureStatus.multiple_raster_threads",
      "tldr": "Multiple Raster Threads.",
      "slug": "gpufeaturestatusmultiple_raster_threads",
      "url": "https://electronjs.org/docs/api/gpu-feature-status#gpufeaturestatusmultiple_raster_threads",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:multiple_raster_threads",
        "api:gpufeaturestatusmultiple_raster_threads",
        "api:GPUFeatureStatus.multiple_raster_threads",
        "doc:multiple_raster_threads",
        "doc:gpufeaturestatusmultiple_raster_threads",
        "doc:GPUFeatureStatus.multiple_raster_threads"
      ]
    },
    {
      "objectID": "api-gpu-feature-status#gpufeaturestatusnative_gpu_memory_buffers",
      "name": "native_gpu_memory_buffers",
      "description": "Native GpuMemoryBuffers.",
      "required": true,
      "additionalTags": [],
      "collection": false,
      "type": "String",
      "possibleValues": null,
      "apiType": "properties",
      "fullSignature": "GPUFeatureStatus.native_gpu_memory_buffers",
      "tldr": "Native GpuMemoryBuffers.",
      "slug": "gpufeaturestatusnative_gpu_memory_buffers",
      "url": "https://electronjs.org/docs/api/gpu-feature-status#gpufeaturestatusnative_gpu_memory_buffers",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:native_gpu_memory_buffers",
        "api:gpufeaturestatusnative_gpu_memory_buffers",
        "api:GPUFeatureStatus.native_gpu_memory_buffers",
        "doc:native_gpu_memory_buffers",
        "doc:gpufeaturestatusnative_gpu_memory_buffers",
        "doc:GPUFeatureStatus.native_gpu_memory_buffers"
      ]
    },
    {
      "objectID": "api-gpu-feature-status#gpufeaturestatusrasterization",
      "name": "rasterization",
      "description": "Rasterization.",
      "required": true,
      "additionalTags": [],
      "collection": false,
      "type": "String",
      "possibleValues": null,
      "apiType": "properties",
      "fullSignature": "GPUFeatureStatus.rasterization",
      "tldr": "Rasterization.",
      "slug": "gpufeaturestatusrasterization",
      "url": "https://electronjs.org/docs/api/gpu-feature-status#gpufeaturestatusrasterization",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:rasterization",
        "api:gpufeaturestatusrasterization",
        "api:GPUFeatureStatus.rasterization",
        "doc:rasterization",
        "doc:gpufeaturestatusrasterization",
        "doc:GPUFeatureStatus.rasterization"
      ]
    },
    {
      "objectID": "api-gpu-feature-status#gpufeaturestatusvideo_decode",
      "name": "video_decode",
      "description": "Video Decode.",
      "required": true,
      "additionalTags": [],
      "collection": false,
      "type": "String",
      "possibleValues": null,
      "apiType": "properties",
      "fullSignature": "GPUFeatureStatus.video_decode",
      "tldr": "Video Decode.",
      "slug": "gpufeaturestatusvideo_decode",
      "url": "https://electronjs.org/docs/api/gpu-feature-status#gpufeaturestatusvideo_decode",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:video_decode",
        "api:gpufeaturestatusvideo_decode",
        "api:GPUFeatureStatus.video_decode",
        "doc:video_decode",
        "doc:gpufeaturestatusvideo_decode",
        "doc:GPUFeatureStatus.video_decode"
      ]
    },
    {
      "objectID": "api-gpu-feature-status#gpufeaturestatusvideo_encode",
      "name": "video_encode",
      "description": "Video Encode.",
      "required": true,
      "additionalTags": [],
      "collection": false,
      "type": "String",
      "possibleValues": null,
      "apiType": "properties",
      "fullSignature": "GPUFeatureStatus.video_encode",
      "tldr": "Video Encode.",
      "slug": "gpufeaturestatusvideo_encode",
      "url": "https://electronjs.org/docs/api/gpu-feature-status#gpufeaturestatusvideo_encode",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:video_encode",
        "api:gpufeaturestatusvideo_encode",
        "api:GPUFeatureStatus.video_encode",
        "doc:video_encode",
        "doc:gpufeaturestatusvideo_encode",
        "doc:GPUFeatureStatus.video_encode"
      ]
    },
    {
      "objectID": "api-gpu-feature-status#gpufeaturestatusvpx_decode",
      "name": "vpx_decode",
      "description": "VPx Video Decode.",
      "required": true,
      "additionalTags": [],
      "collection": false,
      "type": "String",
      "possibleValues": null,
      "apiType": "properties",
      "fullSignature": "GPUFeatureStatus.vpx_decode",
      "tldr": "VPx Video Decode.",
      "slug": "gpufeaturestatusvpx_decode",
      "url": "https://electronjs.org/docs/api/gpu-feature-status#gpufeaturestatusvpx_decode",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:vpx_decode",
        "api:gpufeaturestatusvpx_decode",
        "api:GPUFeatureStatus.vpx_decode",
        "doc:vpx_decode",
        "doc:gpufeaturestatusvpx_decode",
        "doc:GPUFeatureStatus.vpx_decode"
      ]
    },
    {
      "objectID": "api-gpu-feature-status#gpufeaturestatuswebgl",
      "name": "webgl",
      "description": "WebGL.",
      "required": true,
      "additionalTags": [],
      "collection": false,
      "type": "String",
      "possibleValues": null,
      "apiType": "properties",
      "fullSignature": "GPUFeatureStatus.webgl",
      "tldr": "WebGL.",
      "slug": "gpufeaturestatuswebgl",
      "url": "https://electronjs.org/docs/api/gpu-feature-status#gpufeaturestatuswebgl",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:webgl",
        "api:gpufeaturestatuswebgl",
        "api:GPUFeatureStatus.webgl",
        "doc:webgl",
        "doc:gpufeaturestatuswebgl",
        "doc:GPUFeatureStatus.webgl"
      ]
    },
    {
      "objectID": "api-gpu-feature-status#gpufeaturestatuswebgl2",
      "name": "webgl2",
      "description": "WebGL2.",
      "required": true,
      "additionalTags": [],
      "collection": false,
      "type": "String",
      "possibleValues": null,
      "apiType": "properties",
      "fullSignature": "GPUFeatureStatus.webgl2",
      "tldr": "WebGL2.",
      "slug": "gpufeaturestatuswebgl2",
      "url": "https://electronjs.org/docs/api/gpu-feature-status#gpufeaturestatuswebgl2",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:webgl2",
        "api:gpufeaturestatuswebgl2",
        "api:GPUFeatureStatus.webgl2",
        "doc:webgl2",
        "doc:gpufeaturestatuswebgl2",
        "doc:GPUFeatureStatus.webgl2"
      ]
    },
    {
      "objectID": "api-input-event#inputeventmodifiers",
      "name": "modifiers",
      "description": "An array of modifiers of the event, can be `shift`, `control`, `alt`, `meta`, `isKeypad`, `isAutoRepeat`, `leftButtonDown`, `middleButtonDown`, `rightButtonDown`, `capsLock`, `numLock`, `left`, `right`.",
      "required": true,
      "additionalTags": [],
      "collection": true,
      "type": "String",
      "possibleValues": [
        {
          "value": "shift",
          "description": ""
        },
        {
          "value": "control",
          "description": ""
        },
        {
          "value": "alt",
          "description": ""
        },
        {
          "value": "meta",
          "description": ""
        },
        {
          "value": "isKeypad",
          "description": ""
        },
        {
          "value": "isAutoRepeat",
          "description": ""
        },
        {
          "value": "leftButtonDown",
          "description": ""
        },
        {
          "value": "middleButtonDown",
          "description": ""
        },
        {
          "value": "rightButtonDown",
          "description": ""
        },
        {
          "value": "capsLock",
          "description": ""
        },
        {
          "value": "numLock",
          "description": ""
        },
        {
          "value": "left",
          "description": ""
        },
        {
          "value": "right",
          "description": ""
        }
      ],
      "apiType": "properties",
      "fullSignature": "InputEvent.modifiers",
      "tldr": "An array of modifiers of the event, can be `shift`, `control`, `alt`, `meta`, `isKeypad`, `isAutoRepeat`, `leftButtonDown`, `middleButtonDown`, `rightButtonDown`, `capsLock`, `numLock`, `left`, `right`.",
      "slug": "inputeventmodifiers",
      "url": "https://electronjs.org/docs/api/input-event#inputeventmodifiers",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:modifiers",
        "api:inputeventmodifiers",
        "api:InputEvent.modifiers",
        "doc:modifiers",
        "doc:inputeventmodifiers",
        "doc:InputEvent.modifiers"
      ]
    },
    {
      "objectID": "api-io-counters#iocountersreadoperationcount",
      "name": "readOperationCount",
      "description": "The number of I/O read operations.",
      "required": true,
      "additionalTags": [],
      "collection": false,
      "type": "Number",
      "apiType": "properties",
      "fullSignature": "IOCounters.readOperationCount",
      "tldr": "The number of I/O read operations.",
      "slug": "iocountersreadoperationcount",
      "url": "https://electronjs.org/docs/api/io-counters#iocountersreadoperationcount",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:readOperationCount",
        "api:iocountersreadoperationcount",
        "api:IOCounters.readOperationCount",
        "doc:readOperationCount",
        "doc:iocountersreadoperationcount",
        "doc:IOCounters.readOperationCount"
      ]
    },
    {
      "objectID": "api-io-counters#iocounterswriteoperationcount",
      "name": "writeOperationCount",
      "description": "The number of I/O write operations.",
      "required": true,
      "additionalTags": [],
      "collection": false,
      "type": "Number",
      "apiType": "properties",
      "fullSignature": "IOCounters.writeOperationCount",
      "tldr": "The number of I/O write operations.",
      "slug": "iocounterswriteoperationcount",
      "url": "https://electronjs.org/docs/api/io-counters#iocounterswriteoperationcount",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:writeOperationCount",
        "api:iocounterswriteoperationcount",
        "api:IOCounters.writeOperationCount",
        "doc:writeOperationCount",
        "doc:iocounterswriteoperationcount",
        "doc:IOCounters.writeOperationCount"
      ]
    },
    {
      "objectID": "api-io-counters#iocountersotheroperationcount",
      "name": "otherOperationCount",
      "description": "Then number of I/O other operations.",
      "required": true,
      "additionalTags": [],
      "collection": false,
      "type": "Number",
      "apiType": "properties",
      "fullSignature": "IOCounters.otherOperationCount",
      "tldr": "Then number of I/O other operations.",
      "slug": "iocountersotheroperationcount",
      "url": "https://electronjs.org/docs/api/io-counters#iocountersotheroperationcount",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:otherOperationCount",
        "api:iocountersotheroperationcount",
        "api:IOCounters.otherOperationCount",
        "doc:otherOperationCount",
        "doc:iocountersotheroperationcount",
        "doc:IOCounters.otherOperationCount"
      ]
    },
    {
      "objectID": "api-io-counters#iocountersreadtransfercount",
      "name": "readTransferCount",
      "description": "The number of I/O read transfers.",
      "required": true,
      "additionalTags": [],
      "collection": false,
      "type": "Number",
      "apiType": "properties",
      "fullSignature": "IOCounters.readTransferCount",
      "tldr": "The number of I/O read transfers.",
      "slug": "iocountersreadtransfercount",
      "url": "https://electronjs.org/docs/api/io-counters#iocountersreadtransfercount",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:readTransferCount",
        "api:iocountersreadtransfercount",
        "api:IOCounters.readTransferCount",
        "doc:readTransferCount",
        "doc:iocountersreadtransfercount",
        "doc:IOCounters.readTransferCount"
      ]
    },
    {
      "objectID": "api-io-counters#iocounterswritetransfercount",
      "name": "writeTransferCount",
      "description": "The number of I/O write transfers.",
      "required": true,
      "additionalTags": [],
      "collection": false,
      "type": "Number",
      "apiType": "properties",
      "fullSignature": "IOCounters.writeTransferCount",
      "tldr": "The number of I/O write transfers.",
      "slug": "iocounterswritetransfercount",
      "url": "https://electronjs.org/docs/api/io-counters#iocounterswritetransfercount",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:writeTransferCount",
        "api:iocounterswritetransfercount",
        "api:IOCounters.writeTransferCount",
        "doc:writeTransferCount",
        "doc:iocounterswritetransfercount",
        "doc:IOCounters.writeTransferCount"
      ]
    },
    {
      "objectID": "api-io-counters#iocountersothertransfercount",
      "name": "otherTransferCount",
      "description": "Then number of I/O other transfers.",
      "required": true,
      "additionalTags": [],
      "collection": false,
      "type": "Number",
      "apiType": "properties",
      "fullSignature": "IOCounters.otherTransferCount",
      "tldr": "Then number of I/O other transfers.",
      "slug": "iocountersothertransfercount",
      "url": "https://electronjs.org/docs/api/io-counters#iocountersothertransfercount",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:otherTransferCount",
        "api:iocountersothertransfercount",
        "api:IOCounters.otherTransferCount",
        "doc:otherTransferCount",
        "doc:iocountersothertransfercount",
        "doc:IOCounters.otherTransferCount"
      ]
    },
    {
      "objectID": "api-ipc-main-event#ipcmaineventframeid",
      "name": "frameId",
      "description": "The ID of the renderer frame that sent this message",
      "required": true,
      "additionalTags": [],
      "collection": false,
      "type": "Integer",
      "apiType": "properties",
      "fullSignature": "IpcMainEvent.frameId",
      "tldr": "The ID of the renderer frame that sent this message.",
      "slug": "ipcmaineventframeid",
      "url": "https://electronjs.org/docs/api/ipc-main-event#ipcmaineventframeid",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:frameId",
        "api:ipcmaineventframeid",
        "api:IpcMainEvent.frameId",
        "doc:frameId",
        "doc:ipcmaineventframeid",
        "doc:IpcMainEvent.frameId"
      ]
    },
    {
      "objectID": "api-ipc-main-event#ipcmaineventreturnvalue",
      "name": "returnValue",
      "description": "Set this to the value to be returned in a synchronous message",
      "required": true,
      "additionalTags": [],
      "collection": false,
      "type": "any",
      "apiType": "properties",
      "fullSignature": "IpcMainEvent.returnValue",
      "tldr": "Set this to the value to be returned in a synchronous message.",
      "slug": "ipcmaineventreturnvalue",
      "url": "https://electronjs.org/docs/api/ipc-main-event#ipcmaineventreturnvalue",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:returnValue",
        "api:ipcmaineventreturnvalue",
        "api:IpcMainEvent.returnValue",
        "doc:returnValue",
        "doc:ipcmaineventreturnvalue",
        "doc:IpcMainEvent.returnValue"
      ]
    },
    {
      "objectID": "api-ipc-main-event#ipcmaineventsender",
      "name": "sender",
      "description": "Returns the `webContents` that sent the message",
      "required": true,
      "additionalTags": [],
      "collection": false,
      "type": "WebContents",
      "apiType": "properties",
      "fullSignature": "IpcMainEvent.sender",
      "tldr": "Returns the `webContents` that sent the message.",
      "slug": "ipcmaineventsender",
      "url": "https://electronjs.org/docs/api/ipc-main-event#ipcmaineventsender",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:sender",
        "api:ipcmaineventsender",
        "api:IpcMainEvent.sender",
        "doc:sender",
        "doc:ipcmaineventsender",
        "doc:IpcMainEvent.sender"
      ]
    },
    {
      "objectID": "api-ipc-main-event#ipcmaineventreply",
      "name": "reply",
      "description": "A function that will send an IPC message to the renderer frame that sent the original message that you are currently handling.  You should use this method to \"reply\" to the sent message in order to guarantee the reply will go to the correct process and frame.",
      "required": true,
      "additionalTags": [],
      "collection": false,
      "type": "Function",
      "parameters": [
        {
          "name": "...args",
          "description": "",
          "required": true,
          "collection": true,
          "type": "any"
        }
      ],
      "returns": null,
      "apiType": "properties",
      "fullSignature": "IpcMainEvent.reply",
      "tldr": "A function that will send an IPC message to the renderer frame that sent the original message that you are currently handling.",
      "slug": "ipcmaineventreply",
      "url": "https://electronjs.org/docs/api/ipc-main-event#ipcmaineventreply",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:reply",
        "api:ipcmaineventreply",
        "api:IpcMainEvent.reply",
        "doc:reply",
        "doc:ipcmaineventreply",
        "doc:IpcMainEvent.reply"
      ]
    },
    {
      "objectID": "api-ipc-main-invoke-event#ipcmaininvokeeventframeid",
      "name": "frameId",
      "description": "The ID of the renderer frame that sent this message",
      "required": true,
      "additionalTags": [],
      "collection": false,
      "type": "Integer",
      "apiType": "properties",
      "fullSignature": "IpcMainInvokeEvent.frameId",
      "tldr": "The ID of the renderer frame that sent this message.",
      "slug": "ipcmaininvokeeventframeid",
      "url": "https://electronjs.org/docs/api/ipc-main-invoke-event#ipcmaininvokeeventframeid",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:frameId",
        "api:ipcmaininvokeeventframeid",
        "api:IpcMainInvokeEvent.frameId",
        "doc:frameId",
        "doc:ipcmaininvokeeventframeid",
        "doc:IpcMainInvokeEvent.frameId"
      ]
    },
    {
      "objectID": "api-ipc-main-invoke-event#ipcmaininvokeeventsender",
      "name": "sender",
      "description": "Returns the `webContents` that sent the message",
      "required": true,
      "additionalTags": [],
      "collection": false,
      "type": "WebContents",
      "apiType": "properties",
      "fullSignature": "IpcMainInvokeEvent.sender",
      "tldr": "Returns the `webContents` that sent the message.",
      "slug": "ipcmaininvokeeventsender",
      "url": "https://electronjs.org/docs/api/ipc-main-invoke-event#ipcmaininvokeeventsender",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:sender",
        "api:ipcmaininvokeeventsender",
        "api:IpcMainInvokeEvent.sender",
        "doc:sender",
        "doc:ipcmaininvokeeventsender",
        "doc:IpcMainInvokeEvent.sender"
      ]
    },
    {
      "objectID": "api-ipc-renderer-event#ipcrenderereventsender",
      "name": "sender",
      "description": "The `IpcRenderer` instance that emitted the event originally",
      "required": true,
      "additionalTags": [],
      "collection": false,
      "type": "IpcRenderer",
      "apiType": "properties",
      "fullSignature": "IpcRendererEvent.sender",
      "tldr": "The `IpcRenderer` instance that emitted the event originally.",
      "slug": "ipcrenderereventsender",
      "url": "https://electronjs.org/docs/api/ipc-renderer-event#ipcrenderereventsender",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:sender",
        "api:ipcrenderereventsender",
        "api:IpcRendererEvent.sender",
        "doc:sender",
        "doc:ipcrenderereventsender",
        "doc:IpcRendererEvent.sender"
      ]
    },
    {
      "objectID": "api-ipc-renderer-event#ipcrenderereventsenderid",
      "name": "senderId",
      "description": "The `webContents.id` that sent the message, you can call `event.sender.sendTo(event.senderId, ...)` to reply to the message, see ipcRenderer.sendTo for more information. This only applies to messages sent from a different renderer. Messages sent directly from the main process set `event.senderId` to `0`.",
      "required": true,
      "additionalTags": [],
      "collection": false,
      "type": "Integer",
      "apiType": "properties",
      "fullSignature": "IpcRendererEvent.senderId",
      "tldr": "The `webContents.id` that sent the message, you can call `event.sender.sendTo(event.senderId, ...)` to reply to the message, see ipcRenderer.sendTo for more information.",
      "slug": "ipcrenderereventsenderid",
      "url": "https://electronjs.org/docs/api/ipc-renderer-event#ipcrenderereventsenderid",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:senderId",
        "api:ipcrenderereventsenderid",
        "api:IpcRendererEvent.senderId",
        "doc:senderId",
        "doc:ipcrenderereventsenderid",
        "doc:IpcRendererEvent.senderId"
      ]
    },
    {
      "objectID": "api-jump-list-category#jumplistcategorytype",
      "name": "type",
      "description": "One of the following:",
      "required": false,
      "additionalTags": [],
      "collection": false,
      "type": "String",
      "possibleValues": [
        {
          "value": "tasks",
          "description": "Items in this category will be placed into the standard `Tasks` category. There can be only one such category, and it will always be displayed at the bottom of the Jump List."
        },
        {
          "value": "frequent",
          "description": "Displays a list of files frequently opened by the app, the name of the category and its items are set by Windows."
        },
        {
          "value": "recent",
          "description": "Displays a list of files recently opened by the app, the name of the category and its items are set by Windows. Items may be added to this category indirectly using `app.addRecentDocument(path)`."
        },
        {
          "value": "custom",
          "description": "Displays tasks or file links, `name` must be set by the app."
        }
      ],
      "apiType": "properties",
      "fullSignature": "JumpListCategory.type",
      "tldr": "One of the following:.",
      "slug": "jumplistcategorytype",
      "url": "https://electronjs.org/docs/api/jump-list-category#jumplistcategorytype",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:type",
        "api:jumplistcategorytype",
        "api:JumpListCategory.type",
        "doc:type",
        "doc:jumplistcategorytype",
        "doc:JumpListCategory.type"
      ]
    },
    {
      "objectID": "api-jump-list-category#jumplistcategoryname",
      "name": "name",
      "description": "Must be set if `type` is `custom`, otherwise it should be omitted.",
      "required": false,
      "additionalTags": [],
      "collection": false,
      "type": "String",
      "possibleValues": null,
      "apiType": "properties",
      "fullSignature": "JumpListCategory.name",
      "tldr": "Must be set if `type` is `custom`, otherwise it should be omitted.",
      "slug": "jumplistcategoryname",
      "url": "https://electronjs.org/docs/api/jump-list-category#jumplistcategoryname",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:name",
        "api:jumplistcategoryname",
        "api:JumpListCategory.name",
        "doc:name",
        "doc:jumplistcategoryname",
        "doc:JumpListCategory.name"
      ]
    },
    {
      "objectID": "api-jump-list-category#jumplistcategoryitems",
      "name": "items",
      "description": "Array of `JumpListItem` objects if `type` is `tasks` or `custom`, otherwise it should be omitted.",
      "required": false,
      "additionalTags": [],
      "collection": true,
      "type": "JumpListItem",
      "apiType": "properties",
      "fullSignature": "JumpListCategory.items",
      "tldr": "Array of `JumpListItem` objects if `type` is `tasks` or `custom`, otherwise it should be omitted.",
      "slug": "jumplistcategoryitems",
      "url": "https://electronjs.org/docs/api/jump-list-category#jumplistcategoryitems",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:items",
        "api:jumplistcategoryitems",
        "api:JumpListCategory.items",
        "doc:items",
        "doc:jumplistcategoryitems",
        "doc:JumpListCategory.items"
      ]
    },
    {
      "objectID": "api-jump-list-item#jumplistitemtype",
      "name": "type",
      "description": "One of the following:",
      "required": false,
      "additionalTags": [],
      "collection": false,
      "type": "String",
      "possibleValues": [
        {
          "value": "task",
          "description": "A task will launch an app with specific arguments."
        },
        {
          "value": "separator",
          "description": "Can be used to separate items in the standard `Tasks` category."
        },
        {
          "value": "file",
          "description": "A file link will open a file using the app that created the Jump List, for this to work the app must be registered as a handler for the file type (though it doesn't have to be the default handler)."
        }
      ],
      "apiType": "properties",
      "fullSignature": "JumpListItem.type",
      "tldr": "One of the following:.",
      "slug": "jumplistitemtype",
      "url": "https://electronjs.org/docs/api/jump-list-item#jumplistitemtype",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:type",
        "api:jumplistitemtype",
        "api:JumpListItem.type",
        "doc:type",
        "doc:jumplistitemtype",
        "doc:JumpListItem.type"
      ]
    },
    {
      "objectID": "api-jump-list-item#jumplistitempath",
      "name": "path",
      "description": "Path of the file to open, should only be set if `type` is `file`.",
      "required": false,
      "additionalTags": [],
      "collection": false,
      "type": "String",
      "possibleValues": null,
      "apiType": "properties",
      "fullSignature": "JumpListItem.path",
      "tldr": "Path of the file to open, should only be set if `type` is `file`.",
      "slug": "jumplistitempath",
      "url": "https://electronjs.org/docs/api/jump-list-item#jumplistitempath",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:path",
        "api:jumplistitempath",
        "api:JumpListItem.path",
        "doc:path",
        "doc:jumplistitempath",
        "doc:JumpListItem.path"
      ]
    },
    {
      "objectID": "api-jump-list-item#jumplistitemprogram",
      "name": "program",
      "description": "Path of the program to execute, usually you should specify `process.execPath` which opens the current program. Should only be set if `type` is `task`.",
      "required": false,
      "additionalTags": [],
      "collection": false,
      "type": "String",
      "possibleValues": null,
      "apiType": "properties",
      "fullSignature": "JumpListItem.program",
      "tldr": "Path of the program to execute, usually you should specify `process.execPath` which opens the current program.",
      "slug": "jumplistitemprogram",
      "url": "https://electronjs.org/docs/api/jump-list-item#jumplistitemprogram",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:program",
        "api:jumplistitemprogram",
        "api:JumpListItem.program",
        "doc:program",
        "doc:jumplistitemprogram",
        "doc:JumpListItem.program"
      ]
    },
    {
      "objectID": "api-jump-list-item#jumplistitemargs",
      "name": "args",
      "description": "The command line arguments when `program` is executed. Should only be set if `type` is `task`.",
      "required": false,
      "additionalTags": [],
      "collection": false,
      "type": "String",
      "possibleValues": null,
      "apiType": "properties",
      "fullSignature": "JumpListItem.args",
      "tldr": "The command line arguments when `program` is executed.",
      "slug": "jumplistitemargs",
      "url": "https://electronjs.org/docs/api/jump-list-item#jumplistitemargs",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:args",
        "api:jumplistitemargs",
        "api:JumpListItem.args",
        "doc:args",
        "doc:jumplistitemargs",
        "doc:JumpListItem.args"
      ]
    },
    {
      "objectID": "api-jump-list-item#jumplistitemtitle",
      "name": "title",
      "description": "The text to be displayed for the item in the Jump List. Should only be set if `type` is `task`.",
      "required": false,
      "additionalTags": [],
      "collection": false,
      "type": "String",
      "possibleValues": null,
      "apiType": "properties",
      "fullSignature": "JumpListItem.title",
      "tldr": "The text to be displayed for the item in the Jump List.",
      "slug": "jumplistitemtitle",
      "url": "https://electronjs.org/docs/api/jump-list-item#jumplistitemtitle",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:title",
        "api:jumplistitemtitle",
        "api:JumpListItem.title",
        "doc:title",
        "doc:jumplistitemtitle",
        "doc:JumpListItem.title"
      ]
    },
    {
      "objectID": "api-jump-list-item#jumplistitemdescription",
      "name": "description",
      "description": "Description of the task (displayed in a tooltip). Should only be set if `type` is `task`.",
      "required": false,
      "additionalTags": [],
      "collection": false,
      "type": "String",
      "possibleValues": null,
      "apiType": "properties",
      "fullSignature": "JumpListItem.description",
      "tldr": "Description of the task (displayed in a tooltip).",
      "slug": "jumplistitemdescription",
      "url": "https://electronjs.org/docs/api/jump-list-item#jumplistitemdescription",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:description",
        "api:jumplistitemdescription",
        "api:JumpListItem.description",
        "doc:description",
        "doc:jumplistitemdescription",
        "doc:JumpListItem.description"
      ]
    },
    {
      "objectID": "api-jump-list-item#jumplistitemiconpath",
      "name": "iconPath",
      "description": "The absolute path to an icon to be displayed in a Jump List, which can be an arbitrary resource file that contains an icon (e.g. `.ico`, `.exe`, `.dll`). You can usually specify `process.execPath` to show the program icon.",
      "required": false,
      "additionalTags": [],
      "collection": false,
      "type": "String",
      "possibleValues": null,
      "apiType": "properties",
      "fullSignature": "JumpListItem.iconPath",
      "tldr": "The absolute path to an icon to be displayed in a Jump List, which can be an arbitrary resource file that contains an icon (e.g.",
      "slug": "jumplistitemiconpath",
      "url": "https://electronjs.org/docs/api/jump-list-item#jumplistitemiconpath",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:iconPath",
        "api:jumplistitemiconpath",
        "api:JumpListItem.iconPath",
        "doc:iconPath",
        "doc:jumplistitemiconpath",
        "doc:JumpListItem.iconPath"
      ]
    },
    {
      "objectID": "api-jump-list-item#jumplistitemiconindex",
      "name": "iconIndex",
      "description": "The index of the icon in the resource file. If a resource file contains multiple icons this value can be used to specify the zero-based index of the icon that should be displayed for this task. If a resource file contains only one icon, this property should be set to zero.",
      "required": false,
      "additionalTags": [],
      "collection": false,
      "type": "Number",
      "apiType": "properties",
      "fullSignature": "JumpListItem.iconIndex",
      "tldr": "The index of the icon in the resource file.",
      "slug": "jumplistitemiconindex",
      "url": "https://electronjs.org/docs/api/jump-list-item#jumplistitemiconindex",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:iconIndex",
        "api:jumplistitemiconindex",
        "api:JumpListItem.iconIndex",
        "doc:iconIndex",
        "doc:jumplistitemiconindex",
        "doc:JumpListItem.iconIndex"
      ]
    },
    {
      "objectID": "api-jump-list-item#jumplistitemworkingdirectory",
      "name": "workingDirectory",
      "description": "The working directory. Default is empty.",
      "required": false,
      "additionalTags": [],
      "collection": false,
      "type": "String",
      "possibleValues": null,
      "apiType": "properties",
      "fullSignature": "JumpListItem.workingDirectory",
      "tldr": "The working directory.",
      "slug": "jumplistitemworkingdirectory",
      "url": "https://electronjs.org/docs/api/jump-list-item#jumplistitemworkingdirectory",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:workingDirectory",
        "api:jumplistitemworkingdirectory",
        "api:JumpListItem.workingDirectory",
        "doc:workingDirectory",
        "doc:jumplistitemworkingdirectory",
        "doc:JumpListItem.workingDirectory"
      ]
    },
    {
      "objectID": "api-keyboard-event#keyboardeventctrlkey",
      "name": "ctrlKey",
      "description": "whether the Control key was used in an accelerator to trigger the Event",
      "required": false,
      "additionalTags": [],
      "collection": false,
      "type": "Boolean",
      "apiType": "properties",
      "fullSignature": "KeyboardEvent.ctrlKey",
      "tldr": "whether the Control key was used in an accelerator to trigger the Event.",
      "slug": "keyboardeventctrlkey",
      "url": "https://electronjs.org/docs/api/keyboard-event#keyboardeventctrlkey",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:ctrlKey",
        "api:keyboardeventctrlkey",
        "api:KeyboardEvent.ctrlKey",
        "doc:ctrlKey",
        "doc:keyboardeventctrlkey",
        "doc:KeyboardEvent.ctrlKey"
      ]
    },
    {
      "objectID": "api-keyboard-event#keyboardeventmetakey",
      "name": "metaKey",
      "description": "whether a meta key was used in an accelerator to trigger the Event",
      "required": false,
      "additionalTags": [],
      "collection": false,
      "type": "Boolean",
      "apiType": "properties",
      "fullSignature": "KeyboardEvent.metaKey",
      "tldr": "whether a meta key was used in an accelerator to trigger the Event.",
      "slug": "keyboardeventmetakey",
      "url": "https://electronjs.org/docs/api/keyboard-event#keyboardeventmetakey",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:metaKey",
        "api:keyboardeventmetakey",
        "api:KeyboardEvent.metaKey",
        "doc:metaKey",
        "doc:keyboardeventmetakey",
        "doc:KeyboardEvent.metaKey"
      ]
    },
    {
      "objectID": "api-keyboard-event#keyboardeventshiftkey",
      "name": "shiftKey",
      "description": "whether a Shift key was used in an accelerator to trigger the Event",
      "required": false,
      "additionalTags": [],
      "collection": false,
      "type": "Boolean",
      "apiType": "properties",
      "fullSignature": "KeyboardEvent.shiftKey",
      "tldr": "whether a Shift key was used in an accelerator to trigger the Event.",
      "slug": "keyboardeventshiftkey",
      "url": "https://electronjs.org/docs/api/keyboard-event#keyboardeventshiftkey",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:shiftKey",
        "api:keyboardeventshiftkey",
        "api:KeyboardEvent.shiftKey",
        "doc:shiftKey",
        "doc:keyboardeventshiftkey",
        "doc:KeyboardEvent.shiftKey"
      ]
    },
    {
      "objectID": "api-keyboard-event#keyboardeventaltkey",
      "name": "altKey",
      "description": "whether an Alt key was used in an accelerator to trigger the Event",
      "required": false,
      "additionalTags": [],
      "collection": false,
      "type": "Boolean",
      "apiType": "properties",
      "fullSignature": "KeyboardEvent.altKey",
      "tldr": "whether an Alt key was used in an accelerator to trigger the Event.",
      "slug": "keyboardeventaltkey",
      "url": "https://electronjs.org/docs/api/keyboard-event#keyboardeventaltkey",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:altKey",
        "api:keyboardeventaltkey",
        "api:KeyboardEvent.altKey",
        "doc:altKey",
        "doc:keyboardeventaltkey",
        "doc:KeyboardEvent.altKey"
      ]
    },
    {
      "objectID": "api-keyboard-event#keyboardeventtriggeredbyaccelerator",
      "name": "triggeredByAccelerator",
      "description": "whether an accelerator was used to trigger the event as opposed to another user gesture like mouse click",
      "required": false,
      "additionalTags": [],
      "collection": false,
      "type": "Boolean",
      "apiType": "properties",
      "fullSignature": "KeyboardEvent.triggeredByAccelerator",
      "tldr": "whether an accelerator was used to trigger the event as opposed to another user gesture like mouse click.",
      "slug": "keyboardeventtriggeredbyaccelerator",
      "url": "https://electronjs.org/docs/api/keyboard-event#keyboardeventtriggeredbyaccelerator",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:triggeredByAccelerator",
        "api:keyboardeventtriggeredbyaccelerator",
        "api:KeyboardEvent.triggeredByAccelerator",
        "doc:triggeredByAccelerator",
        "doc:keyboardeventtriggeredbyaccelerator",
        "doc:KeyboardEvent.triggeredByAccelerator"
      ]
    },
    {
      "objectID": "api-keyboard-input-event#keyboardinputeventtype",
      "name": "type",
      "description": "The type of the event, can be `keyDown`, `keyUp` or `char`.",
      "required": true,
      "additionalTags": [],
      "collection": false,
      "type": "String",
      "possibleValues": [
        {
          "value": "keyDown",
          "description": ""
        },
        {
          "value": "keyUp",
          "description": ""
        },
        {
          "value": "char",
          "description": ""
        }
      ],
      "apiType": "properties",
      "fullSignature": "KeyboardInputEvent.type",
      "tldr": "The type of the event, can be `keyDown`, `keyUp` or `char`.",
      "slug": "keyboardinputeventtype",
      "url": "https://electronjs.org/docs/api/keyboard-input-event#keyboardinputeventtype",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:type",
        "api:keyboardinputeventtype",
        "api:KeyboardInputEvent.type",
        "doc:type",
        "doc:keyboardinputeventtype",
        "doc:KeyboardInputEvent.type"
      ]
    },
    {
      "objectID": "api-keyboard-input-event#keyboardinputeventkeycode",
      "name": "keyCode",
      "description": "The character that will be sent as the keyboard event. Should only use the valid key codes in Accelerator.",
      "required": true,
      "additionalTags": [],
      "collection": false,
      "type": "String",
      "possibleValues": null,
      "apiType": "properties",
      "fullSignature": "KeyboardInputEvent.keyCode",
      "tldr": "The character that will be sent as the keyboard event.",
      "slug": "keyboardinputeventkeycode",
      "url": "https://electronjs.org/docs/api/keyboard-input-event#keyboardinputeventkeycode",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:keyCode",
        "api:keyboardinputeventkeycode",
        "api:KeyboardInputEvent.keyCode",
        "doc:keyCode",
        "doc:keyboardinputeventkeycode",
        "doc:KeyboardInputEvent.keyCode"
      ]
    },
    {
      "objectID": "api-memory-info#memoryinfoworkingsetsize",
      "name": "workingSetSize",
      "description": "The amount of memory currently pinned to actual physical RAM.",
      "required": true,
      "additionalTags": [],
      "collection": false,
      "type": "Integer",
      "apiType": "properties",
      "fullSignature": "MemoryInfo.workingSetSize",
      "tldr": "The amount of memory currently pinned to actual physical RAM.",
      "slug": "memoryinfoworkingsetsize",
      "url": "https://electronjs.org/docs/api/memory-info#memoryinfoworkingsetsize",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:workingSetSize",
        "api:memoryinfoworkingsetsize",
        "api:MemoryInfo.workingSetSize",
        "doc:workingSetSize",
        "doc:memoryinfoworkingsetsize",
        "doc:MemoryInfo.workingSetSize"
      ]
    },
    {
      "objectID": "api-memory-info#memoryinfopeakworkingsetsize",
      "name": "peakWorkingSetSize",
      "description": "The maximum amount of memory that has ever been pinned to actual physical RAM.",
      "required": true,
      "additionalTags": [],
      "collection": false,
      "type": "Integer",
      "apiType": "properties",
      "fullSignature": "MemoryInfo.peakWorkingSetSize",
      "tldr": "The maximum amount of memory that has ever been pinned to actual physical RAM.",
      "slug": "memoryinfopeakworkingsetsize",
      "url": "https://electronjs.org/docs/api/memory-info#memoryinfopeakworkingsetsize",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:peakWorkingSetSize",
        "api:memoryinfopeakworkingsetsize",
        "api:MemoryInfo.peakWorkingSetSize",
        "doc:peakWorkingSetSize",
        "doc:memoryinfopeakworkingsetsize",
        "doc:MemoryInfo.peakWorkingSetSize"
      ]
    },
    {
      "objectID": "api-memory-info#memoryinfoprivatebytes",
      "name": "privateBytes",
      "description": "The amount of memory not shared by other processes, such as JS heap or HTML content.",
      "required": false,
      "additionalTags": [
        "os_windows"
      ],
      "collection": false,
      "type": "Integer",
      "apiType": "properties",
      "fullSignature": "MemoryInfo.privateBytes",
      "tldr": "The amount of memory not shared by other processes, such as JS heap or HTML content.",
      "slug": "memoryinfoprivatebytes",
      "url": "https://electronjs.org/docs/api/memory-info#memoryinfoprivatebytes",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:privateBytes",
        "api:memoryinfoprivatebytes",
        "api:MemoryInfo.privateBytes",
        "doc:privateBytes",
        "doc:memoryinfoprivatebytes",
        "doc:MemoryInfo.privateBytes"
      ]
    },
    {
      "objectID": "api-memory-usage-details#memoryusagedetailscount",
      "name": "count",
      "description": "",
      "required": true,
      "additionalTags": [],
      "collection": false,
      "type": "Number",
      "apiType": "properties",
      "fullSignature": "MemoryUsageDetails.count",
      "tldr": null,
      "slug": "memoryusagedetailscount",
      "url": "https://electronjs.org/docs/api/memory-usage-details#memoryusagedetailscount",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:count",
        "api:memoryusagedetailscount",
        "api:MemoryUsageDetails.count",
        "doc:count",
        "doc:memoryusagedetailscount",
        "doc:MemoryUsageDetails.count"
      ]
    },
    {
      "objectID": "api-memory-usage-details#memoryusagedetailssize",
      "name": "size",
      "description": "",
      "required": true,
      "additionalTags": [],
      "collection": false,
      "type": "Number",
      "apiType": "properties",
      "fullSignature": "MemoryUsageDetails.size",
      "tldr": null,
      "slug": "memoryusagedetailssize",
      "url": "https://electronjs.org/docs/api/memory-usage-details#memoryusagedetailssize",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:size",
        "api:memoryusagedetailssize",
        "api:MemoryUsageDetails.size",
        "doc:size",
        "doc:memoryusagedetailssize",
        "doc:MemoryUsageDetails.size"
      ]
    },
    {
      "objectID": "api-memory-usage-details#memoryusagedetailslivesize",
      "name": "liveSize",
      "description": "",
      "required": true,
      "additionalTags": [],
      "collection": false,
      "type": "Number",
      "apiType": "properties",
      "fullSignature": "MemoryUsageDetails.liveSize",
      "tldr": null,
      "slug": "memoryusagedetailslivesize",
      "url": "https://electronjs.org/docs/api/memory-usage-details#memoryusagedetailslivesize",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:liveSize",
        "api:memoryusagedetailslivesize",
        "api:MemoryUsageDetails.liveSize",
        "doc:liveSize",
        "doc:memoryusagedetailslivesize",
        "doc:MemoryUsageDetails.liveSize"
      ]
    },
    {
      "objectID": "api-mime-typed-buffer#mimetypedbuffermimetype",
      "name": "mimeType",
      "description": "The mimeType of the Buffer that you are sending.",
      "required": true,
      "additionalTags": [],
      "collection": false,
      "type": "String",
      "possibleValues": null,
      "apiType": "properties",
      "fullSignature": "MimeTypedBuffer.mimeType",
      "tldr": "The mimeType of the Buffer that you are sending.",
      "slug": "mimetypedbuffermimetype",
      "url": "https://electronjs.org/docs/api/mime-typed-buffer#mimetypedbuffermimetype",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:mimeType",
        "api:mimetypedbuffermimetype",
        "api:MimeTypedBuffer.mimeType",
        "doc:mimeType",
        "doc:mimetypedbuffermimetype",
        "doc:MimeTypedBuffer.mimeType"
      ]
    },
    {
      "objectID": "api-mime-typed-buffer#mimetypedbufferdata",
      "name": "data",
      "description": "The actual Buffer content.",
      "required": true,
      "additionalTags": [],
      "collection": false,
      "type": "Buffer",
      "apiType": "properties",
      "fullSignature": "MimeTypedBuffer.data",
      "tldr": "The actual Buffer content.",
      "slug": "mimetypedbufferdata",
      "url": "https://electronjs.org/docs/api/mime-typed-buffer#mimetypedbufferdata",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:data",
        "api:mimetypedbufferdata",
        "api:MimeTypedBuffer.data",
        "doc:data",
        "doc:mimetypedbufferdata",
        "doc:MimeTypedBuffer.data"
      ]
    },
    {
      "objectID": "api-mouse-input-event#mouseinputeventtype",
      "name": "type",
      "description": "The type of the event, can be `mouseDown`, `mouseUp`, `mouseEnter`, `mouseLeave`, `contextMenu`, `mouseWheel` or `mouseMove`.",
      "required": true,
      "additionalTags": [],
      "collection": false,
      "type": "String",
      "possibleValues": [
        {
          "value": "mouseDown",
          "description": ""
        },
        {
          "value": "mouseUp",
          "description": ""
        },
        {
          "value": "mouseEnter",
          "description": ""
        },
        {
          "value": "mouseLeave",
          "description": ""
        },
        {
          "value": "contextMenu",
          "description": ""
        },
        {
          "value": "mouseWheel",
          "description": ""
        },
        {
          "value": "mouseMove",
          "description": ""
        }
      ],
      "apiType": "properties",
      "fullSignature": "MouseInputEvent.type",
      "tldr": "The type of the event, can be `mouseDown`, `mouseUp`, `mouseEnter`, `mouseLeave`, `contextMenu`, `mouseWheel` or `mouseMove`.",
      "slug": "mouseinputeventtype",
      "url": "https://electronjs.org/docs/api/mouse-input-event#mouseinputeventtype",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:type",
        "api:mouseinputeventtype",
        "api:MouseInputEvent.type",
        "doc:type",
        "doc:mouseinputeventtype",
        "doc:MouseInputEvent.type"
      ]
    },
    {
      "objectID": "api-mouse-input-event#mouseinputeventx",
      "name": "x",
      "description": "",
      "required": true,
      "additionalTags": [],
      "collection": false,
      "type": "Integer",
      "apiType": "properties",
      "fullSignature": "MouseInputEvent.x",
      "tldr": null,
      "slug": "mouseinputeventx",
      "url": "https://electronjs.org/docs/api/mouse-input-event#mouseinputeventx",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:x",
        "api:mouseinputeventx",
        "api:MouseInputEvent.x",
        "doc:x",
        "doc:mouseinputeventx",
        "doc:MouseInputEvent.x"
      ]
    },
    {
      "objectID": "api-mouse-input-event#mouseinputeventy",
      "name": "y",
      "description": "",
      "required": true,
      "additionalTags": [],
      "collection": false,
      "type": "Integer",
      "apiType": "properties",
      "fullSignature": "MouseInputEvent.y",
      "tldr": null,
      "slug": "mouseinputeventy",
      "url": "https://electronjs.org/docs/api/mouse-input-event#mouseinputeventy",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:y",
        "api:mouseinputeventy",
        "api:MouseInputEvent.y",
        "doc:y",
        "doc:mouseinputeventy",
        "doc:MouseInputEvent.y"
      ]
    },
    {
      "objectID": "api-mouse-input-event#mouseinputeventbutton",
      "name": "button",
      "description": "The button pressed, can be `left`, `middle`, `right`.",
      "required": false,
      "additionalTags": [],
      "collection": false,
      "type": "String",
      "possibleValues": [
        {
          "value": "left",
          "description": ""
        },
        {
          "value": "middle",
          "description": ""
        },
        {
          "value": "right",
          "description": ""
        }
      ],
      "apiType": "properties",
      "fullSignature": "MouseInputEvent.button",
      "tldr": "The button pressed, can be `left`, `middle`, `right`.",
      "slug": "mouseinputeventbutton",
      "url": "https://electronjs.org/docs/api/mouse-input-event#mouseinputeventbutton",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:button",
        "api:mouseinputeventbutton",
        "api:MouseInputEvent.button",
        "doc:button",
        "doc:mouseinputeventbutton",
        "doc:MouseInputEvent.button"
      ]
    },
    {
      "objectID": "api-mouse-input-event#mouseinputeventglobalx",
      "name": "globalX",
      "description": "",
      "required": false,
      "additionalTags": [],
      "collection": false,
      "type": "Integer",
      "apiType": "properties",
      "fullSignature": "MouseInputEvent.globalX",
      "tldr": null,
      "slug": "mouseinputeventglobalx",
      "url": "https://electronjs.org/docs/api/mouse-input-event#mouseinputeventglobalx",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:globalX",
        "api:mouseinputeventglobalx",
        "api:MouseInputEvent.globalX",
        "doc:globalX",
        "doc:mouseinputeventglobalx",
        "doc:MouseInputEvent.globalX"
      ]
    },
    {
      "objectID": "api-mouse-input-event#mouseinputeventglobaly",
      "name": "globalY",
      "description": "",
      "required": false,
      "additionalTags": [],
      "collection": false,
      "type": "Integer",
      "apiType": "properties",
      "fullSignature": "MouseInputEvent.globalY",
      "tldr": null,
      "slug": "mouseinputeventglobaly",
      "url": "https://electronjs.org/docs/api/mouse-input-event#mouseinputeventglobaly",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:globalY",
        "api:mouseinputeventglobaly",
        "api:MouseInputEvent.globalY",
        "doc:globalY",
        "doc:mouseinputeventglobaly",
        "doc:MouseInputEvent.globalY"
      ]
    },
    {
      "objectID": "api-mouse-input-event#mouseinputeventmovementx",
      "name": "movementX",
      "description": "",
      "required": false,
      "additionalTags": [],
      "collection": false,
      "type": "Integer",
      "apiType": "properties",
      "fullSignature": "MouseInputEvent.movementX",
      "tldr": null,
      "slug": "mouseinputeventmovementx",
      "url": "https://electronjs.org/docs/api/mouse-input-event#mouseinputeventmovementx",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:movementX",
        "api:mouseinputeventmovementx",
        "api:MouseInputEvent.movementX",
        "doc:movementX",
        "doc:mouseinputeventmovementx",
        "doc:MouseInputEvent.movementX"
      ]
    },
    {
      "objectID": "api-mouse-input-event#mouseinputeventmovementy",
      "name": "movementY",
      "description": "",
      "required": false,
      "additionalTags": [],
      "collection": false,
      "type": "Integer",
      "apiType": "properties",
      "fullSignature": "MouseInputEvent.movementY",
      "tldr": null,
      "slug": "mouseinputeventmovementy",
      "url": "https://electronjs.org/docs/api/mouse-input-event#mouseinputeventmovementy",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:movementY",
        "api:mouseinputeventmovementy",
        "api:MouseInputEvent.movementY",
        "doc:movementY",
        "doc:mouseinputeventmovementy",
        "doc:MouseInputEvent.movementY"
      ]
    },
    {
      "objectID": "api-mouse-input-event#mouseinputeventclickcount",
      "name": "clickCount",
      "description": "",
      "required": false,
      "additionalTags": [],
      "collection": false,
      "type": "Integer",
      "apiType": "properties",
      "fullSignature": "MouseInputEvent.clickCount",
      "tldr": null,
      "slug": "mouseinputeventclickcount",
      "url": "https://electronjs.org/docs/api/mouse-input-event#mouseinputeventclickcount",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:clickCount",
        "api:mouseinputeventclickcount",
        "api:MouseInputEvent.clickCount",
        "doc:clickCount",
        "doc:mouseinputeventclickcount",
        "doc:MouseInputEvent.clickCount"
      ]
    },
    {
      "objectID": "api-mouse-wheel-input-event#mousewheelinputeventtype",
      "name": "type",
      "description": "The type of the event, can be `mouseWheel`.",
      "required": true,
      "additionalTags": [],
      "collection": false,
      "type": "String",
      "possibleValues": [
        {
          "value": "mouseWheel",
          "description": ""
        }
      ],
      "apiType": "properties",
      "fullSignature": "MouseWheelInputEvent.type",
      "tldr": "The type of the event, can be `mouseWheel`.",
      "slug": "mousewheelinputeventtype",
      "url": "https://electronjs.org/docs/api/mouse-wheel-input-event#mousewheelinputeventtype",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:type",
        "api:mousewheelinputeventtype",
        "api:MouseWheelInputEvent.type",
        "doc:type",
        "doc:mousewheelinputeventtype",
        "doc:MouseWheelInputEvent.type"
      ]
    },
    {
      "objectID": "api-mouse-wheel-input-event#mousewheelinputeventdeltax",
      "name": "deltaX",
      "description": "",
      "required": false,
      "additionalTags": [],
      "collection": false,
      "type": "Integer",
      "apiType": "properties",
      "fullSignature": "MouseWheelInputEvent.deltaX",
      "tldr": null,
      "slug": "mousewheelinputeventdeltax",
      "url": "https://electronjs.org/docs/api/mouse-wheel-input-event#mousewheelinputeventdeltax",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:deltaX",
        "api:mousewheelinputeventdeltax",
        "api:MouseWheelInputEvent.deltaX",
        "doc:deltaX",
        "doc:mousewheelinputeventdeltax",
        "doc:MouseWheelInputEvent.deltaX"
      ]
    },
    {
      "objectID": "api-mouse-wheel-input-event#mousewheelinputeventdeltay",
      "name": "deltaY",
      "description": "",
      "required": false,
      "additionalTags": [],
      "collection": false,
      "type": "Integer",
      "apiType": "properties",
      "fullSignature": "MouseWheelInputEvent.deltaY",
      "tldr": null,
      "slug": "mousewheelinputeventdeltay",
      "url": "https://electronjs.org/docs/api/mouse-wheel-input-event#mousewheelinputeventdeltay",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:deltaY",
        "api:mousewheelinputeventdeltay",
        "api:MouseWheelInputEvent.deltaY",
        "doc:deltaY",
        "doc:mousewheelinputeventdeltay",
        "doc:MouseWheelInputEvent.deltaY"
      ]
    },
    {
      "objectID": "api-mouse-wheel-input-event#mousewheelinputeventwheelticksx",
      "name": "wheelTicksX",
      "description": "",
      "required": false,
      "additionalTags": [],
      "collection": false,
      "type": "Integer",
      "apiType": "properties",
      "fullSignature": "MouseWheelInputEvent.wheelTicksX",
      "tldr": null,
      "slug": "mousewheelinputeventwheelticksx",
      "url": "https://electronjs.org/docs/api/mouse-wheel-input-event#mousewheelinputeventwheelticksx",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:wheelTicksX",
        "api:mousewheelinputeventwheelticksx",
        "api:MouseWheelInputEvent.wheelTicksX",
        "doc:wheelTicksX",
        "doc:mousewheelinputeventwheelticksx",
        "doc:MouseWheelInputEvent.wheelTicksX"
      ]
    },
    {
      "objectID": "api-mouse-wheel-input-event#mousewheelinputeventwheelticksy",
      "name": "wheelTicksY",
      "description": "",
      "required": false,
      "additionalTags": [],
      "collection": false,
      "type": "Integer",
      "apiType": "properties",
      "fullSignature": "MouseWheelInputEvent.wheelTicksY",
      "tldr": null,
      "slug": "mousewheelinputeventwheelticksy",
      "url": "https://electronjs.org/docs/api/mouse-wheel-input-event#mousewheelinputeventwheelticksy",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:wheelTicksY",
        "api:mousewheelinputeventwheelticksy",
        "api:MouseWheelInputEvent.wheelTicksY",
        "doc:wheelTicksY",
        "doc:mousewheelinputeventwheelticksy",
        "doc:MouseWheelInputEvent.wheelTicksY"
      ]
    },
    {
      "objectID": "api-mouse-wheel-input-event#mousewheelinputeventaccelerationratiox",
      "name": "accelerationRatioX",
      "description": "",
      "required": false,
      "additionalTags": [],
      "collection": false,
      "type": "Integer",
      "apiType": "properties",
      "fullSignature": "MouseWheelInputEvent.accelerationRatioX",
      "tldr": null,
      "slug": "mousewheelinputeventaccelerationratiox",
      "url": "https://electronjs.org/docs/api/mouse-wheel-input-event#mousewheelinputeventaccelerationratiox",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:accelerationRatioX",
        "api:mousewheelinputeventaccelerationratiox",
        "api:MouseWheelInputEvent.accelerationRatioX",
        "doc:accelerationRatioX",
        "doc:mousewheelinputeventaccelerationratiox",
        "doc:MouseWheelInputEvent.accelerationRatioX"
      ]
    },
    {
      "objectID": "api-mouse-wheel-input-event#mousewheelinputeventaccelerationratioy",
      "name": "accelerationRatioY",
      "description": "",
      "required": false,
      "additionalTags": [],
      "collection": false,
      "type": "Integer",
      "apiType": "properties",
      "fullSignature": "MouseWheelInputEvent.accelerationRatioY",
      "tldr": null,
      "slug": "mousewheelinputeventaccelerationratioy",
      "url": "https://electronjs.org/docs/api/mouse-wheel-input-event#mousewheelinputeventaccelerationratioy",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:accelerationRatioY",
        "api:mousewheelinputeventaccelerationratioy",
        "api:MouseWheelInputEvent.accelerationRatioY",
        "doc:accelerationRatioY",
        "doc:mousewheelinputeventaccelerationratioy",
        "doc:MouseWheelInputEvent.accelerationRatioY"
      ]
    },
    {
      "objectID": "api-mouse-wheel-input-event#mousewheelinputeventhasprecisescrollingdeltas",
      "name": "hasPreciseScrollingDeltas",
      "description": "",
      "required": false,
      "additionalTags": [],
      "collection": false,
      "type": "Boolean",
      "apiType": "properties",
      "fullSignature": "MouseWheelInputEvent.hasPreciseScrollingDeltas",
      "tldr": null,
      "slug": "mousewheelinputeventhasprecisescrollingdeltas",
      "url": "https://electronjs.org/docs/api/mouse-wheel-input-event#mousewheelinputeventhasprecisescrollingdeltas",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:hasPreciseScrollingDeltas",
        "api:mousewheelinputeventhasprecisescrollingdeltas",
        "api:MouseWheelInputEvent.hasPreciseScrollingDeltas",
        "doc:hasPreciseScrollingDeltas",
        "doc:mousewheelinputeventhasprecisescrollingdeltas",
        "doc:MouseWheelInputEvent.hasPreciseScrollingDeltas"
      ]
    },
    {
      "objectID": "api-mouse-wheel-input-event#mousewheelinputeventcanscroll",
      "name": "canScroll",
      "description": "",
      "required": false,
      "additionalTags": [],
      "collection": false,
      "type": "Boolean",
      "apiType": "properties",
      "fullSignature": "MouseWheelInputEvent.canScroll",
      "tldr": null,
      "slug": "mousewheelinputeventcanscroll",
      "url": "https://electronjs.org/docs/api/mouse-wheel-input-event#mousewheelinputeventcanscroll",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:canScroll",
        "api:mousewheelinputeventcanscroll",
        "api:MouseWheelInputEvent.canScroll",
        "doc:canScroll",
        "doc:mousewheelinputeventcanscroll",
        "doc:MouseWheelInputEvent.canScroll"
      ]
    },
    {
      "objectID": "api-notification-action#notificationactiontype",
      "name": "type",
      "description": "The type of action, can be `button`.",
      "required": true,
      "additionalTags": [],
      "collection": false,
      "type": "String",
      "possibleValues": [
        {
          "value": "button",
          "description": ""
        }
      ],
      "apiType": "properties",
      "fullSignature": "NotificationAction.type",
      "tldr": "The type of action, can be `button`.",
      "slug": "notificationactiontype",
      "url": "https://electronjs.org/docs/api/notification-action#notificationactiontype",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:type",
        "api:notificationactiontype",
        "api:NotificationAction.type",
        "doc:type",
        "doc:notificationactiontype",
        "doc:NotificationAction.type"
      ]
    },
    {
      "objectID": "api-notification-action#notificationactiontext",
      "name": "text",
      "description": "The label for the given action.",
      "required": false,
      "additionalTags": [],
      "collection": false,
      "type": "String",
      "possibleValues": null,
      "apiType": "properties",
      "fullSignature": "NotificationAction.text",
      "tldr": "The label for the given action.",
      "slug": "notificationactiontext",
      "url": "https://electronjs.org/docs/api/notification-action#notificationactiontext",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:text",
        "api:notificationactiontext",
        "api:NotificationAction.text",
        "doc:text",
        "doc:notificationactiontext",
        "doc:NotificationAction.text"
      ]
    },
    {
      "objectID": "api-point#pointx",
      "name": "x",
      "description": "",
      "required": true,
      "additionalTags": [],
      "collection": false,
      "type": "Number",
      "apiType": "properties",
      "fullSignature": "Point.x",
      "tldr": null,
      "slug": "pointx",
      "url": "https://electronjs.org/docs/api/point#pointx",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:x",
        "api:pointx",
        "api:Point.x",
        "doc:x",
        "doc:pointx",
        "doc:Point.x"
      ]
    },
    {
      "objectID": "api-point#pointy",
      "name": "y",
      "description": "",
      "required": true,
      "additionalTags": [],
      "collection": false,
      "type": "Number",
      "apiType": "properties",
      "fullSignature": "Point.y",
      "tldr": null,
      "slug": "pointy",
      "url": "https://electronjs.org/docs/api/point#pointy",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:y",
        "api:pointy",
        "api:Point.y",
        "doc:y",
        "doc:pointy",
        "doc:Point.y"
      ]
    },
    {
      "objectID": "api-printer-info#printerinfoname",
      "name": "name",
      "description": "",
      "required": true,
      "additionalTags": [],
      "collection": false,
      "type": "String",
      "possibleValues": null,
      "apiType": "properties",
      "fullSignature": "PrinterInfo.name",
      "tldr": null,
      "slug": "printerinfoname",
      "url": "https://electronjs.org/docs/api/printer-info#printerinfoname",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:name",
        "api:printerinfoname",
        "api:PrinterInfo.name",
        "doc:name",
        "doc:printerinfoname",
        "doc:PrinterInfo.name"
      ]
    },
    {
      "objectID": "api-printer-info#printerinfodescription",
      "name": "description",
      "description": "",
      "required": true,
      "additionalTags": [],
      "collection": false,
      "type": "String",
      "possibleValues": null,
      "apiType": "properties",
      "fullSignature": "PrinterInfo.description",
      "tldr": null,
      "slug": "printerinfodescription",
      "url": "https://electronjs.org/docs/api/printer-info#printerinfodescription",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:description",
        "api:printerinfodescription",
        "api:PrinterInfo.description",
        "doc:description",
        "doc:printerinfodescription",
        "doc:PrinterInfo.description"
      ]
    },
    {
      "objectID": "api-printer-info#printerinfostatus",
      "name": "status",
      "description": "",
      "required": true,
      "additionalTags": [],
      "collection": false,
      "type": "Number",
      "apiType": "properties",
      "fullSignature": "PrinterInfo.status",
      "tldr": null,
      "slug": "printerinfostatus",
      "url": "https://electronjs.org/docs/api/printer-info#printerinfostatus",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:status",
        "api:printerinfostatus",
        "api:PrinterInfo.status",
        "doc:status",
        "doc:printerinfostatus",
        "doc:PrinterInfo.status"
      ]
    },
    {
      "objectID": "api-printer-info#printerinfoisdefault",
      "name": "isDefault",
      "description": "",
      "required": true,
      "additionalTags": [],
      "collection": false,
      "type": "Boolean",
      "apiType": "properties",
      "fullSignature": "PrinterInfo.isDefault",
      "tldr": null,
      "slug": "printerinfoisdefault",
      "url": "https://electronjs.org/docs/api/printer-info#printerinfoisdefault",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:isDefault",
        "api:printerinfoisdefault",
        "api:PrinterInfo.isDefault",
        "doc:isDefault",
        "doc:printerinfoisdefault",
        "doc:PrinterInfo.isDefault"
      ]
    },
    {
      "objectID": "api-process-memory-info#processmemoryinforesidentset",
      "name": "residentSet",
      "description": "The amount of memory currently pinned to actual physical RAM in Kilobytes.",
      "required": true,
      "additionalTags": [
        "os_linux",
        "os_windows"
      ],
      "collection": false,
      "type": "Integer",
      "apiType": "properties",
      "fullSignature": "ProcessMemoryInfo.residentSet",
      "tldr": "The amount of memory currently pinned to actual physical RAM in Kilobytes.",
      "slug": "processmemoryinforesidentset",
      "url": "https://electronjs.org/docs/api/process-memory-info#processmemoryinforesidentset",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:residentSet",
        "api:processmemoryinforesidentset",
        "api:ProcessMemoryInfo.residentSet",
        "doc:residentSet",
        "doc:processmemoryinforesidentset",
        "doc:ProcessMemoryInfo.residentSet"
      ]
    },
    {
      "objectID": "api-process-memory-info#processmemoryinfoprivate",
      "name": "private",
      "description": "The amount of memory not shared by other processes, such as JS heap or HTML content in Kilobytes.",
      "required": true,
      "additionalTags": [],
      "collection": false,
      "type": "Integer",
      "apiType": "properties",
      "fullSignature": "ProcessMemoryInfo.private",
      "tldr": "The amount of memory not shared by other processes, such as JS heap or HTML content in Kilobytes.",
      "slug": "processmemoryinfoprivate",
      "url": "https://electronjs.org/docs/api/process-memory-info#processmemoryinfoprivate",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:private",
        "api:processmemoryinfoprivate",
        "api:ProcessMemoryInfo.private",
        "doc:private",
        "doc:processmemoryinfoprivate",
        "doc:ProcessMemoryInfo.private"
      ]
    },
    {
      "objectID": "api-process-memory-info#processmemoryinfoshared",
      "name": "shared",
      "description": "The amount of memory shared between processes, typically memory consumed by the Electron code itself in Kilobytes.",
      "required": true,
      "additionalTags": [],
      "collection": false,
      "type": "Integer",
      "apiType": "properties",
      "fullSignature": "ProcessMemoryInfo.shared",
      "tldr": "The amount of memory shared between processes, typically memory consumed by the Electron code itself in Kilobytes.",
      "slug": "processmemoryinfoshared",
      "url": "https://electronjs.org/docs/api/process-memory-info#processmemoryinfoshared",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:shared",
        "api:processmemoryinfoshared",
        "api:ProcessMemoryInfo.shared",
        "doc:shared",
        "doc:processmemoryinfoshared",
        "doc:ProcessMemoryInfo.shared"
      ]
    },
    {
      "objectID": "api-process-metric#processmetricpid",
      "name": "pid",
      "description": "Process id of the process.",
      "required": true,
      "additionalTags": [],
      "collection": false,
      "type": "Integer",
      "apiType": "properties",
      "fullSignature": "ProcessMetric.pid",
      "tldr": "Process id of the process.",
      "slug": "processmetricpid",
      "url": "https://electronjs.org/docs/api/process-metric#processmetricpid",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:pid",
        "api:processmetricpid",
        "api:ProcessMetric.pid",
        "doc:pid",
        "doc:processmetricpid",
        "doc:ProcessMetric.pid"
      ]
    },
    {
      "objectID": "api-process-metric#processmetrictype",
      "name": "type",
      "description": "Process type. One of the following values:",
      "required": true,
      "additionalTags": [],
      "collection": false,
      "type": "String",
      "possibleValues": [
        {
          "value": "Browser",
          "description": ""
        },
        {
          "value": "Tab",
          "description": ""
        },
        {
          "value": "Utility",
          "description": ""
        },
        {
          "value": "Zygote",
          "description": ""
        },
        {
          "value": "Sandbox helper",
          "description": ""
        },
        {
          "value": "GPU",
          "description": ""
        },
        {
          "value": "Pepper Plugin",
          "description": ""
        },
        {
          "value": "Pepper Plugin Broker",
          "description": ""
        },
        {
          "value": "Unknown",
          "description": ""
        }
      ],
      "apiType": "properties",
      "fullSignature": "ProcessMetric.type",
      "tldr": "Process type.",
      "slug": "processmetrictype",
      "url": "https://electronjs.org/docs/api/process-metric#processmetrictype",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:type",
        "api:processmetrictype",
        "api:ProcessMetric.type",
        "doc:type",
        "doc:processmetrictype",
        "doc:ProcessMetric.type"
      ]
    },
    {
      "objectID": "api-process-metric#processmetriccpu",
      "name": "cpu",
      "description": "CPU usage of the process.",
      "required": true,
      "additionalTags": [],
      "collection": false,
      "type": "CPUUsage",
      "apiType": "properties",
      "fullSignature": "ProcessMetric.cpu",
      "tldr": "CPU usage of the process.",
      "slug": "processmetriccpu",
      "url": "https://electronjs.org/docs/api/process-metric#processmetriccpu",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:cpu",
        "api:processmetriccpu",
        "api:ProcessMetric.cpu",
        "doc:cpu",
        "doc:processmetriccpu",
        "doc:ProcessMetric.cpu"
      ]
    },
    {
      "objectID": "api-process-metric#processmetriccreationtime",
      "name": "creationTime",
      "description": "Creation time for this process. The time is represented as number of milliseconds since epoch. Since the `pid` can be reused after a process dies, it is useful to use both the `pid` and the `creationTime` to uniquely identify a process.",
      "required": true,
      "additionalTags": [],
      "collection": false,
      "type": "Number",
      "apiType": "properties",
      "fullSignature": "ProcessMetric.creationTime",
      "tldr": "Creation time for this process.",
      "slug": "processmetriccreationtime",
      "url": "https://electronjs.org/docs/api/process-metric#processmetriccreationtime",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:creationTime",
        "api:processmetriccreationtime",
        "api:ProcessMetric.creationTime",
        "doc:creationTime",
        "doc:processmetriccreationtime",
        "doc:ProcessMetric.creationTime"
      ]
    },
    {
      "objectID": "api-process-metric#processmetricmemory",
      "name": "memory",
      "description": "Memory information for the process.",
      "required": true,
      "additionalTags": [],
      "collection": false,
      "type": "MemoryInfo",
      "apiType": "properties",
      "fullSignature": "ProcessMetric.memory",
      "tldr": "Memory information for the process.",
      "slug": "processmetricmemory",
      "url": "https://electronjs.org/docs/api/process-metric#processmetricmemory",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:memory",
        "api:processmetricmemory",
        "api:ProcessMetric.memory",
        "doc:memory",
        "doc:processmetricmemory",
        "doc:ProcessMetric.memory"
      ]
    },
    {
      "objectID": "api-process-metric#processmetricsandboxed",
      "name": "sandboxed",
      "description": "Whether the process is sandboxed on OS level.",
      "required": false,
      "additionalTags": [
        "os_macos",
        "os_windows"
      ],
      "collection": false,
      "type": "Boolean",
      "apiType": "properties",
      "fullSignature": "ProcessMetric.sandboxed",
      "tldr": "Whether the process is sandboxed on OS level.",
      "slug": "processmetricsandboxed",
      "url": "https://electronjs.org/docs/api/process-metric#processmetricsandboxed",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:sandboxed",
        "api:processmetricsandboxed",
        "api:ProcessMetric.sandboxed",
        "doc:sandboxed",
        "doc:processmetricsandboxed",
        "doc:ProcessMetric.sandboxed"
      ]
    },
    {
      "objectID": "api-process-metric#processmetricintegritylevel",
      "name": "integrityLevel",
      "description": "One of the following values:",
      "required": false,
      "additionalTags": [
        "os_windows"
      ],
      "collection": false,
      "type": "String",
      "possibleValues": [
        {
          "value": "untrusted",
          "description": ""
        },
        {
          "value": "low",
          "description": ""
        },
        {
          "value": "medium",
          "description": ""
        },
        {
          "value": "high",
          "description": ""
        },
        {
          "value": "unknown",
          "description": ""
        }
      ],
      "apiType": "properties",
      "fullSignature": "ProcessMetric.integrityLevel",
      "tldr": "One of the following values:.",
      "slug": "processmetricintegritylevel",
      "url": "https://electronjs.org/docs/api/process-metric#processmetricintegritylevel",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:integrityLevel",
        "api:processmetricintegritylevel",
        "api:ProcessMetric.integrityLevel",
        "doc:integrityLevel",
        "doc:processmetricintegritylevel",
        "doc:ProcessMetric.integrityLevel"
      ]
    },
    {
      "objectID": "api-product#productproductidentifier",
      "name": "productIdentifier",
      "description": "The string that identifies the product to the Apple App Store.",
      "required": true,
      "additionalTags": [],
      "collection": false,
      "type": "String",
      "possibleValues": null,
      "apiType": "properties",
      "fullSignature": "Product.productIdentifier",
      "tldr": "The string that identifies the product to the Apple App Store.",
      "slug": "productproductidentifier",
      "url": "https://electronjs.org/docs/api/product#productproductidentifier",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:productIdentifier",
        "api:productproductidentifier",
        "api:Product.productIdentifier",
        "doc:productIdentifier",
        "doc:productproductidentifier",
        "doc:Product.productIdentifier"
      ]
    },
    {
      "objectID": "api-product#productlocalizeddescription",
      "name": "localizedDescription",
      "description": "A description of the product.",
      "required": true,
      "additionalTags": [],
      "collection": false,
      "type": "String",
      "possibleValues": null,
      "apiType": "properties",
      "fullSignature": "Product.localizedDescription",
      "tldr": "A description of the product.",
      "slug": "productlocalizeddescription",
      "url": "https://electronjs.org/docs/api/product#productlocalizeddescription",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:localizedDescription",
        "api:productlocalizeddescription",
        "api:Product.localizedDescription",
        "doc:localizedDescription",
        "doc:productlocalizeddescription",
        "doc:Product.localizedDescription"
      ]
    },
    {
      "objectID": "api-product#productlocalizedtitle",
      "name": "localizedTitle",
      "description": "The name of the product.",
      "required": true,
      "additionalTags": [],
      "collection": false,
      "type": "String",
      "possibleValues": null,
      "apiType": "properties",
      "fullSignature": "Product.localizedTitle",
      "tldr": "The name of the product.",
      "slug": "productlocalizedtitle",
      "url": "https://electronjs.org/docs/api/product#productlocalizedtitle",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:localizedTitle",
        "api:productlocalizedtitle",
        "api:Product.localizedTitle",
        "doc:localizedTitle",
        "doc:productlocalizedtitle",
        "doc:Product.localizedTitle"
      ]
    },
    {
      "objectID": "api-product#productcontentversion",
      "name": "contentVersion",
      "description": "A string that identifies the version of the content.",
      "required": true,
      "additionalTags": [],
      "collection": false,
      "type": "String",
      "possibleValues": null,
      "apiType": "properties",
      "fullSignature": "Product.contentVersion",
      "tldr": "A string that identifies the version of the content.",
      "slug": "productcontentversion",
      "url": "https://electronjs.org/docs/api/product#productcontentversion",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:contentVersion",
        "api:productcontentversion",
        "api:Product.contentVersion",
        "doc:contentVersion",
        "doc:productcontentversion",
        "doc:Product.contentVersion"
      ]
    },
    {
      "objectID": "api-product#productcontentlengths",
      "name": "contentLengths",
      "description": "The total size of the content, in bytes.",
      "required": true,
      "additionalTags": [],
      "collection": true,
      "type": "Number",
      "apiType": "properties",
      "fullSignature": "Product.contentLengths",
      "tldr": "The total size of the content, in bytes.",
      "slug": "productcontentlengths",
      "url": "https://electronjs.org/docs/api/product#productcontentlengths",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:contentLengths",
        "api:productcontentlengths",
        "api:Product.contentLengths",
        "doc:contentLengths",
        "doc:productcontentlengths",
        "doc:Product.contentLengths"
      ]
    },
    {
      "objectID": "api-product#productprice",
      "name": "price",
      "description": "The cost of the product in the local currency.",
      "required": true,
      "additionalTags": [],
      "collection": false,
      "type": "Number",
      "apiType": "properties",
      "fullSignature": "Product.price",
      "tldr": "The cost of the product in the local currency.",
      "slug": "productprice",
      "url": "https://electronjs.org/docs/api/product#productprice",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:price",
        "api:productprice",
        "api:Product.price",
        "doc:price",
        "doc:productprice",
        "doc:Product.price"
      ]
    },
    {
      "objectID": "api-product#productformattedprice",
      "name": "formattedPrice",
      "description": "The locale formatted price of the product.",
      "required": true,
      "additionalTags": [],
      "collection": false,
      "type": "String",
      "possibleValues": null,
      "apiType": "properties",
      "fullSignature": "Product.formattedPrice",
      "tldr": "The locale formatted price of the product.",
      "slug": "productformattedprice",
      "url": "https://electronjs.org/docs/api/product#productformattedprice",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:formattedPrice",
        "api:productformattedprice",
        "api:Product.formattedPrice",
        "doc:formattedPrice",
        "doc:productformattedprice",
        "doc:Product.formattedPrice"
      ]
    },
    {
      "objectID": "api-product#productisdownloadable",
      "name": "isDownloadable",
      "description": "A Boolean value that indicates whether the App Store has downloadable content for this product. `true` if at least one file has been associated with the product.",
      "required": true,
      "additionalTags": [],
      "collection": false,
      "type": "Boolean",
      "apiType": "properties",
      "fullSignature": "Product.isDownloadable",
      "tldr": "A Boolean value that indicates whether the App Store has downloadable content for this product.",
      "slug": "productisdownloadable",
      "url": "https://electronjs.org/docs/api/product#productisdownloadable",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:isDownloadable",
        "api:productisdownloadable",
        "api:Product.isDownloadable",
        "doc:isDownloadable",
        "doc:productisdownloadable",
        "doc:Product.isDownloadable"
      ]
    },
    {
      "objectID": "api-protocol-request#protocolrequesturl",
      "name": "url",
      "description": "",
      "required": true,
      "additionalTags": [],
      "collection": false,
      "type": "String",
      "possibleValues": null,
      "apiType": "properties",
      "fullSignature": "ProtocolRequest.url",
      "tldr": null,
      "slug": "protocolrequesturl",
      "url": "https://electronjs.org/docs/api/protocol-request#protocolrequesturl",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:url",
        "api:protocolrequesturl",
        "api:ProtocolRequest.url",
        "doc:url",
        "doc:protocolrequesturl",
        "doc:ProtocolRequest.url"
      ]
    },
    {
      "objectID": "api-protocol-request#protocolrequestreferrer",
      "name": "referrer",
      "description": "",
      "required": true,
      "additionalTags": [],
      "collection": false,
      "type": "String",
      "possibleValues": null,
      "apiType": "properties",
      "fullSignature": "ProtocolRequest.referrer",
      "tldr": null,
      "slug": "protocolrequestreferrer",
      "url": "https://electronjs.org/docs/api/protocol-request#protocolrequestreferrer",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:referrer",
        "api:protocolrequestreferrer",
        "api:ProtocolRequest.referrer",
        "doc:referrer",
        "doc:protocolrequestreferrer",
        "doc:ProtocolRequest.referrer"
      ]
    },
    {
      "objectID": "api-protocol-request#protocolrequestmethod",
      "name": "method",
      "description": "",
      "required": true,
      "additionalTags": [],
      "collection": false,
      "type": "String",
      "possibleValues": null,
      "apiType": "properties",
      "fullSignature": "ProtocolRequest.method",
      "tldr": null,
      "slug": "protocolrequestmethod",
      "url": "https://electronjs.org/docs/api/protocol-request#protocolrequestmethod",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:method",
        "api:protocolrequestmethod",
        "api:ProtocolRequest.method",
        "doc:method",
        "doc:protocolrequestmethod",
        "doc:ProtocolRequest.method"
      ]
    },
    {
      "objectID": "api-protocol-request#protocolrequestuploaddata",
      "name": "uploadData",
      "description": "",
      "required": false,
      "additionalTags": [],
      "collection": true,
      "type": "UploadData",
      "apiType": "properties",
      "fullSignature": "ProtocolRequest.uploadData",
      "tldr": null,
      "slug": "protocolrequestuploaddata",
      "url": "https://electronjs.org/docs/api/protocol-request#protocolrequestuploaddata",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:uploadData",
        "api:protocolrequestuploaddata",
        "api:ProtocolRequest.uploadData",
        "doc:uploadData",
        "doc:protocolrequestuploaddata",
        "doc:ProtocolRequest.uploadData"
      ]
    },
    {
      "objectID": "api-protocol-response-upload-data#protocolresponseuploaddatacontenttype",
      "name": "contentType",
      "description": "MIME type of the content.",
      "required": true,
      "additionalTags": [],
      "collection": false,
      "type": "String",
      "possibleValues": null,
      "apiType": "properties",
      "fullSignature": "ProtocolResponseUploadData.contentType",
      "tldr": "MIME type of the content.",
      "slug": "protocolresponseuploaddatacontenttype",
      "url": "https://electronjs.org/docs/api/protocol-response-upload-data#protocolresponseuploaddatacontenttype",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:contentType",
        "api:protocolresponseuploaddatacontenttype",
        "api:ProtocolResponseUploadData.contentType",
        "doc:contentType",
        "doc:protocolresponseuploaddatacontenttype",
        "doc:ProtocolResponseUploadData.contentType"
      ]
    },
    {
      "objectID": "api-protocol-response-upload-data#protocolresponseuploaddatadata",
      "name": "data",
      "description": "Content to be sent.",
      "required": true,
      "additionalTags": [],
      "collection": false,
      "type": [
        {
          "collection": false,
          "type": "String",
          "possibleValues": null
        },
        {
          "collection": false,
          "type": "Buffer"
        }
      ],
      "apiType": "properties",
      "fullSignature": "ProtocolResponseUploadData.data",
      "tldr": "Content to be sent.",
      "slug": "protocolresponseuploaddatadata",
      "url": "https://electronjs.org/docs/api/protocol-response-upload-data#protocolresponseuploaddatadata",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:data",
        "api:protocolresponseuploaddatadata",
        "api:ProtocolResponseUploadData.data",
        "doc:data",
        "doc:protocolresponseuploaddatadata",
        "doc:ProtocolResponseUploadData.data"
      ]
    },
    {
      "objectID": "api-protocol-response#protocolresponseerror",
      "name": "error",
      "description": "When assigned, the `request` will fail with the `error` number . For the available error numbers you can use, please see the net error list.",
      "required": false,
      "additionalTags": [],
      "collection": false,
      "type": "Integer",
      "apiType": "properties",
      "fullSignature": "ProtocolResponse.error",
      "tldr": "When assigned, the `request` will fail with the `error` number .",
      "slug": "protocolresponseerror",
      "url": "https://electronjs.org/docs/api/protocol-response#protocolresponseerror",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:error",
        "api:protocolresponseerror",
        "api:ProtocolResponse.error",
        "doc:error",
        "doc:protocolresponseerror",
        "doc:ProtocolResponse.error"
      ]
    },
    {
      "objectID": "api-protocol-response#protocolresponsestatuscode",
      "name": "statusCode",
      "description": "The HTTP response code, default is 200.",
      "required": false,
      "additionalTags": [],
      "collection": false,
      "type": "Number",
      "apiType": "properties",
      "fullSignature": "ProtocolResponse.statusCode",
      "tldr": "The HTTP response code, default is 200.",
      "slug": "protocolresponsestatuscode",
      "url": "https://electronjs.org/docs/api/protocol-response#protocolresponsestatuscode",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:statusCode",
        "api:protocolresponsestatuscode",
        "api:ProtocolResponse.statusCode",
        "doc:statusCode",
        "doc:protocolresponsestatuscode",
        "doc:ProtocolResponse.statusCode"
      ]
    },
    {
      "objectID": "api-protocol-response#protocolresponsecharset",
      "name": "charset",
      "description": "The charset of response body, default is `\"utf-8\"`.",
      "required": false,
      "additionalTags": [],
      "collection": false,
      "type": "String",
      "possibleValues": null,
      "apiType": "properties",
      "fullSignature": "ProtocolResponse.charset",
      "tldr": "The charset of response body, default is `\"utf-8\"`.",
      "slug": "protocolresponsecharset",
      "url": "https://electronjs.org/docs/api/protocol-response#protocolresponsecharset",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:charset",
        "api:protocolresponsecharset",
        "api:ProtocolResponse.charset",
        "doc:charset",
        "doc:protocolresponsecharset",
        "doc:ProtocolResponse.charset"
      ]
    },
    {
      "objectID": "api-protocol-response#protocolresponsemimetype",
      "name": "mimeType",
      "description": "The MIME type of response body, default is `\"text/html\"`. Setting `mimeType` would implicitly set the `content-type` header in response, but if `content-type` is already set in `headers`, the `mimeType` would be ignored.",
      "required": false,
      "additionalTags": [],
      "collection": false,
      "type": "String",
      "possibleValues": null,
      "apiType": "properties",
      "fullSignature": "ProtocolResponse.mimeType",
      "tldr": "The MIME type of response body, default is `\"text/html\"`.",
      "slug": "protocolresponsemimetype",
      "url": "https://electronjs.org/docs/api/protocol-response#protocolresponsemimetype",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:mimeType",
        "api:protocolresponsemimetype",
        "api:ProtocolResponse.mimeType",
        "doc:mimeType",
        "doc:protocolresponsemimetype",
        "doc:ProtocolResponse.mimeType"
      ]
    },
    {
      "objectID": "api-protocol-response#protocolresponseheaders",
      "name": "headers",
      "description": "An object containing the response headers. The keys must be String, and values must be either String or Array of String.",
      "required": false,
      "additionalTags": [],
      "collection": false,
      "type": "Record",
      "innerTypes": [
        {
          "collection": false,
          "type": "string"
        },
        {
          "collection": false,
          "type": [
            {
              "collection": false,
              "type": "string"
            },
            {
              "collection": true,
              "type": "string"
            }
          ]
        }
      ],
      "apiType": "properties",
      "fullSignature": "ProtocolResponse.headers",
      "tldr": "An object containing the response headers.",
      "slug": "protocolresponseheaders",
      "url": "https://electronjs.org/docs/api/protocol-response#protocolresponseheaders",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:headers",
        "api:protocolresponseheaders",
        "api:ProtocolResponse.headers",
        "doc:headers",
        "doc:protocolresponseheaders",
        "doc:ProtocolResponse.headers"
      ]
    },
    {
      "objectID": "api-protocol-response#protocolresponsedata",
      "name": "data",
      "description": "The response body. When returning stream as response, this is a Node.js readable stream representing the response body. When returning `Buffer` as response, this is a `Buffer`. When returning `String` as response, this is a `String`. This is ignored for other types of responses.",
      "required": false,
      "additionalTags": [],
      "collection": false,
      "type": [
        {
          "collection": false,
          "type": "Buffer"
        },
        {
          "collection": false,
          "type": "String",
          "possibleValues": null
        },
        {
          "collection": false,
          "type": "ReadableStream"
        }
      ],
      "apiType": "properties",
      "fullSignature": "ProtocolResponse.data",
      "tldr": "The response body.",
      "slug": "protocolresponsedata",
      "url": "https://electronjs.org/docs/api/protocol-response#protocolresponsedata",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:data",
        "api:protocolresponsedata",
        "api:ProtocolResponse.data",
        "doc:data",
        "doc:protocolresponsedata",
        "doc:ProtocolResponse.data"
      ]
    },
    {
      "objectID": "api-protocol-response#protocolresponsepath",
      "name": "path",
      "description": "Path to the file which would be sent as response body. This is only used for file responses.",
      "required": false,
      "additionalTags": [],
      "collection": false,
      "type": "String",
      "possibleValues": null,
      "apiType": "properties",
      "fullSignature": "ProtocolResponse.path",
      "tldr": "Path to the file which would be sent as response body.",
      "slug": "protocolresponsepath",
      "url": "https://electronjs.org/docs/api/protocol-response#protocolresponsepath",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:path",
        "api:protocolresponsepath",
        "api:ProtocolResponse.path",
        "doc:path",
        "doc:protocolresponsepath",
        "doc:ProtocolResponse.path"
      ]
    },
    {
      "objectID": "api-protocol-response#protocolresponseurl",
      "name": "url",
      "description": "Download the `url` and pipe the result as response body. This is only used for URL responses.",
      "required": false,
      "additionalTags": [],
      "collection": false,
      "type": "String",
      "possibleValues": null,
      "apiType": "properties",
      "fullSignature": "ProtocolResponse.url",
      "tldr": "Download the `url` and pipe the result as response body.",
      "slug": "protocolresponseurl",
      "url": "https://electronjs.org/docs/api/protocol-response#protocolresponseurl",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:url",
        "api:protocolresponseurl",
        "api:ProtocolResponse.url",
        "doc:url",
        "doc:protocolresponseurl",
        "doc:ProtocolResponse.url"
      ]
    },
    {
      "objectID": "api-protocol-response#protocolresponsereferrer",
      "name": "referrer",
      "description": "The `referrer` URL. This is only used for file and URL responses.",
      "required": false,
      "additionalTags": [],
      "collection": false,
      "type": "String",
      "possibleValues": null,
      "apiType": "properties",
      "fullSignature": "ProtocolResponse.referrer",
      "tldr": "The `referrer` URL.",
      "slug": "protocolresponsereferrer",
      "url": "https://electronjs.org/docs/api/protocol-response#protocolresponsereferrer",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:referrer",
        "api:protocolresponsereferrer",
        "api:ProtocolResponse.referrer",
        "doc:referrer",
        "doc:protocolresponsereferrer",
        "doc:ProtocolResponse.referrer"
      ]
    },
    {
      "objectID": "api-protocol-response#protocolresponsemethod",
      "name": "method",
      "description": "The HTTP `method`. This is only used for file and URL responses.",
      "required": false,
      "additionalTags": [],
      "collection": false,
      "type": "String",
      "possibleValues": null,
      "apiType": "properties",
      "fullSignature": "ProtocolResponse.method",
      "tldr": "The HTTP `method`.",
      "slug": "protocolresponsemethod",
      "url": "https://electronjs.org/docs/api/protocol-response#protocolresponsemethod",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:method",
        "api:protocolresponsemethod",
        "api:ProtocolResponse.method",
        "doc:method",
        "doc:protocolresponsemethod",
        "doc:ProtocolResponse.method"
      ]
    },
    {
      "objectID": "api-protocol-response#protocolresponsesession",
      "name": "session",
      "description": "The session used for requesting URL, by default the HTTP request will reuse the current session. Setting `session` to `null` would use a random independent session. This is only used for URL responses.",
      "required": false,
      "additionalTags": [],
      "collection": false,
      "type": "Session",
      "apiType": "properties",
      "fullSignature": "ProtocolResponse.session",
      "tldr": "The session used for requesting URL, by default the HTTP request will reuse the current session.",
      "slug": "protocolresponsesession",
      "url": "https://electronjs.org/docs/api/protocol-response#protocolresponsesession",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:session",
        "api:protocolresponsesession",
        "api:ProtocolResponse.session",
        "doc:session",
        "doc:protocolresponsesession",
        "doc:ProtocolResponse.session"
      ]
    },
    {
      "objectID": "api-protocol-response#protocolresponseuploaddata",
      "name": "uploadData",
      "description": "The data used as upload data. This is only used for URL responses when `method` is `\"POST\"`.",
      "required": false,
      "additionalTags": [],
      "collection": false,
      "type": "ProtocolResponseUploadData",
      "apiType": "properties",
      "fullSignature": "ProtocolResponse.uploadData",
      "tldr": "The data used as upload data.",
      "slug": "protocolresponseuploaddata",
      "url": "https://electronjs.org/docs/api/protocol-response#protocolresponseuploaddata",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:uploadData",
        "api:protocolresponseuploaddata",
        "api:ProtocolResponse.uploadData",
        "doc:uploadData",
        "doc:protocolresponseuploaddata",
        "doc:ProtocolResponse.uploadData"
      ]
    },
    {
      "objectID": "api-rectangle#rectanglex",
      "name": "x",
      "description": "The x coordinate of the origin of the rectangle (must be an integer).",
      "required": true,
      "additionalTags": [],
      "collection": false,
      "type": "Number",
      "apiType": "properties",
      "fullSignature": "Rectangle.x",
      "tldr": "The x coordinate of the origin of the rectangle (must be an integer).",
      "slug": "rectanglex",
      "url": "https://electronjs.org/docs/api/rectangle#rectanglex",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:x",
        "api:rectanglex",
        "api:Rectangle.x",
        "doc:x",
        "doc:rectanglex",
        "doc:Rectangle.x"
      ]
    },
    {
      "objectID": "api-rectangle#rectangley",
      "name": "y",
      "description": "The y coordinate of the origin of the rectangle (must be an integer).",
      "required": true,
      "additionalTags": [],
      "collection": false,
      "type": "Number",
      "apiType": "properties",
      "fullSignature": "Rectangle.y",
      "tldr": "The y coordinate of the origin of the rectangle (must be an integer).",
      "slug": "rectangley",
      "url": "https://electronjs.org/docs/api/rectangle#rectangley",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:y",
        "api:rectangley",
        "api:Rectangle.y",
        "doc:y",
        "doc:rectangley",
        "doc:Rectangle.y"
      ]
    },
    {
      "objectID": "api-rectangle#rectanglewidth",
      "name": "width",
      "description": "The width of the rectangle (must be an integer).",
      "required": true,
      "additionalTags": [],
      "collection": false,
      "type": "Number",
      "apiType": "properties",
      "fullSignature": "Rectangle.width",
      "tldr": "The width of the rectangle (must be an integer).",
      "slug": "rectanglewidth",
      "url": "https://electronjs.org/docs/api/rectangle#rectanglewidth",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:width",
        "api:rectanglewidth",
        "api:Rectangle.width",
        "doc:width",
        "doc:rectanglewidth",
        "doc:Rectangle.width"
      ]
    },
    {
      "objectID": "api-rectangle#rectangleheight",
      "name": "height",
      "description": "The height of the rectangle (must be an integer).",
      "required": true,
      "additionalTags": [],
      "collection": false,
      "type": "Number",
      "apiType": "properties",
      "fullSignature": "Rectangle.height",
      "tldr": "The height of the rectangle (must be an integer).",
      "slug": "rectangleheight",
      "url": "https://electronjs.org/docs/api/rectangle#rectangleheight",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:height",
        "api:rectangleheight",
        "api:Rectangle.height",
        "doc:height",
        "doc:rectangleheight",
        "doc:Rectangle.height"
      ]
    },
    {
      "objectID": "api-referrer#referrerurl",
      "name": "url",
      "description": "HTTP Referrer URL.",
      "required": true,
      "additionalTags": [],
      "collection": false,
      "type": "String",
      "possibleValues": null,
      "apiType": "properties",
      "fullSignature": "Referrer.url",
      "tldr": "HTTP Referrer URL.",
      "slug": "referrerurl",
      "url": "https://electronjs.org/docs/api/referrer#referrerurl",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:url",
        "api:referrerurl",
        "api:Referrer.url",
        "doc:url",
        "doc:referrerurl",
        "doc:Referrer.url"
      ]
    },
    {
      "objectID": "api-referrer#referrerpolicy",
      "name": "policy",
      "description": "Can be `default`, `unsafe-url`, `no-referrer-when-downgrade`, `no-referrer`, `origin`, `strict-origin-when-cross-origin`, `same-origin` or `strict-origin`. See the Referrer-Policy spec for more details on the meaning of these values.",
      "required": true,
      "additionalTags": [],
      "collection": false,
      "type": "String",
      "possibleValues": [
        {
          "value": "default",
          "description": ""
        },
        {
          "value": "unsafe-url",
          "description": ""
        },
        {
          "value": "no-referrer-when-downgrade",
          "description": ""
        },
        {
          "value": "no-referrer",
          "description": ""
        },
        {
          "value": "origin",
          "description": ""
        },
        {
          "value": "strict-origin-when-cross-origin",
          "description": ""
        },
        {
          "value": "same-origin",
          "description": ""
        },
        {
          "value": "strict-origin",
          "description": ""
        }
      ],
      "apiType": "properties",
      "fullSignature": "Referrer.policy",
      "tldr": "Can be `default`, `unsafe-url`, `no-referrer-when-downgrade`, `no-referrer`, `origin`, `strict-origin-when-cross-origin`, `same-origin` or `strict-origin`.",
      "slug": "referrerpolicy",
      "url": "https://electronjs.org/docs/api/referrer#referrerpolicy",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:policy",
        "api:referrerpolicy",
        "api:Referrer.policy",
        "doc:policy",
        "doc:referrerpolicy",
        "doc:Referrer.policy"
      ]
    },
    {
      "objectID": "api-remove-client-certificate#removeclientcertificatetype",
      "name": "type",
      "description": "`clientCertificate`.",
      "required": true,
      "additionalTags": [],
      "collection": false,
      "type": "String",
      "possibleValues": null,
      "apiType": "properties",
      "fullSignature": "RemoveClientCertificate.type",
      "tldr": "`clientCertificate`.",
      "slug": "removeclientcertificatetype",
      "url": "https://electronjs.org/docs/api/remove-client-certificate#removeclientcertificatetype",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:type",
        "api:removeclientcertificatetype",
        "api:RemoveClientCertificate.type",
        "doc:type",
        "doc:removeclientcertificatetype",
        "doc:RemoveClientCertificate.type"
      ]
    },
    {
      "objectID": "api-remove-client-certificate#removeclientcertificateorigin",
      "name": "origin",
      "description": "Origin of the server whose associated client certificate must be removed from the cache.",
      "required": true,
      "additionalTags": [],
      "collection": false,
      "type": "String",
      "possibleValues": null,
      "apiType": "properties",
      "fullSignature": "RemoveClientCertificate.origin",
      "tldr": "Origin of the server whose associated client certificate must be removed from the cache.",
      "slug": "removeclientcertificateorigin",
      "url": "https://electronjs.org/docs/api/remove-client-certificate#removeclientcertificateorigin",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:origin",
        "api:removeclientcertificateorigin",
        "api:RemoveClientCertificate.origin",
        "doc:origin",
        "doc:removeclientcertificateorigin",
        "doc:RemoveClientCertificate.origin"
      ]
    },
    {
      "objectID": "api-remove-password#removepasswordtype",
      "name": "type",
      "description": "`password`.",
      "required": true,
      "additionalTags": [],
      "collection": false,
      "type": "String",
      "possibleValues": null,
      "apiType": "properties",
      "fullSignature": "RemovePassword.type",
      "tldr": "`password`.",
      "slug": "removepasswordtype",
      "url": "https://electronjs.org/docs/api/remove-password#removepasswordtype",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:type",
        "api:removepasswordtype",
        "api:RemovePassword.type",
        "doc:type",
        "doc:removepasswordtype",
        "doc:RemovePassword.type"
      ]
    },
    {
      "objectID": "api-remove-password#removepasswordorigin",
      "name": "origin",
      "description": "When provided, the authentication info related to the origin will only be removed otherwise the entire cache will be cleared.",
      "required": false,
      "additionalTags": [],
      "collection": false,
      "type": "String",
      "possibleValues": null,
      "apiType": "properties",
      "fullSignature": "RemovePassword.origin",
      "tldr": "When provided, the authentication info related to the origin will only be removed otherwise the entire cache will be cleared.",
      "slug": "removepasswordorigin",
      "url": "https://electronjs.org/docs/api/remove-password#removepasswordorigin",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:origin",
        "api:removepasswordorigin",
        "api:RemovePassword.origin",
        "doc:origin",
        "doc:removepasswordorigin",
        "doc:RemovePassword.origin"
      ]
    },
    {
      "objectID": "api-remove-password#removepasswordscheme",
      "name": "scheme",
      "description": "Scheme of the authentication. Can be `basic`, `digest`, `ntlm`, `negotiate`. Must be provided if removing by `origin`.",
      "required": false,
      "additionalTags": [],
      "collection": false,
      "type": "String",
      "possibleValues": [
        {
          "value": "basic",
          "description": ""
        },
        {
          "value": "digest",
          "description": ""
        },
        {
          "value": "ntlm",
          "description": ""
        },
        {
          "value": "negotiate",
          "description": ""
        }
      ],
      "apiType": "properties",
      "fullSignature": "RemovePassword.scheme",
      "tldr": "Scheme of the authentication.",
      "slug": "removepasswordscheme",
      "url": "https://electronjs.org/docs/api/remove-password#removepasswordscheme",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:scheme",
        "api:removepasswordscheme",
        "api:RemovePassword.scheme",
        "doc:scheme",
        "doc:removepasswordscheme",
        "doc:RemovePassword.scheme"
      ]
    },
    {
      "objectID": "api-remove-password#removepasswordrealm",
      "name": "realm",
      "description": "Realm of the authentication. Must be provided if removing by `origin`.",
      "required": false,
      "additionalTags": [],
      "collection": false,
      "type": "String",
      "possibleValues": null,
      "apiType": "properties",
      "fullSignature": "RemovePassword.realm",
      "tldr": "Realm of the authentication.",
      "slug": "removepasswordrealm",
      "url": "https://electronjs.org/docs/api/remove-password#removepasswordrealm",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:realm",
        "api:removepasswordrealm",
        "api:RemovePassword.realm",
        "doc:realm",
        "doc:removepasswordrealm",
        "doc:RemovePassword.realm"
      ]
    },
    {
      "objectID": "api-remove-password#removepasswordusername",
      "name": "username",
      "description": "Credentials of the authentication. Must be provided if removing by `origin`.",
      "required": false,
      "additionalTags": [],
      "collection": false,
      "type": "String",
      "possibleValues": null,
      "apiType": "properties",
      "fullSignature": "RemovePassword.username",
      "tldr": "Credentials of the authentication.",
      "slug": "removepasswordusername",
      "url": "https://electronjs.org/docs/api/remove-password#removepasswordusername",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:username",
        "api:removepasswordusername",
        "api:RemovePassword.username",
        "doc:username",
        "doc:removepasswordusername",
        "doc:RemovePassword.username"
      ]
    },
    {
      "objectID": "api-remove-password#removepasswordpassword",
      "name": "password",
      "description": "Credentials of the authentication. Must be provided if removing by `origin`.",
      "required": false,
      "additionalTags": [],
      "collection": false,
      "type": "String",
      "possibleValues": null,
      "apiType": "properties",
      "fullSignature": "RemovePassword.password",
      "tldr": "Credentials of the authentication.",
      "slug": "removepasswordpassword",
      "url": "https://electronjs.org/docs/api/remove-password#removepasswordpassword",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:password",
        "api:removepasswordpassword",
        "api:RemovePassword.password",
        "doc:password",
        "doc:removepasswordpassword",
        "doc:RemovePassword.password"
      ]
    },
    {
      "objectID": "api-scrubber-item#scrubberitemlabel",
      "name": "label",
      "description": "The text to appear in this item.",
      "required": false,
      "additionalTags": [],
      "collection": false,
      "type": "String",
      "possibleValues": null,
      "apiType": "properties",
      "fullSignature": "ScrubberItem.label",
      "tldr": "The text to appear in this item.",
      "slug": "scrubberitemlabel",
      "url": "https://electronjs.org/docs/api/scrubber-item#scrubberitemlabel",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:label",
        "api:scrubberitemlabel",
        "api:ScrubberItem.label",
        "doc:label",
        "doc:scrubberitemlabel",
        "doc:ScrubberItem.label"
      ]
    },
    {
      "objectID": "api-scrubber-item#scrubberitemicon",
      "name": "icon",
      "description": "The image to appear in this item.",
      "required": false,
      "additionalTags": [],
      "collection": false,
      "type": "NativeImage",
      "apiType": "properties",
      "fullSignature": "ScrubberItem.icon",
      "tldr": "The image to appear in this item.",
      "slug": "scrubberitemicon",
      "url": "https://electronjs.org/docs/api/scrubber-item#scrubberitemicon",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:icon",
        "api:scrubberitemicon",
        "api:ScrubberItem.icon",
        "doc:icon",
        "doc:scrubberitemicon",
        "doc:ScrubberItem.icon"
      ]
    },
    {
      "objectID": "api-segmented-control-segment#segmentedcontrolsegmentlabel",
      "name": "label",
      "description": "The text to appear in this segment.",
      "required": false,
      "additionalTags": [],
      "collection": false,
      "type": "String",
      "possibleValues": null,
      "apiType": "properties",
      "fullSignature": "SegmentedControlSegment.label",
      "tldr": "The text to appear in this segment.",
      "slug": "segmentedcontrolsegmentlabel",
      "url": "https://electronjs.org/docs/api/segmented-control-segment#segmentedcontrolsegmentlabel",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:label",
        "api:segmentedcontrolsegmentlabel",
        "api:SegmentedControlSegment.label",
        "doc:label",
        "doc:segmentedcontrolsegmentlabel",
        "doc:SegmentedControlSegment.label"
      ]
    },
    {
      "objectID": "api-segmented-control-segment#segmentedcontrolsegmenticon",
      "name": "icon",
      "description": "The image to appear in this segment.",
      "required": false,
      "additionalTags": [],
      "collection": false,
      "type": "NativeImage",
      "apiType": "properties",
      "fullSignature": "SegmentedControlSegment.icon",
      "tldr": "The image to appear in this segment.",
      "slug": "segmentedcontrolsegmenticon",
      "url": "https://electronjs.org/docs/api/segmented-control-segment#segmentedcontrolsegmenticon",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:icon",
        "api:segmentedcontrolsegmenticon",
        "api:SegmentedControlSegment.icon",
        "doc:icon",
        "doc:segmentedcontrolsegmenticon",
        "doc:SegmentedControlSegment.icon"
      ]
    },
    {
      "objectID": "api-segmented-control-segment#segmentedcontrolsegmentenabled",
      "name": "enabled",
      "description": "Whether this segment is selectable. Default: true.",
      "required": false,
      "additionalTags": [],
      "collection": false,
      "type": "Boolean",
      "apiType": "properties",
      "fullSignature": "SegmentedControlSegment.enabled",
      "tldr": "Whether this segment is selectable.",
      "slug": "segmentedcontrolsegmentenabled",
      "url": "https://electronjs.org/docs/api/segmented-control-segment#segmentedcontrolsegmentenabled",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:enabled",
        "api:segmentedcontrolsegmentenabled",
        "api:SegmentedControlSegment.enabled",
        "doc:enabled",
        "doc:segmentedcontrolsegmentenabled",
        "doc:SegmentedControlSegment.enabled"
      ]
    },
    {
      "objectID": "api-shortcut-details#shortcutdetailstarget",
      "name": "target",
      "description": "The target to launch from this shortcut.",
      "required": true,
      "additionalTags": [],
      "collection": false,
      "type": "String",
      "possibleValues": null,
      "apiType": "properties",
      "fullSignature": "ShortcutDetails.target",
      "tldr": "The target to launch from this shortcut.",
      "slug": "shortcutdetailstarget",
      "url": "https://electronjs.org/docs/api/shortcut-details#shortcutdetailstarget",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:target",
        "api:shortcutdetailstarget",
        "api:ShortcutDetails.target",
        "doc:target",
        "doc:shortcutdetailstarget",
        "doc:ShortcutDetails.target"
      ]
    },
    {
      "objectID": "api-shortcut-details#shortcutdetailscwd",
      "name": "cwd",
      "description": "The working directory. Default is empty.",
      "required": false,
      "additionalTags": [],
      "collection": false,
      "type": "String",
      "possibleValues": null,
      "apiType": "properties",
      "fullSignature": "ShortcutDetails.cwd",
      "tldr": "The working directory.",
      "slug": "shortcutdetailscwd",
      "url": "https://electronjs.org/docs/api/shortcut-details#shortcutdetailscwd",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:cwd",
        "api:shortcutdetailscwd",
        "api:ShortcutDetails.cwd",
        "doc:cwd",
        "doc:shortcutdetailscwd",
        "doc:ShortcutDetails.cwd"
      ]
    },
    {
      "objectID": "api-shortcut-details#shortcutdetailsargs",
      "name": "args",
      "description": "The arguments to be applied to `target` when launching from this shortcut. Default is empty.",
      "required": false,
      "additionalTags": [],
      "collection": false,
      "type": "String",
      "possibleValues": null,
      "apiType": "properties",
      "fullSignature": "ShortcutDetails.args",
      "tldr": "The arguments to be applied to `target` when launching from this shortcut.",
      "slug": "shortcutdetailsargs",
      "url": "https://electronjs.org/docs/api/shortcut-details#shortcutdetailsargs",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:args",
        "api:shortcutdetailsargs",
        "api:ShortcutDetails.args",
        "doc:args",
        "doc:shortcutdetailsargs",
        "doc:ShortcutDetails.args"
      ]
    },
    {
      "objectID": "api-shortcut-details#shortcutdetailsdescription",
      "name": "description",
      "description": "The description of the shortcut. Default is empty.",
      "required": false,
      "additionalTags": [],
      "collection": false,
      "type": "String",
      "possibleValues": null,
      "apiType": "properties",
      "fullSignature": "ShortcutDetails.description",
      "tldr": "The description of the shortcut.",
      "slug": "shortcutdetailsdescription",
      "url": "https://electronjs.org/docs/api/shortcut-details#shortcutdetailsdescription",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:description",
        "api:shortcutdetailsdescription",
        "api:ShortcutDetails.description",
        "doc:description",
        "doc:shortcutdetailsdescription",
        "doc:ShortcutDetails.description"
      ]
    },
    {
      "objectID": "api-shortcut-details#shortcutdetailsicon",
      "name": "icon",
      "description": "The path to the icon, can be a DLL or EXE. `icon` and `iconIndex` have to be set together. Default is empty, which uses the target's icon.",
      "required": false,
      "additionalTags": [],
      "collection": false,
      "type": "String",
      "possibleValues": null,
      "apiType": "properties",
      "fullSignature": "ShortcutDetails.icon",
      "tldr": "The path to the icon, can be a DLL or EXE.",
      "slug": "shortcutdetailsicon",
      "url": "https://electronjs.org/docs/api/shortcut-details#shortcutdetailsicon",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:icon",
        "api:shortcutdetailsicon",
        "api:ShortcutDetails.icon",
        "doc:icon",
        "doc:shortcutdetailsicon",
        "doc:ShortcutDetails.icon"
      ]
    },
    {
      "objectID": "api-shortcut-details#shortcutdetailsiconindex",
      "name": "iconIndex",
      "description": "The resource ID of icon when `icon` is a DLL or EXE. Default is 0.",
      "required": false,
      "additionalTags": [],
      "collection": false,
      "type": "Number",
      "apiType": "properties",
      "fullSignature": "ShortcutDetails.iconIndex",
      "tldr": "The resource ID of icon when `icon` is a DLL or EXE.",
      "slug": "shortcutdetailsiconindex",
      "url": "https://electronjs.org/docs/api/shortcut-details#shortcutdetailsiconindex",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:iconIndex",
        "api:shortcutdetailsiconindex",
        "api:ShortcutDetails.iconIndex",
        "doc:iconIndex",
        "doc:shortcutdetailsiconindex",
        "doc:ShortcutDetails.iconIndex"
      ]
    },
    {
      "objectID": "api-shortcut-details#shortcutdetailsappusermodelid",
      "name": "appUserModelId",
      "description": "The Application User Model ID. Default is empty.",
      "required": false,
      "additionalTags": [],
      "collection": false,
      "type": "String",
      "possibleValues": null,
      "apiType": "properties",
      "fullSignature": "ShortcutDetails.appUserModelId",
      "tldr": "The Application User Model ID.",
      "slug": "shortcutdetailsappusermodelid",
      "url": "https://electronjs.org/docs/api/shortcut-details#shortcutdetailsappusermodelid",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:appUserModelId",
        "api:shortcutdetailsappusermodelid",
        "api:ShortcutDetails.appUserModelId",
        "doc:appUserModelId",
        "doc:shortcutdetailsappusermodelid",
        "doc:ShortcutDetails.appUserModelId"
      ]
    },
    {
      "objectID": "api-size#sizewidth",
      "name": "width",
      "description": "",
      "required": true,
      "additionalTags": [],
      "collection": false,
      "type": "Number",
      "apiType": "properties",
      "fullSignature": "Size.width",
      "tldr": null,
      "slug": "sizewidth",
      "url": "https://electronjs.org/docs/api/size#sizewidth",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:width",
        "api:sizewidth",
        "api:Size.width",
        "doc:width",
        "doc:sizewidth",
        "doc:Size.width"
      ]
    },
    {
      "objectID": "api-size#sizeheight",
      "name": "height",
      "description": "",
      "required": true,
      "additionalTags": [],
      "collection": false,
      "type": "Number",
      "apiType": "properties",
      "fullSignature": "Size.height",
      "tldr": null,
      "slug": "sizeheight",
      "url": "https://electronjs.org/docs/api/size#sizeheight",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:height",
        "api:sizeheight",
        "api:Size.height",
        "doc:height",
        "doc:sizeheight",
        "doc:Size.height"
      ]
    },
    {
      "objectID": "api-stream-protocol-response#streamprotocolresponsestatuscode",
      "name": "statusCode",
      "description": "The HTTP response code.",
      "required": false,
      "additionalTags": [],
      "collection": false,
      "type": "Number",
      "apiType": "properties",
      "fullSignature": "StreamProtocolResponse.statusCode",
      "tldr": "The HTTP response code.",
      "slug": "streamprotocolresponsestatuscode",
      "url": "https://electronjs.org/docs/api/stream-protocol-response#streamprotocolresponsestatuscode",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:statusCode",
        "api:streamprotocolresponsestatuscode",
        "api:StreamProtocolResponse.statusCode",
        "doc:statusCode",
        "doc:streamprotocolresponsestatuscode",
        "doc:StreamProtocolResponse.statusCode"
      ]
    },
    {
      "objectID": "api-stream-protocol-response#streamprotocolresponseheaders",
      "name": "headers",
      "description": "An object containing the response headers.",
      "required": false,
      "additionalTags": [],
      "collection": false,
      "type": "Record",
      "innerTypes": [
        {
          "collection": false,
          "type": "String",
          "possibleValues": null
        },
        {
          "collection": false,
          "type": [
            {
              "collection": false,
              "type": "String",
              "possibleValues": null
            },
            {
              "collection": true,
              "type": "String",
              "possibleValues": null
            }
          ]
        }
      ],
      "apiType": "properties",
      "fullSignature": "StreamProtocolResponse.headers",
      "tldr": "An object containing the response headers.",
      "slug": "streamprotocolresponseheaders",
      "url": "https://electronjs.org/docs/api/stream-protocol-response#streamprotocolresponseheaders",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:headers",
        "api:streamprotocolresponseheaders",
        "api:StreamProtocolResponse.headers",
        "doc:headers",
        "doc:streamprotocolresponseheaders",
        "doc:StreamProtocolResponse.headers"
      ]
    },
    {
      "objectID": "api-stream-protocol-response#streamprotocolresponsedata",
      "name": "data",
      "description": "A Node.js readable stream representing the response body.",
      "required": true,
      "additionalTags": [],
      "collection": false,
      "type": [
        {
          "collection": false,
          "type": "ReadableStream"
        },
        {
          "type": "null",
          "collection": false
        }
      ],
      "apiType": "properties",
      "fullSignature": "StreamProtocolResponse.data",
      "tldr": "A Node.js readable stream representing the response body.",
      "slug": "streamprotocolresponsedata",
      "url": "https://electronjs.org/docs/api/stream-protocol-response#streamprotocolresponsedata",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:data",
        "api:streamprotocolresponsedata",
        "api:StreamProtocolResponse.data",
        "doc:data",
        "doc:streamprotocolresponsedata",
        "doc:StreamProtocolResponse.data"
      ]
    },
    {
      "objectID": "api-string-protocol-response#stringprotocolresponsemimetype",
      "name": "mimeType",
      "description": "MIME type of the response.",
      "required": false,
      "additionalTags": [],
      "collection": false,
      "type": "String",
      "possibleValues": null,
      "apiType": "properties",
      "fullSignature": "StringProtocolResponse.mimeType",
      "tldr": "MIME type of the response.",
      "slug": "stringprotocolresponsemimetype",
      "url": "https://electronjs.org/docs/api/string-protocol-response#stringprotocolresponsemimetype",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:mimeType",
        "api:stringprotocolresponsemimetype",
        "api:StringProtocolResponse.mimeType",
        "doc:mimeType",
        "doc:stringprotocolresponsemimetype",
        "doc:StringProtocolResponse.mimeType"
      ]
    },
    {
      "objectID": "api-string-protocol-response#stringprotocolresponsecharset",
      "name": "charset",
      "description": "Charset of the response.",
      "required": false,
      "additionalTags": [],
      "collection": false,
      "type": "String",
      "possibleValues": null,
      "apiType": "properties",
      "fullSignature": "StringProtocolResponse.charset",
      "tldr": "Charset of the response.",
      "slug": "stringprotocolresponsecharset",
      "url": "https://electronjs.org/docs/api/string-protocol-response#stringprotocolresponsecharset",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:charset",
        "api:stringprotocolresponsecharset",
        "api:StringProtocolResponse.charset",
        "doc:charset",
        "doc:stringprotocolresponsecharset",
        "doc:StringProtocolResponse.charset"
      ]
    },
    {
      "objectID": "api-string-protocol-response#stringprotocolresponsedata",
      "name": "data",
      "description": "A string representing the response body.",
      "required": true,
      "additionalTags": [],
      "collection": false,
      "type": [
        {
          "collection": false,
          "type": "String",
          "possibleValues": null
        },
        {
          "type": "null",
          "collection": false
        }
      ],
      "apiType": "properties",
      "fullSignature": "StringProtocolResponse.data",
      "tldr": "A string representing the response body.",
      "slug": "stringprotocolresponsedata",
      "url": "https://electronjs.org/docs/api/string-protocol-response#stringprotocolresponsedata",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:data",
        "api:stringprotocolresponsedata",
        "api:StringProtocolResponse.data",
        "doc:data",
        "doc:stringprotocolresponsedata",
        "doc:StringProtocolResponse.data"
      ]
    },
    {
      "objectID": "api-task#taskprogram",
      "name": "program",
      "description": "Path of the program to execute, usually you should specify `process.execPath` which opens the current program.",
      "required": true,
      "additionalTags": [],
      "collection": false,
      "type": "String",
      "possibleValues": null,
      "apiType": "properties",
      "fullSignature": "Task.program",
      "tldr": "Path of the program to execute, usually you should specify `process.execPath` which opens the current program.",
      "slug": "taskprogram",
      "url": "https://electronjs.org/docs/api/task#taskprogram",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:program",
        "api:taskprogram",
        "api:Task.program",
        "doc:program",
        "doc:taskprogram",
        "doc:Task.program"
      ]
    },
    {
      "objectID": "api-task#taskarguments",
      "name": "arguments",
      "description": "The command line arguments when `program` is executed.",
      "required": true,
      "additionalTags": [],
      "collection": false,
      "type": "String",
      "possibleValues": null,
      "apiType": "properties",
      "fullSignature": "Task.arguments",
      "tldr": "The command line arguments when `program` is executed.",
      "slug": "taskarguments",
      "url": "https://electronjs.org/docs/api/task#taskarguments",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:arguments",
        "api:taskarguments",
        "api:Task.arguments",
        "doc:arguments",
        "doc:taskarguments",
        "doc:Task.arguments"
      ]
    },
    {
      "objectID": "api-task#tasktitle",
      "name": "title",
      "description": "The string to be displayed in a JumpList.",
      "required": true,
      "additionalTags": [],
      "collection": false,
      "type": "String",
      "possibleValues": null,
      "apiType": "properties",
      "fullSignature": "Task.title",
      "tldr": "The string to be displayed in a JumpList.",
      "slug": "tasktitle",
      "url": "https://electronjs.org/docs/api/task#tasktitle",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:title",
        "api:tasktitle",
        "api:Task.title",
        "doc:title",
        "doc:tasktitle",
        "doc:Task.title"
      ]
    },
    {
      "objectID": "api-task#taskdescription",
      "name": "description",
      "description": "Description of this task.",
      "required": true,
      "additionalTags": [],
      "collection": false,
      "type": "String",
      "possibleValues": null,
      "apiType": "properties",
      "fullSignature": "Task.description",
      "tldr": "Description of this task.",
      "slug": "taskdescription",
      "url": "https://electronjs.org/docs/api/task#taskdescription",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:description",
        "api:taskdescription",
        "api:Task.description",
        "doc:description",
        "doc:taskdescription",
        "doc:Task.description"
      ]
    },
    {
      "objectID": "api-task#taskiconpath",
      "name": "iconPath",
      "description": "The absolute path to an icon to be displayed in a JumpList, which can be an arbitrary resource file that contains an icon. You can usually specify `process.execPath` to show the icon of the program.",
      "required": true,
      "additionalTags": [],
      "collection": false,
      "type": "String",
      "possibleValues": null,
      "apiType": "properties",
      "fullSignature": "Task.iconPath",
      "tldr": "The absolute path to an icon to be displayed in a JumpList, which can be an arbitrary resource file that contains an icon.",
      "slug": "taskiconpath",
      "url": "https://electronjs.org/docs/api/task#taskiconpath",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:iconPath",
        "api:taskiconpath",
        "api:Task.iconPath",
        "doc:iconPath",
        "doc:taskiconpath",
        "doc:Task.iconPath"
      ]
    },
    {
      "objectID": "api-task#taskiconindex",
      "name": "iconIndex",
      "description": "The icon index in the icon file. If an icon file consists of two or more icons, set this value to identify the icon. If an icon file consists of one icon, this value is 0.",
      "required": true,
      "additionalTags": [],
      "collection": false,
      "type": "Number",
      "apiType": "properties",
      "fullSignature": "Task.iconIndex",
      "tldr": "The icon index in the icon file.",
      "slug": "taskiconindex",
      "url": "https://electronjs.org/docs/api/task#taskiconindex",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:iconIndex",
        "api:taskiconindex",
        "api:Task.iconIndex",
        "doc:iconIndex",
        "doc:taskiconindex",
        "doc:Task.iconIndex"
      ]
    },
    {
      "objectID": "api-task#taskworkingdirectory",
      "name": "workingDirectory",
      "description": "The working directory. Default is empty.",
      "required": false,
      "additionalTags": [],
      "collection": false,
      "type": "String",
      "possibleValues": null,
      "apiType": "properties",
      "fullSignature": "Task.workingDirectory",
      "tldr": "The working directory.",
      "slug": "taskworkingdirectory",
      "url": "https://electronjs.org/docs/api/task#taskworkingdirectory",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:workingDirectory",
        "api:taskworkingdirectory",
        "api:Task.workingDirectory",
        "doc:workingDirectory",
        "doc:taskworkingdirectory",
        "doc:Task.workingDirectory"
      ]
    },
    {
      "objectID": "api-thumbar-button#thumbarbuttonicon",
      "name": "icon",
      "description": "The icon showing in thumbnail toolbar.",
      "required": true,
      "additionalTags": [],
      "collection": false,
      "type": "NativeImage",
      "apiType": "properties",
      "fullSignature": "ThumbarButton.icon",
      "tldr": "The icon showing in thumbnail toolbar.",
      "slug": "thumbarbuttonicon",
      "url": "https://electronjs.org/docs/api/thumbar-button#thumbarbuttonicon",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:icon",
        "api:thumbarbuttonicon",
        "api:ThumbarButton.icon",
        "doc:icon",
        "doc:thumbarbuttonicon",
        "doc:ThumbarButton.icon"
      ]
    },
    {
      "objectID": "api-thumbar-button#thumbarbuttonclick",
      "name": "click",
      "description": "",
      "required": true,
      "additionalTags": [],
      "collection": false,
      "type": "Function",
      "parameters": [],
      "returns": null,
      "apiType": "properties",
      "fullSignature": "ThumbarButton.click",
      "tldr": null,
      "slug": "thumbarbuttonclick",
      "url": "https://electronjs.org/docs/api/thumbar-button#thumbarbuttonclick",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:click",
        "api:thumbarbuttonclick",
        "api:ThumbarButton.click",
        "doc:click",
        "doc:thumbarbuttonclick",
        "doc:ThumbarButton.click"
      ]
    },
    {
      "objectID": "api-thumbar-button#thumbarbuttontooltip",
      "name": "tooltip",
      "description": "The text of the button's tooltip.",
      "required": false,
      "additionalTags": [],
      "collection": false,
      "type": "String",
      "possibleValues": null,
      "apiType": "properties",
      "fullSignature": "ThumbarButton.tooltip",
      "tldr": "The text of the button's tooltip.",
      "slug": "thumbarbuttontooltip",
      "url": "https://electronjs.org/docs/api/thumbar-button#thumbarbuttontooltip",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:tooltip",
        "api:thumbarbuttontooltip",
        "api:ThumbarButton.tooltip",
        "doc:tooltip",
        "doc:thumbarbuttontooltip",
        "doc:ThumbarButton.tooltip"
      ]
    },
    {
      "objectID": "api-thumbar-button#thumbarbuttonflags",
      "name": "flags",
      "description": "Control specific states and behaviors of the button. By default, it is `['enabled']`.",
      "required": false,
      "additionalTags": [],
      "collection": true,
      "type": "String",
      "possibleValues": null,
      "apiType": "properties",
      "fullSignature": "ThumbarButton.flags",
      "tldr": "Control specific states and behaviors of the button.",
      "slug": "thumbarbuttonflags",
      "url": "https://electronjs.org/docs/api/thumbar-button#thumbarbuttonflags",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:flags",
        "api:thumbarbuttonflags",
        "api:ThumbarButton.flags",
        "doc:flags",
        "doc:thumbarbuttonflags",
        "doc:ThumbarButton.flags"
      ]
    },
    {
      "objectID": "api-trace-categories-and-options#tracecategoriesandoptionscategoryfilter",
      "name": "categoryFilter",
      "description": "A filter to control what category groups should be traced. A filter can have an optional '-' prefix to exclude category groups that contain a matching category. Having both included and excluded category patterns in the same list is not supported. Examples: `test_MyTest*`, `test_MyTest*,test_OtherStuff`, `-excluded_category1,-excluded_category2`.",
      "required": true,
      "additionalTags": [],
      "collection": false,
      "type": "String",
      "possibleValues": null,
      "apiType": "properties",
      "fullSignature": "TraceCategoriesAndOptions.categoryFilter",
      "tldr": "A filter to control what category groups should be traced.",
      "slug": "tracecategoriesandoptionscategoryfilter",
      "url": "https://electronjs.org/docs/api/trace-categories-and-options#tracecategoriesandoptionscategoryfilter",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:categoryFilter",
        "api:tracecategoriesandoptionscategoryfilter",
        "api:TraceCategoriesAndOptions.categoryFilter",
        "doc:categoryFilter",
        "doc:tracecategoriesandoptionscategoryfilter",
        "doc:TraceCategoriesAndOptions.categoryFilter"
      ]
    },
    {
      "objectID": "api-trace-categories-and-options#tracecategoriesandoptionstraceoptions",
      "name": "traceOptions",
      "description": "Controls what kind of tracing is enabled, it is a comma-delimited sequence of the following strings: `record-until-full`, `record-continuously`, `trace-to-console`, `enable-sampling`, `enable-systrace`, e.g. `'record-until-full,enable-sampling'`. The first 3 options are trace recording modes and hence mutually exclusive. If more than one trace recording modes appear in the `traceOptions` string, the last one takes precedence. If none of the trace recording modes are specified, recording mode is `record-until-full`. The trace option will first be reset to the default option (`record_mode` set to `record-until-full`, `enable_sampling` and `enable_systrace` set to `false`) before options parsed from `traceOptions` are applied on it.",
      "required": true,
      "additionalTags": [],
      "collection": false,
      "type": "String",
      "possibleValues": null,
      "apiType": "properties",
      "fullSignature": "TraceCategoriesAndOptions.traceOptions",
      "tldr": "Controls what kind of tracing is enabled, it is a comma-delimited sequence of the following strings: `record-until-full`, `record-continuously`, `trace-to-console`, `enable-sampling`, `enable-systrace`, e.g.",
      "slug": "tracecategoriesandoptionstraceoptions",
      "url": "https://electronjs.org/docs/api/trace-categories-and-options#tracecategoriesandoptionstraceoptions",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:traceOptions",
        "api:tracecategoriesandoptionstraceoptions",
        "api:TraceCategoriesAndOptions.traceOptions",
        "doc:traceOptions",
        "doc:tracecategoriesandoptionstraceoptions",
        "doc:TraceCategoriesAndOptions.traceOptions"
      ]
    },
    {
      "objectID": "api-trace-config#traceconfigrecording_mode",
      "name": "recording_mode",
      "description": "Can be `record-until-full`, `record-continuously`, `record-as-much-as-possible` or `trace-to-console`. Defaults to `record-until-full`.",
      "required": false,
      "additionalTags": [],
      "collection": false,
      "type": "String",
      "possibleValues": [
        {
          "value": "record-until-full",
          "description": ""
        },
        {
          "value": "record-continuously",
          "description": ""
        },
        {
          "value": "record-as-much-as-possible",
          "description": ""
        },
        {
          "value": "trace-to-console",
          "description": ""
        }
      ],
      "apiType": "properties",
      "fullSignature": "TraceConfig.recording_mode",
      "tldr": "Can be `record-until-full`, `record-continuously`, `record-as-much-as-possible` or `trace-to-console`.",
      "slug": "traceconfigrecording_mode",
      "url": "https://electronjs.org/docs/api/trace-config#traceconfigrecording_mode",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:recording_mode",
        "api:traceconfigrecording_mode",
        "api:TraceConfig.recording_mode",
        "doc:recording_mode",
        "doc:traceconfigrecording_mode",
        "doc:TraceConfig.recording_mode"
      ]
    },
    {
      "objectID": "api-trace-config#traceconfigtrace_buffer_size_in_kb",
      "name": "trace_buffer_size_in_kb",
      "description": "maximum size of the trace recording buffer in kilobytes. Defaults to 100MB.",
      "required": false,
      "additionalTags": [],
      "collection": false,
      "type": "number",
      "apiType": "properties",
      "fullSignature": "TraceConfig.trace_buffer_size_in_kb",
      "tldr": "maximum size of the trace recording buffer in kilobytes.",
      "slug": "traceconfigtrace_buffer_size_in_kb",
      "url": "https://electronjs.org/docs/api/trace-config#traceconfigtrace_buffer_size_in_kb",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:trace_buffer_size_in_kb",
        "api:traceconfigtrace_buffer_size_in_kb",
        "api:TraceConfig.trace_buffer_size_in_kb",
        "doc:trace_buffer_size_in_kb",
        "doc:traceconfigtrace_buffer_size_in_kb",
        "doc:TraceConfig.trace_buffer_size_in_kb"
      ]
    },
    {
      "objectID": "api-trace-config#traceconfigtrace_buffer_size_in_events",
      "name": "trace_buffer_size_in_events",
      "description": "maximum size of the trace recording buffer in events.",
      "required": false,
      "additionalTags": [],
      "collection": false,
      "type": "number",
      "apiType": "properties",
      "fullSignature": "TraceConfig.trace_buffer_size_in_events",
      "tldr": "maximum size of the trace recording buffer in events.",
      "slug": "traceconfigtrace_buffer_size_in_events",
      "url": "https://electronjs.org/docs/api/trace-config#traceconfigtrace_buffer_size_in_events",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:trace_buffer_size_in_events",
        "api:traceconfigtrace_buffer_size_in_events",
        "api:TraceConfig.trace_buffer_size_in_events",
        "doc:trace_buffer_size_in_events",
        "doc:traceconfigtrace_buffer_size_in_events",
        "doc:TraceConfig.trace_buffer_size_in_events"
      ]
    },
    {
      "objectID": "api-trace-config#traceconfigenable_argument_filter",
      "name": "enable_argument_filter",
      "description": "if true, filter event data according to a whitelist of events that have been manually vetted to not include any PII. See the implementation in Chromium for specifics.",
      "required": false,
      "additionalTags": [],
      "collection": false,
      "type": "boolean",
      "apiType": "properties",
      "fullSignature": "TraceConfig.enable_argument_filter",
      "tldr": "if true, filter event data according to a whitelist of events that have been manually vetted to not include any PII.",
      "slug": "traceconfigenable_argument_filter",
      "url": "https://electronjs.org/docs/api/trace-config#traceconfigenable_argument_filter",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:enable_argument_filter",
        "api:traceconfigenable_argument_filter",
        "api:TraceConfig.enable_argument_filter",
        "doc:enable_argument_filter",
        "doc:traceconfigenable_argument_filter",
        "doc:TraceConfig.enable_argument_filter"
      ]
    },
    {
      "objectID": "api-trace-config#traceconfigincluded_categories",
      "name": "included_categories",
      "description": "a list of tracing categories to include. Can include glob-like patterns using `*` at the end of the category name. See tracing categories for the list of categories.",
      "required": false,
      "additionalTags": [],
      "collection": true,
      "type": "String",
      "possibleValues": null,
      "apiType": "properties",
      "fullSignature": "TraceConfig.included_categories",
      "tldr": "a list of tracing categories to include.",
      "slug": "traceconfigincluded_categories",
      "url": "https://electronjs.org/docs/api/trace-config#traceconfigincluded_categories",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:included_categories",
        "api:traceconfigincluded_categories",
        "api:TraceConfig.included_categories",
        "doc:included_categories",
        "doc:traceconfigincluded_categories",
        "doc:TraceConfig.included_categories"
      ]
    },
    {
      "objectID": "api-trace-config#traceconfigexcluded_categories",
      "name": "excluded_categories",
      "description": "a list of tracing categories to exclude. Can include glob-like patterns using `*` at the end of the category name. See tracing categories for the list of categories.",
      "required": false,
      "additionalTags": [],
      "collection": true,
      "type": "String",
      "possibleValues": null,
      "apiType": "properties",
      "fullSignature": "TraceConfig.excluded_categories",
      "tldr": "a list of tracing categories to exclude.",
      "slug": "traceconfigexcluded_categories",
      "url": "https://electronjs.org/docs/api/trace-config#traceconfigexcluded_categories",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:excluded_categories",
        "api:traceconfigexcluded_categories",
        "api:TraceConfig.excluded_categories",
        "doc:excluded_categories",
        "doc:traceconfigexcluded_categories",
        "doc:TraceConfig.excluded_categories"
      ]
    },
    {
      "objectID": "api-trace-config#traceconfigincluded_process_ids",
      "name": "included_process_ids",
      "description": "a list of process IDs to include in the trace. If not specified, trace all processes.",
      "required": false,
      "additionalTags": [],
      "collection": true,
      "type": "number",
      "apiType": "properties",
      "fullSignature": "TraceConfig.included_process_ids",
      "tldr": "a list of process IDs to include in the trace.",
      "slug": "traceconfigincluded_process_ids",
      "url": "https://electronjs.org/docs/api/trace-config#traceconfigincluded_process_ids",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:included_process_ids",
        "api:traceconfigincluded_process_ids",
        "api:TraceConfig.included_process_ids",
        "doc:included_process_ids",
        "doc:traceconfigincluded_process_ids",
        "doc:TraceConfig.included_process_ids"
      ]
    },
    {
      "objectID": "api-trace-config#traceconfighistogram_names",
      "name": "histogram_names",
      "description": "a list of histogram names to report with the trace.",
      "required": false,
      "additionalTags": [],
      "collection": true,
      "type": "String",
      "possibleValues": null,
      "apiType": "properties",
      "fullSignature": "TraceConfig.histogram_names",
      "tldr": "a list of histogram names to report with the trace.",
      "slug": "traceconfighistogram_names",
      "url": "https://electronjs.org/docs/api/trace-config#traceconfighistogram_names",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:histogram_names",
        "api:traceconfighistogram_names",
        "api:TraceConfig.histogram_names",
        "doc:histogram_names",
        "doc:traceconfighistogram_names",
        "doc:TraceConfig.histogram_names"
      ]
    },
    {
      "objectID": "api-trace-config#traceconfigmemory_dump_config",
      "name": "memory_dump_config",
      "description": "if the `disabled-by-default-memory-infra` category is enabled, this contains optional additional configuration for data collection. See the Chromium memory-infra docs for more information.",
      "required": false,
      "additionalTags": [],
      "collection": false,
      "type": "Record",
      "innerTypes": [
        {
          "collection": false,
          "type": "String",
          "possibleValues": null
        },
        {
          "collection": false,
          "type": "any"
        }
      ],
      "apiType": "properties",
      "fullSignature": "TraceConfig.memory_dump_config",
      "tldr": "if the `disabled-by-default-memory-infra` category is enabled, this contains optional additional configuration for data collection.",
      "slug": "traceconfigmemory_dump_config",
      "url": "https://electronjs.org/docs/api/trace-config#traceconfigmemory_dump_config",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:memory_dump_config",
        "api:traceconfigmemory_dump_config",
        "api:TraceConfig.memory_dump_config",
        "doc:memory_dump_config",
        "doc:traceconfigmemory_dump_config",
        "doc:TraceConfig.memory_dump_config"
      ]
    },
    {
      "objectID": "api-transaction#transactiontransactionidentifier",
      "name": "transactionIdentifier",
      "description": "A string that uniquely identifies a successful payment transaction.",
      "required": true,
      "additionalTags": [],
      "collection": false,
      "type": "String",
      "possibleValues": null,
      "apiType": "properties",
      "fullSignature": "Transaction.transactionIdentifier",
      "tldr": "A string that uniquely identifies a successful payment transaction.",
      "slug": "transactiontransactionidentifier",
      "url": "https://electronjs.org/docs/api/transaction#transactiontransactionidentifier",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:transactionIdentifier",
        "api:transactiontransactionidentifier",
        "api:Transaction.transactionIdentifier",
        "doc:transactionIdentifier",
        "doc:transactiontransactionidentifier",
        "doc:Transaction.transactionIdentifier"
      ]
    },
    {
      "objectID": "api-transaction#transactiontransactiondate",
      "name": "transactionDate",
      "description": "The date the transaction was added to the App Store’s payment queue.",
      "required": true,
      "additionalTags": [],
      "collection": false,
      "type": "String",
      "possibleValues": null,
      "apiType": "properties",
      "fullSignature": "Transaction.transactionDate",
      "tldr": "The date the transaction was added to the App Store’s payment queue.",
      "slug": "transactiontransactiondate",
      "url": "https://electronjs.org/docs/api/transaction#transactiontransactiondate",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:transactionDate",
        "api:transactiontransactiondate",
        "api:Transaction.transactionDate",
        "doc:transactionDate",
        "doc:transactiontransactiondate",
        "doc:Transaction.transactionDate"
      ]
    },
    {
      "objectID": "api-transaction#transactionoriginaltransactionidentifier",
      "name": "originalTransactionIdentifier",
      "description": "The identifier of the restored transaction by the App Store.",
      "required": true,
      "additionalTags": [],
      "collection": false,
      "type": "String",
      "possibleValues": null,
      "apiType": "properties",
      "fullSignature": "Transaction.originalTransactionIdentifier",
      "tldr": "The identifier of the restored transaction by the App Store.",
      "slug": "transactionoriginaltransactionidentifier",
      "url": "https://electronjs.org/docs/api/transaction#transactionoriginaltransactionidentifier",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:originalTransactionIdentifier",
        "api:transactionoriginaltransactionidentifier",
        "api:Transaction.originalTransactionIdentifier",
        "doc:originalTransactionIdentifier",
        "doc:transactionoriginaltransactionidentifier",
        "doc:Transaction.originalTransactionIdentifier"
      ]
    },
    {
      "objectID": "api-transaction#transactiontransactionstate",
      "name": "transactionState",
      "description": "The transaction state, can be `purchasing`, `purchased`, `failed`, `restored` or `deferred`.",
      "required": true,
      "additionalTags": [],
      "collection": false,
      "type": "String",
      "possibleValues": [
        {
          "value": "purchasing",
          "description": ""
        },
        {
          "value": "purchased",
          "description": ""
        },
        {
          "value": "failed",
          "description": ""
        },
        {
          "value": "restored",
          "description": ""
        },
        {
          "value": "deferred",
          "description": ""
        }
      ],
      "apiType": "properties",
      "fullSignature": "Transaction.transactionState",
      "tldr": "The transaction state, can be `purchasing`, `purchased`, `failed`, `restored` or `deferred`.",
      "slug": "transactiontransactionstate",
      "url": "https://electronjs.org/docs/api/transaction#transactiontransactionstate",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:transactionState",
        "api:transactiontransactionstate",
        "api:Transaction.transactionState",
        "doc:transactionState",
        "doc:transactiontransactionstate",
        "doc:Transaction.transactionState"
      ]
    },
    {
      "objectID": "api-transaction#transactionerrorcode",
      "name": "errorCode",
      "description": "The error code if an error occurred while processing the transaction.",
      "required": true,
      "additionalTags": [],
      "collection": false,
      "type": "Integer",
      "apiType": "properties",
      "fullSignature": "Transaction.errorCode",
      "tldr": "The error code if an error occurred while processing the transaction.",
      "slug": "transactionerrorcode",
      "url": "https://electronjs.org/docs/api/transaction#transactionerrorcode",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:errorCode",
        "api:transactionerrorcode",
        "api:Transaction.errorCode",
        "doc:errorCode",
        "doc:transactionerrorcode",
        "doc:Transaction.errorCode"
      ]
    },
    {
      "objectID": "api-transaction#transactionerrormessage",
      "name": "errorMessage",
      "description": "The error message if an error occurred while processing the transaction.",
      "required": true,
      "additionalTags": [],
      "collection": false,
      "type": "String",
      "possibleValues": null,
      "apiType": "properties",
      "fullSignature": "Transaction.errorMessage",
      "tldr": "The error message if an error occurred while processing the transaction.",
      "slug": "transactionerrormessage",
      "url": "https://electronjs.org/docs/api/transaction#transactionerrormessage",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:errorMessage",
        "api:transactionerrormessage",
        "api:Transaction.errorMessage",
        "doc:errorMessage",
        "doc:transactionerrormessage",
        "doc:Transaction.errorMessage"
      ]
    },
    {
      "objectID": "api-transaction#transactionpayment",
      "name": "payment",
      "description": "",
      "required": true,
      "additionalTags": [],
      "collection": false,
      "type": "Object",
      "properties": [
        {
          "name": "productIdentifier",
          "description": "The identifier of the purchased product.",
          "required": true,
          "additionalTags": [],
          "collection": false,
          "type": "String",
          "possibleValues": null
        },
        {
          "name": "quantity",
          "description": "The quantity purchased.",
          "required": true,
          "additionalTags": [],
          "collection": false,
          "type": "Integer"
        }
      ],
      "apiType": "properties",
      "fullSignature": "Transaction.payment",
      "tldr": null,
      "slug": "transactionpayment",
      "url": "https://electronjs.org/docs/api/transaction#transactionpayment",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:payment",
        "api:transactionpayment",
        "api:Transaction.payment",
        "doc:payment",
        "doc:transactionpayment",
        "doc:Transaction.payment"
      ]
    },
    {
      "objectID": "api-upload-blob#uploadblobtype",
      "name": "type",
      "description": "`blob`.",
      "required": true,
      "additionalTags": [],
      "collection": false,
      "type": "String",
      "possibleValues": null,
      "apiType": "properties",
      "fullSignature": "UploadBlob.type",
      "tldr": "`blob`.",
      "slug": "uploadblobtype",
      "url": "https://electronjs.org/docs/api/upload-blob#uploadblobtype",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:type",
        "api:uploadblobtype",
        "api:UploadBlob.type",
        "doc:type",
        "doc:uploadblobtype",
        "doc:UploadBlob.type"
      ]
    },
    {
      "objectID": "api-upload-blob#uploadblobblobuuid",
      "name": "blobUUID",
      "description": "UUID of blob data to upload.",
      "required": true,
      "additionalTags": [],
      "collection": false,
      "type": "String",
      "possibleValues": null,
      "apiType": "properties",
      "fullSignature": "UploadBlob.blobUUID",
      "tldr": "UUID of blob data to upload.",
      "slug": "uploadblobblobuuid",
      "url": "https://electronjs.org/docs/api/upload-blob#uploadblobblobuuid",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:blobUUID",
        "api:uploadblobblobuuid",
        "api:UploadBlob.blobUUID",
        "doc:blobUUID",
        "doc:uploadblobblobuuid",
        "doc:UploadBlob.blobUUID"
      ]
    },
    {
      "objectID": "api-upload-data#uploaddatabytes",
      "name": "bytes",
      "description": "Content being sent.",
      "required": true,
      "additionalTags": [],
      "collection": false,
      "type": "Buffer",
      "apiType": "properties",
      "fullSignature": "UploadData.bytes",
      "tldr": "Content being sent.",
      "slug": "uploaddatabytes",
      "url": "https://electronjs.org/docs/api/upload-data#uploaddatabytes",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:bytes",
        "api:uploaddatabytes",
        "api:UploadData.bytes",
        "doc:bytes",
        "doc:uploaddatabytes",
        "doc:UploadData.bytes"
      ]
    },
    {
      "objectID": "api-upload-data#uploaddatafile",
      "name": "file",
      "description": "Path of file being uploaded.",
      "required": false,
      "additionalTags": [],
      "collection": false,
      "type": "String",
      "possibleValues": null,
      "apiType": "properties",
      "fullSignature": "UploadData.file",
      "tldr": "Path of file being uploaded.",
      "slug": "uploaddatafile",
      "url": "https://electronjs.org/docs/api/upload-data#uploaddatafile",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:file",
        "api:uploaddatafile",
        "api:UploadData.file",
        "doc:file",
        "doc:uploaddatafile",
        "doc:UploadData.file"
      ]
    },
    {
      "objectID": "api-upload-data#uploaddatablobuuid",
      "name": "blobUUID",
      "description": "UUID of blob data. Use ses.getBlobData method to retrieve the data.",
      "required": false,
      "additionalTags": [],
      "collection": false,
      "type": "String",
      "possibleValues": null,
      "apiType": "properties",
      "fullSignature": "UploadData.blobUUID",
      "tldr": "UUID of blob data.",
      "slug": "uploaddatablobuuid",
      "url": "https://electronjs.org/docs/api/upload-data#uploaddatablobuuid",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:blobUUID",
        "api:uploaddatablobuuid",
        "api:UploadData.blobUUID",
        "doc:blobUUID",
        "doc:uploaddatablobuuid",
        "doc:UploadData.blobUUID"
      ]
    },
    {
      "objectID": "api-upload-file#uploadfiletype",
      "name": "type",
      "description": "`file`.",
      "required": true,
      "additionalTags": [],
      "collection": false,
      "type": "String",
      "possibleValues": null,
      "apiType": "properties",
      "fullSignature": "UploadFile.type",
      "tldr": "`file`.",
      "slug": "uploadfiletype",
      "url": "https://electronjs.org/docs/api/upload-file#uploadfiletype",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:type",
        "api:uploadfiletype",
        "api:UploadFile.type",
        "doc:type",
        "doc:uploadfiletype",
        "doc:UploadFile.type"
      ]
    },
    {
      "objectID": "api-upload-file#uploadfilefilepath",
      "name": "filePath",
      "description": "Path of file to be uploaded.",
      "required": true,
      "additionalTags": [],
      "collection": false,
      "type": "String",
      "possibleValues": null,
      "apiType": "properties",
      "fullSignature": "UploadFile.filePath",
      "tldr": "Path of file to be uploaded.",
      "slug": "uploadfilefilepath",
      "url": "https://electronjs.org/docs/api/upload-file#uploadfilefilepath",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:filePath",
        "api:uploadfilefilepath",
        "api:UploadFile.filePath",
        "doc:filePath",
        "doc:uploadfilefilepath",
        "doc:UploadFile.filePath"
      ]
    },
    {
      "objectID": "api-upload-file#uploadfileoffset",
      "name": "offset",
      "description": "Defaults to `0`.",
      "required": true,
      "additionalTags": [],
      "collection": false,
      "type": "Integer",
      "apiType": "properties",
      "fullSignature": "UploadFile.offset",
      "tldr": "Defaults to `0`.",
      "slug": "uploadfileoffset",
      "url": "https://electronjs.org/docs/api/upload-file#uploadfileoffset",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:offset",
        "api:uploadfileoffset",
        "api:UploadFile.offset",
        "doc:offset",
        "doc:uploadfileoffset",
        "doc:UploadFile.offset"
      ]
    },
    {
      "objectID": "api-upload-file#uploadfilelength",
      "name": "length",
      "description": "Number of bytes to read from `offset`. Defaults to `0`.",
      "required": true,
      "additionalTags": [],
      "collection": false,
      "type": "Integer",
      "apiType": "properties",
      "fullSignature": "UploadFile.length",
      "tldr": "Number of bytes to read from `offset`.",
      "slug": "uploadfilelength",
      "url": "https://electronjs.org/docs/api/upload-file#uploadfilelength",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:length",
        "api:uploadfilelength",
        "api:UploadFile.length",
        "doc:length",
        "doc:uploadfilelength",
        "doc:UploadFile.length"
      ]
    },
    {
      "objectID": "api-upload-file#uploadfilemodificationtime",
      "name": "modificationTime",
      "description": "Last Modification time in number of seconds since the UNIX epoch.",
      "required": true,
      "additionalTags": [],
      "collection": false,
      "type": "Double",
      "apiType": "properties",
      "fullSignature": "UploadFile.modificationTime",
      "tldr": "Last Modification time in number of seconds since the UNIX epoch.",
      "slug": "uploadfilemodificationtime",
      "url": "https://electronjs.org/docs/api/upload-file#uploadfilemodificationtime",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:modificationTime",
        "api:uploadfilemodificationtime",
        "api:UploadFile.modificationTime",
        "doc:modificationTime",
        "doc:uploadfilemodificationtime",
        "doc:UploadFile.modificationTime"
      ]
    },
    {
      "objectID": "api-upload-raw-data#uploadrawdatatype",
      "name": "type",
      "description": "`rawData`.",
      "required": true,
      "additionalTags": [],
      "collection": false,
      "type": "String",
      "possibleValues": null,
      "apiType": "properties",
      "fullSignature": "UploadRawData.type",
      "tldr": "`rawData`.",
      "slug": "uploadrawdatatype",
      "url": "https://electronjs.org/docs/api/upload-raw-data#uploadrawdatatype",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:type",
        "api:uploadrawdatatype",
        "api:UploadRawData.type",
        "doc:type",
        "doc:uploadrawdatatype",
        "doc:UploadRawData.type"
      ]
    },
    {
      "objectID": "api-upload-raw-data#uploadrawdatabytes",
      "name": "bytes",
      "description": "Data to be uploaded.",
      "required": true,
      "additionalTags": [],
      "collection": false,
      "type": "Buffer",
      "apiType": "properties",
      "fullSignature": "UploadRawData.bytes",
      "tldr": "Data to be uploaded.",
      "slug": "uploadrawdatabytes",
      "url": "https://electronjs.org/docs/api/upload-raw-data#uploadrawdatabytes",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:bytes",
        "api:uploadrawdatabytes",
        "api:UploadRawData.bytes",
        "doc:bytes",
        "doc:uploadrawdatabytes",
        "doc:UploadRawData.bytes"
      ]
    },
    {
      "objectID": "api-web-source#websourcecode",
      "name": "code",
      "description": "",
      "required": true,
      "additionalTags": [],
      "collection": false,
      "type": "String",
      "possibleValues": null,
      "apiType": "properties",
      "fullSignature": "WebSource.code",
      "tldr": null,
      "slug": "websourcecode",
      "url": "https://electronjs.org/docs/api/web-source#websourcecode",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:code",
        "api:websourcecode",
        "api:WebSource.code",
        "doc:code",
        "doc:websourcecode",
        "doc:WebSource.code"
      ]
    },
    {
      "objectID": "api-web-source#websourceurl",
      "name": "url",
      "description": "",
      "required": false,
      "additionalTags": [],
      "collection": false,
      "type": "String",
      "possibleValues": null,
      "apiType": "properties",
      "fullSignature": "WebSource.url",
      "tldr": null,
      "slug": "websourceurl",
      "url": "https://electronjs.org/docs/api/web-source#websourceurl",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:url",
        "api:websourceurl",
        "api:WebSource.url",
        "doc:url",
        "doc:websourceurl",
        "doc:WebSource.url"
      ]
    },
    {
      "objectID": "api-web-source#websourcestartline",
      "name": "startLine",
      "description": "Default is 1.",
      "required": false,
      "additionalTags": [],
      "collection": false,
      "type": "Integer",
      "apiType": "properties",
      "fullSignature": "WebSource.startLine",
      "tldr": "Default is 1.",
      "slug": "websourcestartline",
      "url": "https://electronjs.org/docs/api/web-source#websourcestartline",
      "keyValuePairs": [
        "is:doc",
        "is:api",
        "api:startLine",
        "api:websourcestartline",
        "api:WebSource.startLine",
        "doc:startLine",
        "doc:websourcestartline",
        "doc:WebSource.startLine"
      ]
    }
  ]
}